###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:27
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW5BDA.tmp ("C:\Texas
#        Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c" -D
#        FEATURE_SYSTEM_STATS -D CC2531ZNP -D POWER_SAVING -D xTC_LINKKEY_JOIN
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\cc2531\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\class_cdc\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List\MT_AF.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj\MT_AF.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
      4            Revision:       $Revision: 42025 $
      5          
      6            Description:    MonitorTest functions for the AF layer.
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "MT.h"
     47          #include "MT_AF.h"
     48          #include "MT_ZDO.h"
     49          #include "nwk.h"
     50          #include "OnBoard.h"
     51          #include "MT_UART.h"
     52          
     53          #if defined INTER_PAN
     54          #include "stub_aps.h"
     55          #endif
     56          
     57          #if defined ( MT_GP_FUNC )
     58          #include "MT_GP.h"
     59          #endif
     60          
     61          /* ------------------------------------------------------------------------------------------------
     62           *                                          Constants
     63           * ------------------------------------------------------------------------------------------------
     64           */
     65          
     66          #if !defined MT_AF_EXEC_CNT
     67          #define MT_AF_EXEC_CNT  15
     68          #endif
     69          
     70          #if !defined MT_AF_EXEC_DLY
     71          #define MT_AF_EXEC_DLY  1000
     72          #endif
     73          
     74          /* ------------------------------------------------------------------------------------------------
     75           *                                           Typedefs
     76           * ------------------------------------------------------------------------------------------------
     77           */
     78          
     79          typedef struct
     80          {
     81            uint8 *data;
     82            afAddrType_t dstAddr;
     83            endPointDesc_t *epDesc;
     84            uint16 cId;
     85            uint16 dataLen;
     86            uint8 transId;
     87            uint8 txOpts;
     88            uint8 radius;
     89            uint8 tick;
     90          } mtAfDataReq_t;
     91          
     92          typedef struct _mtAfInMsgList_t
     93          {
     94            struct _mtAfInMsgList_t *next;
     95            uint8 *data;
     96            uint32 timestamp;         // Receipt timestamp from MAC.
     97            uint8 tick;
     98          } mtAfInMsgList_t;
     99          
    100          /* ------------------------------------------------------------------------------------------------
    101           *                                        Local Variables
    102           * ------------------------------------------------------------------------------------------------
    103           */
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    107          
    108          /* ------------------------------------------------------------------------------------------------
    109           *                                        Global Variables
    110           * ------------------------------------------------------------------------------------------------
    111           */
    112          
    113          #if defined ( MT_AF_CB_FUNC )
    114          uint16 _afCallbackSub;
    115          #endif
    116          
    117          /* ------------------------------------------------------------------------------------------------
    118           *                                        Local Functions
    119           * ------------------------------------------------------------------------------------------------
    120           */
    121          
    122          static void MT_AfRegister(uint8 *pBuf);
    123          static void MT_AfDelete(uint8 *pBuf);
    124          static void MT_AfDataRequest(uint8 *pBuf);
    125          
    126          #if defined ( ZIGBEEPRO )
    127          static void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    128          #endif
    129          
    130          #if defined INTER_PAN
    131          static void MT_AfInterPanCtl(uint8 *pBuf);
    132          #endif
    133          
    134          static void MT_AfDataRetrieve(uint8 *pBuf);
    135          static void MT_AfDataStore(uint8 *pBuf);
    136          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    137          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    138          
    139          
    140          /**************************************************************************************************
    141           * @fn          MT_AfExec
    142           *
    143           * @brief       This function is invoked by an MT timer event.
    144           *
    145           * input parameters
    146           *
    147           * None.
    148           *
    149           * output parameters
    150           *
    151           * None.
    152           *
    153           * @return      None.
    154           **************************************************************************************************
    155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          void MT_AfExec(void)
   \                     MT_AfExec:
    157          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    158            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP      ??MT_AfExec_1
    159          
    160            while (pItem != NULL)
    161            {
    162              if (--(pItem->tick) == 0)
    163              {
    164                if (pMtAfInMsgList == pItem)
    165                {
    166                  pMtAfInMsgList = pItem->next;
    167                  (void)osal_mem_free(pItem);
    168                  pItem = pMtAfInMsgList;
    169                }
    170                else
    171                {
    172                  pPrev->next = pItem->next;
    173                  (void)osal_mem_free(pItem);
    174                  pItem = pPrev->next;
    175                }
    176              }
    177              else
    178              {
    179                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    180                pItem = pItem->next;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
    181              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   603F         JZ        ??MT_AfExec_3
   \   000019   EA           MOV       A,R2
   \   00001A   2408         ADD       A,#0x8
   \   00001C   F582         MOV       DPL,A
   \   00001E   E4           CLR       A
   \   00001F   3B           ADDC      A,R3
   \   000020   F583         MOV       DPH,A
   \   000022   E0           MOVX      A,@DPTR
   \   000023   14           DEC       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   70E3         JNZ       ??MT_AfExec_2
   \   000027   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00002A   EA           MOV       A,R2
   \   00002B   68           XRL       A,R0
   \   00002C   7002         JNZ       ??MT_AfExec_4
   \   00002E   EB           MOV       A,R3
   \   00002F   69           XRL       A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   700D         JNZ       ??MT_AfExec_5
   \   000036   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000039   E8           MOV       A,R0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E9           MOV       A,R1
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E                ; Setup parameters for call to function osal_mem_free
   \   00003E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000041   80C2         SJMP      ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   000043   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   E8           MOV       A,R0
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   A3           INC       DPTR
   \   00004D   E9           MOV       A,R1
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   80BA         SJMP      ??MT_AfExec_1
    182            }
    183          
    184            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000058   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00005B   601A         JZ        ??MT_AfExec_6
    185            {
    186              if (--(pMtAfDataReq->tick) == 0)
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   C8           XCH       A,R0
   \   00005F   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000062   E0           MOVX      A,@DPTR
   \   000063   14           DEC       A
   \   000064   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000067   E0           MOVX      A,@DPTR
   \   000068   700D         JNZ       ??MT_AfExec_6
    187              {
    188                (void)osal_mem_free(pMtAfDataReq);
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00006D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    189                pMtAfDataReq = NULL;
   \   000070   90....       MOV       DPTR,#pMtAfDataReq
   \   000073   E4           CLR       A
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   F0           MOVX      @DPTR,A
    190              }
    191            }
    192          
    193            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   000077   90....       MOV       DPTR,#pMtAfInMsgList
   \   00007A   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00007D   7005         JNZ       ??MT_AfExec_7
   \   00007F   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000082   6026         JZ        ??MT_AfExec_8
    194            {
    195              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   000084                ; Setup parameters for call to function osal_start_timerEx
   \   000084   90....       MOV       DPTR,#__Constant_3e8
   \   000087   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00008A   7A08         MOV       R2,#0x8
   \   00008C   7B00         MOV       R3,#0x0
   \   00008E   90....       MOV       DPTR,#MT_TaskID
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F9           MOV       R1,A
   \   000093   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000096   7404         MOV       A,#0x4
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   E9           MOV       A,R1
   \   00009C   600C         JZ        ??MT_AfExec_8
    196              {
    197                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00009E                ; Setup parameters for call to function osal_set_event
   \   00009E   7A08         MOV       R2,#0x8
   \   0000A0   7B00         MOV       R3,#0x0
   \   0000A2   90....       MOV       DPTR,#MT_TaskID
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F9           MOV       R1,A
   \   0000A7   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    198              }
    199            }
    200          }
   \                     ??MT_AfExec_8:
   \   0000AA   7F01         MOV       R7,#0x1
   \   0000AC   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000004   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   2417         ADD       A,#0x17
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine50_0
   \   000003                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV       DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   90....       MOV       DPTR,#pMtAfInMsgList
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C8           XCH       A,R0
   \   000008   22           RET
    201          
    202          /***************************************************************************************************
    203           * @fn      MT_AfCommandProcessing
    204           *
    205           * @brief   Process all the AF commands that are issued by test tool
    206           *
    207           * @param   pBuf - pointer to the received buffer
    208           *
    209           * @return  status
    210           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    213            uint8 status = MT_RPC_SUCCESS;
   \   00000E   75..00       MOV       ?V0,#0x0
    214          
    215            switch (pBuf[MT_RPC_POS_CMD1])
   \   000011   8E82         MOV       DPL,R6
   \   000013   8F83         MOV       DPH,R7
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6037         JZ        ??MT_AfCommandProcessing_0
   \   00001A   14           DEC       A
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??MT_AfCommandProcessing_1 & 0xFFFF
   \   000020   14           DEC       A
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??MT_AfCommandProcessing_1 & 0xFFFF
   \   000026   14           DEC       A
   \   000027   7003         JNZ       $+5
   \   000029   02....       LJMP      ??MT_AfCommandProcessing_2 & 0xFFFF
   \   00002C   14           DEC       A
   \   00002D   6074         JZ        ??MT_AfCommandProcessing_3
   \   00002F   24F4         ADD       A,#-0xc
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??MT_AfCommandProcessing_4 & 0xFFFF
   \   000036   14           DEC       A
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??MT_AfCommandProcessing_5 & 0xFFFF
   \   00003C   14           DEC       A
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??MT_AfCommandProcessing_6 & 0xFFFF
   \   000042   14           DEC       A
   \   000043   7003         JNZ       $+5
   \   000045   02....       LJMP      ??MT_AfCommandProcessing_7 & 0xFFFF
   \   000048   14           DEC       A
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??MT_AfCommandProcessing_8 & 0xFFFF
   \   00004E   02....       LJMP      ??MT_AfCommandProcessing_9 & 0xFFFF
    216            {
    217              case MT_AF_REGISTER:
    218                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000051   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000054                ; Setup parameters for call to function osal_mem_alloc
   \   000054   7A06         MOV       R2,#0x6
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005B   8A..         MOV       ?V2,R2
   \   00005D   8B..         MOV       ?V3,R3
   \   00005F   EA           MOV       A,R2
   \   000060   45..         ORL       A,?V3
   \   000062   6056         JZ        ??MT_AfCommandProcessing_10
   \   000064   8A82         MOV       DPL,R2
   \   000066   8B83         MOV       DPH,R3
   \   000068   A3           INC       DPTR
   \   000069   74..         MOV       A,#MT_TaskID & 0xff
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   74..         MOV       A,#(MT_TaskID >> 8) & 0xff
   \   00006F   F0           MOVX      @DPTR,A
   \   000070                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   000070   AC..         MOV       R4,?V2
   \   000072   AD..         MOV       R5,?V3
   \   000074   EE           MOV       A,R6
   \   000075   2403         ADD       A,#0x3
   \   000077   FA           MOV       R2,A
   \   000078   E4           CLR       A
   \   000079   3F           ADDC      A,R7
   \   00007A   FB           MOV       R3,A
   \   00007B   12....       LCALL     `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00007E   E9           MOV       A,R1
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   F0           MOVX      @DPTR,A
   \   000086   700F         JNZ       ??MT_AfCommandProcessing_11
   \   000088                ; Setup parameters for call to function afRegister
   \   000088   AA..         MOV       R2,?V2
   \   00008A   AB..         MOV       R3,?V3
   \   00008C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   00008F   E9           MOV       A,R1
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   F0           MOVX      @DPTR,A
   \                     ??MT_AfCommandProcessing_11:
   \   000097   E0           MOVX      A,@DPTR
   \   000098   6020         JZ        ??MT_AfCommandProcessing_10
   \   00009A                ; Setup parameters for call to function osal_mem_free
   \   00009A   AA..         MOV       R2,?V2
   \   00009C   AB..         MOV       R3,?V3
   \   00009E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A1                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000A1   8017         SJMP      ??MT_AfCommandProcessing_10
    219                break;
    220          
    221              case MT_AF_DELETE:
    222                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   0000A3   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000A6                ; Setup parameters for call to function afDelete
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F9           MOV       R1,A
   \   0000AF   12....       LCALL     `??afDelete::?relay`; Banked call to: afDelete
   \   0000B2   E9           MOV       A,R1
   \   0000B3   85..82       MOV       DPL,?XSP + 0
   \   0000B6   85..83       MOV       DPH,?XSP + 1
   \   0000B9   F0           MOVX      @DPTR,A
   \   0000BA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_AfCommandProcessing_10:
   \   0000BA   AC..         MOV       R4,?XSP + 0
   \   0000BC   AD..         MOV       R5,?XSP + 1
   \   0000BE   02....       LJMP      ??MT_AfCommandProcessing_12 & 0xFFFF
    223                break;
    224          
    225              case MT_AF_DATA_REQUEST:
    226              case MT_AF_DATA_REQUEST_EXT:
    227                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   0000C1                ; Setup parameters for call to function MT_AfDataRequest
   \   0000C1   12....       LCALL     `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    228                break;
   \   0000C4   02....       LJMP      ??MT_AfCommandProcessing_13 & 0xFFFF
    229          
    230          #if defined( ZIGBEEPRO )
    231              case MT_AF_DATA_REQUEST_SRCRTG:
    232                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   0000C7                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   0000C7   12....       LCALL     `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    233                break;
   \   0000CA   02....       LJMP      ??MT_AfCommandProcessing_13 & 0xFFFF
    234          #endif
    235          
    236          #if defined INTER_PAN
    237              case MT_AF_INTER_PAN_CTL:
    238                MT_AfInterPanCtl(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   F5..         MOV       ?V1,A
   \   0000D6   EE           MOV       A,R6
   \   0000D7   2403         ADD       A,#0x3
   \   0000D9   F8           MOV       R0,A
   \   0000DA   E4           CLR       A
   \   0000DB   3F           ADDC      A,R7
   \   0000DC   F9           MOV       R1,A
   \   0000DD   8882         MOV       DPL,R0
   \   0000DF   8983         MOV       DPH,R1
   \   0000E1   A3           INC       DPTR
   \   0000E2   8582..       MOV       ?V2,DPL
   \   0000E5   8583..       MOV       ?V3,DPH
   \   0000E8   8882         MOV       DPL,R0
   \   0000EA   8983         MOV       DPH,R1
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   6068         JZ        ??MT_AfCommandProcessing_14
   \   0000EF   14           DEC       A
   \   0000F0   6058         JZ        ??MT_AfCommandProcessing_15
   \   0000F2   14           DEC       A
   \   0000F3   6032         JZ        ??MT_AfCommandProcessing_16
   \   0000F5   14           DEC       A
   \   0000F6   706A         JNZ       ??MT_AfCommandProcessing_17
   \   0000F8                ; Setup parameters for call to function osal_build_uint16
   \   0000F8   AA..         MOV       R2,?V2
   \   0000FA   AB..         MOV       R3,?V3
   \   0000FC   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000FF                ; Setup parameters for call to function StubAPS_InterPan
   \   0000FF   85..82       MOV       DPL,?V2
   \   000102   85..83       MOV       DPH,?V3
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   E0           MOVX      A,@DPTR
   \   000108   F9           MOV       R1,A
   \   000109   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   00010C   E9           MOV       A,R1
   \   00010D   85..82       MOV       DPL,?XSP + 0
   \   000110   85..83       MOV       DPH,?XSP + 1
   \   000113   6003         JZ        ??MT_AfCommandProcessing_18
   \   000115   E4           CLR       A
   \   000116   8002         SJMP      ??MT_AfCommandProcessing_19
   \                     ??MT_AfCommandProcessing_18:
   \   000118   7401         MOV       A,#0x1
   \                     ??MT_AfCommandProcessing_19:
   \   00011A   F0           MOVX      @DPTR,A
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   C0E0         PUSH      A
   \   00011E   7401         MOV       A,#0x1
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   D0E0         POP       A
   \   000125   8042         SJMP      ??MT_AfCommandProcessing_20
   \                     ??MT_AfCommandProcessing_16:
   \   000127                ; Setup parameters for call to function afFindEndPointDesc
   \   000127   85..82       MOV       DPL,?V2
   \   00012A   85..83       MOV       DPH,?V3
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   F9           MOV       R1,A
   \   00012F   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000132   EA           MOV       A,R2
   \   000133   4B           ORL       A,R3
   \   000134   600B         JZ        ??MT_AfCommandProcessing_21
   \   000136                ; Setup parameters for call to function StubAPS_RegisterApp
   \   000136   12....       LCALL     `??StubAPS_RegisterApp::?relay`; Banked call to: StubAPS_RegisterApp
   \   000139   7401         MOV       A,#0x1
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   E4           CLR       A
   \   00013F   8028         SJMP      ??MT_AfCommandProcessing_20
   \                     ??MT_AfCommandProcessing_21:
   \   000141   7401         MOV       A,#0x1
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   7401         MOV       A,#0x1
   \   000148   801F         SJMP      ??MT_AfCommandProcessing_20
   \                     ??MT_AfCommandProcessing_15:
   \   00014A                ; Setup parameters for call to function StubAPS_SetInterPanChannel
   \   00014A   85..82       MOV       DPL,?V2
   \   00014D   85..83       MOV       DPH,?V3
   \   000150   E0           MOVX      A,@DPTR
   \   000151   F9           MOV       R1,A
   \   000152   12....       LCALL     `??StubAPS_SetInterPanChannel::?relay`; Banked call to: StubAPS_SetInterPanChannel
   \   000155   8003         SJMP      ??MT_AfCommandProcessing_22
   \                     ??MT_AfCommandProcessing_14:
   \   000157                ; Setup parameters for call to function StubAPS_SetIntraPanChannel
   \   000157   12....       LCALL     `??StubAPS_SetIntraPanChannel::?relay`; Banked call to: StubAPS_SetIntraPanChannel
   \                     ??MT_AfCommandProcessing_22:
   \   00015A   7401         MOV       A,#0x1
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   E9           MOV       A,R1
   \   000160   8007         SJMP      ??MT_AfCommandProcessing_20
   \                     ??MT_AfCommandProcessing_17:
   \   000162   7401         MOV       A,#0x1
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   7402         MOV       A,#0x2
   \                     ??MT_AfCommandProcessing_20:
   \   000169   F0           MOVX      @DPTR,A
   \   00016A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00016A   7401         MOV       A,#0x1
   \   00016C   12....       LCALL     ?XSTACK_DISP102_8
   \                     ??MT_AfCommandProcessing_12:
   \   00016F   7B01         MOV       R3,#0x1
   \   000171   AA..         MOV       R2,?V1
   \   000173   02....       LJMP      ??MT_AfCommandProcessing_23 & 0xFFFF
    239                break;
    240          #endif
    241          
    242              case MT_AF_DATA_RETRIEVE:
    243                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   000176                ; Setup parameters for call to function MT_AfDataRetrieve
   \   000176   12....       LCALL     `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    244                break;
   \   000179   02....       LJMP      ??MT_AfCommandProcessing_13 & 0xFFFF
    245          
    246              case MT_AF_DATA_STORE:
    247                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   00017C                ; Setup parameters for call to function MT_AfDataStore
   \   00017C   12....       LCALL     `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    248                break;
   \   00017F   02....       LJMP      ??MT_AfCommandProcessing_13 & 0xFFFF
    249          
    250              case MT_AF_APSF_CONFIG_SET:
    251                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   000182   8E82         MOV       DPL,R6
   \   000184   8F83         MOV       DPH,R7
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   C0E0         PUSH      A
   \   00018D   7402         MOV       A,#0x2
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   D0E0         POP       A
   \   000194   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   A3           INC       DPTR
   \   00019A   A3           INC       DPTR
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   C0E0         PUSH      A
   \   00019E   7403         MOV       A,#0x3
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   D0E0         POP       A
   \   0001A5   F0           MOVX      @DPTR,A
   \   0001A6                ; Setup parameters for call to function afAPSF_ConfigSet
   \   0001A6   7402         MOV       A,#0x2
   \   0001A8   12....       LCALL     ?XSTACK_DISP101_8
   \   0001AB   8E82         MOV       DPL,R6
   \   0001AD   8F83         MOV       DPH,R7
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   F9           MOV       R1,A
   \   0001B4   12....       LCALL     `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   0001B7   E9           MOV       A,R1
   \   0001B8   85..82       MOV       DPL,?XSP + 0
   \   0001BB   85..83       MOV       DPH,?XSP + 1
   \   0001BE   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0001C1   7B01         MOV       R3,#0x1
   \   0001C3   7A13         MOV       R2,#0x13
   \   0001C5   8047         SJMP      ??MT_AfCommandProcessing_23
    252                break;
    253          
    254              case MT_AF_APSF_CONFIG_GET:
    255                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_8:
   \   0001C7   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   0001CA   7402         MOV       A,#0x2
   \   0001CC   12....       LCALL     ?XSTACK_DISP102_8
   \   0001CF   7402         MOV       A,#0x2
   \   0001D1   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0001D4                ; Setup parameters for call to function afAPSF_ConfigGet
   \   0001D4   7402         MOV       A,#0x2
   \   0001D6   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D9   8E82         MOV       DPL,R6
   \   0001DB   8F83         MOV       DPH,R7
   \   0001DD   A3           INC       DPTR
   \   0001DE   A3           INC       DPTR
   \   0001DF   A3           INC       DPTR
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   F9           MOV       R1,A
   \   0001E2   12....       LCALL     `??afAPSF_ConfigGet::?relay`; Banked call to: afAPSF_ConfigGet
   \   0001E5   7402         MOV       A,#0x2
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   C0E0         PUSH      A
   \   0001ED   7404         MOV       A,#0x4
   \   0001EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F2   D0E0         POP       A
   \   0001F4   F0           MOVX      @DPTR,A
   \   0001F5   7403         MOV       A,#0x3
   \   0001F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FA   E0           MOVX      A,@DPTR
   \   0001FB   C0E0         PUSH      A
   \   0001FD   7405         MOV       A,#0x5
   \   0001FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000202   D0E0         POP       A
   \   000204   F0           MOVX      @DPTR,A
   \   000205                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000205   7404         MOV       A,#0x4
   \   000207   12....       LCALL     ?XSTACK_DISP102_8
   \   00020A   7B03         MOV       R3,#0x3
   \   00020C   7A14         MOV       R2,#0x14
   \                     ??MT_AfCommandProcessing_23:
   \   00020E   7964         MOV       R1,#0x64
   \   000210   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    256                break;
   \   000213   8003         SJMP      ??MT_AfCommandProcessing_13
    257          
    258              default:
    259                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_9:
   \   000215   75..02       MOV       ?V0,#0x2
    260                break;
    261            }
    262          
    263            return status;
   \                     ??MT_AfCommandProcessing_13:
   \   000218   A9..         MOV       R1,?V0
   \   00021A   7406         MOV       A,#0x6
   \   00021C                REQUIRE ?Subroutine0
   \   00021C                ; // Fall through to label ?Subroutine0
    264          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F06         MOV       R7,#0x6
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
    265          
    266          /***************************************************************************************************
    267           * @fn      MT_AfRegister
    268           *
    269           * @brief   Process AF Register command
    270           *
    271           * @param   pBuf - pointer to the received buffer
    272           *
    273           * @return  none
    274           ***************************************************************************************************/
    275          static void MT_AfRegister(uint8 *pBuf)
    276          {
    277            uint8 cmdId;
    278            uint8 retValue = ZMemError;
    279            endPointDesc_t *epDesc;
    280          
    281            /* parse header */
    282            cmdId = pBuf[MT_RPC_POS_CMD1];
    283            pBuf += MT_RPC_FRAME_HDR_SZ;
    284          
    285            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
    286            if ( epDesc )
    287            {
    288              epDesc->task_id = &MT_TaskID;
    289              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
    290              if ( retValue == ZSuccess )
    291              {
    292                retValue = afRegister( epDesc );
    293              }
    294          
    295              if ( retValue != ZSuccess )
    296              {
    297                osal_mem_free( epDesc );
    298              }
    299            }
    300          
    301            /* Build and send back the response */
    302            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    303          }
    304          
    305          /***************************************************************************************************
    306           * @fn      MT_AfDelete
    307           *
    308           * @brief   Process AF Delete Endpoint command
    309           *
    310           * @param   pBuf - pointer to the received buffer
    311           *
    312           * @return  none
    313           ***************************************************************************************************/
    314          static void MT_AfDelete(uint8 *pBuf)
    315          {
    316            uint8 cmdId;
    317            uint8 retValue = ZMemError;
    318          
    319            /* parse header */
    320            cmdId = pBuf[MT_RPC_POS_CMD1];
    321            pBuf += MT_RPC_FRAME_HDR_SZ;
    322          
    323            retValue = afDelete( *pBuf );
    324          
    325            /* Build and send back the response */
    326            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
    327          }
    328          
    329          /***************************************************************************************************
    330           * @fn      MT_AfDataRequest
    331           *
    332           * @brief   Process AF Register command
    333           *
    334           * @param   pBuf - pointer to the received buffer
    335           *
    336           * @return  none
    337           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    338          static void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV       A,#-0x15
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine29 & 0xFFFF
    340            #define MT_AF_REQ_MSG_LEN  10
    341            #define MT_AF_REQ_MSG_EXT  10
    342          
    343            endPointDesc_t *epDesc;
    344            afAddrType_t dstAddr;
    345            cId_t cId;
    346            uint8 transId, txOpts, radius;
    347            uint8 cmd0, cmd1;
    348            uint8 retValue = ZFailure;
    349            uint16 dataLen, tempLen;
    350          
    351            /* Parse header */
    352            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_94:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V12,A
    353            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000010   8E82         MOV       DPL,R6
   \   000012   8F83         MOV       DPH,R7
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V9,A
    354            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EE           MOV       A,R6
   \   00001A   2403         ADD       A,#0x3
   \   00001C   FE           MOV       R6,A
   \   00001D   5001         JNC       ??MT_AfDataRequest_0
   \   00001F   0F           INC       R7
    355          
    356            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   000020   7402         MOV       A,#0x2
   \   000022   65..         XRL       A,?V9
   \   000024   7079         JNZ       ??MT_AfDataRequest_1
    357            {
    358              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000026   8E82         MOV       DPL,R6
   \   000028   8F83         MOV       DPH,R7
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F8           MOV       R0,A
   \   00002C   740A         MOV       A,#0xa
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E8           MOV       A,R0
   \   000032   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000035   AE82         MOV       R6,DPL
   \   000037   AF83         MOV       R7,DPH
    359          
    360              if (dstAddr.addrMode == afAddr64Bit)
   \   000039   7403         MOV       A,#0x3
   \   00003B   68           XRL       A,R0
   \   00003C   701F         JNZ       ??MT_AfDataRequest_2
    361              {
    362                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00003E                ; Setup parameters for call to function osal_memcpy
   \   00003E   8E..         MOV       ?V0,R6
   \   000040   8F..         MOV       ?V1,R7
   \   000042   75..00       MOV       ?V2,#0x0
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   7C08         MOV       R4,#0x8
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP101_8
   \   000053   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005B   8011         SJMP      ??MT_AfDataRequest_3
    363              }
    364              else
    365              {
    366                dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_2:
   \   00005D                ; Setup parameters for call to function osal_build_uint16
   \   00005D   EE           MOV       A,R6
   \   00005E   FA           MOV       R2,A
   \   00005F   EF           MOV       A,R7
   \   000060   FB           MOV       R3,A
   \   000061   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   EA           MOV       A,R2
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   EB           MOV       A,R3
   \   00006D   F0           MOVX      @DPTR,A
    367              }
    368              pBuf += Z_EXTADDR_LEN;
    369          
    370              dstAddr.endPoint = *pBuf++;
   \                     ??MT_AfDataRequest_3:
   \   00006E   8E82         MOV       DPL,R6
   \   000070   8F83         MOV       DPH,R7
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   C0E0         PUSH      A
   \   00007D   740B         MOV       A,#0xb
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   D0E0         POP       A
   \   000084   F0           MOVX      @DPTR,A
   \   000085   EE           MOV       A,R6
   \   000086   2409         ADD       A,#0x9
   \   000088   FE           MOV       R6,A
   \   000089   5001         JNC       ??MT_AfDataRequest_4
   \   00008B   0F           INC       R7
    371              dstAddr.panId = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequest_4:
   \   00008C                ; Setup parameters for call to function osal_build_uint16
   \   00008C   FA           MOV       R2,A
   \   00008D   EF           MOV       A,R7
   \   00008E   FB           MOV       R3,A
   \   00008F   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000092   740C         MOV       A,#0xc
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?Subroutine32 & 0xFFFF
    372              pBuf += 2;
    373            }
   \                     ??CrossCallReturnLabel_53:
   \   00009A   5035         JNC       ??MT_AfDataRequest_5
   \   00009C   0F           INC       R7
   \   00009D   8032         SJMP      ??MT_AfDataRequest_5
    374            else
    375            {
    376              /* Destination address */
    377              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   00009F   740A         MOV       A,#0xa
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   F0           MOVX      @DPTR,A
    378              dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   0000A7                ; Setup parameters for call to function osal_build_uint16
   \   0000A7   0A           INC       R2
   \   0000A8   0A           INC       R2
   \   0000A9   0A           INC       R2
   \   0000AA   EF           MOV       A,R7
   \   0000AB   FB           MOV       R3,A
   \   0000AC   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ?Subroutine26 & 0xFFFF
    379              pBuf += 2;
    380          
    381              /* Destination endpoint */
    382              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_41:
   \   0000B7   C0E0         PUSH      A
   \   0000B9   740B         MOV       A,#0xb
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   D0E0         POP       A
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   EE           MOV       A,R6
   \   0000C2   2403         ADD       A,#0x3
   \   0000C4   FE           MOV       R6,A
   \   0000C5   5001         JNC       ??MT_AfDataRequest_6
   \   0000C7   0F           INC       R7
    383              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_6:
   \   0000C8   740C         MOV       A,#0xc
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   E4           CLR       A
   \   0000CE   F0           MOVX      @DPTR,A
   \   0000CF   A3           INC       DPTR
   \   0000D0   F0           MOVX      @DPTR,A
    384            }
    385          
    386            /* Source endpoint */
    387            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_5:
   \   0000D1                ; Setup parameters for call to function afFindEndPointDesc
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F9           MOV       R1,A
   \   0000D7   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000DA   8A..         MOV       ?V10,R2
   \   0000DC   8B..         MOV       ?V11,R3
   \   0000DE   8E82         MOV       DPL,R6
   \   0000E0   8F83         MOV       DPH,R7
   \   0000E2   A3           INC       DPTR
   \   0000E3   AE82         MOV       R6,DPL
   \   0000E5   AF83         MOV       R7,DPH
    388          
    389            /* ClusterId */
    390            cId = osal_build_uint16( pBuf );
   \   0000E7                ; Setup parameters for call to function osal_build_uint16
   \   0000E7   EE           MOV       A,R6
   \   0000E8   FA           MOV       R2,A
   \   0000E9   EF           MOV       A,R7
   \   0000EA   FB           MOV       R3,A
   \   0000EB   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000EE   8A..         MOV       ?V2,R2
   \   0000F0   8B..         MOV       ?V3,R3
    391            pBuf +=2;
    392          
    393            /* TransId */
    394            transId = *pBuf++;
   \   0000F2   8E82         MOV       DPL,R6
   \   0000F4   8F83         MOV       DPH,R7
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   C0E0         PUSH      A
   \   0000FB   7401         MOV       A,#0x1
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   D0E0         POP       A
   \   000102   F0           MOVX      @DPTR,A
    395          
    396            /* TxOption */
    397            txOpts = *pBuf++;
   \   000103   8E82         MOV       DPL,R6
   \   000105   8F83         MOV       DPH,R7
   \   000107   12....       LCALL     ?Subroutine13 & 0xFFFF
    398          
    399            /* Radius */
    400            radius = *pBuf++;
   \                     ??CrossCallReturnLabel_19:
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   F5..         MOV       ?V7,A
   \   00010D   EE           MOV       A,R6
   \   00010E   2405         ADD       A,#0x5
   \   000110   FE           MOV       R6,A
   \   000111   5001         JNC       ??MT_AfDataRequest_7
   \   000113   0F           INC       R7
    401          
    402            /* Length */
    403            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_7:
   \   000114   7402         MOV       A,#0x2
   \   000116   65..         XRL       A,?V9
   \   000118   701C         JNZ       ??MT_AfDataRequest_8
    404            {
    405              dataLen = osal_build_uint16( pBuf );
   \   00011A                ; Setup parameters for call to function osal_build_uint16
   \   00011A   EE           MOV       A,R6
   \   00011B   FA           MOV       R2,A
   \   00011C   EF           MOV       A,R7
   \   00011D   FB           MOV       R3,A
   \   00011E   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000121   8A..         MOV       ?V0,R2
   \   000123   8B..         MOV       ?V1,R3
    406              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \   000125   EA           MOV       A,R2
   \   000126   2414         ADD       A,#0x14
   \   000128   F8           MOV       R0,A
   \   000129   E4           CLR       A
   \   00012A   35..         ADDC      A,?V1
   \   00012C   F9           MOV       R1,A
    407              pBuf += 2;
   \   00012D   EE           MOV       A,R6
   \   00012E   2402         ADD       A,#0x2
   \   000130   FE           MOV       R6,A
   \   000131   5018         JNC       ??MT_AfDataRequest_9
   \   000133   0F           INC       R7
   \   000134   8015         SJMP      ??MT_AfDataRequest_9
    408            }
    409            else
    410            {
    411              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_8:
   \   000136   8E82         MOV       DPL,R6
   \   000138   8F83         MOV       DPH,R7
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F5..         MOV       ?V0,A
   \   00013D   75..00       MOV       ?V1,#0x0
   \   000140   A3           INC       DPTR
   \   000141   0E           INC       R6
   \   000142   AF83         MOV       R7,DPH
    412              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000144   240A         ADD       A,#0xa
   \   000146   F8           MOV       R0,A
   \   000147   E4           CLR       A
   \   000148   3400         ADDC      A,#0x0
   \   00014A   F9           MOV       R1,A
    413            }
    414          
    415            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_9:
   \   00014B   E5..         MOV       A,?V10
   \   00014D   45..         ORL       A,?V11
   \   00014F   6011         JZ        ??MT_AfDataRequest_10
    416            {
    417              retValue = afStatus_INVALID_PARAMETER;
    418            }
    419            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000151   C3           CLR       C
   \   000152   E8           MOV       A,R0
   \   000153   94FB         SUBB      A,#-0x5
   \   000155   E9           MOV       A,R1
   \   000156   9400         SUBB      A,#0x0
   \   000158   5003         JNC       $+5
   \   00015A   02....       LJMP      ??MT_AfDataRequest_11 & 0xFFFF
    420            {
    421              if (pMtAfDataReq != NULL)
   \   00015D   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000160   600B         JZ        ??MT_AfDataRequest_12
    422              {
    423                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_10:
   \   000162   85..82       MOV       DPL,?XSP + 0
   \   000165   85..83       MOV       DPH,?XSP + 1
   \   000168   7402         MOV       A,#0x2
   \   00016A   02....       LJMP      ??MT_AfDataRequest_13 & 0xFFFF
    424              }
    425              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_12:
   \   00016D                ; Setup parameters for call to function osal_mem_alloc
   \   00016D   E5..         MOV       A,?V0
   \   00016F   2418         ADD       A,#0x18
   \   000171   FA           MOV       R2,A
   \   000172   E4           CLR       A
   \   000173   35..         ADDC      A,?V1
   \   000175   FB           MOV       R3,A
   \   000176   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000179   90....       MOV       DPTR,#pMtAfDataReq
   \   00017C   EA           MOV       A,R2
   \   00017D   F0           MOVX      @DPTR,A
   \   00017E   A3           INC       DPTR
   \   00017F   EB           MOV       A,R3
   \   000180   F0           MOVX      @DPTR,A
   \   000181   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000184   85..82       MOV       DPL,?XSP + 0
   \   000187   85..83       MOV       DPH,?XSP + 1
   \   00018A   7005         JNZ       ??MT_AfDataRequest_14
    426              {
    427                retValue = afStatus_MEM_FAIL;
   \   00018C   7410         MOV       A,#0x10
   \   00018E   02....       LJMP      ??MT_AfDataRequest_13 & 0xFFFF
    428              }
    429              else
    430              {
    431                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_14:
   \   000191   E4           CLR       A
   \   000192   F0           MOVX      @DPTR,A
    432          
    433                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   000193   90....       MOV       DPTR,#pMtAfDataReq
   \   000196   E0           MOVX      A,@DPTR
   \   000197   2418         ADD       A,#0x18
   \   000199   FA           MOV       R2,A
   \   00019A   A3           INC       DPTR
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   3400         ADDC      A,#0x0
   \   00019E   FB           MOV       R3,A
   \   00019F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001A2   EA           MOV       A,R2
   \   0001A3   F0           MOVX      @DPTR,A
   \   0001A4   A3           INC       DPTR
   \   0001A5   EB           MOV       A,R3
   \   0001A6   F0           MOVX      @DPTR,A
    434                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001A7                ; Setup parameters for call to function osal_memcpy
   \   0001A7   7402         MOV       A,#0x2
   \   0001A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AC   88..         MOV       ?V4,R0
   \   0001AE   89..         MOV       ?V5,R1
   \   0001B0   75..00       MOV       ?V6,#0x0
   \   0001B3   78..         MOV       R0,#?V4
   \   0001B5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B8   7C0C         MOV       R4,#0xc
   \   0001BA   7D00         MOV       R5,#0x0
   \   0001BC   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0001BF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C2   7403         MOV       A,#0x3
   \   0001C4   12....       LCALL     ?DEALLOC_XSTACK8
    435                pMtAfDataReq->epDesc = epDesc;
   \   0001C7   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001CA   E5..         MOV       A,?V10
   \   0001CC   F0           MOVX      @DPTR,A
   \   0001CD   A3           INC       DPTR
   \   0001CE   E5..         MOV       A,?V11
   \   0001D0   F0           MOVX      @DPTR,A
    436                pMtAfDataReq->cId = cId;
   \   0001D1   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001D4   E5..         MOV       A,?V2
   \   0001D6   F0           MOVX      @DPTR,A
   \   0001D7   A3           INC       DPTR
   \   0001D8   E5..         MOV       A,?V3
   \   0001DA   F0           MOVX      @DPTR,A
    437                pMtAfDataReq->dataLen = dataLen;
   \   0001DB   90....       MOV       DPTR,#pMtAfDataReq
   \   0001DE   E0           MOVX      A,@DPTR
   \   0001DF   F8           MOV       R0,A
   \   0001E0   A3           INC       DPTR
   \   0001E1   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001E4   E5..         MOV       A,?V0
   \   0001E6   F0           MOVX      @DPTR,A
   \   0001E7   A3           INC       DPTR
   \   0001E8   E5..         MOV       A,?V1
   \   0001EA   F0           MOVX      @DPTR,A
    438                pMtAfDataReq->transId = transId;
   \   0001EB   7401         MOV       A,#0x1
   \   0001ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   C0E0         PUSH      A
   \   0001F3   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0001F6   2414         ADD       A,#0x14
   \   0001F8   F582         MOV       DPL,A
   \   0001FA   E4           CLR       A
   \   0001FB   38           ADDC      A,R0
   \   0001FC   F583         MOV       DPH,A
   \   0001FE   D0E0         POP       A
   \   000200   F0           MOVX      @DPTR,A
    439                pMtAfDataReq->txOpts = txOpts;
   \   000201   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000204   E5..         MOV       A,?V8
   \   000206   F0           MOVX      @DPTR,A
    440                pMtAfDataReq->radius = radius;
   \   000207   90....       MOV       DPTR,#pMtAfDataReq
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   F8           MOV       R0,A
   \   00020C   A3           INC       DPTR
   \   00020D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000210   E5..         MOV       A,?V7
   \   000212   12....       LCALL     ?Subroutine6 & 0xFFFF
    441          
    442                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    443                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_6:
   \   000215   740F         MOV       A,#0xf
   \   000217   F0           MOVX      @DPTR,A
    444                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000218                ; Setup parameters for call to function osal_start_timerEx
   \   000218   90....       MOV       DPTR,#__Constant_3e8
   \   00021B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00021E   7A08         MOV       R2,#0x8
   \   000220   7B00         MOV       R3,#0x0
   \   000222   90....       MOV       DPTR,#MT_TaskID
   \   000225   E0           MOVX      A,@DPTR
   \   000226   F9           MOV       R1,A
   \   000227   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00022A   7404         MOV       A,#0x4
   \   00022C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00022F   E9           MOV       A,R1
   \   000230   6053         JZ        ??MT_AfDataRequest_15
    445                {
    446                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000232                ; Setup parameters for call to function osal_set_event
   \   000232   7A08         MOV       R2,#0x8
   \   000234   7B00         MOV       R3,#0x0
   \   000236   90....       MOV       DPTR,#MT_TaskID
   \   000239   E0           MOVX      A,@DPTR
   \   00023A   F9           MOV       R1,A
   \   00023B   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00023E   8045         SJMP      ??MT_AfDataRequest_15
    447                }
    448              }
    449            }
    450          #if defined ( MT_GP_FUNC )
    451            else if ( ( cmd1 == MT_AF_DATA_REQUEST_EXT )
    452                     && ( dstAddr.endPoint == ZGP_ENDPOINT_ID )
    453                     && ( dstAddr.panId == 0 )
    454                     && ( dstAddr.addrMode == afAddr64Bit ) )// loopback support
    455            {
    456              retValue = MT_GpGenerateResponse( dstAddr.addr.extAddr, dataLen, pBuf );
    457            }
    458          #endif
    459            else
    460            {
    461              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_11:
   \   000240                ; Setup parameters for call to function AF_DataRequest
   \   000240   E5..         MOV       A,?V7
   \   000242   F5..         MOV       ?V4,A
   \   000244   78..         MOV       R0,#?V4
   \   000246   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000249   7402         MOV       A,#0x2
   \   00024B   12....       LCALL     ?XSTACK_DISP100_8
   \   00024E   88..         MOV       ?V4,R0
   \   000250   89..         MOV       ?V5,R1
   \   000252   78..         MOV       R0,#?V4
   \   000254   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000257   8E..         MOV       ?V4,R6
   \   000259   8F..         MOV       ?V5,R7
   \   00025B   78..         MOV       R0,#?V4
   \   00025D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000260   78..         MOV       R0,#?V0
   \   000262   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000265   78..         MOV       R0,#?V2
   \   000267   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00026A   A9..         MOV       R1,?V8
   \   00026C   AC..         MOV       R4,?V10
   \   00026E   AD..         MOV       R5,?V11
   \   000270   740B         MOV       A,#0xb
   \   000272   12....       LCALL     ?XSTACK_DISP101_8
   \   000275   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000278   7409         MOV       A,#0x9
   \   00027A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027D   E9           MOV       A,R1
   \   00027E   85..82       MOV       DPL,?XSP + 0
   \   000281   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequest_13:
   \   000284   F0           MOVX      @DPTR,A
    462            }
    463          
    464            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_15:
   \   000285   74E0         MOV       A,#-0x20
   \   000287   55..         ANL       A,?V12
   \   000289   6420         XRL       A,#0x20
   \   00028B   700D         JNZ       ??MT_AfDataRequest_16
    465            {
    466              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   00028D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00028D   AC..         MOV       R4,?XSP + 0
   \   00028F   AD..         MOV       R5,?XSP + 1
   \   000291   7B01         MOV       R3,#0x1
   \   000293   AA..         MOV       R2,?V9
   \   000295   7964         MOV       R1,#0x64
   \   000297   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    467            }
    468          }
   \                     ??MT_AfDataRequest_16:
   \   00029A   740E         MOV       A,#0xe
   \   00029C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00029F   7F0D         MOV       R7,#0xd
   \   0002A1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   7401         MOV       A,#0x1
   \   00000C                REQUIRE ??Subroutine49_0
   \   00000C                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V8,A
   \   000006   8E82         MOV       DPL,R6
   \   000008   8F83         MOV       DPH,R7
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2402         ADD       A,#0x2
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C8           XCH       A,R0
   \   000002   2416         ADD       A,#0x16
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   38           ADDC      A,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C8           XCH       A,R0
   \   000002   2412         ADD       A,#0x12
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   38           ADDC      A,R0
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   2415         ADD       A,#0x15
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   2410         ADD       A,#0x10
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   240E         ADD       A,#0xe
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#pMtAfDataReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   22           RET
    469          
    470          #if defined( ZIGBEEPRO )
    471          /***************************************************************************************************
    472           * @fn      MT_AfDataRequestSrcRtg
    473           *
    474           * @brief   Process AF Register command
    475           *
    476           * @param   pBuf - pointer to the received buffer
    477           *
    478           * @return  none
    479           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          static void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine29 & 0xFFFF
    482            uint8 cmdId, dataLen = 0;
    483            uint8 retValue = ZFailure;
    484            endPointDesc_t *epDesc;
    485            byte transId;
    486            afAddrType_t dstAddr;
    487            cId_t cId;
    488            byte txOpts, radius, srcEP, relayCnt;
    489            uint16 *pRelayList;
    490            uint8 i;
    491          
    492            /* parse header */
    493            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_95:
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F5..         MOV       ?V6,A
    494            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000011   EE           MOV       A,R6
   \   000012   2403         ADD       A,#0x3
   \   000014   FE           MOV       R6,A
   \   000015   5001         JNC       ??MT_AfDataRequestSrcRtg_0
   \   000017   0F           INC       R7
    495          
    496            /* Destination address */
    497            /* Initialize the panID field to zero to avoid inter-pan */
    498            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C0C         MOV       R4,#0xc
   \   00001A   7D00         MOV       R5,#0x0
   \   00001C   7900         MOV       R1,#0x0
   \   00001E   7402         MOV       A,#0x2
   \   000020   12....       LCALL     ?XSTACK_DISP101_8
   \   000023   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    499            dstAddr.addrMode = afAddr16Bit;
   \   000026   740A         MOV       A,#0xa
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   7402         MOV       A,#0x2
   \   00002D   F0           MOVX      @DPTR,A
    500            dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \   00002E                ; Setup parameters for call to function osal_build_uint16
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine26 & 0xFFFF
    501            pBuf += 2;
    502          
    503            /* Destination endpoint */
    504            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_42:
   \   00003D   C0E0         PUSH      A
   \   00003F   740B         MOV       A,#0xb
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   D0E0         POP       A
   \   000046   12....       LCALL     ?Subroutine28 & 0xFFFF
    505          
    506            /* Source endpoint */
    507            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_45:
   \   000049   F9           MOV       R1,A
   \   00004A   EE           MOV       A,R6
   \   00004B   2404         ADD       A,#0x4
   \   00004D   FE           MOV       R6,A
   \   00004E   5001         JNC       ??MT_AfDataRequestSrcRtg_1
   \   000050   0F           INC       R7
    508            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   000051                ; Setup parameters for call to function afFindEndPointDesc
   \   000051   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000054   8A..         MOV       ?V2,R2
   \   000056   8B..         MOV       ?V3,R3
    509          
    510            /* ClusterId */
    511            cId = osal_build_uint16( pBuf );
   \   000058                ; Setup parameters for call to function osal_build_uint16
   \   000058   EE           MOV       A,R6
   \   000059   FA           MOV       R2,A
   \   00005A   EF           MOV       A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00005F   8A..         MOV       ?V4,R2
   \   000061   8B..         MOV       ?V5,R3
    512            pBuf +=2;
    513          
    514            /* TransId */
    515            transId = *pBuf++;
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   C0E0         PUSH      A
   \   00006C   7401         MOV       A,#0x1
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   D0E0         POP       A
   \   000073   12....       LCALL     ?Subroutine28 & 0xFFFF
    516          
    517            /* TxOption */
    518            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_46:
   \   000076   F5..         MOV       ?V7,A
    519          
    520            /* Radius */
    521            radius = *pBuf++;
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   A3           INC       DPTR
   \   00007D   12....       LCALL     ?Subroutine13 & 0xFFFF
    522          
    523            /* Source route relay count */
    524            relayCnt = *pBuf++;
   \                     ??CrossCallReturnLabel_20:
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F5..         MOV       ?V9,A
   \   000084   EE           MOV       A,R6
   \   000085   2406         ADD       A,#0x6
   \   000087   FE           MOV       R6,A
   \   000088   5001         JNC       ??MT_AfDataRequestSrcRtg_2
   \   00008A   0F           INC       R7
    525          
    526            /* Convert the source route relay list */
    527            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   AA..         MOV       R2,?V9
   \   00008D   EA           MOV       A,R2
   \   00008E   2A           ADD       A,R2
   \   00008F   FA           MOV       R2,A
   \   000090   E4           CLR       A
   \   000091   33           RLC       A
   \   000092   FB           MOV       R3,A
   \   000093   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000096   8A..         MOV       ?V0,R2
   \   000098   8B..         MOV       ?V1,R3
   \   00009A   EA           MOV       A,R2
   \   00009B   45..         ORL       A,?V1
   \   00009D   7003         JNZ       $+5
   \   00009F   02....       LJMP      ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    528            {
    529              for( i = 0; i < relayCnt; i++ )
   \   0000A2   75..00       MOV       ?V10,#0x0
   \   0000A5   8021         SJMP      ??MT_AfDataRequestSrcRtg_4
    530              {
    531                pRelayList[i] = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000A7                ; Setup parameters for call to function osal_build_uint16
   \   0000A7   EE           MOV       A,R6
   \   0000A8   FA           MOV       R2,A
   \   0000A9   EF           MOV       A,R7
   \   0000AA   FB           MOV       R3,A
   \   0000AB   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000AE   A8..         MOV       R0,?V10
   \   0000B0   E8           MOV       A,R0
   \   0000B1   28           ADD       A,R0
   \   0000B2   F8           MOV       R0,A
   \   0000B3   E4           CLR       A
   \   0000B4   33           RLC       A
   \   0000B5   F9           MOV       R1,A
   \   0000B6   E5..         MOV       A,?V0
   \   0000B8   28           ADD       A,R0
   \   0000B9   F582         MOV       DPL,A
   \   0000BB   E5..         MOV       A,?V1
   \   0000BD   39           ADDC      A,R1
   \   0000BE   F583         MOV       DPH,A
   \   0000C0   12....       LCALL     ?Subroutine32 & 0xFFFF
    532                pBuf += 2;
    533              }
   \                     ??CrossCallReturnLabel_54:
   \   0000C3   5001         JNC       ??MT_AfDataRequestSrcRtg_6
   \   0000C5   0F           INC       R7
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000C6   05..         INC       ?V10
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000C8   E5..         MOV       A,?V10
   \   0000CA   C3           CLR       C
   \   0000CB   95..         SUBB      A,?V9
   \   0000CD   40D8         JC        ??MT_AfDataRequestSrcRtg_5
    534          
    535              /* Data payload Length */
    536              dataLen = *pBuf++;
   \   0000CF   8E82         MOV       DPL,R6
   \   0000D1   8F83         MOV       DPH,R7
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   FA           MOV       R2,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   AE82         MOV       R6,DPL
   \   0000D8   AF83         MOV       R7,DPH
    537          
    538              if ( epDesc == NULL )
   \   0000DA   E5..         MOV       A,?V2
   \   0000DC   45..         ORL       A,?V3
   \   0000DE   700A         JNZ       ??MT_AfDataRequestSrcRtg_7
    539              {
    540                retValue = afStatus_INVALID_PARAMETER;
   \   0000E0   85..82       MOV       DPL,?XSP + 0
   \   0000E3   85..83       MOV       DPH,?XSP + 1
   \   0000E6   7402         MOV       A,#0x2
   \   0000E8   8050         SJMP      ??MT_AfDataRequestSrcRtg_8
    541              }
    542              else
    543              {
    544                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    545                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   0000EA                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   0000EA   78..         MOV       R0,#?V0
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EF   78..         MOV       R0,#?V9
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F4   78..         MOV       R0,#?V8
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F9   7405         MOV       A,#0x5
   \   0000FB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FE   88..         MOV       ?V8,R0
   \   000100   89..         MOV       ?V9,R1
   \   000102   78..         MOV       R0,#?V8
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000107   8E..         MOV       ?V8,R6
   \   000109   8F..         MOV       ?V9,R7
   \   00010B   78..         MOV       R0,#?V8
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000110   EA           MOV       A,R2
   \   000111   F5..         MOV       ?V8,A
   \   000113   75..00       MOV       ?V9,#0x0
   \   000116   78..         MOV       R0,#?V8
   \   000118   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011B   78..         MOV       R0,#?V4
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   A9..         MOV       R1,?V7
   \   000122   AC..         MOV       R4,?V2
   \   000124   AD..         MOV       R5,?V3
   \   000126   740E         MOV       A,#0xe
   \   000128   12....       LCALL     ?XSTACK_DISP101_8
   \   00012B   12....       LCALL     `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   00012E   740C         MOV       A,#0xc
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   \   000133   E9           MOV       A,R1
   \   000134   85..82       MOV       DPL,?XSP + 0
   \   000137   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   00013A   F0           MOVX      @DPTR,A
    546              }
    547          
    548              /* Free the memory allocated */
    549              osal_mem_free( pRelayList );
   \   00013B                ; Setup parameters for call to function osal_mem_free
   \   00013B   AA..         MOV       R2,?V0
   \   00013D   AB..         MOV       R3,?V1
   \   00013F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000142   8009         SJMP      ??MT_AfDataRequestSrcRtg_9
    550            }
    551            else
    552            {
    553              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000144   85..82       MOV       DPL,?XSP + 0
   \   000147   85..83       MOV       DPH,?XSP + 1
   \   00014A   7410         MOV       A,#0x10
   \   00014C   F0           MOVX      @DPTR,A
    554            }
    555          
    556          
    557            /* Build and send back the response */
    558            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00014D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00014D   AC..         MOV       R4,?XSP + 0
   \   00014F   AD..         MOV       R5,?XSP + 1
   \   000151   7B01         MOV       R3,#0x1
   \   000153   AA..         MOV       R2,?V6
   \   000155   7964         MOV       R1,#0x64
   \   000157   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    559          }
   \   00015A   740E         MOV       A,#0xe
   \   00015C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015F   7F0C         MOV       R7,#0xc
   \   000161   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
    560          #endif
    561          
    562          #if defined INTER_PAN
    563          /***************************************************************************************************
    564           * @fn      MT_AfInterPanCtl
    565           *
    566           * @brief   Process the AF Inter Pan control command.
    567           *
    568           * @param   pBuf - pointer to the received buffer
    569           *
    570           * @return  none
    571           ***************************************************************************************************/
    572          static void MT_AfInterPanCtl(uint8 *pBuf)
    573          {
    574            uint8 cmd, rtrn;
    575            uint16 panId;
    576            endPointDesc_t *pEP;
    577          
    578            cmd = pBuf[MT_RPC_POS_CMD1];
    579            pBuf += MT_RPC_FRAME_HDR_SZ;
    580          
    581            switch (*pBuf++)  // Inter-pan request parameter.
    582            {
    583            case InterPanClr:
    584              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    585              break;
    586          
    587            case InterPanSet:
    588              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    589              break;
    590          
    591            case InterPanReg:
    592              if ((pEP = afFindEndPointDesc(*pBuf)))
    593              {
    594                StubAPS_RegisterApp(pEP);
    595                rtrn = SUCCESS;
    596              }
    597              else
    598              {
    599                rtrn = FAILURE;
    600              }
    601              break;
    602          
    603            case InterPanChk:
    604              panId = osal_build_uint16( pBuf );
    605              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    606              break;
    607          
    608            default:
    609              rtrn = afStatus_INVALID_PARAMETER;
    610              break;
    611            }
    612          
    613            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    614          }
    615          #endif
    616          
    617          /***************************************************************************************************
    618           * @fn      MT_AfDataConfirm
    619           *
    620           * @brief   Process
    621           *
    622           * @param   pBuf - pointer to the received buffer
    623           *
    624           * @return  none
    625           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    627          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    628            uint8 retArray[3];
    629          
    630            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL     ?Subroutine5 & 0xFFFF
    631            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_4:
   \   00000C   C0E0         PUSH      A
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   D0E0         POP       A
   \   000015   12....       LCALL     ?Subroutine31 & 0xFFFF
    632            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_51:
   \   000018   C0E0         PUSH      A
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine30 & 0xFFFF
    633          
    634            /* Build and send back the response */
    635            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \                     ??CrossCallReturnLabel_48:
   \   000024   7B03         MOV       R3,#0x3
   \   000026   7A80         MOV       R2,#-0x80
   \   000028   7944         MOV       R1,#0x44
   \   00002A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    636          }
   \   00002D   7403         MOV       A,#0x3
   \   00002F                REQUIRE ?Subroutine1
   \   00002F                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   D083         POP       DPH
   \   000005   D082         POP       DPL
   \   000007   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
    637          
    638          /***************************************************************************************************
    639           * @fn      MT_AfReflectError
    640           *
    641           * @brief   Process
    642           *
    643           * @param   pBuf - pointer to the received buffer
    644           *
    645           * @return  none
    646           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    648          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV       A,#-0x6
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    649            uint8 retArray[6];
    650          
    651            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL     ?Subroutine5 & 0xFFFF
    652            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_5:
   \   00000C   C0E0         PUSH      A
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   D0E0         POP       A
   \   000015   12....       LCALL     ?Subroutine31 & 0xFFFF
    653            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_52:
   \   000018   C0E0         PUSH      A
   \   00001A   7402         MOV       A,#0x2
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   D0E0         POP       A
   \   000021   12....       LCALL     ?Subroutine43 & 0xFFFF
    654            retArray[3] = pMsg->dstAddrMode;
   \                     ??CrossCallReturnLabel_81:
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   C0E0         PUSH      A
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   D0E0         POP       A
   \   00002F   F0           MOVX      @DPTR,A
    655            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   000030   EA           MOV       A,R2
   \   000031   2405         ADD       A,#0x5
   \   000033   F8           MOV       R0,A
   \   000034   E4           CLR       A
   \   000035   3B           ADDC      A,R3
   \   000036   F9           MOV       R1,A
   \   000037   8882         MOV       DPL,R0
   \   000039   8983         MOV       DPH,R1
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   C0E0         PUSH      A
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   D0E0         POP       A
   \   000045   12....       LCALL     ?Subroutine40 & 0xFFFF
    656            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \                     ??CrossCallReturnLabel_73:
   \   000048   E0           MOVX      A,@DPTR
   \   000049   C0E0         PUSH      A
   \   00004B   7405         MOV       A,#0x5
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   D0E0         POP       A
   \   000052   12....       LCALL     ?Subroutine30 & 0xFFFF
    657          
    658            /* Build and send back the response */
    659            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \                     ??CrossCallReturnLabel_49:
   \   000055   7B06         MOV       R3,#0x6
   \   000057   7A83         MOV       R2,#-0x7d
   \   000059   7944         MOV       R1,#0x44
   \   00005B   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    660          }
   \   00005E   7406         MOV       A,#0x6
   \   000060   80..         SJMP      ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    661          
    662          /***************************************************************************************************
    663           * @fn          MT_AfIncomingMsg
    664           *
    665           * @brief       Process the callback subscription for AF Incoming data.
    666           *
    667           * @param       pkt - Incoming AF data.
    668           *
    669           * @return      none
    670           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    672          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
    673            #define MT_AF_INC_MSG_LEN  20
    674            #define MT_AF_INC_MSG_EXT  10
    675          
    676            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \   000009   EA           MOV       A,R2
   \   00000A   2420         ADD       A,#0x20
   \   00000C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00000F   F5..         MOV       ?V0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F5..         MOV       ?V1,A
    677            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000015   E5..         MOV       A,?V0
   \   000017   2414         ADD       A,#0x14
   \   000019   FE           MOV       R6,A
   \   00001A   E4           CLR       A
   \   00001B   35..         ADDC      A,?V1
   \   00001D   FF           MOV       R7,A
    678            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00001E   75..81       MOV       ?V7,#-0x7f
    679            uint8 *pRsp, *pTmp;
    680            mtAfInMsgList_t *pItem = NULL;
   \   000021   75..00       MOV       ?V10,#0x0
   \   000024   75..00       MOV       ?V11,#0x0
    681          
    682          #if defined INTER_PAN
    683            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
   \   000027                ; Setup parameters for call to function StubAPS_InterPan
   \   000027   EA           MOV       A,R2
   \   000028   240F         ADD       A,#0xf
   \   00002A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00002D   F9           MOV       R1,A
   \   00002E   EA           MOV       A,R2
   \   00002F   2410         ADD       A,#0x10
   \   000031   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000034   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000037   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   00003A   E9           MOV       A,R1
   \   00003B   7014         JNZ       ??MT_AfIncomingMsg_0
    684            {
    685              cmd = MT_AF_INCOMING_MSG_EXT;
    686            }
    687            else
    688          #endif
    689            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    690                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \   00003D   E5..         MOV       A,?V8
   \   00003F   240E         ADD       A,#0xe
   \   000041   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000044   6403         XRL       A,#0x3
   \   000046   6009         JZ        ??MT_AfIncomingMsg_0
   \   000048   C3           CLR       C
   \   000049   EE           MOV       A,R6
   \   00004A   94F1         SUBB      A,#-0xf
   \   00004C   EF           MOV       A,R7
   \   00004D   9400         SUBB      A,#0x0
   \   00004F   400A         JC        ??MT_AfIncomingMsg_1
    691            {
    692              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   000051   75..82       MOV       ?V7,#-0x7e
    693            }
    694          
    695            if (cmd == MT_AF_INCOMING_MSG_EXT)
    696            {
    697              respLen += MT_AF_INC_MSG_EXT;
   \   000054   EE           MOV       A,R6
   \   000055   240A         ADD       A,#0xa
   \   000057   FE           MOV       R6,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   FF           MOV       R7,A
    698            }
    699          
    700            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   00005B   C3           CLR       C
   \   00005C   EE           MOV       A,R6
   \   00005D   94FB         SUBB      A,#-0x5
   \   00005F   EF           MOV       A,R7
   \   000060   9400         SUBB      A,#0x0
   \   000062   4034         JC        ??MT_AfIncomingMsg_2
    701            {
    702              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000064                ; Setup parameters for call to function osal_mem_alloc
   \   000064   E5..         MOV       A,?V0
   \   000066   2409         ADD       A,#0x9
   \   000068   FA           MOV       R2,A
   \   000069   E4           CLR       A
   \   00006A   35..         ADDC      A,?V1
   \   00006C   FB           MOV       R3,A
   \   00006D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000070   8A..         MOV       ?V10,R2
   \   000072   8B..         MOV       ?V11,R3
   \   000074   EA           MOV       A,R2
   \   000075   45..         ORL       A,?V11
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    703              {
    704                return;  // If cannot hold a huge message, cannot give indication at all.
    705              }
    706          
    707              pItem->data = (uint8 *)(pItem+1);
   \   00007C   EA           MOV       A,R2
   \   00007D   2409         ADD       A,#0x9
   \   00007F   F8           MOV       R0,A
   \   000080   E4           CLR       A
   \   000081   35..         ADDC      A,?V11
   \   000083   F9           MOV       R1,A
   \   000084   8A82         MOV       DPL,R2
   \   000086   8B83         MOV       DPH,R3
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   E8           MOV       A,R0
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   A3           INC       DPTR
   \   00008D   E9           MOV       A,R1
   \   00008E   F0           MOVX      @DPTR,A
    708              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \   00008F   C3           CLR       C
   \   000090   EE           MOV       A,R6
   \   000091   95..         SUBB      A,?V0
   \   000093   FE           MOV       R6,A
   \   000094   EF           MOV       A,R7
   \   000095   95..         SUBB      A,?V1
   \   000097   FF           MOV       R7,A
    709            }
    710          
    711            // Attempt to allocate memory for the response packet.
    712            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   000098                ; Setup parameters for call to function osal_mem_alloc
   \   000098   EE           MOV       A,R6
   \   000099   FA           MOV       R2,A
   \   00009A   EF           MOV       A,R7
   \   00009B   FB           MOV       R3,A
   \   00009C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009F   8A..         MOV       ?V12,R2
   \   0000A1   8B..         MOV       ?V13,R3
   \   0000A3   EA           MOV       A,R2
   \   0000A4   45..         ORL       A,?V13
   \   0000A6   7010         JNZ       ??MT_AfIncomingMsg_4
    713            {
    714              if (pItem != NULL)
   \   0000A8   E5..         MOV       A,?V10
   \   0000AA   45..         ORL       A,?V11
   \   0000AC   6007         JZ        ??MT_AfIncomingMsg_5
    715              {
    716                (void)osal_mem_free(pItem);
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   AA..         MOV       R2,?V10
   \   0000B0   AB..         MOV       R3,?V11
   \   0000B2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    717              }
    718              return;
   \                     ??MT_AfIncomingMsg_5:
   \   0000B5   02....       LJMP      ??MT_AfIncomingMsg_3 & 0xFFFF
    719            }
    720            pTmp = pRsp;
    721          
    722            /* Group ID */
    723            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_4:
   \   0000B8   E5..         MOV       A,?V8
   \   0000BA   2402         ADD       A,#0x2
   \   0000BC   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   8A82         MOV       DPL,R2
   \   0000C2   8B83         MOV       DPH,R3
   \   0000C4   12....       LCALL     ?Subroutine21 & 0xFFFF
    724            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_112:
   \   0000C7   F0           MOVX      @DPTR,A
    725          
    726            /* Cluster ID */
    727            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \   0000C8   E5..         MOV       A,?V8
   \   0000CA   2404         ADD       A,#0x4
   \   0000CC   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000CF   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000D2   A3           INC       DPTR
   \   0000D3   12....       LCALL     ?Subroutine21 & 0xFFFF
    728            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_113:
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   F0           MOVX      @DPTR,A
    729          
    730            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0000D9   7482         MOV       A,#-0x7e
   \   0000DB   65..         XRL       A,?V7
   \   0000DD   7070         JNZ       ??MT_AfIncomingMsg_6
    731            {
    732              *pTmp++ = pMsg->srcAddr.addrMode;
   \   0000DF   E5..         MOV       A,?V8
   \   0000E1   240E         ADD       A,#0xe
   \   0000E3   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000E6   EA           MOV       A,R2
   \   0000E7   2405         ADD       A,#0x5
   \   0000E9   F5..         MOV       ?V2,A
   \   0000EB   E4           CLR       A
   \   0000EC   35..         ADDC      A,?V13
   \   0000EE   F5..         MOV       ?V3,A
    733          
    734              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   0000F0   8882         MOV       DPL,R0
   \   0000F2   8983         MOV       DPH,R1
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   6403         XRL       A,#0x3
   \   0000F7   7025         JNZ       ??MT_AfIncomingMsg_7
    735              {
    736                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   0000F9                ; Setup parameters for call to function osal_memcpy
   \   0000F9   E5..         MOV       A,?V8
   \   0000FB   2406         ADD       A,#0x6
   \   0000FD   F5..         MOV       ?V4,A
   \   0000FF   E4           CLR       A
   \   000100   35..         ADDC      A,?V9
   \   000102   F5..         MOV       ?V5,A
   \   000104   75..00       MOV       ?V6,#0x0
   \   000107   78..         MOV       R0,#?V4
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010C   7C08         MOV       R4,#0x8
   \   00010E   7D00         MOV       R5,#0x0
   \   000110   AA..         MOV       R2,?V2
   \   000112   AB..         MOV       R3,?V3
   \   000114   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000117   7403         MOV       A,#0x3
   \   000119   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011C   8007         SJMP      ??CrossCallReturnLabel_0
    737              }
    738              else
    739              {
    740                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   00011E   E5..         MOV       A,?V8
   \   000120   2406         ADD       A,#0x6
   \   000122   12....       LCALL     ?Subroutine3 & 0xFFFF
    741                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    742              }
    743              pTmp += Z_EXTADDR_LEN;
    744          
    745              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_0:
   \   000125   E5..         MOV       A,?V8
   \   000127   240F         ADD       A,#0xf
   \   000129   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00012C   A3           INC       DPTR
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   A3           INC       DPTR
   \   000130   F0           MOVX      @DPTR,A
    746          #if defined INTER_PAN
    747              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
   \   000131   E5..         MOV       A,?V8
   \   000133   2410         ADD       A,#0x10
   \   000135   12....       LCALL     ?Subroutine33 & 0xFFFF
    748              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    749          #else
    750              *pTmp++ = 0;
    751              *pTmp++ = 0;
    752          #endif
    753            }
   \                     ??CrossCallReturnLabel_57:
   \   000138   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00013B   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00013E   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000141   A3           INC       DPTR
   \   000142   F0           MOVX      @DPTR,A
   \   000143   E5..         MOV       A,?V2
   \   000145   240B         ADD       A,#0xb
   \   000147   F5..         MOV       ?V2,A
   \   000149   502A         JNC       ??MT_AfIncomingMsg_8
   \   00014B   05..         INC       ?V3
   \   00014D   8026         SJMP      ??MT_AfIncomingMsg_8
    754            else
    755            {
    756              /* Source Address */
    757              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   00014F   E5..         MOV       A,?V8
   \   000151   2406         ADD       A,#0x6
   \   000153   12....       LCALL     ?Subroutine17 & 0xFFFF
    758              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_28:
   \   000156   8882         MOV       DPL,R0
   \   000158   8983         MOV       DPH,R1
   \   00015A   A3           INC       DPTR
   \   00015B   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00015E   F0           MOVX      @DPTR,A
    759          
    760              /* Source EP */
    761              *pTmp++ = pMsg->srcAddr.endPoint;
   \   00015F   E5..         MOV       A,?V8
   \   000161   240F         ADD       A,#0xf
   \   000163   12....       LCALL     ?Subroutine46 & 0xFFFF
    762            }
   \                     ??CrossCallReturnLabel_89:
   \   000166   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000169   A3           INC       DPTR
   \   00016A   F0           MOVX      @DPTR,A
   \   00016B   EA           MOV       A,R2
   \   00016C   2407         ADD       A,#0x7
   \   00016E   F5..         MOV       ?V2,A
   \   000170   E4           CLR       A
   \   000171   35..         ADDC      A,?V13
   \   000173   F5..         MOV       ?V3,A
    763          
    764            /* Destination EP */
    765            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_8:
   \   000175   E5..         MOV       A,?V8
   \   000177   2414         ADD       A,#0x14
   \   000179   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00017C   85..82       MOV       DPL,?V2
   \   00017F   85..83       MOV       DPH,?V3
   \   000182   F0           MOVX      @DPTR,A
    766          
    767            /* WasBroadCast */
    768            *pTmp++ = pMsg->wasBroadcast;
   \   000183   E5..         MOV       A,?V8
   \   000185   2415         ADD       A,#0x15
   \   000187   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00018A   F0           MOVX      @DPTR,A
    769          
    770            /* LinkQuality */
    771            *pTmp++ = pMsg->LinkQuality;
   \   00018B   E5..         MOV       A,?V8
   \   00018D   2416         ADD       A,#0x16
   \   00018F   12....       LCALL     ?Subroutine19 & 0xFFFF
    772          
    773            /* SecurityUse */
    774            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_31:
   \   000192   E5..         MOV       A,?V8
   \   000194   2419         ADD       A,#0x19
   \   000196   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000199   A3           INC       DPTR
   \   00019A   A3           INC       DPTR
   \   00019B   F0           MOVX      @DPTR,A
   \   00019C   E5..         MOV       A,?V2
   \   00019E   2404         ADD       A,#0x4
   \   0001A0   F5..         MOV       ?V2,A
   \   0001A2   5002         JNC       ??MT_AfIncomingMsg_9
   \   0001A4   05..         INC       ?V3
    775          
    776            /* Timestamp */
    777            osal_buffer_uint32( pTmp, pMsg->timestamp );
   \                     ??MT_AfIncomingMsg_9:
   \   0001A6                ; Setup parameters for call to function osal_buffer_uint32
   \   0001A6   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001A9   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0001AC   AA..         MOV       R2,?V2
   \   0001AE   AB..         MOV       R3,?V3
   \   0001B0   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   0001B3   7404         MOV       A,#0x4
   \   0001B5   12....       LCALL     ?DEALLOC_XSTACK8
    778            pTmp += 4;
    779          
    780            /* Data Length */
    781            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   0001B8   7482         MOV       A,#-0x7e
   \   0001BA   65..         XRL       A,?V7
   \   0001BC   7023         JNZ       ??MT_AfIncomingMsg_10
    782            {
    783              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    784               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    785               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    786               */
    787              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   0001BE   85..82       MOV       DPL,?V2
   \   0001C1   85..83       MOV       DPH,?V3
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   A3           INC       DPTR
   \   0001C7   A3           INC       DPTR
   \   0001C8   E4           CLR       A
   \   0001C9   12....       LCALL     ?Subroutine25 & 0xFFFF
    788              *pTmp++ = LO_UINT16(dataLen);
    789              *pTmp++ = HI_UINT16(dataLen);
   \                     ??CrossCallReturnLabel_39:
   \   0001CC   85..82       MOV       DPL,?V2
   \   0001CF   85..83       MOV       DPH,?V3
   \   0001D2   A3           INC       DPTR
   \   0001D3   A3           INC       DPTR
   \   0001D4   A3           INC       DPTR
   \   0001D5   A3           INC       DPTR
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   E5..         MOV       A,?V1
   \   0001DA   F0           MOVX      @DPTR,A
   \   0001DB   E5..         MOV       A,?V2
   \   0001DD   2407         ADD       A,#0x7
   \   0001DF   800E         SJMP      ??MT_AfIncomingMsg_11
    790            }
    791            else
    792            {
    793              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_10:
   \   0001E1   E5..         MOV       A,?V8
   \   0001E3   241F         ADD       A,#0x1f
   \   0001E5   12....       LCALL     ?Subroutine14 & 0xFFFF
    794              *pTmp++ = dataLen;
    795            }
   \                     ??CrossCallReturnLabel_22:
   \   0001E8   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001EB   E5..         MOV       A,?V2
   \   0001ED   2406         ADD       A,#0x6
   \                     ??MT_AfIncomingMsg_11:
   \   0001EF   F5..         MOV       ?V2,A
   \   0001F1   5002         JNC       ??MT_AfIncomingMsg_12
   \   0001F3   05..         INC       ?V3
    796          
    797            /* Data */
    798            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_12:
   \   0001F5   E5..         MOV       A,?V10
   \   0001F7   45..         ORL       A,?V11
   \   0001F9   7003         JNZ       $+5
   \   0001FB   02....       LJMP      ??MT_AfIncomingMsg_13 & 0xFFFF
    799            {
    800              // Enqueue the new huge incoming item.
    801              pItem->next = pMtAfInMsgList;
   \   0001FE   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000201   85..82       MOV       DPL,?V10
   \   000204   85..83       MOV       DPH,?V11
   \   000207   E8           MOV       A,R0
   \   000208   F0           MOVX      @DPTR,A
   \   000209   A3           INC       DPTR
   \   00020A   E9           MOV       A,R1
   \   00020B   F0           MOVX      @DPTR,A
    802              pMtAfInMsgList = pItem;
   \   00020C   90....       MOV       DPTR,#pMtAfInMsgList
   \   00020F   E5..         MOV       A,?V10
   \   000211   F0           MOVX      @DPTR,A
   \   000212   A3           INC       DPTR
   \   000213   E5..         MOV       A,?V11
   \   000215   F0           MOVX      @DPTR,A
    803          
    804              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    805              pItem->tick = MT_AF_EXEC_CNT;
   \   000216   85..82       MOV       DPL,?V10
   \   000219   F583         MOV       DPH,A
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   A3           INC       DPTR
   \   000221   A3           INC       DPTR
   \   000222   A3           INC       DPTR
   \   000223   740F         MOV       A,#0xf
   \   000225   F0           MOVX      @DPTR,A
    806              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000226                ; Setup parameters for call to function osal_start_timerEx
   \   000226   90....       MOV       DPTR,#__Constant_3e8
   \   000229   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00022C   7A08         MOV       R2,#0x8
   \   00022E   7B00         MOV       R3,#0x0
   \   000230   90....       MOV       DPTR,#MT_TaskID
   \   000233   E0           MOVX      A,@DPTR
   \   000234   F9           MOV       R1,A
   \   000235   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000238   7404         MOV       A,#0x4
   \   00023A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00023D   E9           MOV       A,R1
   \   00023E   600C         JZ        ??MT_AfIncomingMsg_14
    807              {
    808                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000240                ; Setup parameters for call to function osal_set_event
   \   000240   7A08         MOV       R2,#0x8
   \   000242   7B00         MOV       R3,#0x0
   \   000244   90....       MOV       DPTR,#MT_TaskID
   \   000247   E0           MOVX      A,@DPTR
   \   000248   F9           MOV       R1,A
   \   000249   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    809              }
    810          
    811              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_14:
   \   00024C   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00024F   12....       LCALL     ?XLOAD_R0123
   \   000252   85..82       MOV       DPL,?V10
   \   000255   85..83       MOV       DPH,?V11
   \   000258   A3           INC       DPTR
   \   000259   A3           INC       DPTR
   \   00025A   A3           INC       DPTR
   \   00025B   A3           INC       DPTR
   \   00025C   12....       LCALL     ?XSTORE_R0123
    812              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   00025F                ; Setup parameters for call to function osal_memcpy
   \   00025F   12....       LCALL     ?Subroutine11 & 0xFFFF
    813            }
   \                     ??CrossCallReturnLabel_17:
   \   000262   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000265   AC..         MOV       R4,?V0
   \   000267   AD..         MOV       R5,?V1
   \   000269   85..82       MOV       DPL,?V10
   \   00026C   85..83       MOV       DPH,?V11
   \   00026F   A3           INC       DPTR
   \   000270   A3           INC       DPTR
   \   000271   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000274   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000277   7403         MOV       A,#0x3
   \   000279   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027C   8022         SJMP      ??MT_AfIncomingMsg_15
    814            else
    815            {
    816              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_13:
   \   00027E                ; Setup parameters for call to function osal_memcpy
   \   00027E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000281   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000284   AC..         MOV       R4,?V0
   \   000286   AD..         MOV       R5,?V1
   \   000288   AA..         MOV       R2,?V2
   \   00028A   AB..         MOV       R3,?V3
   \   00028C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00028F   7403         MOV       A,#0x3
   \   000291   12....       LCALL     ?DEALLOC_XSTACK8
    817              pTmp += dataLen;
   \   000294   E5..         MOV       A,?V2
   \   000296   25..         ADD       A,?V0
   \   000298   F5..         MOV       ?V2,A
   \   00029A   E5..         MOV       A,?V3
   \   00029C   35..         ADDC      A,?V1
   \   00029E   F5..         MOV       ?V3,A
    818            }
    819          
    820            // MAC Source address
    821            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_15:
   \   0002A0   E5..         MOV       A,?V8
   \   0002A2   2424         ADD       A,#0x24
   \   0002A4   12....       LCALL     ?Subroutine3 & 0xFFFF
    822            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
    823          
    824            // messages result radius
    825            *pTmp = pMsg->radius;
   \                     ??CrossCallReturnLabel_1:
   \   0002A7   E5..         MOV       A,?V8
   \   0002A9   2426         ADD       A,#0x26
   \   0002AB   12....       LCALL     ?Subroutine19 & 0xFFFF
    826          
    827            /* Build and send back the response */
    828            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \                     ??CrossCallReturnLabel_32:
   \   0002AE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002AE   AC..         MOV       R4,?V12
   \   0002B0   AD..         MOV       R5,?V13
   \   0002B2   EE           MOV       A,R6
   \   0002B3   FB           MOV       R3,A
   \   0002B4   AA..         MOV       R2,?V7
   \   0002B6   7944         MOV       R1,#0x44
   \   0002B8   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    829          
    830            (void)osal_mem_free(pRsp);
   \   0002BB                ; Setup parameters for call to function osal_mem_free
   \   0002BB   AA..         MOV       R2,?V12
   \   0002BD   AB..         MOV       R3,?V13
   \   0002BF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    831          }
   \                     ??MT_AfIncomingMsg_3:
   \   0002C2   7F0E         MOV       R7,#0xe
   \   0002C4   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E5..         MOV       A,?V8
   \   000002   241A         ADD       A,#0x1a
   \   000004   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   35..         ADDC      A,?V9
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E5..         MOV       A,?V0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V9
   \   000005   F583         MOV       DPH,A
   \   000007                REQUIRE ??Subroutine51_0
   \   000007                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E5..         MOV       A,?V8
   \   000002   2422         ADD       A,#0x22
   \   000004   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F5..         MOV       ?V4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V5,A
   \   00000E   75..00       MOV       ?V6,#0x0
   \   000011   78..         MOV       R0,#?V4
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   85..82       MOV       DPL,?V2
   \   000007   85..83       MOV       DPH,?V3
   \   00000A   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00000D   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    832          
    833          /**************************************************************************************************
    834           * @fn          MT_AfDataRetrieve
    835           *
    836           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    837           *          incoming AF message.
    838           *
    839           * input parameters
    840           *
    841           * @param pBuf - pointer to the received buffer
    842           *
    843           * output parameters
    844           *
    845           * @param rtrn - AF-Status of the operation.
    846           *
    847           * @return      None.
    848           **************************************************************************************************
    849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    850          static void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    851          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    852            #define MT_AF_RTV_HDR_SZ  2
    853          
    854            uint32 timestamp;
    855            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \   000009   90....       MOV       DPTR,#pMtAfInMsgList
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F5..         MOV       ?V2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V3,A
    856            uint8 rtrn = afStatus_FAILED;
   \   000013   75..01       MOV       ?V1,#0x1
    857            uint8 len = 0;
   \   000016   75..00       MOV       ?V0,#0x0
    858          
    859            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000019   EE           MOV       A,R6
   \   00001A   2403         ADD       A,#0x3
   \   00001C   FE           MOV       R6,A
   \   00001D   5001         JNC       ??MT_AfDataRetrieve_0
   \   00001F   0F           INC       R7
    860            timestamp = osal_build_uint32( pBuf, 4 );
   \                     ??MT_AfDataRetrieve_0:
   \   000020                ; Setup parameters for call to function osal_build_uint32
   \   000020   7904         MOV       R1,#0x4
   \   000022   FA           MOV       R2,A
   \   000023   EF           MOV       A,R7
   \   000024   FB           MOV       R3,A
   \   000025   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000028   8A..         MOV       ?V4,R2
   \   00002A   8B..         MOV       ?V5,R3
   \   00002C   8C..         MOV       ?V6,R4
   \   00002E   8D..         MOV       ?V7,R5
   \   000030   800D         SJMP      ??MT_AfDataRetrieve_1
    861          
    862            while (pItem != NULL)
    863            {
    864              pPrev = pItem;
    865              if (pItem->timestamp == timestamp)
    866              {
    867                break;
    868              }
    869              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_2:
   \   000032   85..82       MOV       DPL,?V2
   \   000035   85..83       MOV       DPH,?V3
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F5..         MOV       ?V2,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F5..         MOV       ?V3,A
   \                     ??MT_AfDataRetrieve_1:
   \   00003F   E5..         MOV       A,?V2
   \   000041   45..         ORL       A,?V3
   \   000043   6063         JZ        ??MT_AfDataRetrieve_3
   \   000045   85....       MOV       ?V8,?V2
   \   000048   85....       MOV       ?V9,?V3
   \   00004B   85..82       MOV       DPL,?V2
   \   00004E   85..83       MOV       DPH,?V3
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   78..         MOV       R0,#?V4
   \   000057   12....       LCALL     ?L_EQ_X
   \   00005A   70D6         JNZ       ??MT_AfDataRetrieve_2
    870            }
    871          
    872            if (pItem != NULL)
    873            {
    874              uint16 idx;
    875              uint8 *pRsp;
    876          
    877              pBuf += 4;
   \   00005C   EE           MOV       A,R6
   \   00005D   2404         ADD       A,#0x4
   \   00005F   FE           MOV       R6,A
   \   000060   5001         JNC       ??MT_AfDataRetrieve_4
   \   000062   0F           INC       R7
    878              idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataRetrieve_4:
   \   000063                ; Setup parameters for call to function osal_build_uint16
   \   000063   FA           MOV       R2,A
   \   000064   EF           MOV       A,R7
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000069   8A..         MOV       ?V6,R2
   \   00006B   8B..         MOV       ?V7,R3
    879              len = pBuf[2];
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F5..         MOV       ?V0,A
    880          
    881              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   000076   704D         JNZ       ??MT_AfDataRetrieve_5
    882              {
    883                if (pMtAfInMsgList == pItem)
   \   000078   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00007B   E5..         MOV       A,?V2
   \   00007D   68           XRL       A,R0
   \   00007E   7003         JNZ       ??MT_AfDataRetrieve_6
   \   000080   E5..         MOV       A,?V3
   \   000082   69           XRL       A,R1
   \                     ??MT_AfDataRetrieve_6:
   \   000083   85..82       MOV       DPL,?V2
   \   000086   85..83       MOV       DPH,?V3
   \   000089   7005         JNZ       ??MT_AfDataRetrieve_7
    884                {
    885                  pMtAfInMsgList = pItem->next;
   \   00008B   12....       LCALL     ?Subroutine22 & 0xFFFF
    886                }
   \                     ??CrossCallReturnLabel_36:
   \   00008E   8009         SJMP      ??MT_AfDataRetrieve_8
    887                else
    888                {
    889                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_7:
   \   000090   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    890                }
   \                     ??CrossCallReturnLabel_121:
   \   000093   85..82       MOV       DPL,?V8
   \   000096   85..83       MOV       DPH,?V9
   \                     ??MT_AfDataRetrieve_8:
   \   000099   E8           MOV       A,R0
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   E9           MOV       A,R1
   \   00009D   F0           MOVX      @DPTR,A
    891                (void)osal_mem_free(pItem);
   \   00009E                ; Setup parameters for call to function osal_mem_free
   \   00009E   AA..         MOV       R2,?V2
   \   0000A0   AB..         MOV       R3,?V3
   \   0000A2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    892                rtrn = afStatus_SUCCESS;
   \   0000A5   75..00       MOV       ?V1,#0x0
    893              }
    894              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    895              {
    896                rtrn = afStatus_MEM_FAIL;
    897                len = 0;
    898              }
    899              else
    900              {
    901                pRsp[0] = ZSuccess;
    902                pRsp[1] = len;
    903                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    904                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    905                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    906                (void)osal_mem_free(pRsp);
    907                return;
    908              }
    909            }
    910          
    911            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_3:
   \   0000A8   8E82         MOV       DPL,R6
   \   0000AA   8F83         MOV       DPH,R7
   \   0000AC   E5..         MOV       A,?V1
   \   0000AE   F0           MOVX      @DPTR,A
    912            pBuf[1] = len;
   \   0000AF   A3           INC       DPTR
   \   0000B0   E5..         MOV       A,?V0
   \   0000B2   F0           MOVX      @DPTR,A
    913            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    914                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   0000B3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B3   EE           MOV       A,R6
   \   0000B4   FC           MOV       R4,A
   \   0000B5   EF           MOV       A,R7
   \   0000B6   FD           MOV       R5,A
   \   0000B7   7B02         MOV       R3,#0x2
   \   0000B9   7A12         MOV       R2,#0x12
   \   0000BB   7964         MOV       R1,#0x64
   \   0000BD   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    915          }
   \                     ??MT_AfDataRetrieve_9:
   \   0000C0   7F0B         MOV       R7,#0xb
   \   0000C2   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MT_AfDataRetrieve_5:
   \   0000C5                ; Setup parameters for call to function osal_mem_alloc
   \   0000C5   2402         ADD       A,#0x2
   \   0000C7   FA           MOV       R2,A
   \   0000C8   E4           CLR       A
   \   0000C9   3400         ADDC      A,#0x0
   \   0000CB   FB           MOV       R3,A
   \   0000CC   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CF   8A..         MOV       ?V4,R2
   \   0000D1   8B..         MOV       ?V5,R3
   \   0000D3   EA           MOV       A,R2
   \   0000D4   45..         ORL       A,?V5
   \   0000D6   7008         JNZ       ??MT_AfDataRetrieve_10
   \   0000D8   75..10       MOV       ?V1,#0x10
   \   0000DB   75..00       MOV       ?V0,#0x0
   \   0000DE   80C8         SJMP      ??MT_AfDataRetrieve_3
   \                     ??MT_AfDataRetrieve_10:
   \   0000E0   8A82         MOV       DPL,R2
   \   0000E2   8B83         MOV       DPH,R3
   \   0000E4   E4           CLR       A
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   E5..         MOV       A,?V0
   \   0000E9   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   25..         ADD       A,?V6
   \   0000EF   F5..         MOV       ?V8,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   35..         ADDC      A,?V7
   \   0000F5   F5..         MOV       ?V9,A
   \   0000F7   75..00       MOV       ?V10,#0x0
   \   0000FA   78..         MOV       R0,#?V8
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FF   AC..         MOV       R4,?V0
   \   000101   7D00         MOV       R5,#0x0
   \   000103   EA           MOV       A,R2
   \   000104   2402         ADD       A,#0x2
   \   000106   FA           MOV       R2,A
   \   000107   E4           CLR       A
   \   000108   35..         ADDC      A,?V5
   \   00010A   FB           MOV       R3,A
   \   00010B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010E   7403         MOV       A,#0x3
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   \   000113                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000113   AC..         MOV       R4,?V4
   \   000115   AD..         MOV       R5,?V5
   \   000117   7402         MOV       A,#0x2
   \   000119   25..         ADD       A,?V0
   \   00011B   FB           MOV       R3,A
   \   00011C   7A12         MOV       R2,#0x12
   \   00011E   7964         MOV       R1,#0x64
   \   000120   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   AA..         MOV       R2,?V4
   \   000125   AB..         MOV       R3,?V5
   \   000127   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012A   8094         SJMP      ??MT_AfDataRetrieve_9
    916          
    917          /**************************************************************************************************
    918           * @fn          MT_AfDataStore
    919           *
    920           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    921           *          outgoing AF message.
    922           *
    923           * input parameters
    924           *
    925           * @param pBuf - pointer to the received buffer
    926           *
    927           * output parameters
    928           *
    929           * @param rtrn - AF-Status of the operation.
    930           *
    931           * @return      None.
    932           **************************************************************************************************
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          static void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    935          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    936            uint16 idx;
    937            uint8 len, rtrn = afStatus_FAILED;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
    938          
    939            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV       A,R6
   \   000018   2403         ADD       A,#0x3
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??MT_AfDataStore_0
   \   00001D   0F           INC       R7
    940            idx = osal_build_uint16( pBuf );
   \                     ??MT_AfDataStore_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint16
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000024   8A..         MOV       ?V4,R2
   \   000026   8B..         MOV       ?V5,R3
    941            len = pBuf[2];
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FA           MOV       R2,A
    942            pBuf += 3;
   \   000030   EE           MOV       A,R6
   \   000031   2403         ADD       A,#0x3
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??MT_AfDataStore_1
   \   000036   0F           INC       R7
    943          
    944            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   000037   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00003A   700B         JNZ       ??MT_AfDataStore_2
    945            {
    946              rtrn = afStatus_MEM_FAIL;
   \   00003C   85..82       MOV       DPL,?XSP + 0
   \   00003F   85..83       MOV       DPH,?XSP + 1
   \   000042   7410         MOV       A,#0x10
   \   000044   02....       LJMP      ??MT_AfDataStore_3 & 0xFFFF
    947            }
    948            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000047   EA           MOV       A,R2
   \   000048   7061         JNZ       ??MT_AfDataStore_4
    949            {
    950              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    951                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    952                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00004A                ; Setup parameters for call to function AF_DataRequest
   \   00004A   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F5..         MOV       ?V0,A
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000055   90....       MOV       DPTR,#pMtAfDataReq
   \   000058   E0           MOVX      A,@DPTR
   \   000059   2414         ADD       A,#0x14
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   3400         ADDC      A,#0x0
   \   000061   F5..         MOV       ?V1,A
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00006B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00006E   90....       MOV       DPTR,#pMtAfDataReq + 1
   \   000071   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000074   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000077   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00007A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00007D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F9           MOV       R1,A
   \   000082   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000085   E0           MOVX      A,@DPTR
   \   000086   FC           MOV       R4,A
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FD           MOV       R5,A
   \   00008A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00008D   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000090   7409         MOV       A,#0x9
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   E9           MOV       A,R1
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   F0           MOVX      @DPTR,A
    953              (void)osal_mem_free(pMtAfDataReq);
   \   00009D                ; Setup parameters for call to function osal_mem_free
   \   00009D   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000A0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    954              pMtAfDataReq = NULL;
   \   0000A3   90....       MOV       DPTR,#pMtAfDataReq
   \   0000A6   E4           CLR       A
   \   0000A7   F0           MOVX      @DPTR,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   802B         SJMP      ??MT_AfDataStore_3
    955            }
    956            else
    957            {
    958              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000AB                ; Setup parameters for call to function osal_memcpy
   \   0000AB   8E..         MOV       ?V0,R6
   \   0000AD   8F..         MOV       ?V1,R7
   \   0000AF   75..00       MOV       ?V2,#0x0
   \   0000B2   78..         MOV       R0,#?V0
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B7   EA           MOV       A,R2
   \   0000B8   FC           MOV       R4,A
   \   0000B9   7D00         MOV       R5,#0x0
   \   0000BB   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   25..         ADD       A,?V4
   \   0000C1   FA           MOV       R2,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   35..         ADDC      A,?V5
   \   0000C6   FB           MOV       R3,A
   \   0000C7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CA   7403         MOV       A,#0x3
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
    959              rtrn = afStatus_SUCCESS;
   \   0000CF   85..82       MOV       DPL,?XSP + 0
   \   0000D2   85..83       MOV       DPH,?XSP + 1
   \   0000D5   E4           CLR       A
    960            }
   \                     ??MT_AfDataStore_3:
   \   0000D6   12....       LCALL     ?Subroutine30 & 0xFFFF
    961          
    962            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    963                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??CrossCallReturnLabel_50:
   \   0000D9   7B01         MOV       R3,#0x1
   \   0000DB   7A11         MOV       R2,#0x11
   \   0000DD   7964         MOV       R1,#0x64
   \   0000DF   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    964          }
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7410         MOV       A,#0x10
   \   000008   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00000B   F5..         MOV       ?V1,A
   \   00000D   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfExec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRetrieve::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    965          
    966          /**************************************************************************************************
    967           * @fn          MT_AfAPSF_ConfigSet
    968           *
    969           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    970           *
    971           * input parameters
    972           *
    973           * @param       pBuf - Pointer to the received buffer.
    974           *
    975           * output parameters
    976           *
    977           * None.
    978           *
    979           * @return      None.
    980           */
    981          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    982          {
    983            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    984            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    985          
    986            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    987                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    988          }
    989          
    990          /**************************************************************************************************
    991           * @fn          MT_AfAPSF_ConfigGet
    992           *
    993           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
    994           *
    995           * input parameters
    996           *
    997           * @param       pBuf - Pointer to the received buffer.
    998           *
    999           * output parameters
   1000           *
   1001           * None.
   1002           *
   1003           * @return      None.
   1004           */
   1005          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   1006          {
   1007            afAPSF_Config_t cfg = { 0, 0 };
   1008            uint8 buf[2];
   1009          
   1010            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   1011          
   1012            buf[0] = cfg.frameDelay;
   1013            buf[1] = cfg.windowSize;
   1014          
   1015            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1016                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   1017          }
   1018          
   1019          /***************************************************************************************************
   1020          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     20   MT_AfCommandProcessing
        0     20   -> MT_AfDataRequest
        0     20   -> MT_AfDataRequestSrcRtg
        0     20   -> MT_AfDataRetrieve
        0     20   -> MT_AfDataStore
        0     20   -> MT_BuildAndSendZToolResponse
        0     20   -> MT_BuildEndpointDesc
        0     20   -> StubAPS_InterPan
        0     20   -> StubAPS_RegisterApp
        0     20   -> StubAPS_SetInterPanChannel
        0     20   -> StubAPS_SetIntraPanChannel
        0     20   -> afAPSF_ConfigGet
        0     20   -> afAPSF_ConfigSet
        0     20   -> afDelete
        0     20   -> afFindEndPointDesc
        0     20   -> afRegister
        0     20   -> osal_build_uint16
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     64   MT_AfDataRequest
        0     44   -> AF_DataRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     35   -> afFindEndPointDesc
        0     35   -> osal_build_uint16
        0     35   -> osal_mem_alloc
        0     38   -> osal_memcpy
        0     35   -> osal_set_event
        0     39   -> osal_start_timerEx
      1     66   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_build_uint16
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     42   MT_AfDataRetrieve
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_build_uint16
        0     19   -> osal_build_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     44   MT_AfDataStore
        0     24   -> AF_DataRequest
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_build_uint16
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      0     13   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0     13   -> osal_start_timerEx
      1     26   MT_AfIncomingMsg
        0     22   -> MT_BuildAndSendZToolResponse
        0     22   -> StubAPS_InterPan
        0     26   -> osal_buffer_uint32
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     22   -> osal_set_event
        0     26   -> osal_start_timerEx
      3      6   MT_AfReflectError
        2      6   -> MT_BuildAndSendZToolResponse


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       4  ??Subroutine49_0
       8  ??Subroutine50_0
       4  ??Subroutine51_0
       7  ??Subroutine52_0
       6  ??Subroutine53_0
       6  ??Subroutine54_0
       8  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine10
      20  ?Subroutine11
       3  ?Subroutine12
      15  ?Subroutine13
       7  ?Subroutine14
      11  ?Subroutine15
      11  ?Subroutine16
       8  ?Subroutine17
       5  ?Subroutine18
       6  ?Subroutine19
       3  ?Subroutine2
      13  ?Subroutine20
       3  ?Subroutine21
       9  ?Subroutine22
       3  ?Subroutine23
       4  ?Subroutine24
      10  ?Subroutine25
       8  ?Subroutine26
      14  ?Subroutine27
       7  ?Subroutine28
      12  ?Subroutine29
      18  ?Subroutine3
       6  ?Subroutine30
       5  ?Subroutine31
      10  ?Subroutine32
       4  ?Subroutine33
       5  ?Subroutine34
       8  ?Subroutine35
       9  ?Subroutine36
       7  ?Subroutine37
       7  ?Subroutine38
      10  ?Subroutine39
       9  ?Subroutine4
       7  ?Subroutine40
      10  ?Subroutine41
       6  ?Subroutine42
       9  ?Subroutine43
       9  ?Subroutine44
      10  ?Subroutine45
       8  ?Subroutine46
       9  ?Subroutine47
       7  ?Subroutine48
      21  ?Subroutine5
       8  ?Subroutine6
      12  ?Subroutine7
      12  ?Subroutine8
      12  ?Subroutine9
     540  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      47  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     676  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     356  MT_AfDataRequestSrcRtg
       6  MT_AfDataRequestSrcRtg::?relay
     300  MT_AfDataRetrieve
       6  MT_AfDataRetrieve::?relay
     231  MT_AfDataStore
       6  MT_AfDataStore::?relay
     175  MT_AfExec
       6  MT_AfExec::?relay
     711  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
      98  MT_AfReflectError
       6  MT_AfReflectError::?relay
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 3 609 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
     2 bytes of CONST    memory (+ 4 bytes shared)
 3 609 bytes of HUGECODE memory
     4 bytes of XDATA    memory

Errors: none
Warnings: none
