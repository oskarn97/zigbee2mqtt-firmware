###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  22:13:32
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EWB229.tmp ("C:\Texas
#        Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c" -D
#        FEATURE_SYSTEM_STATS -D CC2531ZNP -D POWER_SAVING -D ASSERT_RESET -D
#        FAKE_CRC_SHDW -D xTC_LINKKEY_JOIN -lC "C:\Texas Instruments\Z-Stack
#        Home 1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DTC_LINKKEY_JOIN -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
#        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
#        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\cc2531\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\class_cdc\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List\MT_ZDO.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\Obj\MT_ZDO.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
      4            Revision:       $Revision: 42371 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          #ifdef MT_ZDO_FUNC
     40          
     41          /**************************************************************************************************
     42           * INCLUDES
     43           **************************************************************************************************/
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Nv.h"
     47          #include "MT.h"
     48          #include "MT_ZDO.h"
     49          #include "AddrMgr.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          
     58          #if defined ( MT_ZDO_EXTENSIONS )
     59            #include "rtg.h"
     60          #endif
     61          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     62            #include "ZDSecMgr.h"
     63          #endif
     64          
     65          #include "nwk_util.h"
     66          
     67          /**************************************************************************************************
     68           * CONSTANTS
     69           **************************************************************************************************/
     70          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     71          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     72          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     73          #define MT_ZDO_BEACON_IND_LEN             21
     74          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     75          #define MT_ZDO_JOIN_CNF_LEN               5
     76          
     77          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     78          // sizeof(zdoConcentratorInd_t) is not usable.
     79          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     80          
     81          #define MTZDO_RESPONSE_BUFFER_LEN   100
     82          
     83          #define MTZDO_MAX_MATCH_CLUSTERS    16
     84          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     85          
     86          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     87          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     88          
     89          #define MT_ZDO_STATUS_LEN   1
     90          
     91          #if defined ( MT_ZDO_EXTENSIONS )
     92          typedef struct
     93          {
     94            uint16            ami;
     95            uint16            keyNvId;   // index to the Link Key table in NV
     96            ZDSecMgr_Authentication_Option authenticateOption;
     97          } ZDSecMgrEntry_t;
     98          #endif  // MT_ZDO_EXTENSIONS
     99          
    100          /**************************************************************************************************
    101           * GLOBAL VARIABLES
    102           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /**************************************************************************************************
    107           * LOCAL VARIABLES
    108           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          bool ignoreIndication = FALSE;
   \                     ignoreIndication:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          
    111          /**************************************************************************************************
    112           * LOCAL FUNCTIONS
    113           **************************************************************************************************/
    114          #if defined (MT_ZDO_FUNC)
    115          static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    116          static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    117          static void MT_ZdoNodeDescRequest(uint8 *pBuf);
    118          static void MT_ZdoPowerDescRequest(uint8 *pBuf);
    119          static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    120          static void MT_ZdoActiveEpRequest(uint8 *pBuf);
    121          static void MT_ZdoMatchDescRequest(uint8 *pBuf);
    122          static void MT_ZdoComplexDescRequest(uint8 *pBuf);
    123          static void MT_ZdoUserDescRequest(uint8 *pBuf);
    124          static void MT_ZdoEndDevAnnce(uint8 *pBuf);
    125          static void MT_ZdoUserDescSet(uint8 *pBuf);
    126          static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    127          static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    128          static void MT_ZdoBindRequest(uint8 *pBuf);
    129          static void MT_ZdoUnbindRequest(uint8 *pBuf);
    130          #if defined ( MT_SYS_KEY_MANAGEMENT )
    131          static void MT_ZdoSetLinkKey(uint8 *pBuf);
    132          static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    133          static void MT_ZdoGetLinkKey(uint8 *pBuf);
    134          #endif /* MT_SYS_KEY_MANAGEMENT */
    135          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    136          static void MT_ZdoJoinReq(uint8 *pBuf);
    137          /* Call back function */
    138          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    139          void *MT_ZdoBeaconIndCB ( void *pStr );
    140          void *MT_ZdoJoinCnfCB ( void *pStr );
    141          #if defined (MT_ZDO_MGMT)
    142          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    143          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    144          static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    145          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    146          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    147          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    148          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    149          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    150          #endif /* MT_ZDO_MGMT */
    151          static void MT_ZdoSendData( uint8 *pBuf );
    152          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    153          static void MT_ZdoStartupFromApp(uint8 *pBuf);
    154          static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    155          static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    156          static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
    157          #endif /* MT_ZDO_FUNC */
    158          
    159          #if defined (MT_ZDO_CB_FUNC)
    160          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    161          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    162          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    163          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    164          void* MT_ZdoSrcRtgCB( void *pStr );
    165          static void *MT_ZdoConcentratorIndCB(void *pStr);
    166          static void *MT_ZdoLeaveInd(void *vPtr);
    167          void *MT_ZdoTcDeviceInd( void *params );
    168          void *MT_ZdoPermitJoinInd( void *duration );
    169          #endif /* MT_ZDO_CB_FUNC */
    170          
    171          #if defined ( MT_ZDO_EXTENSIONS )
    172          #if ( ZG_BUILD_COORDINATOR_TYPE )
    173          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    174          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    175          #endif // ZDO_COORDINATOR
    176          static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    177          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    178          static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    179          static void MT_ZdoExtRouteDisc( uint8 *pBuf );
    180          static void MT_ZdoExtRouteCheck( uint8 *pBuf );
    181          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    183          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    184          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    185          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    186          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    187          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    188          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    189          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    190          static void MT_ZdoExtSetParams( uint8 *pBuf );
    191          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    192          #endif // MT_ZDO_EXTENSIONS
    193          
    194          #if defined (MT_ZDO_FUNC)
    195          /***************************************************************************************************
    196           * @fn      MT_ZdoInit
    197           *
    198           * @brief   MT ZDO initialization
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    205          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    206          #ifdef MT_ZDO_CB_FUNC
    207            /* Register with ZDO for indication callbacks */
    208            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000004   7A..         MOV       R2,#`??MT_ZdoSrcRtgCB::?relay` & 0xff
   \   000006   7B..         MOV       R3,#(`??MT_ZdoSrcRtgCB::?relay` >> 8) & 0xff
   \   000008   7900         MOV       R1,#0x0
   \   00000A   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    209            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
   \   00000D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00000D   7A..         MOV       R2,#`??MT_ZdoConcentratorIndCB::?relay` & 0xff
   \   00000F   7B..         MOV       R3,#(`??MT_ZdoConcentratorIndCB::?relay` >> 8) & 0xff
   \   000011   7901         MOV       R1,#0x1
   \   000013   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    210            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
   \   000016                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000016   7A..         MOV       R2,#`??MT_ZdoLeaveInd::?relay` & 0xff
   \   000018   7B..         MOV       R3,#(`??MT_ZdoLeaveInd::?relay` >> 8) & 0xff
   \   00001A   7906         MOV       R1,#0x6
   \   00001C   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    211            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00001F   7A..         MOV       R2,#`??MT_ZdoPermitJoinInd::?relay` & 0xff
   \   000021   7B..         MOV       R3,#(`??MT_ZdoPermitJoinInd::?relay` >> 8) & 0xff
   \   000023   7907         MOV       R1,#0x7
   \   000025   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    212            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000028   7A..         MOV       R2,#`??MT_ZdoTcDeviceInd::?relay` & 0xff
   \   00002A   7B..         MOV       R3,#(`??MT_ZdoTcDeviceInd::?relay` >> 8) & 0xff
   \   00002C   7908         MOV       R1,#0x8
   \   00002E   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    213          #endif
    214          }
   \   000031                REQUIRE ?Subroutine0
   \   000031                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    215          
    216          /***************************************************************************************************
    217           * @fn      MT_ZdoCommandProcessing
    218           *
    219           * @brief
    220           *
    221           *   Process all the ZDO commands that are issued by test tool
    222           *
    223           * @param   pBuf - pointer to the msg buffer
    224           *
    225           *          | LEN  | CMD0  | CMD1  |  DATA  |
    226           *          |  1   |   1   |   1   |  0-255 |
    227           *
    228           * @return  status
    229           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    231          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV       A,#-0x36
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    232            uint8 status = MT_RPC_SUCCESS;
   \   00000A   7E00         MOV       R6,#0x0
    233          
    234            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??MT_ZdoCommandProcessing_0 & 0xFFFF
   \   000018   14           DEC       A
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??MT_ZdoCommandProcessing_1 & 0xFFFF
   \   00001E   14           DEC       A
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??MT_ZdoCommandProcessing_2 & 0xFFFF
   \   000024   14           DEC       A
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??MT_ZdoCommandProcessing_3 & 0xFFFF
   \   00002A   14           DEC       A
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??MT_ZdoCommandProcessing_4 & 0xFFFF
   \   000030   14           DEC       A
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??MT_ZdoCommandProcessing_5 & 0xFFFF
   \   000036   14           DEC       A
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??MT_ZdoCommandProcessing_6 & 0xFFFF
   \   00003C   14           DEC       A
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??MT_ZdoCommandProcessing_7 & 0xFFFF
   \   000042   14           DEC       A
   \   000043   7003         JNZ       $+5
   \   000045   02....       LJMP      ??MT_ZdoCommandProcessing_8 & 0xFFFF
   \   000048   24FE         ADD       A,#-0x2
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??MT_ZdoCommandProcessing_9 & 0xFFFF
   \   00004F   14           DEC       A
   \   000050   7003         JNZ       $+5
   \   000052   02....       LJMP      ??MT_ZdoCommandProcessing_10 & 0xFFFF
   \   000055   14           DEC       A
   \   000056   7003         JNZ       $+5
   \   000058   02....       LJMP      ??MT_ZdoCommandProcessing_11 & 0xFFFF
   \   00005B   24EC         ADD       A,#-0x14
   \   00005D   7003         JNZ       $+5
   \   00005F   02....       LJMP      ??MT_ZdoCommandProcessing_12 & 0xFFFF
   \   000062   14           DEC       A
   \   000063   7003         JNZ       $+5
   \   000065   02....       LJMP      ??MT_ZdoCommandProcessing_13 & 0xFFFF
   \   000068   14           DEC       A
   \   000069   7003         JNZ       $+5
   \   00006B   02....       LJMP      ??MT_ZdoCommandProcessing_14 & 0xFFFF
   \   00006E   24FC         ADD       A,#-0x4
   \   000070   7003         JNZ       $+5
   \   000072   02....       LJMP      ??MT_ZdoCommandProcessing_15 & 0xFFFF
   \   000075   14           DEC       A
   \   000076   7003         JNZ       $+5
   \   000078   02....       LJMP      ??MT_ZdoCommandProcessing_16 & 0xFFFF
   \   00007B   14           DEC       A
   \   00007C   7003         JNZ       $+5
   \   00007E   02....       LJMP      ??MT_ZdoCommandProcessing_17 & 0xFFFF
   \   000081   14           DEC       A
   \   000082   7003         JNZ       $+5
   \   000084   02....       LJMP      ??MT_ZdoCommandProcessing_18 & 0xFFFF
   \   000087   24F9         ADD       A,#-0x7
   \   000089   7003         JNZ       $+5
   \   00008B   02....       LJMP      ??MT_ZdoCommandProcessing_19 & 0xFFFF
   \   00008E   14           DEC       A
   \   00008F   7003         JNZ       $+5
   \   000091   02....       LJMP      ??MT_ZdoCommandProcessing_20 & 0xFFFF
   \   000094   14           DEC       A
   \   000095   7003         JNZ       $+5
   \   000097   02....       LJMP      ??MT_ZdoCommandProcessing_21 & 0xFFFF
   \   00009A   14           DEC       A
   \   00009B   7003         JNZ       $+5
   \   00009D   02....       LJMP      ??MT_ZdoCommandProcessing_22 & 0xFFFF
   \   0000A0   14           DEC       A
   \   0000A1   7003         JNZ       $+5
   \   0000A3   02....       LJMP      ??MT_ZdoCommandProcessing_23 & 0xFFFF
   \   0000A6   14           DEC       A
   \   0000A7   7003         JNZ       $+5
   \   0000A9   02....       LJMP      ??MT_ZdoCommandProcessing_24 & 0xFFFF
   \   0000AC   14           DEC       A
   \   0000AD   7003         JNZ       $+5
   \   0000AF   02....       LJMP      ??MT_ZdoCommandProcessing_25 & 0xFFFF
   \   0000B2   14           DEC       A
   \   0000B3   7003         JNZ       $+5
   \   0000B5   02....       LJMP      ??MT_ZdoCommandProcessing_26 & 0xFFFF
   \   0000B8   24F9         ADD       A,#-0x7
   \   0000BA   7003         JNZ       $+5
   \   0000BC   02....       LJMP      ??MT_ZdoCommandProcessing_27 & 0xFFFF
   \   0000BF   14           DEC       A
   \   0000C0   7003         JNZ       $+5
   \   0000C2   02....       LJMP      ??MT_ZdoCommandProcessing_28 & 0xFFFF
   \   0000C5   14           DEC       A
   \   0000C6   7003         JNZ       $+5
   \   0000C8   02....       LJMP      ??MT_ZdoCommandProcessing_29 & 0xFFFF
   \   0000CB   24FE         ADD       A,#-0x2
   \   0000CD   7003         JNZ       $+5
   \   0000CF   02....       LJMP      ??MT_ZdoCommandProcessing_30 & 0xFFFF
   \   0000D2   14           DEC       A
   \   0000D3   7003         JNZ       $+5
   \   0000D5   02....       LJMP      ??MT_ZdoCommandProcessing_31 & 0xFFFF
   \   0000D8   14           DEC       A
   \   0000D9   7003         JNZ       $+5
   \   0000DB   02....       LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
   \   0000DE   14           DEC       A
   \   0000DF   7003         JNZ       $+5
   \   0000E1   02....       LJMP      ??MT_ZdoCommandProcessing_33 & 0xFFFF
   \   0000E4   14           DEC       A
   \   0000E5   7003         JNZ       $+5
   \   0000E7   02....       LJMP      ??MT_ZdoCommandProcessing_34 & 0xFFFF
   \   0000EA   14           DEC       A
   \   0000EB   7003         JNZ       $+5
   \   0000ED   02....       LJMP      ??MT_ZdoCommandProcessing_35 & 0xFFFF
   \   0000F0   14           DEC       A
   \   0000F1   7003         JNZ       $+5
   \   0000F3   02....       LJMP      ??MT_ZdoCommandProcessing_36 & 0xFFFF
   \   0000F6   14           DEC       A
   \   0000F7   7003         JNZ       $+5
   \   0000F9   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
   \   0000FC   14           DEC       A
   \   0000FD   7003         JNZ       $+5
   \   0000FF   02....       LJMP      ??MT_ZdoCommandProcessing_38 & 0xFFFF
   \   000102   14           DEC       A
   \   000103   7003         JNZ       $+5
   \   000105   02....       LJMP      ??MT_ZdoCommandProcessing_39 & 0xFFFF
   \   000108   14           DEC       A
   \   000109   7003         JNZ       $+5
   \   00010B   02....       LJMP      ??MT_ZdoCommandProcessing_40 & 0xFFFF
   \   00010E   14           DEC       A
   \   00010F   7003         JNZ       $+5
   \   000111   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
   \   000114   14           DEC       A
   \   000115   7003         JNZ       $+5
   \   000117   02....       LJMP      ??MT_ZdoCommandProcessing_42 & 0xFFFF
   \   00011A   14           DEC       A
   \   00011B   7003         JNZ       $+5
   \   00011D   02....       LJMP      ??MT_ZdoCommandProcessing_43 & 0xFFFF
   \   000120   14           DEC       A
   \   000121   7003         JNZ       $+5
   \   000123   02....       LJMP      ??MT_ZdoCommandProcessing_44 & 0xFFFF
   \   000126   14           DEC       A
   \   000127   7003         JNZ       $+5
   \   000129   02....       LJMP      ??MT_ZdoCommandProcessing_45 & 0xFFFF
   \   00012C   14           DEC       A
   \   00012D   7003         JNZ       $+5
   \   00012F   02....       LJMP      ??MT_ZdoCommandProcessing_46 & 0xFFFF
   \   000132   14           DEC       A
   \   000133   7003         JNZ       $+5
   \   000135   02....       LJMP      ??MT_ZdoCommandProcessing_47 & 0xFFFF
   \   000138   2487         ADD       A,#-0x79
   \   00013A   7003         JNZ       $+5
   \   00013C   02....       LJMP      ??MT_ZdoCommandProcessing_48 & 0xFFFF
   \   00013F   02....       LJMP      ??MT_ZdoCommandProcessing_49 & 0xFFFF
    235            {
    236          #if defined ( ZDO_NWKADDR_REQUEST )
    237              case MT_ZDO_NWK_ADDR_REQ:
    238                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   000142                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   000142   12....       LCALL     `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    239                break;
   \   000145   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    240          #endif
    241          
    242          #if defined ( ZDO_IEEEADDR_REQUEST )
    243              case MT_ZDO_IEEE_ADDR_REQ:
    244                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   000148   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00014B   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00014E                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   00014E   7D00         MOV       R5,#0x0
   \   000150   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000153   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   000156   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    245                break;
    246          #endif
    247          
    248          #if defined ( ZDO_NODEDESC_REQUEST )
    249              case MT_ZDO_NODE_DESC_REQ:
    250                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000159   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000162   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000165   7402         MOV       A,#0x2
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00016D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000170   8A..         MOV       ?V0,R2
   \   000172   8B..         MOV       ?V1,R3
   \   000174   AC..         MOV       R4,?V0
   \   000176   AD..         MOV       R5,?V1
   \   000178                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000178   8E..         MOV       ?V0,R6
   \   00017A   78..         MOV       R0,#?V0
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017F   7902         MOV       R1,#0x2
   \   000181   02....       LJMP      ??MT_ZdoCommandProcessing_52 & 0xFFFF
    251                break;
    252          #endif
    253          
    254          #if defined ( ZDO_POWERDESC_REQUEST )
    255              case MT_ZDO_POWER_DESC_REQ:
    256                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   000184   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000187   12....       LCALL     ?XSTACK_DISP0_8
   \   00018A   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00018D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000190   7402         MOV       A,#0x2
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000198   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00019B   8A..         MOV       ?V0,R2
   \   00019D   8B..         MOV       ?V1,R3
   \   00019F   AC..         MOV       R4,?V0
   \   0001A1   AD..         MOV       R5,?V1
   \   0001A3                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   0001A3   8E..         MOV       ?V0,R6
   \   0001A5   78..         MOV       R0,#?V0
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AA   7903         MOV       R1,#0x3
   \   0001AC   E9           MOV       A,R1
   \   0001AD   02....       LJMP      ??MT_ZdoCommandProcessing_53 & 0xFFFF
    257                break;
    258          #endif
    259          
    260          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    261              case MT_ZDO_SIMPLE_DESC_REQ:
    262                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   0001B0   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0001B9   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0001BC   7402         MOV       A,#0x2
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0001C4   5002         JNC       ??MT_ZdoCommandProcessing_54
   \   0001C6   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_54:
   \   0001C8                ; Setup parameters for call to function osal_build_uint16
   \   0001C8   FA           MOV       R2,A
   \   0001C9   AB..         MOV       R3,?V1
   \   0001CB   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0001CE   8A..         MOV       ?V2,R2
   \   0001D0   8B..         MOV       ?V3,R3
   \   0001D2   AC..         MOV       R4,?V2
   \   0001D4   AD..         MOV       R5,?V3
   \   0001D6                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   0001D6   8E..         MOV       ?V2,R6
   \   0001D8   78..         MOV       R0,#?V2
   \   0001DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DD   85..82       MOV       DPL,?V0
   \   0001E0   85..83       MOV       DPH,?V1
   \   0001E3   A3           INC       DPTR
   \   0001E4   A3           INC       DPTR
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   F9           MOV       R1,A
   \   0001E7   7403         MOV       A,#0x3
   \   0001E9   12....       LCALL     ?XSTACK_DISP101_8
   \   0001EC   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   0001EF   02....       LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
    263                break;
    264          #endif
    265          
    266          #if defined ( ZDO_ACTIVEEP_REQUEST )
    267              case MT_ZDO_ACTIVE_EP_REQ:
    268                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   0001F2   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F8   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0001FB   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0001FE   7402         MOV       A,#0x2
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000206   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000209   8A..         MOV       ?V0,R2
   \   00020B   8B..         MOV       ?V1,R3
   \   00020D   AC..         MOV       R4,?V0
   \   00020F   AD..         MOV       R5,?V1
   \   000211                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000211   8E..         MOV       ?V0,R6
   \   000213   78..         MOV       R0,#?V0
   \   000215   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000218   7905         MOV       R1,#0x5
   \   00021A   8058         SJMP      ??MT_ZdoCommandProcessing_52
    269                break;
    270          #endif
    271          
    272          #if defined ( ZDO_MATCH_REQUEST )
    273              case MT_ZDO_MATCH_DESC_REQ:
    274                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   00021C                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   00021C   12....       LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    275                break;
   \   00021F   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    276          #endif
    277          
    278          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    279              case MT_ZDO_COMPLEX_DESC_REQ:
    280                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   000222   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000225   12....       LCALL     ?XSTACK_DISP0_8
   \   000228   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00022B   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00022E   7402         MOV       A,#0x2
   \   000230   12....       LCALL     ?XSTACK_DISP0_8
   \   000233   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000236   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000239   8A..         MOV       ?V0,R2
   \   00023B   8B..         MOV       ?V1,R3
   \   00023D   AC..         MOV       R4,?V0
   \   00023F   AD..         MOV       R5,?V1
   \   000241                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000241   8E..         MOV       ?V0,R6
   \   000243   78..         MOV       R0,#?V0
   \   000245   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000248   7910         MOV       R1,#0x10
   \   00024A   8028         SJMP      ??MT_ZdoCommandProcessing_52
    281                break;
    282          #endif
    283          
    284          #if defined ( ZDO_USERDESC_REQUEST )
    285              case MT_ZDO_USER_DESC_REQ:
    286                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   00024C   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00024F   12....       LCALL     ?XSTACK_DISP0_8
   \   000252   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000255   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000258   7402         MOV       A,#0x2
   \   00025A   12....       LCALL     ?XSTACK_DISP0_8
   \   00025D   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000260   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000263   8A..         MOV       ?V0,R2
   \   000265   8B..         MOV       ?V1,R3
   \   000267   AC..         MOV       R4,?V0
   \   000269   AD..         MOV       R5,?V1
   \   00026B                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00026B   8E..         MOV       ?V0,R6
   \   00026D   78..         MOV       R0,#?V0
   \   00026F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000272   7911         MOV       R1,#0x11
   \                     ??MT_ZdoCommandProcessing_52:
   \   000274   7403         MOV       A,#0x3
   \                     ??MT_ZdoCommandProcessing_53:
   \   000276   12....       LCALL     ?XSTACK_DISP101_8
   \   000279   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00027C   02....       LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
    287                break;
    288          #endif
    289          
    290          #if defined ( ZDO_ENDDEVICE_ANNCE )
    291              case MT_ZDO_END_DEV_ANNCE:
    292                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   00027F   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000282   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000285   E5..         MOV       A,?V0
   \   000287   2402         ADD       A,#0x2
   \   000289   F5..         MOV       ?V0,A
   \   00028B   5002         JNC       ??MT_ZdoCommandProcessing_56
   \   00028D   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_56:
   \   00028F                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00028F   8E..         MOV       ?V2,R6
   \   000291   78..         MOV       R0,#?V2
   \   000293   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000296   85..82       MOV       DPL,?V0
   \   000299   85..83       MOV       DPH,?V1
   \   00029C   A3           INC       DPTR
   \   00029D   A3           INC       DPTR
   \   00029E   A3           INC       DPTR
   \   00029F   A3           INC       DPTR
   \   0002A0   A3           INC       DPTR
   \   0002A1   A3           INC       DPTR
   \   0002A2   A3           INC       DPTR
   \   0002A3   A3           INC       DPTR
   \   0002A4   E0           MOVX      A,@DPTR
   \   0002A5   F9           MOV       R1,A
   \   0002A6   AC..         MOV       R4,?V0
   \   0002A8   AD..         MOV       R5,?V1
   \   0002AA   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   0002AD   02....       LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
    293                break;
    294          #endif
    295          
    296          #if defined ( ZDO_USERDESCSET_REQUEST )
    297              case MT_ZDO_USER_DESC_SET:
    298                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   0002B0   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0002B3   F5..         MOV       ?V2,A
   \   0002B5   E4           CLR       A
   \   0002B6   3B           ADDC      A,R3
   \   0002B7   F5..         MOV       ?V3,A
   \   0002B9   740A         MOV       A,#0xa
   \   0002BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BE   7402         MOV       A,#0x2
   \   0002C0   F0           MOVX      @DPTR,A
   \   0002C1                ; Setup parameters for call to function osal_build_uint16
   \   0002C1   0A           INC       R2
   \   0002C2   0A           INC       R2
   \   0002C3   0A           INC       R2
   \   0002C4   AB..         MOV       R3,?V3
   \   0002C6   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0002C9   7402         MOV       A,#0x2
   \   0002CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CE   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0002D1   E5..         MOV       A,?V2
   \   0002D3   2402         ADD       A,#0x2
   \   0002D5   F5..         MOV       ?V2,A
   \   0002D7   5002         JNC       ??MT_ZdoCommandProcessing_57
   \   0002D9   05..         INC       ?V3
   \                     ??MT_ZdoCommandProcessing_57:
   \   0002DB                ; Setup parameters for call to function osal_build_uint16
   \   0002DB   FA           MOV       R2,A
   \   0002DC   AB..         MOV       R3,?V3
   \   0002DE   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0002E1   8A..         MOV       ?V0,R2
   \   0002E3   8B..         MOV       ?V1,R3
   \   0002E5   85..82       MOV       DPL,?V2
   \   0002E8   85..83       MOV       DPH,?V3
   \   0002EB   A3           INC       DPTR
   \   0002EC   A3           INC       DPTR
   \   0002ED   E0           MOVX      A,@DPTR
   \   0002EE   C0E0         PUSH      A
   \   0002F0   7425         MOV       A,#0x25
   \   0002F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F5   D0E0         POP       A
   \   0002F7   F0           MOVX      @DPTR,A
   \   0002F8                ; Setup parameters for call to function osal_memcpy
   \   0002F8   85..82       MOV       DPL,?V2
   \   0002FB   85..83       MOV       DPH,?V3
   \   0002FE   A3           INC       DPTR
   \   0002FF   A3           INC       DPTR
   \   000300   A3           INC       DPTR
   \   000301   A982         MOV       R1,DPL
   \   000303   AA83         MOV       R2,DPH
   \   000305   89..         MOV       ?V4,R1
   \   000307   8A..         MOV       ?V5,R2
   \   000309   8E..         MOV       ?V6,R6
   \   00030B   78..         MOV       R0,#?V4
   \   00030D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000310   7428         MOV       A,#0x28
   \   000312   12....       LCALL     ?XSTACK_DISP0_8
   \   000315   E0           MOVX      A,@DPTR
   \   000316   FC           MOV       R4,A
   \   000317   7D00         MOV       R5,#0x0
   \   000319   7429         MOV       A,#0x29
   \   00031B   12....       LCALL     ?XSTACK_DISP0_8
   \   00031E   AA82         MOV       R2,DPL
   \   000320   AB83         MOV       R3,DPH
   \   000322   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000325   7403         MOV       A,#0x3
   \   000327   12....       LCALL     ?DEALLOC_XSTACK8
   \   00032A                ; Setup parameters for call to function ZDP_UserDescSet
   \   00032A   7425         MOV       A,#0x25
   \   00032C   12....       LCALL     ?XSTACK_DISP100_8
   \   00032F   88..         MOV       ?V2,R0
   \   000331   89..         MOV       ?V3,R1
   \   000333   78..         MOV       R0,#?V2
   \   000335   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000338   7900         MOV       R1,#0x0
   \   00033A   AC..         MOV       R4,?V0
   \   00033C   AD..         MOV       R5,?V1
   \   00033E   7404         MOV       A,#0x4
   \   000340   12....       LCALL     ?XSTACK_DISP101_8
   \   000343   12....       LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   000346   02....       LJMP      ??MT_ZdoCommandProcessing_58 & 0xFFFF
    299                break;
    300          #endif
    301          
    302          #if defined ( ZDO_SERVERDISC_REQUEST )
    303              case MT_ZDO_SERVICE_DISC_REQ:
    304                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   000349   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00034C   FA           MOV       R2,A
   \   00034D   5001         JNC       ??MT_ZdoCommandProcessing_59
   \   00034F   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_59:
   \   000350   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000353                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000353   7900         MOV       R1,#0x0
   \   000355   12....       LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   000358   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    305                break;
    306          #endif
    307          
    308          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    309              case MT_ZDO_END_DEV_BIND_REQ:
    310                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   00035B                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   00035B   12....       LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    311                break;
   \   00035E   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    312          #endif
    313          
    314          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    315              case MT_ZDO_BIND_REQ:
    316                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000361                ; Setup parameters for call to function MT_ZdoBindRequest
   \   000361   12....       LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    317                break;
   \   000364   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    318          #endif
    319          
    320          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    321              case MT_ZDO_UNBIND_REQ:
    322                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   000367                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   000367   12....       LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    323                break;
   \   00036A   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    324          #endif
    325          
    326          #if defined ( MT_SYS_KEY_MANAGEMENT )
    327              case MT_ZDO_SET_LINK_KEY:
    328                MT_ZdoSetLinkKey(pBuf);
    329                break;
    330          
    331              case MT_ZDO_REMOVE_LINK_KEY:
    332                MT_ZdoRemoveLinkKey(pBuf);
    333                break;
    334          
    335              case MT_ZDO_GET_LINK_KEY:
    336                MT_ZdoGetLinkKey(pBuf);
    337                break;
    338          #endif // MT_SYS_KEY_MANAGEMENT
    339          
    340          #if defined ( ZDO_MANUAL_JOIN )
    341              case MT_ZDO_NWK_DISCOVERY_REQ:
    342                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   00036D   85..82       MOV       DPL,?XSP + 0
   \   000370   85..83       MOV       DPH,?XSP + 1
   \   000373   7401         MOV       A,#0x1
   \   000375   F0           MOVX      @DPTR,A
   \   000376   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000379   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00037C                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   00037C   85..82       MOV       DPL,?V0
   \   00037F   85..83       MOV       DPH,?V1
   \   000382   A3           INC       DPTR
   \   000383   A3           INC       DPTR
   \   000384   A3           INC       DPTR
   \   000385   A3           INC       DPTR
   \   000386   E0           MOVX      A,@DPTR
   \   000387   F9           MOV       R1,A
   \   000388   12....       LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   00038B   E9           MOV       A,R1
   \   00038C   85..82       MOV       DPL,?XSP + 0
   \   00038F   85..83       MOV       DPH,?XSP + 1
   \   000392   F0           MOVX      @DPTR,A
   \   000393                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000393   7A..         MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   000395   7B..         MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000397   7902         MOV       R1,#0x2
   \   000399   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   00039C                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00039C   7A..         MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   00039E   7B..         MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   0003A0   7903         MOV       R1,#0x3
   \   0003A2   807F         SJMP      ??MT_ZdoCommandProcessing_60
    343                break;
    344          
    345              case MT_ZDO_JOIN_REQ:
    346                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   0003A4   85..82       MOV       DPL,?XSP + 0
   \   0003A7   85..83       MOV       DPH,?XSP + 1
   \   0003AA   7401         MOV       A,#0x1
   \   0003AC   F0           MOVX      @DPTR,A
   \   0003AD   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0003B0                ; Setup parameters for call to function osal_build_uint16
   \   0003B0   85..82       MOV       DPL,?V0
   \   0003B3   F583         MOV       DPH,A
   \   0003B5   A3           INC       DPTR
   \   0003B6   AA82         MOV       R2,DPL
   \   0003B8   AB83         MOV       R3,DPH
   \   0003BA   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0003BD   8A..         MOV       ?V2,R2
   \   0003BF   8B..         MOV       ?V3,R3
   \   0003C1                ; Setup parameters for call to function osal_build_uint16
   \   0003C1   E5..         MOV       A,?V0
   \   0003C3   240B         ADD       A,#0xb
   \   0003C5   FA           MOV       R2,A
   \   0003C6   E4           CLR       A
   \   0003C7   35..         ADDC      A,?V1
   \   0003C9   FB           MOV       R3,A
   \   0003CA   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0003CD   8A..         MOV       ?V4,R2
   \   0003CF   8B..         MOV       ?V5,R3
   \   0003D1                ; Setup parameters for call to function ZDApp_JoinReq
   \   0003D1   E5..         MOV       A,?V0
   \   0003D3   240E         ADD       A,#0xe
   \   0003D5   F582         MOV       DPL,A
   \   0003D7   E4           CLR       A
   \   0003D8   35..         ADDC      A,?V1
   \   0003DA   F583         MOV       DPH,A
   \   0003DC   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0003DF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003E2   E5..         MOV       A,?V0
   \   0003E4   240D         ADD       A,#0xd
   \   0003E6   F582         MOV       DPL,A
   \   0003E8   E4           CLR       A
   \   0003E9   35..         ADDC      A,?V1
   \   0003EB   F583         MOV       DPH,A
   \   0003ED   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   0003F0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003F3   78..         MOV       R0,#?V4
   \   0003F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003F8   E5..         MOV       A,?V0
   \   0003FA   2403         ADD       A,#0x3
   \   0003FC   FC           MOV       R4,A
   \   0003FD   E4           CLR       A
   \   0003FE   35..         ADDC      A,?V1
   \   000400   FD           MOV       R5,A
   \   000401   AA..         MOV       R2,?V2
   \   000403   AB..         MOV       R3,?V3
   \   000405   85..82       MOV       DPL,?V0
   \   000408   85..83       MOV       DPH,?V1
   \   00040B   E0           MOVX      A,@DPTR
   \   00040C   F9           MOV       R1,A
   \   00040D   12....       LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   000410   7404         MOV       A,#0x4
   \   000412   12....       LCALL     ?DEALLOC_XSTACK8
   \   000415   E9           MOV       A,R1
   \   000416   85..82       MOV       DPL,?XSP + 0
   \   000419   85..83       MOV       DPH,?XSP + 1
   \   00041C   F0           MOVX      @DPTR,A
   \   00041D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00041D   7A..         MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   00041F   7B..         MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   000421   7904         MOV       R1,#0x4
   \                     ??MT_ZdoCommandProcessing_60:
   \   000423   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000426                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000426   02....       LJMP      ??MT_ZdoCommandProcessing_61 & 0xFFFF
    347                break;
    348          #endif
    349          
    350          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    351              case MT_ZDO_MGMT_NWKDISC_REQ:
    352                MT_ZdoMgmtNwkDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   000429   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00042C   12....       LCALL     ?XSTACK_DISP0_8
   \   00042F   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000432   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000435   7402         MOV       A,#0x2
   \   000437   12....       LCALL     ?XSTACK_DISP0_8
   \   00043A   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00043D   5002         JNC       ??MT_ZdoCommandProcessing_62
   \   00043F   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_62:
   \   000441                ; Setup parameters for call to function osal_build_uint32
   \   000441   7904         MOV       R1,#0x4
   \   000443   FA           MOV       R2,A
   \   000444   AB..         MOV       R3,?V1
   \   000446   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000449   8A..         MOV       ?V4,R2
   \   00044B   8B..         MOV       ?V5,R3
   \   00044D   8C..         MOV       ?V6,R4
   \   00044F   8D..         MOV       ?V7,R5
   \   000451                ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
   \   000451   78..         MOV       R0,#?V4
   \   000453   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000456   7D00         MOV       R5,#0x0
   \   000458   85..82       MOV       DPL,?V0
   \   00045B   85..83       MOV       DPH,?V1
   \   00045E   A3           INC       DPTR
   \   00045F   A3           INC       DPTR
   \   000460   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000463   A3           INC       DPTR
   \   000464   A3           INC       DPTR
   \   000465   E0           MOVX      A,@DPTR
   \   000466   F9           MOV       R1,A
   \   000467   7406         MOV       A,#0x6
   \   000469   12....       LCALL     ?XSTACK_DISP101_8
   \   00046C   12....       LCALL     `??ZDP_MgmtNwkDiscReq::?relay`; Banked call to: ZDP_MgmtNwkDiscReq
   \   00046F   7404         MOV       A,#0x4
   \   000471   12....       LCALL     ?DEALLOC_XSTACK8
   \   000474   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    353                break;
    354          #endif
    355          
    356          #if defined ( ZDO_MGMT_LQI_REQUEST )
    357              case MT_ZDO_MGMT_LQI_REQ:
    358                MT_ZdoMgmtLqiRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   000477   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00047A   12....       LCALL     ?XSTACK_DISP0_8
   \   00047D   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000480   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000483   7402         MOV       A,#0x2
   \   000485   12....       LCALL     ?XSTACK_DISP0_8
   \   000488   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00048B   C0E0         PUSH      A
   \   00048D   7401         MOV       A,#0x1
   \   00048F   12....       LCALL     ?XSTACK_DISP0_8
   \   000492   D0E0         POP       A
   \   000494   F0           MOVX      @DPTR,A
   \   000495                ; Setup parameters for call to function ZDP_SendData
   \   000495   8E..         MOV       ?V0,R6
   \   000497   78..         MOV       R0,#?V0
   \   000499   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00049C   7402         MOV       A,#0x2
   \   00049E   12....       LCALL     ?XSTACK_DISP100_8
   \   0004A1   88..         MOV       ?V0,R0
   \   0004A3   89..         MOV       ?V1,R1
   \   0004A5   78..         MOV       R0,#?V0
   \   0004A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004AA   75..31       MOV       ?V0,#0x31
   \   0004AD   806E         SJMP      ??MT_ZdoCommandProcessing_63
    359                break;
    360          #endif
    361          
    362          #if defined ( ZDO_MGMT_RTG_REQUEST )
    363              case MT_ZDO_MGMT_RTG_REQ:
    364                MT_ZdoMgmtRtgRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_21:
   \   0004AF   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0004B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0004B5   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0004B8   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0004BB   7402         MOV       A,#0x2
   \   0004BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0004C0   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0004C3   C0E0         PUSH      A
   \   0004C5   7401         MOV       A,#0x1
   \   0004C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0004CA   D0E0         POP       A
   \   0004CC   F0           MOVX      @DPTR,A
   \   0004CD                ; Setup parameters for call to function ZDP_SendData
   \   0004CD   8E..         MOV       ?V0,R6
   \   0004CF   78..         MOV       R0,#?V0
   \   0004D1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004D4   7402         MOV       A,#0x2
   \   0004D6   12....       LCALL     ?XSTACK_DISP100_8
   \   0004D9   88..         MOV       ?V0,R0
   \   0004DB   89..         MOV       ?V1,R1
   \   0004DD   78..         MOV       R0,#?V0
   \   0004DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004E2   75..32       MOV       ?V0,#0x32
   \   0004E5   8036         SJMP      ??MT_ZdoCommandProcessing_63
    365                break;
    366          #endif
    367          
    368          #if defined ( ZDO_MGMT_BIND_REQUEST )
    369              case MT_ZDO_MGMT_BIND_REQ:
    370                MT_ZdoMgmtBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_22:
   \   0004E7   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0004EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0004ED   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0004F0   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0004F3   7402         MOV       A,#0x2
   \   0004F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0004F8   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0004FB   C0E0         PUSH      A
   \   0004FD   7401         MOV       A,#0x1
   \   0004FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000502   D0E0         POP       A
   \   000504   F0           MOVX      @DPTR,A
   \   000505                ; Setup parameters for call to function ZDP_SendData
   \   000505   8E..         MOV       ?V0,R6
   \   000507   78..         MOV       R0,#?V0
   \   000509   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00050C   7402         MOV       A,#0x2
   \   00050E   12....       LCALL     ?XSTACK_DISP100_8
   \   000511   88..         MOV       ?V0,R0
   \   000513   89..         MOV       ?V1,R1
   \   000515   78..         MOV       R0,#?V0
   \   000517   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00051A   75..33       MOV       ?V0,#0x33
   \                     ??MT_ZdoCommandProcessing_63:
   \   00051D   8E..         MOV       ?V1,R6
   \   00051F   78..         MOV       R0,#?V0
   \   000521   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000524   7901         MOV       R1,#0x1
   \   000526   7407         MOV       A,#0x7
   \   000528   12....       LCALL     ?XSTACK_DISP102_8
   \   00052B   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00052D   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00052F   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000532   7405         MOV       A,#0x5
   \   000534   12....       LCALL     ?DEALLOC_XSTACK8
   \   000537   02....       LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
    371                break;
    372          #endif
    373          
    374          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    375              case MT_ZDO_MGMT_LEAVE_REQ:
    376                MT_ZdoMgmtLeaveRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_23:
   \   00053A   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00053D   12....       LCALL     ?XSTACK_DISP0_8
   \   000540   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000543   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000546   7402         MOV       A,#0x2
   \   000548   12....       LCALL     ?XSTACK_DISP0_8
   \   00054B   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00054E   5002         JNC       ??MT_ZdoCommandProcessing_64
   \   000550   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_64:
   \   000552   F582         MOV       DPL,A
   \   000554   85..83       MOV       DPH,?V1
   \   000557   A3           INC       DPTR
   \   000558   A3           INC       DPTR
   \   000559   A3           INC       DPTR
   \   00055A   A3           INC       DPTR
   \   00055B   A3           INC       DPTR
   \   00055C   A3           INC       DPTR
   \   00055D   A3           INC       DPTR
   \   00055E   A3           INC       DPTR
   \   00055F   E0           MOVX      A,@DPTR
   \   000560   A2E1         MOV       C,0xE0 /* A   */.1
   \   000562   5004         JNC       ??MT_ZdoCommandProcessing_65
   \   000564   D2F0         SETB      B.0
   \   000566   8002         SJMP      ??MT_ZdoCommandProcessing_66
   \                     ??MT_ZdoCommandProcessing_65:
   \   000568   C2F0         CLR       B.0
   \                     ??MT_ZdoCommandProcessing_66:
   \   00056A                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   00056A   8E..         MOV       ?V2,R6
   \   00056C   78..         MOV       R0,#?V2
   \   00056E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000571   85..82       MOV       DPL,?V0
   \   000574   85..83       MOV       DPH,?V1
   \   000577   A3           INC       DPTR
   \   000578   A3           INC       DPTR
   \   000579   A3           INC       DPTR
   \   00057A   A3           INC       DPTR
   \   00057B   A3           INC       DPTR
   \   00057C   A3           INC       DPTR
   \   00057D   A3           INC       DPTR
   \   00057E   A3           INC       DPTR
   \   00057F   E0           MOVX      A,@DPTR
   \   000580   A2E0         MOV       C,0xE0 /* A   */.0
   \   000582   E4           CLR       A
   \   000583   33           RLC       A
   \   000584   F5..         MOV       ?V2,A
   \   000586   78..         MOV       R0,#?V2
   \   000588   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00058B   A2F0         MOV       C,B.0
   \   00058D   E4           CLR       A
   \   00058E   33           RLC       A
   \   00058F   F9           MOV       R1,A
   \   000590   AC..         MOV       R4,?V0
   \   000592   AD..         MOV       R5,?V1
   \   000594   7404         MOV       A,#0x4
   \   000596   12....       LCALL     ?XSTACK_DISP101_8
   \   000599   12....       LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \                     ??MT_ZdoCommandProcessing_58:
   \   00059C   7402         MOV       A,#0x2
   \   00059E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005A1   8040         SJMP      ??MT_ZdoCommandProcessing_51
    377                break;
    378          #endif
    379          
    380          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    381              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    382                MT_ZdoMgmtDirectJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_24:
   \   0005A3   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0005A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0005A9   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0005AC   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0005AF   7402         MOV       A,#0x2
   \   0005B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0005B4   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0005B7   5002         JNC       ??MT_ZdoCommandProcessing_67
   \   0005B9   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_67:
   \   0005BB                ; Setup parameters for call to function ZDP_MgmtDirectJoinReq
   \   0005BB   8E..         MOV       ?V2,R6
   \   0005BD   78..         MOV       R0,#?V2
   \   0005BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0005C2   85..82       MOV       DPL,?V0
   \   0005C5   85..83       MOV       DPH,?V1
   \   0005C8   A3           INC       DPTR
   \   0005C9   A3           INC       DPTR
   \   0005CA   A3           INC       DPTR
   \   0005CB   A3           INC       DPTR
   \   0005CC   A3           INC       DPTR
   \   0005CD   A3           INC       DPTR
   \   0005CE   A3           INC       DPTR
   \   0005CF   A3           INC       DPTR
   \   0005D0   E0           MOVX      A,@DPTR
   \   0005D1   F9           MOV       R1,A
   \   0005D2   AC..         MOV       R4,?V0
   \   0005D4   AD..         MOV       R5,?V1
   \   0005D6   7403         MOV       A,#0x3
   \   0005D8   12....       LCALL     ?XSTACK_DISP101_8
   \   0005DB   12....       LCALL     `??ZDP_MgmtDirectJoinReq::?relay`; Banked call to: ZDP_MgmtDirectJoinReq
   \                     ??MT_ZdoCommandProcessing_55:
   \   0005DE   7401         MOV       A,#0x1
   \   0005E0   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??MT_ZdoCommandProcessing_51:
   \   0005E3   E9           MOV       A,R1
   \   0005E4   85..82       MOV       DPL,?XSP + 0
   \   0005E7   85..83       MOV       DPH,?XSP + 1
   \   0005EA   02....       LJMP      ??MT_ZdoCommandProcessing_68 & 0xFFFF
    383                break;
    384          #endif
    385          
    386          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    387              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    388                MT_ZdoMgmtPermitJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_25:
   \   0005ED   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0005F0   8A82         MOV       DPL,R2
   \   0005F2   8B83         MOV       DPH,R3
   \   0005F4   E0           MOVX      A,@DPTR
   \   0005F5   6404         XRL       A,#0x4
   \   0005F7   700A         JNZ       ??MT_ZdoCommandProcessing_69
   \   0005F9   740A         MOV       A,#0xa
   \   0005FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0005FE   7402         MOV       A,#0x2
   \   000600   F0           MOVX      @DPTR,A
   \   000601   8019         SJMP      ??MT_ZdoCommandProcessing_70
   \                     ??MT_ZdoCommandProcessing_69:
   \   000603   85..82       MOV       DPL,?V0
   \   000606   85..83       MOV       DPH,?V1
   \   000609   E0           MOVX      A,@DPTR
   \   00060A   C0E0         PUSH      A
   \   00060C   740A         MOV       A,#0xa
   \   00060E   12....       LCALL     ?XSTACK_DISP0_8
   \   000611   D0E0         POP       A
   \   000613   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000616   8582..       MOV       ?V0,DPL
   \   000619   8583..       MOV       ?V1,DPH
   \                     ??MT_ZdoCommandProcessing_70:
   \   00061C                ; Setup parameters for call to function osal_build_uint16
   \   00061C   AA..         MOV       R2,?V0
   \   00061E   AB..         MOV       R3,?V1
   \   000620   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000623   7402         MOV       A,#0x2
   \   000625   12....       LCALL     ?XSTACK_DISP0_8
   \   000628   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00062B   F9           MOV       R1,A
   \   00062C   85..82       MOV       DPL,?V0
   \   00062F   85..83       MOV       DPH,?V1
   \   000632   A3           INC       DPTR
   \   000633   A3           INC       DPTR
   \   000634   A3           INC       DPTR
   \   000635   E0           MOVX      A,@DPTR
   \   000636   FC           MOV       R4,A
   \   000637   90....       MOV       DPTR,#ignoreIndication
   \   00063A   7401         MOV       A,#0x1
   \   00063C   F0           MOVX      @DPTR,A
   \   00063D                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00063D   7D00         MOV       R5,#0x0
   \   00063F   04           INC       A
   \   000640   12....       LCALL     ?XSTACK_DISP101_8
   \   000643   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   \   000646   E9           MOV       A,R1
   \   000647   85..82       MOV       DPL,?XSP + 0
   \   00064A   85..83       MOV       DPH,?XSP + 1
   \   00064D   F0           MOVX      @DPTR,A
   \   00064E   90....       MOV       DPTR,#ignoreIndication
   \   000651   02....       LJMP      ??MT_ZdoCommandProcessing_71 & 0xFFFF
    389                break;
    390          #endif
    391          
    392          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    393              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    394                MT_ZdoMgmtNwkUpdateRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_26:
   \   000654                ; Setup parameters for call to function MT_ZdoMgmtNwkUpdateRequest
   \   000654   12....       LCALL     `??MT_ZdoMgmtNwkUpdateRequest::?relay`; Banked call to: MT_ZdoMgmtNwkUpdateRequest
    395                break;
   \   000657   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    396          #endif
    397          
    398          #if defined ( ZDO_NETWORKSTART_REQUEST )
    399              case MT_ZDO_STARTUP_FROM_APP:
    400                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_29:
   \   00065A   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   00065D                ; Setup parameters for call to function ZDOInitDevice
   \   00065D   7A64         MOV       R2,#0x64
   \   00065F   7B00         MOV       R3,#0x0
   \   000661   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000664   8030         SJMP      ??MT_ZdoCommandProcessing_72
    401                break;
    402          #endif
    403          
    404              case MT_ZDO_SEND_DATA:
    405                MT_ZdoSendData( pBuf );
   \                     ??MT_ZdoCommandProcessing_17:
   \   000666                ; Setup parameters for call to function MT_ZdoSendData
   \   000666   12....       LCALL     `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
    406                break;
   \   000669   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    407          
    408              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    409                MT_ZdoNwkAddrOfInterestReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_18:
   \   00066C                ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
   \   00066C   12....       LCALL     `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
    410                break;
   \   00066F   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    411          
    412              case MT_ZDO_MSG_CB_REGISTER:
    413                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_27:
   \   000672   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000675   5001         JNC       ??MT_ZdoCommandProcessing_73
   \   000677   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_73:
   \   000678   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00067B                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00067B   90....       MOV       DPTR,#MT_TaskID
   \   00067E   E0           MOVX      A,@DPTR
   \   00067F   F9           MOV       R1,A
   \   000680   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000683   8011         SJMP      ??MT_ZdoCommandProcessing_72
    414                break;
    415          
    416              case MT_ZDO_MSG_CB_REMOVE:
    417                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_28:
   \   000685   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000688   5001         JNC       ??MT_ZdoCommandProcessing_74
   \   00068A   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_74:
   \   00068B   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00068E                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   00068E   90....       MOV       DPTR,#MT_TaskID
   \   000691   E0           MOVX      A,@DPTR
   \   000692   F9           MOV       R1,A
   \   000693   12....       LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \                     ??MT_ZdoCommandProcessing_72:
   \   000696   E9           MOV       A,R1
   \   000697   85..82       MOV       DPL,?XSP + 0
   \   00069A   85..83       MOV       DPH,?XSP + 1
   \   00069D   F0           MOVX      @DPTR,A
   \   00069E   74E0         MOV       A,#-0x20
   \   0006A0   55..         ANL       A,?V0
   \   0006A2   6420         XRL       A,#0x20
   \   0006A4   6003         JZ        $+5
   \   0006A6   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
   \   0006A9                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0006A9   8031         SJMP      ??MT_ZdoCommandProcessing_61
    418                break;
    419          
    420              case MT_ZDO_SET_REJOIN_PARAMS:
    421                MT_ZdoSetRejoinParameters(pBuf);
   \                     ??MT_ZdoCommandProcessing_48:
   \   0006AB   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0006AE   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0006B1   8A..         MOV       ?V4,R2
   \   0006B3   8B..         MOV       ?V5,R3
   \   0006B5   8C..         MOV       ?V6,R4
   \   0006B7   8D..         MOV       ?V7,R5
   \   0006B9                ; Setup parameters for call to function osal_build_uint32
   \   0006B9   7904         MOV       R1,#0x4
   \   0006BB   E5..         MOV       A,?V0
   \   0006BD   29           ADD       A,R1
   \   0006BE   FA           MOV       R2,A
   \   0006BF   E4           CLR       A
   \   0006C0   35..         ADDC      A,?V1
   \   0006C2   FB           MOV       R3,A
   \   0006C3   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0006C6                ; Setup parameters for call to function ZDApp_SetRejoinScanDuration
   \   0006C6   12....       LCALL     `??ZDApp_SetRejoinScanDuration::?relay`; Banked call to: ZDApp_SetRejoinScanDuration
   \   0006C9                ; Setup parameters for call to function ZDApp_SetRejoinBackoffDuration
   \   0006C9   AA..         MOV       R2,?V4
   \   0006CB   AB..         MOV       R3,?V5
   \   0006CD   AC..         MOV       R4,?V6
   \   0006CF   AD..         MOV       R5,?V7
   \   0006D1   12....       LCALL     `??ZDApp_SetRejoinBackoffDuration::?relay`; Banked call to: ZDApp_SetRejoinBackoffDuration
   \   0006D4   85..82       MOV       DPL,?XSP + 0
   \   0006D7   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoCommandProcessing_71:
   \   0006DA   E4           CLR       A
   \                     ??MT_ZdoCommandProcessing_68:
   \   0006DB   F0           MOVX      @DPTR,A
   \   0006DC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_ZdoCommandProcessing_61:
   \   0006DC   AC..         MOV       R4,?XSP + 0
   \   0006DE   AD..         MOV       R5,?XSP + 1
   \   0006E0   7B01         MOV       R3,#0x1
   \   0006E2   EF           MOV       A,R7
   \   0006E3   FA           MOV       R2,A
   \   0006E4   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    422                break;
    423          
    424          #if defined ( MT_ZDO_EXTENSIONS )
    425          #if ( ZG_BUILD_COORDINATOR_TYPE )
    426              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    427                MT_ZdoSecUpdateNwkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_42:
   \   0006E7   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0006EA   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0006ED   8A..         MOV       ?V2,R2
   \   0006EF   8B..         MOV       ?V3,R3
   \   0006F1   AC..         MOV       R4,?V2
   \   0006F3   AD..         MOV       R5,?V3
   \   0006F5                ; Setup parameters for call to function ZDSecMgrUpdateNwkKey
   \   0006F5   85..82       MOV       DPL,?V0
   \   0006F8   85..83       MOV       DPH,?V1
   \   0006FB   A3           INC       DPTR
   \   0006FC   A3           INC       DPTR
   \   0006FD   E0           MOVX      A,@DPTR
   \   0006FE   F9           MOV       R1,A
   \   0006FF   E5..         MOV       A,?V0
   \   000701   2403         ADD       A,#0x3
   \   000703   FA           MOV       R2,A
   \   000704   E4           CLR       A
   \   000705   35..         ADDC      A,?V1
   \   000707   FB           MOV       R3,A
   \   000708   12....       LCALL     `??ZDSecMgrUpdateNwkKey::?relay`; Banked call to: ZDSecMgrUpdateNwkKey
   \   00070B   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00070E   7A4E         MOV       R2,#0x4e
   \   000710   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    428                break;
    429          
    430              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    431                MT_ZdoSecSwitchNwkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_43:
   \   000713   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000716   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000719                ; Setup parameters for call to function ZDSecMgrSwitchNwkKey
   \   000719   85..82       MOV       DPL,?V0
   \   00071C   85..83       MOV       DPH,?V1
   \   00071F   A3           INC       DPTR
   \   000720   A3           INC       DPTR
   \   000721   E0           MOVX      A,@DPTR
   \   000722   F9           MOV       R1,A
   \   000723   12....       LCALL     `??ZDSecMgrSwitchNwkKey::?relay`; Banked call to: ZDSecMgrSwitchNwkKey
   \   000726   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000729   7A4F         MOV       R2,#0x4f
   \   00072B   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    432                break;
    433          #endif // ZDO_COORDINATOR
    434              case MT_ZDO_SEC_ADD_LINK_KEY:
    435                MT_ZdoSecAddLinkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_30:
   \   00072E   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000731   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000734   E5..         MOV       A,?V0
   \   000736   2402         ADD       A,#0x2
   \   000738   F5..         MOV       ?V0,A
   \   00073A   5002         JNC       ??MT_ZdoCommandProcessing_76
   \   00073C   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_76:
   \   00073E                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   00073E   2408         ADD       A,#0x8
   \   000740   F5..         MOV       ?V2,A
   \   000742   E4           CLR       A
   \   000743   35..         ADDC      A,?V1
   \   000745   F5..         MOV       ?V3,A
   \   000747   78..         MOV       R0,#?V2
   \   000749   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00074C   AC..         MOV       R4,?V0
   \   00074E   AD..         MOV       R5,?V1
   \   000750   12....       LCALL     `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   000753   7402         MOV       A,#0x2
   \   000755   12....       LCALL     ?DEALLOC_XSTACK8
   \   000758   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00075B   7A42         MOV       R2,#0x42
   \   00075D   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    436                break;
    437          
    438              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    439                MT_ZdoSecEntryLookupExt( pBuf );
   \                     ??MT_ZdoCommandProcessing_31:
   \   000760   740B         MOV       A,#0xb
   \   000762   12....       LCALL     ?XSTACK_DISP0_8
   \   000765   E4           CLR       A
   \   000766   F0           MOVX      @DPTR,A
   \   000767   A3           INC       DPTR
   \   000768   F0           MOVX      @DPTR,A
   \   000769   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
   \   00076C   740D         MOV       A,#0xd
   \   00076E   12....       LCALL     ?XSTACK_DISP102_8
   \   000771   7406         MOV       A,#0x6
   \   000773   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000776                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000776   740B         MOV       A,#0xb
   \   000778   12....       LCALL     ?XSTACK_DISP102_8
   \   00077B   EA           MOV       A,R2
   \   00077C   2403         ADD       A,#0x3
   \   00077E   FA           MOV       R2,A
   \   00077F   5001         JNC       ??MT_ZdoCommandProcessing_77
   \   000781   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_77:
   \   000782   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000785   740D         MOV       A,#0xd
   \   000787   12....       LCALL     ?XSTACK_DISP0_8
   \   00078A   E9           MOV       A,R1
   \   00078B   F0           MOVX      @DPTR,A
   \   00078C   740B         MOV       A,#0xb
   \   00078E   12....       LCALL     ?XSTACK_DISP0_8
   \   000791   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000794   6064         JZ        ??MT_ZdoCommandProcessing_78
   \   000796   740B         MOV       A,#0xb
   \   000798   12....       LCALL     ?XSTACK_DISP0_8
   \   00079B   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00079E   C0E0         PUSH      A
   \   0007A0   740E         MOV       A,#0xe
   \   0007A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0007A5   D0E0         POP       A
   \   0007A7   F0           MOVX      @DPTR,A
   \   0007A8   740B         MOV       A,#0xb
   \   0007AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0007AD   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0007B0   E0           MOVX      A,@DPTR
   \   0007B1   C0E0         PUSH      A
   \   0007B3   740F         MOV       A,#0xf
   \   0007B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0007B8   D0E0         POP       A
   \   0007BA   F0           MOVX      @DPTR,A
   \   0007BB   740B         MOV       A,#0xb
   \   0007BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0007C0   E0           MOVX      A,@DPTR
   \   0007C1   2402         ADD       A,#0x2
   \   0007C3   F8           MOV       R0,A
   \   0007C4   A3           INC       DPTR
   \   0007C5   E0           MOVX      A,@DPTR
   \   0007C6   3400         ADDC      A,#0x0
   \   0007C8   F9           MOV       R1,A
   \   0007C9   8882         MOV       DPL,R0
   \   0007CB   8983         MOV       DPH,R1
   \   0007CD   E0           MOVX      A,@DPTR
   \   0007CE   C0E0         PUSH      A
   \   0007D0   7410         MOV       A,#0x10
   \   0007D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0007D5   D0E0         POP       A
   \   0007D7   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0007DA   C0E0         PUSH      A
   \   0007DC   7411         MOV       A,#0x11
   \   0007DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0007E1   D0E0         POP       A
   \   0007E3   F0           MOVX      @DPTR,A
   \   0007E4   740B         MOV       A,#0xb
   \   0007E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0007E9   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0007EC   A3           INC       DPTR
   \   0007ED   A3           INC       DPTR
   \   0007EE   A3           INC       DPTR
   \   0007EF   E0           MOVX      A,@DPTR
   \   0007F0   C0E0         PUSH      A
   \   0007F2   7412         MOV       A,#0x12
   \   0007F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0007F7   D0E0         POP       A
   \   0007F9   F0           MOVX      @DPTR,A
   \                     ??MT_ZdoCommandProcessing_78:
   \   0007FA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0007FA   740D         MOV       A,#0xd
   \   0007FC   12....       LCALL     ?XSTACK_DISP102_8
   \   0007FF   7B06         MOV       R3,#0x6
   \   000801   7A43         MOV       R2,#0x43
   \   000803   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    440                break;
    441          
    442              case MT_ZDO_SEC_DEVICE_REMOVE:
    443                 MT_ZdoSecDeviceRemove( pBuf );
   \                     ??MT_ZdoCommandProcessing_32:
   \   000806                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000806   EA           MOV       A,R2
   \   000807   2403         ADD       A,#0x3
   \   000809   FA           MOV       R2,A
   \   00080A   5001         JNC       ??MT_ZdoCommandProcessing_79
   \   00080C   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_79:
   \   00080D   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \   000810   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000813   7A44         MOV       R2,#0x44
   \   000815   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    444                 break;
    445          
    446              case MT_ZDO_EXT_ROUTE_DISC:
    447                 MT_ZdoExtRouteDisc( pBuf );
   \                     ??MT_ZdoCommandProcessing_33:
   \   000818   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00081B   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00081E                ; Setup parameters for call to function NLME_RouteDiscoveryRequest
   \   00081E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000821   12....       LCALL     `??NLME_RouteDiscoveryRequest::?relay`; Banked call to: NLME_RouteDiscoveryRequest
   \   000824   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000827   7A45         MOV       R2,#0x45
   \   000829   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    448                 break;
    449          
    450              case MT_ZDO_EXT_ROUTE_CHECK:
    451                 MT_ZdoExtRouteCheck( pBuf );
   \                     ??MT_ZdoCommandProcessing_34:
   \   00082C   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00082F   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000832                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000832   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000835   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000838   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00083B   7A46         MOV       R2,#0x46
   \   00083D   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    452                 break;
    453          
    454              case MT_ZDO_EXT_REMOVE_GROUP:
    455                MT_ZdoExtRemoveGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_35:
   \   000840   8A82         MOV       DPL,R2
   \   000842   8B83         MOV       DPH,R3
   \   000844   A3           INC       DPTR
   \   000845   A3           INC       DPTR
   \   000846   A3           INC       DPTR
   \   000847   E0           MOVX      A,@DPTR
   \   000848   FF           MOV       R7,A
   \   000849                ; Setup parameters for call to function osal_build_uint16
   \   000849   EA           MOV       A,R2
   \   00084A   2404         ADD       A,#0x4
   \   00084C   FA           MOV       R2,A
   \   00084D   5001         JNC       ??MT_ZdoCommandProcessing_80
   \   00084F   0B           INC       R3
   \                     ??MT_ZdoCommandProcessing_80:
   \   000850   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000853                ; Setup parameters for call to function aps_RemoveGroup
   \   000853   EF           MOV       A,R7
   \   000854   F9           MOV       R1,A
   \   000855   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   000858   E9           MOV       A,R1
   \   000859   85..82       MOV       DPL,?XSP + 0
   \   00085C   85..83       MOV       DPH,?XSP + 1
   \   00085F   6003         JZ        ??MT_ZdoCommandProcessing_81
   \   000861   E4           CLR       A
   \   000862   8002         SJMP      ??MT_ZdoCommandProcessing_82
   \                     ??MT_ZdoCommandProcessing_81:
   \   000864   7401         MOV       A,#0x1
   \                     ??MT_ZdoCommandProcessing_82:
   \   000866   F0           MOVX      @DPTR,A
   \   000867                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000867   8007         SJMP      ??MT_ZdoCommandProcessing_83
    456                break;
    457          
    458              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    459                MT_ZdoExtRemoveAllGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_36:
   \   000869   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00086C   F9           MOV       R1,A
   \   00086D   12....       LCALL     `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
   \   000870                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_ZdoCommandProcessing_83:
   \   000870   AC..         MOV       R4,?XSP + 0
   \   000872   AD..         MOV       R5,?XSP + 1
   \   000874   7B01         MOV       R3,#0x1
   \   000876   7A47         MOV       R2,#0x47
   \   000878   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    460                break;
    461          
    462              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    463                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
   \                     ??MT_ZdoCommandProcessing_37:
   \   00087B                ; Setup parameters for call to function MT_ZdoExtFindAllGroupsEndpoint
   \   00087B   12....       LCALL     `??MT_ZdoExtFindAllGroupsEndpoint::?relay`; Banked call to: MT_ZdoExtFindAllGroupsEndpoint
    464                break;
   \   00087E   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    465          
    466              case MT_ZDO_EXT_FIND_GROUP:
    467                MT_ZdoExtFindGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_38:
   \   000881                ; Setup parameters for call to function MT_ZdoExtFindGroup
   \   000881   12....       LCALL     `??MT_ZdoExtFindGroup::?relay`; Banked call to: MT_ZdoExtFindGroup
    468                break;
   \   000884   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    469          
    470              case MT_ZDO_EXT_ADD_GROUP:
    471                MT_ZdoExtAddGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_39:
   \   000887   85..82       MOV       DPL,?XSP + 0
   \   00088A   85..83       MOV       DPH,?XSP + 1
   \   00088D   E4           CLR       A
   \   00088E   F0           MOVX      @DPTR,A
   \   00088F   90....       MOV       DPTR,#`?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `
   \   000892   7413         MOV       A,#0x13
   \   000894   12....       LCALL     ?XSTACK_DISP102_8
   \   000897   7412         MOV       A,#0x12
   \   000899   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00089C   8A82         MOV       DPL,R2
   \   00089E   8B83         MOV       DPH,R3
   \   0008A0   A3           INC       DPTR
   \   0008A1   A3           INC       DPTR
   \   0008A2   A3           INC       DPTR
   \   0008A3   E0           MOVX      A,@DPTR
   \   0008A4   FF           MOV       R7,A
   \   0008A5   EA           MOV       A,R2
   \   0008A6   2404         ADD       A,#0x4
   \   0008A8   F5..         MOV       ?V0,A
   \   0008AA   E4           CLR       A
   \   0008AB   3B           ADDC      A,R3
   \   0008AC   F5..         MOV       ?V1,A
   \   0008AE                ; Setup parameters for call to function osal_build_uint16
   \   0008AE   AA..         MOV       R2,?V0
   \   0008B0   FB           MOV       R3,A
   \   0008B1   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0008B4   7413         MOV       A,#0x13
   \   0008B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0008B9   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0008BC   F8           MOV       R0,A
   \   0008BD   7415         MOV       A,#0x15
   \   0008BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0008C2   E8           MOV       A,R0
   \   0008C3   F0           MOVX      @DPTR,A
   \   0008C4   C3           CLR       C
   \   0008C5   9410         SUBB      A,#0x10
   \   0008C7   4005         JC        ??MT_ZdoCommandProcessing_84
   \   0008C9   740F         MOV       A,#0xf
   \   0008CB   F0           MOVX      @DPTR,A
   \   0008CC   8003         SJMP      ??MT_ZdoCommandProcessing_85
   \                     ??MT_ZdoCommandProcessing_84:
   \   0008CE   E0           MOVX      A,@DPTR
   \   0008CF   6032         JZ        ??MT_ZdoCommandProcessing_86
   \                     ??MT_ZdoCommandProcessing_85:
   \   0008D1                ; Setup parameters for call to function osal_memcpy
   \   0008D1   85..82       MOV       DPL,?V0
   \   0008D4   85..83       MOV       DPH,?V1
   \   0008D7   A3           INC       DPTR
   \   0008D8   A3           INC       DPTR
   \   0008D9   A3           INC       DPTR
   \   0008DA   A982         MOV       R1,DPL
   \   0008DC   AA83         MOV       R2,DPH
   \   0008DE   89..         MOV       ?V0,R1
   \   0008E0   8A..         MOV       ?V1,R2
   \   0008E2   8E..         MOV       ?V2,R6
   \   0008E4   78..         MOV       R0,#?V0
   \   0008E6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0008E9   7418         MOV       A,#0x18
   \   0008EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0008EE   E0           MOVX      A,@DPTR
   \   0008EF   FC           MOV       R4,A
   \   0008F0   7D00         MOV       R5,#0x0
   \   0008F2   7419         MOV       A,#0x19
   \   0008F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0008F7   AA82         MOV       R2,DPL
   \   0008F9   AB83         MOV       R3,DPH
   \   0008FB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0008FE   7403         MOV       A,#0x3
   \   000900   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??MT_ZdoCommandProcessing_86:
   \   000903                ; Setup parameters for call to function aps_AddGroup
   \   000903   7413         MOV       A,#0x13
   \   000905   12....       LCALL     ?XSTACK_DISP101_8
   \   000908   EF           MOV       A,R7
   \   000909   F9           MOV       R1,A
   \   00090A   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
   \   00090D   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000910   7A4B         MOV       R2,#0x4b
   \   000912   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    472                break;
    473          
    474              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    475                MT_ZdoExtCountAllGroups( pBuf );
   \                     ??MT_ZdoCommandProcessing_40:
   \   000915   85..82       MOV       DPL,?XSP + 0
   \   000918   85..83       MOV       DPH,?XSP + 1
   \   00091B   E4           CLR       A
   \   00091C   F0           MOVX      @DPTR,A
   \   00091D                ; Setup parameters for call to function aps_CountAllGroups
   \   00091D   12....       LCALL     `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
   \   000920   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000923   7A4C         MOV       R2,#0x4c
   \   000925   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    476                break;
    477          
    478              case MT_ZDO_EXT_RX_IDLE:
    479                MT_ZdoExtRxIdle( pBuf );
   \                     ??MT_ZdoCommandProcessing_41:
   \   000928   8A82         MOV       DPL,R2
   \   00092A   8B83         MOV       DPH,R3
   \   00092C   A3           INC       DPTR
   \   00092D   A3           INC       DPTR
   \   00092E   A3           INC       DPTR
   \   00092F   E0           MOVX      A,@DPTR
   \   000930   F8           MOV       R0,A
   \   000931   8A82         MOV       DPL,R2
   \   000933   8B83         MOV       DPH,R3
   \   000935   A3           INC       DPTR
   \   000936   A3           INC       DPTR
   \   000937   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00093A   E8           MOV       A,R0
   \   00093B   AA..         MOV       R2,?XSP + 0
   \   00093D   AB..         MOV       R3,?XSP + 1
   \   00093F   7952         MOV       R1,#0x52
   \   000941   6005         JZ        ??MT_ZdoCommandProcessing_87
   \   000943                ; Setup parameters for call to function ZMacSetReq
   \   000943   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000946   8003         SJMP      ??MT_ZdoCommandProcessing_88
   \                     ??MT_ZdoCommandProcessing_87:
   \   000948                ; Setup parameters for call to function ZMacGetReq
   \   000948   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \                     ??MT_ZdoCommandProcessing_88:
   \   00094B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00094B   AC..         MOV       R4,?XSP + 0
   \   00094D   AD..         MOV       R5,?XSP + 1
   \   00094F   7B01         MOV       R3,#0x1
   \   000951   7A4D         MOV       R2,#0x4d
   \   000953   02....       LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
    480                break;
    481          
    482              case MT_ZDO_EXT_NWK_INFO:
    483                MT_ZdoExtNwkInfo( pBuf );
   \                     ??MT_ZdoCommandProcessing_44:
   \   000956                ; Setup parameters for call to function MT_ZdoExtNwkInfo
   \   000956   12....       LCALL     `??MT_ZdoExtNwkInfo::?relay`; Banked call to: MT_ZdoExtNwkInfo
    484                break;
   \   000959   02....       LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
    485          
    486              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    487                MT_ZdoExtSecApsRemoveReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_45:
   \   00095C   85..82       MOV       DPL,?XSP + 0
   \   00095F   85..83       MOV       DPH,?XSP + 1
   \   000962   E4           CLR       A
   \   000963   F0           MOVX      @DPTR,A
   \   000964   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000967   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00096A   E0           MOVX      A,@DPTR
   \   00096B   703B         JNZ       ??MT_ZdoCommandProcessing_89
   \   00096D                ; Setup parameters for call to function osal_build_uint16
   \   00096D   0A           INC       R2
   \   00096E   0A           INC       R2
   \   00096F   0A           INC       R2
   \   000970   AB..         MOV       R3,?V1
   \   000972   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000975   8A..         MOV       ?V2,R2
   \   000977   8B..         MOV       ?V3,R3
   \   000979   E5..         MOV       A,?V0
   \   00097B   2402         ADD       A,#0x2
   \   00097D   F5..         MOV       ?V0,A
   \   00097F   5002         JNC       ??MT_ZdoCommandProcessing_90
   \   000981   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_90:
   \   000983                ; Setup parameters for call to function osal_build_uint16
   \   000983   FA           MOV       R2,A
   \   000984   AB..         MOV       R3,?V1
   \   000986   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000989                ; Setup parameters for call to function ZDSecMgrAPSRemove
   \   000989   78..         MOV       R0,#?V2
   \   00098B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00098E   E5..         MOV       A,?V0
   \   000990   2402         ADD       A,#0x2
   \   000992   FC           MOV       R4,A
   \   000993   E4           CLR       A
   \   000994   35..         ADDC      A,?V1
   \   000996   FD           MOV       R5,A
   \   000997   12....       LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
   \   00099A   7402         MOV       A,#0x2
   \   00099C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00099F   E9           MOV       A,R1
   \   0009A0   85..82       MOV       DPL,?XSP + 0
   \   0009A3   85..83       MOV       DPH,?XSP + 1
   \   0009A6   8008         SJMP      ??MT_ZdoCommandProcessing_91
   \                     ??MT_ZdoCommandProcessing_89:
   \   0009A8   85..82       MOV       DPL,?XSP + 0
   \   0009AB   85..83       MOV       DPH,?XSP + 1
   \   0009AE   7412         MOV       A,#0x12
   \                     ??MT_ZdoCommandProcessing_91:
   \   0009B0   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   0009B3   7A51         MOV       R2,#0x51
   \   0009B5   8023         SJMP      ??MT_ZdoCommandProcessing_75
    488                break;
    489          
    490              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    491                ZDApp_ForceConcentratorChange();
   \                     ??MT_ZdoCommandProcessing_46:
   \   0009B7                ; Setup parameters for call to function ZDApp_ForceConcentratorChange
   \   0009B7   12....       LCALL     `??ZDApp_ForceConcentratorChange::?relay`; Banked call to: ZDApp_ForceConcentratorChange
    492                break;
   \   0009BA   8027         SJMP      ??MT_ZdoCommandProcessing_50
    493          
    494              case MT_ZDO_EXT_SET_PARAMS:
    495                MT_ZdoExtSetParams( pBuf );
   \                     ??MT_ZdoCommandProcessing_47:
   \   0009BC   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0009BF   F8           MOV       R0,A
   \   0009C0   A2E7         MOV       C,0xE0 /* A   */.7
   \   0009C2   500E         JNC       ??MT_ZdoCommandProcessing_92
   \   0009C4   747F         MOV       A,#0x7f
   \   0009C6   58           ANL       A,R0
   \   0009C7   90....       MOV       DPTR,#_NIB + 100
   \   0009CA   6004         JZ        ??MT_ZdoCommandProcessing_93
   \   0009CC   7401         MOV       A,#0x1
   \   0009CE   8001         SJMP      ??MT_ZdoCommandProcessing_94
   \                     ??MT_ZdoCommandProcessing_93:
   \   0009D0   E4           CLR       A
   \                     ??MT_ZdoCommandProcessing_94:
   \   0009D1   F0           MOVX      @DPTR,A
   \                     ??MT_ZdoCommandProcessing_92:
   \   0009D2                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0009D2   AC..         MOV       R4,?XSP + 0
   \   0009D4   AD..         MOV       R5,?XSP + 1
   \   0009D6   7B01         MOV       R3,#0x1
   \   0009D8   7A53         MOV       R2,#0x53
   \                     ??MT_ZdoCommandProcessing_75:
   \   0009DA   7965         MOV       R1,#0x65
   \   0009DC   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    496                break;
   \   0009DF   8002         SJMP      ??MT_ZdoCommandProcessing_50
    497          #endif  // MT_ZDO_EXTENSIONS
    498          
    499              default:
    500                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_49:
   \   0009E1   7E02         MOV       R6,#0x2
    501                break;
    502            }
    503          
    504            return status;
   \                     ??MT_ZdoCommandProcessing_50:
   \   0009E3   EE           MOV       A,R6
   \   0009E4   F9           MOV       R1,A
   \   0009E5   7436         MOV       A,#0x36
   \   0009E7   02....       LJMP      ??Subroutine93_0 & 0xFFFF
    505          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   EA           MOV       A,R2
   \   000004   2403         ADD       A,#0x3
   \   000006   FA           MOV       R2,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F5..         MOV       ?V0,A
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FF           MOV       R7,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
    506          
    507          /***************************************************************************************************
    508           * @fn      MT_ZdoNwkAddrReq
    509           *
    510           * @brief   Handle a nwk address request.
    511           *
    512           * @param   pData  - MT message data
    513           *
    514           * @return  void
    515           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    517          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV       A,#-0x16
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    518            uint8 cmdId;
    519            uint8 retValue;
    520            uint8 reqType;
    521            uint8 startIndex;
    522            uint8 *pExtAddr;
    523          
    524            /* parse header */
    525            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V0,A
    526            pBuf += MT_RPC_FRAME_HDR_SZ;
    527          
    528            /* parse parameters */
    529            pExtAddr = pBuf;
   \   000013   EA           MOV       A,R2
   \   000014   2403         ADD       A,#0x3
   \   000016   FE           MOV       R6,A
   \   000017   E4           CLR       A
   \   000018   3B           ADDC      A,R3
   \   000019   FF           MOV       R7,A
    530            pBuf += Z_EXTADDR_LEN;
   \   00001A   EE           MOV       A,R6
   \   00001B   2408         ADD       A,#0x8
   \   00001D   FA           MOV       R2,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   FB           MOV       R3,A
    531          
    532            /* Request type */
    533            reqType = *pBuf++;
    534          
    535            /* Start index */
    536            startIndex = *pBuf;
    537          
    538            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   000021                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000021   7D00         MOV       R5,#0x0
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FC           MOV       R4,A
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   EE           MOV       A,R6
   \   000031   FA           MOV       R2,A
   \   000032   EF           MOV       A,R7
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000037   12....       LCALL     ?Subroutine51 & 0xFFFF
    539          
    540            /* Build and send back the response */
    541            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_109:
   \   00003A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    542          
    543          #if defined ( MT_ZDO_EXTENSIONS )
    544            {
    545              // Force a response message if the ext address matches a child of this device
    546              associated_devices_t *pAssoc;
    547              uint8 buf[21];
    548              uint8 *pBuf = buf;
    549          
    550              if ( (ZSTACK_ROUTER_BUILD)
    551                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    552                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \   00003D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6007         JZ        ??MT_ZdoNWKAddressRequest_0
   \   000043   6401         XRL       A,#0x1
   \   000045   6003         JZ        $+5
   \   000047   02....       LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
   \                     ??MT_ZdoNWKAddressRequest_0:
   \   00004A                ; Setup parameters for call to function AssocGetWithExt
   \   00004A   EE           MOV       A,R6
   \   00004B   FA           MOV       R2,A
   \   00004C   EF           MOV       A,R7
   \   00004D   FB           MOV       R3,A
   \   00004E   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000051   8A..         MOV       ?V0,R2
   \   000053   8B..         MOV       ?V1,R3
   \   000055   EA           MOV       A,R2
   \   000056   45..         ORL       A,?V1
   \   000058   7003         JNZ       $+5
   \   00005A   02....       LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   6401         XRL       A,#0x1
   \   000068   6003         JZ        $+5
   \   00006A   02....       LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
    553              {
    554                uint16 nwkAddr = NLME_GetShortAddr();
   \   00006D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006D   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000070   8A..         MOV       ?V2,R2
   \   000072   A8..         MOV       R0,?V2
    555          
    556                *pBuf++ = LO_UINT16(nwkAddr);
   \   000074   7401         MOV       A,#0x1
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E8           MOV       A,R0
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   EB           MOV       A,R3
   \   00007C   FA           MOV       R2,A
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   EA           MOV       A,R2
   \   000083   F0           MOVX      @DPTR,A
    557                *pBuf++ = HI_UINT16(nwkAddr);
    558                *pBuf++ = 0;
   \   000084   7403         MOV       A,#0x3
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   E4           CLR       A
   \   00008A   F0           MOVX      @DPTR,A
    559                *pBuf++ = LO_UINT16(NWK_addr_rsp);
   \   00008B   7404         MOV       A,#0x4
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E4           CLR       A
   \   000091   F0           MOVX      @DPTR,A
    560                *pBuf++ = HI_UINT16(NWK_addr_rsp);
   \   000092   7405         MOV       A,#0x5
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   7480         MOV       A,#-0x80
   \   000099   F0           MOVX      @DPTR,A
    561                *pBuf++ = 0;
   \   00009A   7406         MOV       A,#0x6
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E4           CLR       A
   \   0000A0   F0           MOVX      @DPTR,A
    562                *pBuf++ = 0;
   \   0000A1   7407         MOV       A,#0x7
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   E4           CLR       A
   \   0000A7   F0           MOVX      @DPTR,A
    563                *pBuf++ = LO_UINT16(nwkAddr);
   \   0000A8   7408         MOV       A,#0x8
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E8           MOV       A,R0
   \   0000AE   F0           MOVX      @DPTR,A
    564                *pBuf++ = HI_UINT16(nwkAddr);
   \   0000AF   7409         MOV       A,#0x9
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   EA           MOV       A,R2
   \   0000B5   F0           MOVX      @DPTR,A
    565          
    566                *pBuf++ = ZSuccess;
   \   0000B6   740A         MOV       A,#0xa
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   E4           CLR       A
   \   0000BC   F0           MOVX      @DPTR,A
    567          
    568                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
   \   0000BD                ; Setup parameters for call to function sAddrExtCpy
   \   0000BD   EE           MOV       A,R6
   \   0000BE   FC           MOV       R4,A
   \   0000BF   EF           MOV       A,R7
   \   0000C0   FD           MOV       R5,A
   \   0000C1   740B         MOV       A,#0xb
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   AA82         MOV       R2,DPL
   \   0000C8   AB83         MOV       R3,DPH
   \   0000CA   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    569          
    570                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
   \   0000CD   85..82       MOV       DPL,?V0
   \   0000D0   85..83       MOV       DPH,?V1
   \   0000D3   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000D6   F0           MOVX      @DPTR,A
    571                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
   \   0000D7   85..82       MOV       DPL,?V0
   \   0000DA   85..83       MOV       DPH,?V1
   \   0000DD   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000E0   A3           INC       DPTR
   \   0000E1   12....       LCALL     ?Subroutine56 & 0xFFFF
    572                *pBuf = 0;
   \                     ??CrossCallReturnLabel_117:
   \   0000E4   E4           CLR       A
   \   0000E5   F0           MOVX      @DPTR,A
    573          
    574                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
    575                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
   \   0000E6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000E6   04           INC       A
   \   0000E7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000EA   7B15         MOV       R3,#0x15
   \   0000EC   7AFF         MOV       R2,#-0x1
   \   0000EE   7945         MOV       R1,#0x45
   \   0000F0   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    576              }
    577            }
    578          #endif
    579          }
   \                     ??MT_ZdoNWKAddressRequest_1:
   \   0000F3   7416         MOV       A,#0x16
   \   0000F5                REQUIRE ?Subroutine2
   \   0000F5                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC..         MOV       R4,?XSP + 0
   \   00000A   AD..         MOV       R5,?XSP + 1
   \   00000C   7B01         MOV       R3,#0x1
   \   00000E   AA..         MOV       R2,?V0
   \   000010   7965         MOV       R1,#0x65
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine98_0
   \   000001                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function aps_RemoveAllGroup
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
    580          
    581          /***************************************************************************************************
    582           * @fn      MT_ZdoIEEEAddrRequest
    583           *
    584           * @brief   Handle a IEEE address request.
    585           *
    586           * @param   pData  - MT message data
    587           *
    588           * @return  void
    589           ***************************************************************************************************/
    590          static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
    591          {
    592            uint8 cmdId;
    593            uint8 retValue;
    594            uint16 shortAddr;
    595            uint8 reqType;
    596            uint8 startIndex;
    597          
    598            /* parse header */
    599            cmdId = pBuf[MT_RPC_POS_CMD1];
    600            pBuf += MT_RPC_FRAME_HDR_SZ;
    601          
    602            /* Dev address */
    603            shortAddr = osal_build_uint16( pBuf );
    604            pBuf += 2;
    605          
    606            /* request type */
    607            reqType = *pBuf++;
    608          
    609            /* start index */
    610            startIndex = *pBuf;
    611          
    612            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
    613          
    614            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    615          }
    616          
    617          /***************************************************************************************************
    618           * @fn      MT_ZdoNodeDescRequest
    619           *
    620           * @brief   Handle a Node Descriptor request.
    621           *
    622           * @param   pData  - MT message data
    623           *
    624           * @return  void
    625           ***************************************************************************************************/
    626          static void MT_ZdoNodeDescRequest (uint8 *pBuf)
    627          {
    628            uint8 cmdId;
    629            uint8 retValue;
    630            zAddrType_t destAddr;
    631            uint16 shortAddr;
    632          
    633            /* parse header */
    634            cmdId = pBuf[MT_RPC_POS_CMD1];
    635            pBuf += MT_RPC_FRAME_HDR_SZ;
    636          
    637            /* Destination address */
    638            destAddr.addrMode = Addr16Bit;
    639            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    640            pBuf += 2;
    641          
    642            /* Network address of interest */
    643            shortAddr = osal_build_uint16( pBuf );
    644          
    645            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
    646          
    647            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    648          }
    649          
    650          /***************************************************************************************************
    651           * @fn      MT_ZdoPowerDescRequest
    652           *
    653           * @brief   Handle a Power Descriptor request.
    654           *
    655           * @param   pData  - MT message data
    656           *
    657           * @return  void
    658           ***************************************************************************************************/
    659          static void MT_ZdoPowerDescRequest(uint8 *pBuf)
    660          {
    661            uint8 cmdId;
    662            uint8 retValue;
    663            zAddrType_t destAddr;
    664            uint16 shortAddr;
    665          
    666            /* parse header */
    667            cmdId = pBuf[MT_RPC_POS_CMD1];
    668            pBuf += MT_RPC_FRAME_HDR_SZ;
    669          
    670            /* Dev address */
    671            destAddr.addrMode = Addr16Bit;
    672            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    673            pBuf += 2;
    674          
    675            /* Network address of interest */
    676            shortAddr = osal_build_uint16( pBuf );
    677          
    678            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
    679          
    680            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    681          }
    682          
    683          /***************************************************************************************************
    684           * @fn      MT_ZdoSimpleDescRequest
    685           *
    686           * @brief   Handle a Simple Descriptor request.
    687           *
    688           * @param   pBuf  - MT message data
    689           *
    690           * @return  void
    691           ***************************************************************************************************/
    692          static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
    693          {
    694            uint8 cmdId;
    695            uint8 retValue;
    696            uint8 epInt;
    697            zAddrType_t destAddr;
    698            uint16 shortAddr;
    699          
    700            /* parse header */
    701            cmdId = pBuf[MT_RPC_POS_CMD1];
    702            pBuf += MT_RPC_FRAME_HDR_SZ;
    703          
    704            /* Dev address */
    705            destAddr.addrMode = Addr16Bit;
    706            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    707            pBuf += 2;
    708          
    709            /* Network address of interest */
    710            shortAddr = osal_build_uint16( pBuf );
    711            pBuf += 2;
    712          
    713            /* endpoint/interface */
    714            epInt = *pBuf;
    715          
    716            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
    717          
    718            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    719          }
    720          
    721          /***************************************************************************************************
    722           * @fn      MT_ZdoActiveEpRequest
    723           *
    724           * @brief   Handle a Active EP request.
    725           *
    726           * @param   pBuf  - MT message data
    727           *
    728           * @return  void
    729           ***************************************************************************************************/
    730          static void MT_ZdoActiveEpRequest(uint8 *pBuf)
    731          {
    732            uint8 cmdId;
    733            uint8 retValue;
    734            zAddrType_t destAddr;
    735            uint16 shortAddr;
    736          
    737            /* parse header */
    738            cmdId = pBuf[MT_RPC_POS_CMD1];
    739            pBuf += MT_RPC_FRAME_HDR_SZ;
    740          
    741            /* Dev address */
    742            destAddr.addrMode = Addr16Bit;
    743            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    744            pBuf += 2;
    745          
    746            /* Network address of interest */
    747            shortAddr = osal_build_uint16( pBuf );
    748          
    749            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
    750          
    751            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    752          }
    753          
    754          /***************************************************************************************************
    755           * @fn      MT_ZdoMatchDescRequest
    756           *
    757           * @brief   Handle a Match Descriptor request.
    758           *
    759           * @param   pBuf  - MT message data
    760           *
    761           * @return  void
    762           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    763          static void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    764          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV       A,#-0x4a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine32 & 0xFFFF
    765            uint8 cmdId;
    766            uint8 retValue = 0;
    767            uint8 i, numInClusters, numOutClusters;
    768            uint16 profileId;
    769            zAddrType_t destAddr;
    770            uint16 shortAddr;
    771            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    772          
    773            /* parse header */
    774            cmdId = pBuf[MT_RPC_POS_CMD1];
    775            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_195:
   \   00000D   5001         JNC       ??MT_ZdoMatchDescRequest_0
   \   00000F   0F           INC       R7
    776          
    777            /* Dev address */
    778            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine49 & 0xFFFF
    779            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_100:
   \   000018   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ??Subroutine92_0 & 0xFFFF
    780            pBuf += 2;
   \                     ??CrossCallReturnLabel_202:
   \   000023   5001         JNC       ??MT_ZdoMatchDescRequest_1
   \   000025   0F           INC       R7
    781          
    782            /* Network address of interest */
    783            shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000026                ; Setup parameters for call to function osal_build_uint16
   \   000026   FA           MOV       R2,A
   \   000027   EF           MOV       A,R7
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00002C   8A..         MOV       ?V0,R2
   \   00002E   8B..         MOV       ?V1,R3
    784            pBuf += 2;
   \   000030   EE           MOV       A,R6
   \   000031   2402         ADD       A,#0x2
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??MT_ZdoMatchDescRequest_2
   \   000036   0F           INC       R7
    785          
    786            /* Profile ID */
    787            profileId = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   000037                ; Setup parameters for call to function osal_build_uint16
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00003D   8A..         MOV       ?V4,R2
   \   00003F   8B..         MOV       ?V5,R3
    788            pBuf += 2;
    789          
    790            /* NumInClusters */
    791            numInClusters = *pBuf++;
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V6,A
   \   00004A   EE           MOV       A,R6
   \   00004B   2403         ADD       A,#0x3
   \   00004D   FE           MOV       R6,A
   \   00004E   5001         JNC       ??MT_ZdoMatchDescRequest_3
   \   000050   0F           INC       R7
    792            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000051   E5..         MOV       A,?V6
   \   000053   C3           CLR       C
   \   000054   9411         SUBB      A,#0x11
   \   000056   5023         JNC       ??MT_ZdoMatchDescRequest_4
    793            {
    794              /* IN clusters */
    795              for ( i = 0; i < numInClusters; i++ )
   \   000058   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   00005B   E5..         MOV       A,?V3
   \   00005D   C3           CLR       C
   \   00005E   95..         SUBB      A,?V6
   \   000060   5022         JNC       ??MT_ZdoMatchDescRequest_6
    796              {
    797                inClusters[i] = osal_build_uint16( pBuf );
   \   000062                ; Setup parameters for call to function osal_build_uint16
   \   000062   EE           MOV       A,R6
   \   000063   FA           MOV       R2,A
   \   000064   EF           MOV       A,R7
   \   000065   FB           MOV       R3,A
   \   000066   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000069   12....       LCALL     ?Subroutine63 & 0xFFFF
    798                pBuf += 2;
    799              }
   \                     ??CrossCallReturnLabel_193:
   \   00006C   742A         MOV       A,#0x2a
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000074   5001         JNC       ??MT_ZdoMatchDescRequest_7
   \   000076   0F           INC       R7
   \                     ??MT_ZdoMatchDescRequest_7:
   \   000077   05..         INC       ?V3
   \   000079   80E0         SJMP      ??MT_ZdoMatchDescRequest_5
    800            }
    801            else
    802            {
    803              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   7480         MOV       A,#-0x80
   \   000083   F0           MOVX      @DPTR,A
    804            }
    805          
    806            /* NumOutClusters */
    807            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   000084   8E82         MOV       DPL,R6
   \   000086   8F83         MOV       DPH,R7
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F5..         MOV       ?V7,A
   \   00008B   A3           INC       DPTR
   \   00008C   AE82         MOV       R6,DPL
   \   00008E   AF83         MOV       R7,DPH
    808            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000090   C3           CLR       C
   \   000091   9411         SUBB      A,#0x11
   \   000093   5023         JNC       ??MT_ZdoMatchDescRequest_8
    809            {
    810              /* OUT Clusters */
    811              for ( i = 0; i < numOutClusters; i++ )
   \   000095   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   000098   E5..         MOV       A,?V3
   \   00009A   C3           CLR       C
   \   00009B   95..         SUBB      A,?V7
   \   00009D   5023         JNC       ??MT_ZdoMatchDescRequest_10
    812              {
    813                outClusters[i] = osal_build_uint16( pBuf );
   \   00009F                ; Setup parameters for call to function osal_build_uint16
   \   00009F   EE           MOV       A,R6
   \   0000A0   FA           MOV       R2,A
   \   0000A1   EF           MOV       A,R7
   \   0000A2   FB           MOV       R3,A
   \   0000A3   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000A6   12....       LCALL     ?Subroutine63 & 0xFFFF
    814                pBuf += 2;
    815              }
   \                     ??CrossCallReturnLabel_194:
   \   0000A9   740A         MOV       A,#0xa
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0000B1   5001         JNC       ??MT_ZdoMatchDescRequest_11
   \   0000B3   0F           INC       R7
   \                     ??MT_ZdoMatchDescRequest_11:
   \   0000B4   05..         INC       ?V3
   \   0000B6   80E0         SJMP      ??MT_ZdoMatchDescRequest_9
    816            }
    817            else
    818            {
    819              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   0000B8   85..82       MOV       DPL,?XSP + 0
   \   0000BB   85..83       MOV       DPH,?XSP + 1
   \   0000BE   7480         MOV       A,#-0x80
   \   0000C0   8055         SJMP      ??MT_ZdoMatchDescRequest_12
    820            }
    821          
    822            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   704D         JNZ       ??MT_ZdoMatchDescRequest_13
    823            {
    824              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    825                                                 inClusters, numOutClusters, outClusters, 0);
   \   0000CB                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000CB   75..00       MOV       ?V3,#0x0
   \   0000CE   78..         MOV       R0,#?V3
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D3   740B         MOV       A,#0xb
   \   0000D5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D8   88..         MOV       ?V8,R0
   \   0000DA   89..         MOV       ?V9,R1
   \   0000DC   78..         MOV       R0,#?V8
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E1   E5..         MOV       A,?V7
   \   0000E3   F5..         MOV       ?V3,A
   \   0000E5   78..         MOV       R0,#?V3
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EA   742E         MOV       A,#0x2e
   \   0000EC   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EF   88..         MOV       ?V8,R0
   \   0000F1   89..         MOV       ?V9,R1
   \   0000F3   78..         MOV       R0,#?V8
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F8   78..         MOV       R0,#?V4
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FD   A9..         MOV       R1,?V6
   \   0000FF   AC..         MOV       R4,?V0
   \   000101   AD..         MOV       R5,?V1
   \   000103   7409         MOV       A,#0x9
   \   000105   12....       LCALL     ?XSTACK_DISP101_8
   \   000108   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   00010B   7408         MOV       A,#0x8
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000110   E9           MOV       A,R1
   \   000111   85..82       MOV       DPL,?XSP + 0
   \   000114   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   000117   F0           MOVX      @DPTR,A
    826            }
    827          
    828            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   000118                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000118   AC..         MOV       R4,?XSP + 0
   \   00011A   AD..         MOV       R5,?XSP + 1
   \   00011C   7B01         MOV       R3,#0x1
   \   00011E   AA..         MOV       R2,?V2
   \   000120   7965         MOV       R1,#0x65
   \   000122   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    829          }
   \   000125   744A         MOV       A,#0x4a
   \   000127                REQUIRE ?Subroutine3
   \   000127                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine89_0
   \   000003                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   A8..         MOV       R0,?V3
   \   000002                REQUIRE ??Subroutine90_0
   \   000002                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   E4           CLR       A
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C                REQUIRE ??Subroutine91_0
   \   00000C                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V2,A
   \   000009   EE           MOV       A,R6
   \   00000A   2403         ADD       A,#0x3
   \   00000C   FE           MOV       R6,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A                REQUIRE ??Subroutine92_0
   \   00000A                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   EF           MOV       A,R7
   \   000007   FB           MOV       R3,A
   \   000008   22           RET
    830          
    831          /***************************************************************************************************
    832           * @fn      MT_ZdoComplexDescRequest
    833           *
    834           * @brief   Handle a Complex Descriptor request.
    835           *
    836           * @param   pBuf  - MT message data
    837           *
    838           * @return  void
    839           ***************************************************************************************************/
    840          static void MT_ZdoComplexDescRequest(uint8 *pBuf)
    841          {
    842            uint8 cmdId;
    843            uint8 retValue;
    844            zAddrType_t destAddr;
    845            uint16 shortAddr;
    846          
    847            /* parse header */
    848            cmdId = pBuf[MT_RPC_POS_CMD1];
    849            pBuf += MT_RPC_FRAME_HDR_SZ;
    850          
    851            /* Dev address */
    852            destAddr.addrMode = Addr16Bit;
    853            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    854            pBuf += 2;
    855          
    856            /* Network address of interest */
    857            shortAddr = osal_build_uint16( pBuf );
    858          
    859            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
    860          
    861            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    862          }
    863          
    864          /***************************************************************************************************
    865           * @fn      MT_ZdoUserDescRequest
    866           *
    867           * @brief   Handle a User Descriptor request.
    868           *
    869           * @param   pBuf  - MT message data
    870           *
    871           * @return  void
    872           ***************************************************************************************************/
    873          static void MT_ZdoUserDescRequest(uint8 *pBuf)
    874          {
    875            uint8 cmdId;
    876            uint8 retValue;
    877            zAddrType_t destAddr;
    878            uint16 shortAddr;
    879          
    880            /* parse header */
    881            cmdId = pBuf[MT_RPC_POS_CMD1];
    882            pBuf += MT_RPC_FRAME_HDR_SZ;
    883          
    884            /* Dev address */
    885            destAddr.addrMode = Addr16Bit;
    886            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    887            pBuf += 2;
    888          
    889            /* Network address of interest */
    890            shortAddr = osal_build_uint16( pBuf );
    891          
    892            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
    893          
    894            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    895          }
    896          
    897          /***************************************************************************************************
    898           * @fn      MT_ZdoEndDevAnnce
    899           *
    900           * @brief   Handle a End Device Announce Descriptor request.
    901           *
    902           * @param   pBuf  - MT message data
    903           *
    904           * @return  void
    905           ***************************************************************************************************/
    906          static void MT_ZdoEndDevAnnce(uint8 *pBuf)
    907          {
    908            uint8 cmdId;
    909            uint8 retValue;
    910            uint16 shortAddr;
    911            uint8 *pIEEEAddr;
    912          
    913            /* parse header */
    914            cmdId = pBuf[MT_RPC_POS_CMD1];
    915            pBuf += MT_RPC_FRAME_HDR_SZ;
    916          
    917            /* network address */
    918            shortAddr = osal_build_uint16( pBuf );
    919            pBuf += 2;
    920          
    921            /* extended address */
    922            pIEEEAddr = pBuf;
    923            pBuf += Z_EXTADDR_LEN;
    924          
    925            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
    926          
    927            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    928          }
    929          
    930          /***************************************************************************************************
    931           * @fn      MT_ZdoUserDescSet
    932           *
    933           * @brief   Handle a User Descriptor Set.
    934           *
    935           * @param   pBuf  - MT message data
    936           *
    937           * @return  void
    938           ***************************************************************************************************/
    939          static void MT_ZdoUserDescSet(uint8 *pBuf)
    940          {
    941            uint8 cmdId;
    942            uint8 retValue;
    943            zAddrType_t destAddr;
    944            uint16 shortAddr;
    945            UserDescriptorFormat_t userDesc;
    946          
    947            /* parse header */
    948            cmdId = pBuf[MT_RPC_POS_CMD1];
    949            pBuf += MT_RPC_FRAME_HDR_SZ;
    950          
    951            /* Dev address */
    952            destAddr.addrMode = Addr16Bit;
    953            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    954            pBuf += 2;
    955          
    956            /* Network address of interest */
    957            shortAddr = osal_build_uint16( pBuf );
    958            pBuf += 2;
    959          
    960            /* User descriptor */
    961            userDesc.len = *pBuf++;
    962            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
    963          
    964            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
    965          
    966            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    967          }
    968          
    969          /***************************************************************************************************
    970           * @fn      MT_ZdoServiceDiscRequest
    971           *
    972           * @brief   Handle a Server Discovery request.
    973           *
    974           * @param   pBuf  - MT message data
    975           *
    976           * @return  void
    977           ***************************************************************************************************/
    978          static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
    979          {
    980            uint8 cmdId;
    981            uint8 retValue;
    982            uint16 serviceMask;
    983          
    984            /* parse header */
    985            cmdId = pBuf[MT_RPC_POS_CMD1];
    986            pBuf += MT_RPC_FRAME_HDR_SZ;
    987          
    988            /* Service Mask */
    989            serviceMask = osal_build_uint16( pBuf );
    990          
    991            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
    992          
    993            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    994          }
    995          
    996          /***************************************************************************************************
    997           * @fn      MT_ZdoEndDevBindRequest
    998           *
    999           * @brief   Handle a End Device Bind request.
   1000           *
   1001           * @param   pBuf  - MT message data
   1002           *
   1003           * @return  void
   1004           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1005          static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
   1006          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV       A,#-0x46
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine32 & 0xFFFF
   1007            uint8 cmdId;
   1008            uint8 retValue = 0;
   1009            uint8 i, epInt, numInClusters, numOutClusters;
   1010            zAddrType_t destAddr;
   1011            uint16 shortAddr;
   1012            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1013          
   1014            /* parse header */
   1015            cmdId = pBuf[MT_RPC_POS_CMD1];
   1016            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_196:
   \   00000D   5001         JNC       ??MT_ZdoEndDevBindRequest_0
   \   00000F   0F           INC       R7
   1017          
   1018            /* Dev address */
   1019            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine49 & 0xFFFF
   1020            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_101:
   \   000018   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ??Subroutine92_0 & 0xFFFF
   1021            pBuf += 2;
   \                     ??CrossCallReturnLabel_203:
   \   000023   5001         JNC       ??MT_ZdoEndDevBindRequest_1
   \   000025   0F           INC       R7
   1022          
   1023            /* Local coordinator of the binding */
   1024            shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000026                ; Setup parameters for call to function osal_build_uint16
   \   000026   FA           MOV       R2,A
   \   000027   EF           MOV       A,R7
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00002C   8A..         MOV       ?V0,R2
   \   00002E   8B..         MOV       ?V1,R3
   1025            pBuf += 2;
   1026          
   1027            /* For now, skip past the extended address */
   1028            pBuf += Z_EXTADDR_LEN;
   1029          
   1030            /* Endpoint */
   1031            epInt = *pBuf++;
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F5..         MOV       ?V3,A
   \   000041   EE           MOV       A,R6
   \   000042   240B         ADD       A,#0xb
   \   000044   FE           MOV       R6,A
   \   000045   5001         JNC       ??MT_ZdoEndDevBindRequest_2
   \   000047   0F           INC       R7
   1032          
   1033            /* Profile ID */
   1034            profileID = osal_build_uint16( pBuf );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   000048                ; Setup parameters for call to function osal_build_uint16
   \   000048   FA           MOV       R2,A
   \   000049   EF           MOV       A,R7
   \   00004A   FB           MOV       R3,A
   \   00004B   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00004E   8A..         MOV       ?V6,R2
   \   000050   8B..         MOV       ?V7,R3
   1035            pBuf += 2;
   1036          
   1037            /* NumInClusters */
   1038            numInClusters = *pBuf++;
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V4,A
   \   00005B   EE           MOV       A,R6
   \   00005C   2403         ADD       A,#0x3
   \   00005E   FE           MOV       R6,A
   \   00005F   5001         JNC       ??MT_ZdoEndDevBindRequest_3
   \   000061   0F           INC       R7
   1039            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000062   E5..         MOV       A,?V4
   \   000064   C3           CLR       C
   \   000065   9410         SUBB      A,#0x10
   \   000067   5025         JNC       ??MT_ZdoEndDevBindRequest_4
   1040            {
   1041              for ( i = 0; i < numInClusters; i++ )
   \   000069   75..00       MOV       ?V5,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00006C   E5..         MOV       A,?V5
   \   00006E   C3           CLR       C
   \   00006F   95..         SUBB      A,?V4
   \   000071   5024         JNC       ??MT_ZdoEndDevBindRequest_6
   1042              {
   1043                inClusters[i] = osal_build_uint16( pBuf );
   \   000073                ; Setup parameters for call to function osal_build_uint16
   \   000073   EE           MOV       A,R6
   \   000074   FA           MOV       R2,A
   \   000075   EF           MOV       A,R7
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00007A   A8..         MOV       R0,?V5
   \   00007C   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   1044                pBuf += 2;
   1045              }
   \                     ??CrossCallReturnLabel_191:
   \   00007F   7428         MOV       A,#0x28
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000087   5001         JNC       ??MT_ZdoEndDevBindRequest_7
   \   000089   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   00008A   05..         INC       ?V5
   \   00008C   80DE         SJMP      ??MT_ZdoEndDevBindRequest_5
   1046            }
   1047            else
   1048            {
   1049              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   7480         MOV       A,#-0x80
   \   000096   F0           MOVX      @DPTR,A
   1050            }
   1051          
   1052            /* NumOutClusters */
   1053            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   000097   8E82         MOV       DPL,R6
   \   000099   8F83         MOV       DPH,R7
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F5..         MOV       ?V8,A
   \   00009E   A3           INC       DPTR
   \   00009F   AE82         MOV       R6,DPL
   \   0000A1   AF83         MOV       R7,DPH
   1054            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   0000A3   C3           CLR       C
   \   0000A4   9410         SUBB      A,#0x10
   \   0000A6   5025         JNC       ??MT_ZdoEndDevBindRequest_8
   1055            {
   1056              for ( i = 0; i < numOutClusters; i++ )
   \   0000A8   75..00       MOV       ?V5,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   0000AB   E5..         MOV       A,?V5
   \   0000AD   C3           CLR       C
   \   0000AE   95..         SUBB      A,?V8
   \   0000B0   5025         JNC       ??MT_ZdoEndDevBindRequest_10
   1057              {
   1058                outClusters[i] = osal_build_uint16( pBuf );
   \   0000B2                ; Setup parameters for call to function osal_build_uint16
   \   0000B2   EE           MOV       A,R6
   \   0000B3   FA           MOV       R2,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   FB           MOV       R3,A
   \   0000B6   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0000B9   A8..         MOV       R0,?V5
   \   0000BB   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   1059                pBuf += 2;
   1060              }
   \                     ??CrossCallReturnLabel_192:
   \   0000BE   740A         MOV       A,#0xa
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   0000C6   5001         JNC       ??MT_ZdoEndDevBindRequest_11
   \   0000C8   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   0000C9   05..         INC       ?V5
   \   0000CB   80DE         SJMP      ??MT_ZdoEndDevBindRequest_9
   1061            }
   1062            else
   1063            {
   1064              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   0000CD   85..82       MOV       DPL,?XSP + 0
   \   0000D0   85..83       MOV       DPH,?XSP + 1
   \   0000D3   7480         MOV       A,#-0x80
   \   0000D5   805A         SJMP      ??MT_ZdoEndDevBindRequest_12
   1065            }
   1066          
   1067            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000D7   85..82       MOV       DPL,?XSP + 0
   \   0000DA   85..83       MOV       DPH,?XSP + 1
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   7052         JNZ       ??MT_ZdoEndDevBindRequest_13
   1068            {
   1069              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1070                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000E0                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000E0   75..00       MOV       ?V5,#0x0
   \   0000E3   78..         MOV       R0,#?V5
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E8   740B         MOV       A,#0xb
   \   0000EA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000ED   88..         MOV       ?V10,R0
   \   0000EF   89..         MOV       ?V11,R1
   \   0000F1   78..         MOV       R0,#?V10
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F6   E5..         MOV       A,?V8
   \   0000F8   F5..         MOV       ?V5,A
   \   0000FA   78..         MOV       R0,#?V5
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FF   742C         MOV       A,#0x2c
   \   000101   12....       LCALL     ?XSTACK_DISP100_8
   \   000104   88..         MOV       ?V8,R0
   \   000106   89..         MOV       ?V9,R1
   \   000108   78..         MOV       R0,#?V8
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010D   78..         MOV       R0,#?V4
   \   00010F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000112   78..         MOV       R0,#?V6
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000117   A9..         MOV       R1,?V3
   \   000119   AC..         MOV       R4,?V0
   \   00011B   AD..         MOV       R5,?V1
   \   00011D   740A         MOV       A,#0xa
   \   00011F   12....       LCALL     ?XSTACK_DISP101_8
   \   000122   12....       LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000125   7409         MOV       A,#0x9
   \   000127   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012A   E9           MOV       A,R1
   \   00012B   85..82       MOV       DPL,?XSP + 0
   \   00012E   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   000131   F0           MOVX      @DPTR,A
   1071            }
   1072          
   1073            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   000132                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000132   AC..         MOV       R4,?XSP + 0
   \   000134   AD..         MOV       R5,?XSP + 1
   \   000136   7B01         MOV       R3,#0x1
   \   000138   AA..         MOV       R2,?V2
   \   00013A   7965         MOV       R1,#0x65
   \   00013C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1074          }
   \   00013F   7446         MOV       A,#0x46
   \   000141                REQUIRE ?Subroutine4
   \   000141                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV       R7,#0xc
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
   1075          
   1076          /***************************************************************************************************
   1077           * @fn      MT_ZdoBindRequest
   1078           *
   1079           * @brief   Handle a Bind request.
   1080           *
   1081           * @param   pBuf  - MT message data
   1082           *
   1083           * @return  void
   1084           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          static void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
   1086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine30 & 0xFFFF
   1087            uint8 cmdId;
   1088            uint8 retValue;
   1089            zAddrType_t destAddr, devAddr;
   1090            uint8 *pSrcAddr, *ptr;
   1091            uint8 srcEPInt, dstEPInt;
   1092            uint16 clusterID;
   1093          
   1094            /* parse header */
   1095            cmdId = pBuf[MT_RPC_POS_CMD1];
   1096            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_49:
   \   00000D   5001         JNC       ??MT_ZdoBindRequest_0
   \   00000F   0F           INC       R7
   1097          
   1098            /* Dev address */
   1099            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000010   7412         MOV       A,#0x12
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine49 & 0xFFFF
   1100            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_102:
   \   000018   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00001B   740A         MOV       A,#0xa
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine28 & 0xFFFF
   1101            pBuf += 2;
   1102          
   1103            /* SrcAddress */
   1104            pSrcAddr = pBuf;
   1105            pBuf += Z_EXTADDR_LEN;
   1106          
   1107            /* SrcEPInt */
   1108            srcEPInt = *pBuf++;
   1109          
   1110            /* ClusterID */
   1111            clusterID = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_45:
   \   000023   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000026   8A..         MOV       ?V4,R2
   \   000028   8B..         MOV       ?V5,R3
   1112            pBuf += 2;
   1113          
   1114            /* Destination Address mode */
   1115            devAddr.addrMode = *pBuf++;
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   7409         MOV       A,#0x9
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E8           MOV       A,R0
   \   000038   F0           MOVX      @DPTR,A
   \   000039   EE           MOV       A,R6
   \   00003A   2403         ADD       A,#0x3
   \   00003C   FE           MOV       R6,A
   \   00003D   5001         JNC       ??MT_ZdoBindRequest_1
   \   00003F   0F           INC       R7
   1116          
   1117            /* Destination Address */
   1118            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   000040   7403         MOV       A,#0x3
   \   000042   68           XRL       A,R0
   \   000043   700E         JNZ       ??MT_ZdoBindRequest_2
   1119            {
   1120              ptr = pBuf;
   1121              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000045                ; Setup parameters for call to function sAddrExtCpy
   \   000045   EE           MOV       A,R6
   \   000046   FC           MOV       R4,A
   \   000047   EF           MOV       A,R7
   \   000048   FD           MOV       R5,A
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000051   800F         SJMP      ??CrossCallReturnLabel_125
   1122            }
   1123            else
   1124            {
   1125              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoBindRequest_2:
   \   000053                ; Setup parameters for call to function osal_build_uint16
   \   000053   EE           MOV       A,R6
   \   000054   FA           MOV       R2,A
   \   000055   EF           MOV       A,R7
   \   000056   FB           MOV       R3,A
   \   000057   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00005A   7401         MOV       A,#0x1
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine58 & 0xFFFF
   1126            }
   1127            /* The short address occupies LSB two bytes */
   1128            pBuf += Z_EXTADDR_LEN;
   1129          
   1130            /* DstEPInt */
   1131            dstEPInt = *pBuf;
   1132          
   1133            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_125:
   \   000062                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000062   75..00       MOV       ?V6,#0x0
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000070   7403         MOV       A,#0x3
   \   000072   12....       LCALL     ?XSTACK_DISP100_8
   \   000075   88..         MOV       ?V6,R0
   \   000077   89..         MOV       ?V7,R1
   \   000079   78..         MOV       R0,#?V6
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   78..         MOV       R0,#?V2
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   A9..         MOV       R1,?V1
   \   00008A   7412         MOV       A,#0x12
   \   00008C   12....       LCALL     ?XSTACK_DISP102_8
   \   00008F   7A21         MOV       R2,#0x21
   \   000091                REQUIRE ?Subroutine1
   \   000091                ; // Fall through to label ?Subroutine1
   1134          
   1135            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1136          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV       A,#0x8
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00000D   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000010   7413         MOV       A,#0x13
   \   000012                REQUIRE ??Subroutine93_0
   \   000012                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C                REQUIRE ??Subroutine94_0
   \   00000C                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   78..         MOV       R0,#?V6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   EE           MOV       A,R6
   \   00000E   2403         ADD       A,#0x3
   \   000010   FE           MOV       R6,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   F5..         MOV       ?V2,A
   \   00000A   E4           CLR       A
   \   00000B   3F           ADDC      A,R7
   \   00000C   F5..         MOV       ?V3,A
   \   00000E   E5..         MOV       A,?V2
   \   000010   2408         ADD       A,#0x8
   \   000012   FE           MOV       R6,A
   \   000013   E4           CLR       A
   \   000014   35..         ADDC      A,?V3
   \   000016   FF           MOV       R7,A
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   \   00001E   A3           INC       DPTR
   \   00001F   AE82         MOV       R6,DPL
   \   000021   AF83         MOV       R7,DPH
   \   000023                ; Setup parameters for call to function osal_build_uint16
   \   000023                ; Setup parameters for call to function osal_build_uint16
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1137          
   1138          /***************************************************************************************************
   1139           * @fn      MT_ZdoUnbindRequest
   1140           *
   1141           * @brief   Handle a Unbind request.
   1142           *
   1143           * @param   pBuf  - MT message data
   1144           *
   1145           * @return  void
   1146           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1147          static void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
   1148          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine30 & 0xFFFF
   1149            uint8 cmdId;
   1150            uint8 retValue;
   1151            zAddrType_t destAddr, devAddr;
   1152            uint8 *pSrcAddr, *ptr;
   1153            uint8 srcEPInt, dstEPInt;
   1154            uint16 clusterID;
   1155          
   1156            /* parse header */
   1157            cmdId = pBuf[MT_RPC_POS_CMD1];
   1158            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_50:
   \   00000D   5001         JNC       ??MT_ZdoUnbindRequest_0
   \   00000F   0F           INC       R7
   1159          
   1160            /* dev address */
   1161            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000010   7412         MOV       A,#0x12
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine49 & 0xFFFF
   1162            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_103:
   \   000018   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00001B   740A         MOV       A,#0xa
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ?Subroutine28 & 0xFFFF
   1163            pBuf += 2;
   1164          
   1165            /* SrcAddress */
   1166            pSrcAddr = pBuf;
   1167            pBuf += Z_EXTADDR_LEN;
   1168          
   1169            /* SrcEPInt */
   1170            srcEPInt = *pBuf++;
   1171          
   1172            /* ClusterID */
   1173            clusterID = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_46:
   \   000023   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000026   8A..         MOV       ?V4,R2
   \   000028   8B..         MOV       ?V5,R3
   1174            pBuf += 2;
   1175          
   1176            /* Destination Address mode */
   1177            devAddr.addrMode = *pBuf++;
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   7409         MOV       A,#0x9
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   E8           MOV       A,R0
   \   000038   F0           MOVX      @DPTR,A
   \   000039   EE           MOV       A,R6
   \   00003A   2403         ADD       A,#0x3
   \   00003C   FE           MOV       R6,A
   \   00003D   5001         JNC       ??MT_ZdoUnbindRequest_1
   \   00003F   0F           INC       R7
   1178          
   1179            /* Destination Address */
   1180            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   000040   7403         MOV       A,#0x3
   \   000042   68           XRL       A,R0
   \   000043   700E         JNZ       ??MT_ZdoUnbindRequest_2
   1181            {
   1182              ptr = pBuf;
   1183              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000045                ; Setup parameters for call to function sAddrExtCpy
   \   000045   EE           MOV       A,R6
   \   000046   FC           MOV       R4,A
   \   000047   EF           MOV       A,R7
   \   000048   FD           MOV       R5,A
   \   000049   7401         MOV       A,#0x1
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000051   800F         SJMP      ??CrossCallReturnLabel_126
   1184            }
   1185            else
   1186            {
   1187              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoUnbindRequest_2:
   \   000053                ; Setup parameters for call to function osal_build_uint16
   \   000053   EE           MOV       A,R6
   \   000054   FA           MOV       R2,A
   \   000055   EF           MOV       A,R7
   \   000056   FB           MOV       R3,A
   \   000057   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00005A   7401         MOV       A,#0x1
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine58 & 0xFFFF
   1188            }
   1189            /* The short address occupies LSB two bytes */
   1190            pBuf += Z_EXTADDR_LEN;
   1191          
   1192            /* dstEPInt */
   1193            dstEPInt = *pBuf;
   1194          
   1195            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_126:
   \   000062                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000062   75..00       MOV       ?V6,#0x0
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000070   7403         MOV       A,#0x3
   \   000072   12....       LCALL     ?XSTACK_DISP100_8
   \   000075   88..         MOV       ?V6,R0
   \   000077   89..         MOV       ?V7,R1
   \   000079   78..         MOV       R0,#?V6
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   78..         MOV       R0,#?V2
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   A9..         MOV       R1,?V1
   \   00008A   7412         MOV       A,#0x12
   \   00008C   12....       LCALL     ?XSTACK_DISP102_8
   \   00008F   7A22         MOV       R2,#0x22
   \   000091   02....       LJMP      ?Subroutine1 & 0xFFFF
   1196          
   1197            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1198          }
   1199          
   1200          #if defined (MT_SYS_KEY_MANAGEMENT)
   1201          /***************************************************************************************************
   1202           * @fn      MT_ZdoSetLinkKey
   1203           *
   1204           * @brief   Set an application or trust center link key.
   1205           *
   1206           * @param   pBuf  - MT message data
   1207           *
   1208           * @return  void
   1209           ***************************************************************************************************/
   1210          static void MT_ZdoSetLinkKey(uint8 *pBuf)
   1211          {
   1212            uint8 cmdId;
   1213            uint8 retValue;
   1214            uint8 *pExtAddr;
   1215            uint8 *pKey;
   1216            uint16 shortAddr;
   1217          
   1218            /* parse header */
   1219            cmdId = pBuf[MT_RPC_POS_CMD1];
   1220            pBuf += MT_RPC_FRAME_HDR_SZ;
   1221          
   1222            /* ShortAddr */
   1223            shortAddr = osal_build_uint16( pBuf );
   1224            pBuf += 2;
   1225          
   1226            /* Extended Addr */
   1227            pExtAddr = pBuf;
   1228            pBuf += Z_EXTADDR_LEN;
   1229          
   1230            /* Key data */
   1231            pKey = pBuf;
   1232          
   1233            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1234          
   1235            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1236          }
   1237          
   1238          /***************************************************************************************************
   1239           * @fn      MT_ZdoRemoveLinkKey
   1240           *
   1241           * @brief   Remove an application or trust center link key.
   1242           *
   1243           * @param   pBuf  - MT message data
   1244           *
   1245           * @return  void
   1246           ***************************************************************************************************/
   1247          static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1248          {
   1249            uint8 cmdId;
   1250            uint8 retValue;
   1251            uint8 *pExtAddr;
   1252          
   1253            /* parse header */
   1254            cmdId = pBuf[MT_RPC_POS_CMD1];
   1255            pBuf += MT_RPC_FRAME_HDR_SZ;
   1256          
   1257            /* ShortAddr */
   1258            pExtAddr = pBuf;
   1259          
   1260            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1261          
   1262            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1263          }
   1264          
   1265          /***************************************************************************************************
   1266           * @fn      MT_ZdoGetLinkKey
   1267           *
   1268           * @brief   Get the application link key.
   1269           *
   1270           * @param   pBuf  - MT message data
   1271           *
   1272           * @return  void
   1273           ***************************************************************************************************/
   1274          static void MT_ZdoGetLinkKey(uint8 *pBuf)
   1275          {
   1276            uint8 cmdId;
   1277            uint8 retValue;
   1278            uint8 *pExtAddr;
   1279            uint8 *retBuf = NULL;
   1280            uint8 len;
   1281            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1282            uint16 apsLinkKeyNvId;
   1283          
   1284            // parse header
   1285            len = pBuf[MT_RPC_POS_LEN];
   1286            cmdId = pBuf[MT_RPC_POS_CMD1];
   1287            pBuf += MT_RPC_FRAME_HDR_SZ;
   1288          
   1289            // Extended Address
   1290            pExtAddr = pBuf;
   1291          
   1292            // Check for illegal extended address -- indicating network address lookup
   1293            if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
   1294                 ( len >= Z_EXTADDR_LEN )            )
   1295            {
   1296              uint16 nwkAddr;
   1297              nwkAddr = osal_build_uint16( pExtAddr );
   1298              (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
   1299            }
   1300          
   1301            // Fetch the key NV ID
   1302            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1303          
   1304            if (retValue == ZSuccess)
   1305            {
   1306              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1307              {
   1308                // retrieve key from NV
   1309                if (osal_nv_read( apsLinkKeyNvId, 0,
   1310                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1311                {
   1312                  retValue = ZNwkUnknownDevice;
   1313                }
   1314              }
   1315              else
   1316              {
   1317                retValue = ZNwkUnknownDevice;
   1318              }
   1319            }
   1320          
   1321            // Construct the response message
   1322            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1323            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1324            {
   1325              if (retValue == ZSuccess)
   1326              {
   1327                // Extended Address
   1328                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1329          
   1330                // Key data
   1331                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1332              }
   1333              else
   1334              {
   1335                // Failed case - set the rest fields to all FF
   1336                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1337              }
   1338          
   1339              retBuf[0] = retValue;  // Status
   1340          
   1341              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1342          
   1343              // clear retBuf because it contains key data and free allocated memory
   1344              osal_memset(retBuf, 0x00, len);
   1345          
   1346              osal_mem_free(retBuf);
   1347            }
   1348          
   1349            // clear copy of key in RAM
   1350            if (pApsLinkKey != NULL)
   1351            {
   1352              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1353          
   1354              osal_mem_free(pApsLinkKey);
   1355            }
   1356          
   1357            return;
   1358          }
   1359          #endif // MT_SYS_KEY_MANAGEMENT
   1360          
   1361          #if defined (MT_ZDO_MGMT)
   1362          /***************************************************************************************************
   1363           * @fn      MT_ZdoMgmtNwkDiscRequest
   1364           *
   1365           * @brief   Handle a Mgmt Nwk Discovery request.
   1366           *
   1367           * @param   pBuf  - MT message data
   1368           *
   1369           * @return  void
   1370           ***************************************************************************************************/
   1371          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1372          {
   1373            uint8 cmdId;
   1374            uint8 retValue;
   1375            zAddrType_t destAddr;
   1376            uint32 scanChannels;
   1377            uint8 scanDuration, startIndex;
   1378          
   1379            /* parse header */
   1380            cmdId = pBuf[MT_RPC_POS_CMD1];
   1381            pBuf += MT_RPC_FRAME_HDR_SZ;
   1382          
   1383            /* Dev address */
   1384            destAddr.addrMode = Addr16Bit;
   1385            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1386            pBuf += 2;
   1387          
   1388            /* Scan Channels */
   1389            scanChannels = osal_build_uint32(pBuf, 4);
   1390            pBuf += 4;
   1391          
   1392            /* Scan Duration */
   1393            scanDuration = *pBuf++;
   1394          
   1395            /* Start Index */
   1396            startIndex = *pBuf;
   1397          
   1398            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1399          
   1400            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1401          }
   1402          
   1403          /***************************************************************************************************
   1404           * @fn      MT_ZdoMgmtLqiRequest
   1405           *
   1406           * @brief   Handle a Mgmt Lqi request.
   1407           *
   1408           * @param   pBuf  - MT message data
   1409           *
   1410           * @return  void
   1411           ***************************************************************************************************/
   1412          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1413          {
   1414            uint8 cmdId;
   1415            uint8 retValue;
   1416            zAddrType_t destAddr;
   1417            uint8 startIndex;
   1418          
   1419            /* parse header */
   1420            cmdId = pBuf[MT_RPC_POS_CMD1];
   1421            pBuf += MT_RPC_FRAME_HDR_SZ;
   1422          
   1423            /* Dev address */
   1424            destAddr.addrMode = Addr16Bit;
   1425            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1426            pBuf += 2;
   1427          
   1428            /* Start Index */
   1429            startIndex = *pBuf;
   1430          
   1431            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1432          
   1433            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1434          }
   1435          
   1436          /***************************************************************************************************
   1437           * @fn      MT_ZdoMgmtRtgRequest
   1438           *
   1439           * @brief   Handle a Mgmt Rtg request.
   1440           *
   1441           * @param   pBuf  - MT message data
   1442           *
   1443           * @return  void
   1444           ***************************************************************************************************/
   1445          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1446          {
   1447            uint8 cmdId;
   1448            uint8 retValue;
   1449            zAddrType_t destAddr;
   1450            uint8 startIndex;
   1451          
   1452            /* parse header */
   1453            cmdId = pBuf[MT_RPC_POS_CMD1];
   1454            pBuf += MT_RPC_FRAME_HDR_SZ;
   1455          
   1456            /* Dev Address */
   1457            destAddr.addrMode = Addr16Bit;
   1458            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1459            pBuf += 2;
   1460          
   1461            /* Start Index */
   1462            startIndex = *pBuf;
   1463          
   1464            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1465          
   1466            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1467          }
   1468          
   1469          /***************************************************************************************************
   1470           * @fn      MT_ZdoMgmtBindRequest
   1471           *
   1472           * @brief   Handle a Mgmt Bind request.
   1473           *
   1474           * @param   pBuf  - MT message data
   1475           *
   1476           * @return  void
   1477           ***************************************************************************************************/
   1478          static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1479          {
   1480            uint8 cmdId;
   1481            uint8 retValue;
   1482            zAddrType_t destAddr;
   1483            uint8 startIndex;
   1484          
   1485            /* parse header */
   1486            cmdId = pBuf[MT_RPC_POS_CMD1];
   1487            pBuf += MT_RPC_FRAME_HDR_SZ;
   1488          
   1489            /* Dev Address */
   1490            destAddr.addrMode = Addr16Bit;
   1491            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1492            pBuf += 2;
   1493          
   1494            /* Start Index */
   1495            startIndex = *pBuf;
   1496          
   1497            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1498          
   1499            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1500          }
   1501          
   1502          /***************************************************************************************************
   1503           * @fn      MT_ZdoMgmtLeaveRequest
   1504           *
   1505           * @brief   Handle a Mgmt Leave request.
   1506           *
   1507           * @param   pBuf  - MT message data
   1508           *
   1509           * @return  void
   1510           ***************************************************************************************************/
   1511          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1512          {
   1513            uint8 cmdId;
   1514            uint8 retValue;
   1515            zAddrType_t destAddr;
   1516            uint8 *pIEEEAddr;
   1517            uint8 removeChildren;
   1518            uint8 rejoin;
   1519          
   1520            /* parse header */
   1521            cmdId = pBuf[MT_RPC_POS_CMD1];
   1522            pBuf += MT_RPC_FRAME_HDR_SZ;
   1523          
   1524            /* Destination Address */
   1525            destAddr.addrMode = Addr16Bit;
   1526            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1527            pBuf += 2;
   1528          
   1529            /* IEEE address */
   1530            pIEEEAddr = pBuf;
   1531            pBuf += Z_EXTADDR_LEN;
   1532          
   1533            /* Rejoin if bit0 is set */
   1534            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1535          
   1536            /* Remove Children if bit1 is set */
   1537            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1538          
   1539            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1540          
   1541            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1542          }
   1543          
   1544          /***************************************************************************************************
   1545           * @fn      MT_ZdoMgmtDirectJoinRequest
   1546           *
   1547           * @brief   Handle a Mgmt Direct Join request.
   1548           *
   1549           * @param   pBuf  - MT message data
   1550           *
   1551           * @return  void
   1552           ***************************************************************************************************/
   1553          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1554          {
   1555            uint8 cmdId;
   1556            uint8 retValue;
   1557            zAddrType_t destAddr;
   1558            uint8 *deviceAddr;
   1559            uint8 capInfo;
   1560          
   1561            /* parse header */
   1562            cmdId = pBuf[MT_RPC_POS_CMD1];
   1563            pBuf += MT_RPC_FRAME_HDR_SZ;
   1564          
   1565            /* Destination Address */
   1566            destAddr.addrMode = Addr16Bit;
   1567            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1568            pBuf += 2;
   1569          
   1570            /* Device Address */
   1571            deviceAddr = pBuf;
   1572            pBuf += Z_EXTADDR_LEN;
   1573          
   1574            /* Capability information */
   1575            capInfo = *pBuf;
   1576          
   1577            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1578          
   1579            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1580          }
   1581          
   1582          /***************************************************************************************************
   1583           * @fn      MT_ZdoMgmtPermitJoinRequest
   1584           *
   1585           * @brief   Handle a Mgmt Permit Join request.
   1586           *
   1587           * @param   pBuf  - MT message data
   1588           *
   1589           * @return  void
   1590           ***************************************************************************************************/
   1591          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1592          {
   1593            uint8 cmdId;
   1594            uint8 dataLn;
   1595            uint8 retValue;
   1596            uint8 duration;
   1597            uint8 tcSignificance;
   1598            zAddrType_t destAddr;
   1599          
   1600            /* parse header */
   1601            dataLn = pBuf[MT_RPC_POS_LEN];
   1602            cmdId = pBuf[MT_RPC_POS_CMD1];
   1603            pBuf += MT_RPC_FRAME_HDR_SZ;
   1604          
   1605            if ( 4 == dataLn )
   1606            {
   1607              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1608              destAddr.addrMode = afAddr16Bit;
   1609            }
   1610            else
   1611            {
   1612              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1613              destAddr.addrMode = *pBuf++;
   1614            }
   1615          
   1616            /* Destination Address */
   1617            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1618            pBuf += 2;
   1619          
   1620            /* Duration */
   1621            duration = *pBuf++;
   1622          
   1623            /* Trust center significance */
   1624            tcSignificance = *pBuf;
   1625          
   1626            ignoreIndication = TRUE;
   1627            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1628            ignoreIndication = FALSE;
   1629          
   1630            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1631          }
   1632          
   1633          /***************************************************************************************************
   1634           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1635           *
   1636           * @brief   Handle a Mgmt Nwk Update request.
   1637           *
   1638           * @param   pBuf  - MT message data
   1639           *
   1640           * @return  void
   1641           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1642          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtNwkUpdateRequest:
   1643          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine30 & 0xFFFF
   1644            uint8 cmdId;
   1645            uint8 retValue;
   1646            zAddrType_t destAddr;
   1647            uint32 channelMask;
   1648            uint8 scanDuration, scanCount;
   1649            uint16 nwkManagerAddr;
   1650          
   1651              /* parse header */
   1652            cmdId = pBuf[MT_RPC_POS_CMD1];
   1653            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_51:
   \   00000D   5001         JNC       ??MT_ZdoMgmtNwkUpdateRequest_0
   \   00000F   0F           INC       R7
   1654          
   1655            /* Destination address */
   1656            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMgmtNwkUpdateRequest_0:
   \   000010                ; Setup parameters for call to function osal_build_uint16
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine58 & 0xFFFF
   1657            pBuf += 2;
   1658          
   1659            /* Destination address mode */
   1660            destAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_127:
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   C0E0         PUSH      A
   \   000027   7409         MOV       A,#0x9
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   D0E0         POP       A
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   EE           MOV       A,R6
   \   000030   2403         ADD       A,#0x3
   \   000032   FE           MOV       R6,A
   \   000033   5001         JNC       ??MT_ZdoMgmtNwkUpdateRequest_1
   \   000035   0F           INC       R7
   1661          
   1662            channelMask = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_1:
   \   000036                ; Setup parameters for call to function osal_build_uint32
   \   000036   7904         MOV       R1,#0x4
   \   000038   FA           MOV       R2,A
   \   000039   EF           MOV       A,R7
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00003E   8A..         MOV       ?V4,R2
   \   000040   8B..         MOV       ?V5,R3
   \   000042   8C..         MOV       ?V6,R4
   \   000044   8D..         MOV       ?V7,R5
   1663            pBuf += 4;
   1664          
   1665            /* Scan duration */
   1666            scanDuration = *pBuf++;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F5..         MOV       ?V1,A
   1667          
   1668            /* Scan count */
   1669            scanCount = *pBuf++;
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F5..         MOV       ?V2,A
   1670          
   1671            /* NWK manager address */
   1672            nwkManagerAddr = osal_build_uint16( pBuf );
   \   00005D                ; Setup parameters for call to function osal_build_uint16
   \   00005D   EE           MOV       A,R6
   \   00005E   2406         ADD       A,#0x6
   \   000060   FA           MOV       R2,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000067   8A..         MOV       ?V8,R2
   \   000069   8B..         MOV       ?V9,R3
   1673          
   1674            /* Send the Management Network Update request */
   1675            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1676                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   00006B                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   00006B   78..         MOV       R0,#?V8
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   78..         MOV       R0,#?V4
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000075   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000078   12....       LCALL     ?XSTACK_DISP101_8
   \   00007B   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   00007E   7406         MOV       A,#0x6
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   \   000083   E9           MOV       A,R1
   \   000084   85..82       MOV       DPL,?XSP + 0
   \   000087   85..83       MOV       DPH,?XSP + 1
   \   00008A   F0           MOVX      @DPTR,A
   1677          
   1678            /*
   1679              Since we don't recevied our own broadcast messages, we should
   1680              send a unicast copy of the message to ourself.
   1681            */
   1682            if ( destAddr.addrMode == AddrBroadcast )
   \   00008B   7409         MOV       A,#0x9
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E0           MOVX      A,@DPTR
   \   000091   640F         XRL       A,#0xf
   \   000093   702D         JNZ       ??MT_ZdoMgmtNwkUpdateRequest_2
   1683            {
   1684              destAddr.addrMode = Addr16Bit;
   \   000095   12....       LCALL     ?Subroutine23 & 0xFFFF
   1685              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_209:
   \   000098   7401         MOV       A,#0x1
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E8           MOV       A,R0
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E9           MOV       A,R1
   \   0000A1   F0           MOVX      @DPTR,A
   1686              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1687                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   0000A2                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   0000A2   78..         MOV       R0,#?V8
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   78..         MOV       R0,#?V4
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000AC   12....       LCALL     ?Subroutine38 & 0xFFFF
   1688            }
   \                     ??CrossCallReturnLabel_59:
   \   0000AF   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B2   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   0000B5   7406         MOV       A,#0x6
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   E9           MOV       A,R1
   \   0000BB   85..82       MOV       DPL,?XSP + 0
   \   0000BE   85..83       MOV       DPH,?XSP + 1
   \   0000C1   F0           MOVX      @DPTR,A
   1689          
   1690            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_2:
   \   0000C2                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000C2   AC..         MOV       R4,?XSP + 0
   \   0000C4   AD..         MOV       R5,?XSP + 1
   \   0000C6   7B01         MOV       R3,#0x1
   \   0000C8   AA..         MOV       R2,?V0
   \   0000CA   7965         MOV       R1,#0x65
   \   0000CC   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1691          }
   \   0000CF   740A         MOV       A,#0xa
   \   0000D1   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   90....       MOV       DPTR,#_NIB + 109
   \   000003   E0           MOVX      A,@DPTR
   \   000004   04           INC       A
   \   000005   FD           MOV       R5,A
   \   000006   AC..         MOV       R4,?V2
   \   000008   A9..         MOV       R1,?V1
   \   00000A   7407         MOV       A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   90....       MOV       DPTR,#_NIB + 20
   \   000003                REQUIRE ??Subroutine96_0
   \   000003                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
   1692          #endif /* MT_ZDO_MGMT */
   1693          
   1694          /***************************************************************************************************
   1695           * @fn      MT_ZdoSendData
   1696           *
   1697           * @brief   Handle a ZDO Send Data request.
   1698           *
   1699           * @param   pBuf  - MT message data
   1700           *
   1701           * @return  void
   1702           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FF           MOV       R7,A
   \   000008                ; Setup parameters for call to function osal_build_uint16
   \   000008   EA           MOV       A,R2
   \   000009   2403         ADD       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine88_0
   \   000002                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1703          static void MT_ZdoSendData( uint8 *pBuf )
   \                     MT_ZdoSendData:
   1704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V1,R3
   1705            uint8 cmdId;
   1706            uint8 retValue;
   1707            zAddrType_t destAddr;
   1708            uint8 transSeq;
   1709            uint8 len;
   1710            uint16 cmd;
   1711          
   1712              /* parse header */
   1713            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   12....       LCALL     ?Subroutine85 & 0xFFFF
   1714            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_182:
   \   00000F   F5..         MOV       ?V0,A
   \   000011   5002         JNC       ??MT_ZdoSendData_0
   \   000013   05..         INC       ?V1
   1715          
   1716            /* Destination address */
   1717            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSendData_0:
   \   000015   740A         MOV       A,#0xa
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine45 & 0xFFFF
   1718            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_93:
   \   00001D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine58 & 0xFFFF
   1719            pBuf += 2;
   1720          
   1721            /* Destination address mode */
   1722            transSeq = *pBuf++;
   \                     ??CrossCallReturnLabel_128:
   \   000028   85..82       MOV       DPL,?V0
   \   00002B   85..83       MOV       DPH,?V1
   \   00002E   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000031   E5..         MOV       A,?V0
   \   000033   2403         ADD       A,#0x3
   \   000035   F5..         MOV       ?V0,A
   \   000037   5002         JNC       ??MT_ZdoSendData_1
   \   000039   05..         INC       ?V1
   1723          
   1724            /* cmd */
   1725            cmd = osal_build_uint16( pBuf );
   \                     ??MT_ZdoSendData_1:
   \   00003B                ; Setup parameters for call to function osal_build_uint16
   \   00003B   FA           MOV       R2,A
   \   00003C   AB..         MOV       R3,?V1
   \   00003E   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000041   8A..         MOV       ?V2,R2
   \   000043   8B..         MOV       ?V3,R3
   1726            pBuf += 2;
   1727            len = *pBuf++;
   \   000045   85..82       MOV       DPL,?V0
   \   000048   85..83       MOV       DPH,?V1
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   FE           MOV       R6,A
   \   00004F   E5..         MOV       A,?V0
   \   000051   2403         ADD       A,#0x3
   \   000053   F5..         MOV       ?V0,A
   \   000055   5002         JNC       ??MT_ZdoSendData_2
   \   000057   05..         INC       ?V1
   1728          
   1729            /* Send the Generic ZDO message request */
   1730            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??MT_ZdoSendData_2:
   \   000059                ; Setup parameters for call to function ZDP_SendData
   \   000059   75..00       MOV       ?V4,#0x0
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   78..         MOV       R0,#?V2
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006B   EE           MOV       A,R6
   \   00006C   F9           MOV       R1,A
   \   00006D   7407         MOV       A,#0x7
   \   00006F   12....       LCALL     ?XSTACK_DISP102_8
   \   000072   7405         MOV       A,#0x5
   \   000074   12....       LCALL     ?XSTACK_DISP101_8
   \   000077   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00007A   7405         MOV       A,#0x5
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   7401         MOV       A,#0x1
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   E9           MOV       A,R1
   \   000085   F0           MOVX      @DPTR,A
   1731            /*
   1732              Since we don't recevied our own broadcast messages, we should
   1733              send a unicast copy of the message to ourself.
   1734            */
   1735            if ( destAddr.addrMode == AddrBroadcast )
   \   000086   740A         MOV       A,#0xa
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   640F         XRL       A,#0xf
   \   00008E   7037         JNZ       ??MT_ZdoSendData_3
   1736            {
   1737              destAddr.addrMode = Addr16Bit;
   \   000090   12....       LCALL     ?Subroutine23 & 0xFFFF
   1738              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_210:
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   E8           MOV       A,R0
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   A3           INC       DPTR
   \   00009B   E9           MOV       A,R1
   \   00009C   F0           MOVX      @DPTR,A
   1739              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \   00009D                ; Setup parameters for call to function ZDP_SendData
   \   00009D   78..         MOV       R0,#?V4
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A2   78..         MOV       R0,#?V0
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   78..         MOV       R0,#?V2
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   EE           MOV       A,R6
   \   0000AD   F9           MOV       R1,A
   \   0000AE   7407         MOV       A,#0x7
   \   0000B0   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B3   7405         MOV       A,#0x5
   \   0000B5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B8   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000BB   7405         MOV       A,#0x5
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C0   7401         MOV       A,#0x1
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   E9           MOV       A,R1
   \   0000C6   F0           MOVX      @DPTR,A
   1740            }
   1741          
   1742            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoSendData_3:
   \   0000C7                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000C7   7401         MOV       A,#0x1
   \   0000C9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CC   7B01         MOV       R3,#0x1
   \   0000CE   EF           MOV       A,R7
   \   0000CF   FA           MOV       R2,A
   \   0000D0   7965         MOV       R1,#0x65
   \   0000D2   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1743          }
   \   0000D5   740B         MOV       A,#0xb
   \   0000D7   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   AB..         MOV       R3,?V1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine103_0
   \   000003                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1744          
   1745          /***************************************************************************************************
   1746           * @fn      MT_ZdoNwkAddrOfInterestReq
   1747           *
   1748           * @brief   Handle a ZDO Network Address of Interest request.
   1749           *
   1750           * @param   pBuf  - MT message data
   1751           *
   1752           * @return  void
   1753           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   \                     MT_ZdoNwkAddrOfInterestReq:
   1755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1756            uint8 cmdId;
   1757            uint8 retValue;
   1758            zAddrType_t destAddr;
   1759            uint16 nwkAddr;
   1760            uint8 cmd;
   1761          
   1762              /* parse header */
   1763            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   1764            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_197:
   \   000011   5001         JNC       ??MT_ZdoNwkAddrOfInterestReq_0
   \   000013   0F           INC       R7
   1765          
   1766            /* Destination address */
   1767            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNwkAddrOfInterestReq_0:
   \   000014   7409         MOV       A,#0x9
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine49 & 0xFFFF
   1768            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_104:
   \   00001C   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ??Subroutine92_0 & 0xFFFF
   1769            pBuf += 2;
   \                     ??CrossCallReturnLabel_204:
   \   000027   5001         JNC       ??MT_ZdoNwkAddrOfInterestReq_1
   \   000029   0F           INC       R7
   1770          
   1771            /* Network Address of Interest */
   1772            nwkAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoNwkAddrOfInterestReq_1:
   \   00002A                ; Setup parameters for call to function osal_build_uint16
   \   00002A   FA           MOV       R2,A
   \   00002B   EF           MOV       A,R7
   \   00002C   FB           MOV       R3,A
   \   00002D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000030   8A..         MOV       ?V0,R2
   \   000032   8B..         MOV       ?V1,R3
   1773            pBuf += 2;
   1774          
   1775            cmd = *pBuf++;
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FE           MOV       R6,A
   1776          
   1777            /* Send the Generic ZDO message request */
   1778            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   00003C                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00003C   75..00       MOV       ?V3,#0x0
   \   00003F   78..         MOV       R0,#?V3
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000044   EE           MOV       A,R6
   \   000045   F9           MOV       R1,A
   \   000046   AC..         MOV       R4,?V0
   \   000048   AD..         MOV       R5,?V1
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP101_8
   \   00004F   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   E9           MOV       A,R1
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   F0           MOVX      @DPTR,A
   1779          
   1780          
   1781            /*
   1782              Since we don't recevied our own broadcast messages, we should
   1783              send a unicast copy of the message to ourself.
   1784            */
   1785            if ( destAddr.addrMode == AddrBroadcast )
   \   00005F   7409         MOV       A,#0x9
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   E0           MOVX      A,@DPTR
   \   000065   640F         XRL       A,#0xf
   \   000067   702D         JNZ       ??MT_ZdoNwkAddrOfInterestReq_2
   1786            {
   1787              destAddr.addrMode = Addr16Bit;
   \   000069   12....       LCALL     ?Subroutine23 & 0xFFFF
   1788              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_211:
   \   00006C   7401         MOV       A,#0x1
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E8           MOV       A,R0
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   E9           MOV       A,R1
   \   000075   F0           MOVX      @DPTR,A
   1789              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   000076                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000076   78..         MOV       R0,#?V3
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007B   EE           MOV       A,R6
   \   00007C   F9           MOV       R1,A
   \   00007D   AC..         MOV       R4,?V0
   \   00007F   AD..         MOV       R5,?V1
   \   000081   7402         MOV       A,#0x2
   \   000083   12....       LCALL     ?XSTACK_DISP101_8
   \   000086   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000089   7401         MOV       A,#0x1
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   E9           MOV       A,R1
   \   00008F   85..82       MOV       DPL,?XSP + 0
   \   000092   85..83       MOV       DPH,?XSP + 1
   \   000095   F0           MOVX      @DPTR,A
   1790            }
   1791          
   1792            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoNwkAddrOfInterestReq_2:
   \   000096                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000096   AC..         MOV       R4,?XSP + 0
   \   000098   AD..         MOV       R5,?XSP + 1
   \   00009A   7B01         MOV       R3,#0x1
   \   00009C   AA..         MOV       R2,?V2
   \   00009E   7965         MOV       R1,#0x65
   \   0000A0   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1793          }
   \   0000A3   740A         MOV       A,#0xa
   \   0000A5   02....       LJMP      ?Subroutine5 & 0xFFFF
   1794          
   1795          /***************************************************************************************************
   1796           * @fn      MT_ZdoStartupFromApp
   1797           *
   1798           * @brief   Handle a Startup from App request.
   1799           *
   1800           * @param   pBuf  - MT message data
   1801           *
   1802           * @return  void
   1803           ***************************************************************************************************/
   1804          static void MT_ZdoStartupFromApp(uint8 *pBuf)
   1805          {
   1806            uint8 cmd0, cmd1, retValue;
   1807          
   1808            /* parse header */
   1809            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1810            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1811            pBuf += MT_RPC_FRAME_HDR_SZ;
   1812          
   1813            retValue = ZDOInitDevice(100);
   1814          
   1815            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1816            {
   1817              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   1818            }
   1819          }
   1820          
   1821          
   1822          /***************************************************************************************************
   1823           * @fn      MT_ZdoNetworkDiscoveryReq
   1824           *
   1825           * @brief   Handle a ZDO Network Discovery request.
   1826           *
   1827           * @param   pBuf  - MT message data
   1828           *
   1829           * @return  void
   1830           ***************************************************************************************************/
   1831          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   1832          {
   1833            uint8  retValue = ZFailure;
   1834            uint8  cmdId;
   1835            uint32 scanChannels;
   1836          
   1837            /* parse header */
   1838            cmdId = pBuf[MT_RPC_POS_CMD1];
   1839            pBuf += MT_RPC_FRAME_HDR_SZ;
   1840          
   1841            /* Packet format */
   1842            /* scan channels (4) | scan duration (1) */
   1843          
   1844            /* Scan channels */
   1845            scanChannels = osal_build_uint32(pBuf, 4);
   1846            pBuf += 4;
   1847          
   1848            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   1849          
   1850            // Register ZDO callback for MT to handle the network discovery confirm
   1851            // and beacon notification confirm
   1852            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   1853            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   1854          
   1855            /* Build and send back the response */
   1856            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1857          }
   1858          
   1859          
   1860          /***************************************************************************************************
   1861           * @fn      MT_ZdoJoinReq
   1862           *
   1863           * @brief   Handle a ZDO Join request.
   1864           *
   1865           * @param   pBuf  - MT message data
   1866           *
   1867           * @return  void
   1868           ***************************************************************************************************/
   1869          static void MT_ZdoJoinReq(uint8 *pBuf)
   1870          {
   1871            uint8  retValue = ZFailure;
   1872            uint8  cmdId;
   1873            uint16 panId;
   1874            uint16 chosenParent;
   1875          
   1876            /* parse header */
   1877            cmdId = pBuf[MT_RPC_POS_CMD1];
   1878            pBuf += MT_RPC_FRAME_HDR_SZ;
   1879          
   1880            /* Packet format */
   1881            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1882             * parentDepth (1) | stackProfile  (1)
   1883             */
   1884          
   1885            panId        = osal_build_uint16( &pBuf[1] );
   1886            chosenParent = osal_build_uint16( &pBuf[11] );
   1887          
   1888            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   1889          
   1890            /* Register for MT to receive Join Confirm */
   1891            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   1892          
   1893            /* Build and send back the response */
   1894            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1895          
   1896          }
   1897          
   1898          
   1899          /***************************************************************************************************
   1900           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1901           *
   1902           * @brief       Send an indication to inform host device the completion of
   1903           *              network discovery scan
   1904           *
   1905           * @param       pStr - pointer to a parameter and a structure of parameters
   1906           *
   1907           * @return      void
   1908           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1909          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1910          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1911            /* pStr: status (uint8) */
   1912            /* Packet Format */
   1913            /* Status (1) */
   1914          
   1915            // Scan completed. De-register the callback with ZDO
   1916            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV       R1,#0x2
   \   00000B   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1917            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV       R1,#0x3
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1918          
   1919            // Send the buffered beacon indication
   1920            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   12....       LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1921          
   1922            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1923                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   7B01         MOV       R3,#0x1
   \   000020   7AC7         MOV       R2,#-0x39
   \   000022   7945         MOV       R1,#0x45
   \   000024   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1924            return NULL;
   \   000027   7A00         MOV       R2,#0x0
   \   000029   7B00         MOV       R3,#0x0
   \   00002B                REQUIRE ?Subroutine6
   \   00002B                ; // Fall through to label ?Subroutine6
   1925          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1926          
   1927          /***************************************************************************************************
   1928           * @fn          MT_ZdoBeaconIndCB
   1929           *
   1930           * @brief       Send an indication to host device of a beacon notification
   1931           *
   1932           * @param       pStr -  pointer to a parameter and a structure of parameters
   1933           *
   1934           * @return      void
   1935           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine87_0
   \   000001                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1936          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1937          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1938            zdoBeaconInd_t *pBeacon = pStr;
   1939            uint8 *pTmp;
   1940          
   1941            /* Packet Format */
   1942            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1943          
   1944            if( pStr != NULL)
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   90....       MOV       DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ       $+5
   \   000010   02....       LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1945            {
   1946              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000016   701C         JNZ       ??MT_ZdoBeaconIndCB_1
   1947              {
   1948                // If pBeaconIndBuf has not been allocated yet
   1949                // allocate memory now with MAX_UART_TX_BUFF
   1950                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7AF9         MOV       R2,#-0x7
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV       DPTR,#pBeaconIndBuf
   \   000022   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000025   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1951                {
   1952                  // Memory failure
   1953                  return NULL;
   1954                }
   1955                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F583         MOV       DPH,A
   \   000030   8882         MOV       DPL,R0
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   1956              }
   1957          
   1958              // Fill in the buffer with the beacon indication
   1959              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000034   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000037   F8           MOV       R0,A
   \   000038   A9F0         MOV       R1,B
   \   00003A   90....       MOV       DPTR,#pBeaconIndBuf
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   28           ADD       A,R0
   \   00003F   FA           MOV       R2,A
   \   000040   A3           INC       DPTR
   \   000041   E0           MOVX      A,@DPTR
   \   000042   39           ADDC      A,R1
   \   000043   8A82         MOV       DPL,R2
   \   000045   F583         MOV       DPH,A
   \   000047   A3           INC       DPTR
   \   000048   AA82         MOV       R2,DPL
   \   00004A   AB83         MOV       R3,DPH
   1960              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000053   F0           MOVX      @DPTR,A
   1961              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00005B   A3           INC       DPTR
   \   00005C   F0           MOVX      @DPTR,A
   1962              *pTmp++ = LO_UINT16(pBeacon->panID);
   \   00005D   EE           MOV       A,R6
   \   00005E   2402         ADD       A,#0x2
   \   000060   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000063   12....       LCALL     ?Subroutine25 & 0xFFFF
   1963              *pTmp++ = HI_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_38:
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \   00006A   12....       LCALL     ?Subroutine17 & 0xFFFF
   1964              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_223:
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   12....       LCALL     ?Subroutine33 & 0xFFFF
   1965              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_54:
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   12....       LCALL     ?Subroutine31 & 0xFFFF
   1966              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_52:
   \   000083   8E82         MOV       DPL,R6
   \   000085   8F83         MOV       DPH,R7
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?Subroutine27 & 0xFFFF
   1967              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_43:
   \   000090   8E82         MOV       DPL,R6
   \   000092   8F83         MOV       DPH,R7
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   12....       LCALL     ?Subroutine26 & 0xFFFF
   1968              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_41:
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   12....       LCALL     ?Subroutine18 & 0xFFFF
   1969              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_28:
   \   0000AC   8E82         MOV       DPL,R6
   \   0000AE   8F83         MOV       DPH,R7
   \   0000B0   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000B3   12....       LCALL     ?Subroutine79 & 0xFFFF
   1970              *pTmp++ = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_166:
   \   0000B6   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000B9   A3           INC       DPTR
   \   0000BA   12....       LCALL     ?Subroutine53 & 0xFFFF
   1971              *pTmp++ = pBeacon->depth;
   \                     ??CrossCallReturnLabel_111:
   \   0000BD   C0E0         PUSH      A
   \   0000BF   EA           MOV       A,R2
   \   0000C0   240B         ADD       A,#0xb
   \   0000C2   F582         MOV       DPL,A
   \   0000C4   E4           CLR       A
   \   0000C5   3B           ADDC      A,R3
   \   0000C6   F583         MOV       DPH,A
   \   0000C8   D0E0         POP       A
   \   0000CA   12....       LCALL     ?Subroutine54 & 0xFFFF
   1972              *pTmp++ = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_113:
   \   0000CD   C0E0         PUSH      A
   \   0000CF   EA           MOV       A,R2
   \   0000D0   240C         ADD       A,#0xc
   \   0000D2   F582         MOV       DPL,A
   \   0000D4   E4           CLR       A
   \   0000D5   3B           ADDC      A,R3
   \   0000D6   F583         MOV       DPH,A
   \   0000D8   D0E0         POP       A
   \   0000DA   F0           MOVX      @DPTR,A
   1973              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   0000DB                ; Setup parameters for call to function osal_memcpy
   \   0000DB   EE           MOV       A,R6
   \   0000DC   240D         ADD       A,#0xd
   \   0000DE   F5..         MOV       ?V0,A
   \   0000E0   E4           CLR       A
   \   0000E1   3F           ADDC      A,R7
   \   0000E2   F5..         MOV       ?V1,A
   \   0000E4   75..00       MOV       ?V2,#0x0
   \   0000E7   78..         MOV       R0,#?V0
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EC   7C08         MOV       R4,#0x8
   \   0000EE   7D00         MOV       R5,#0x0
   \   0000F0   EA           MOV       A,R2
   \   0000F1   240D         ADD       A,#0xd
   \   0000F3   FA           MOV       R2,A
   \   0000F4   5001         JNC       ??MT_ZdoBeaconIndCB_3
   \   0000F6   0B           INC       R3
   \                     ??MT_ZdoBeaconIndCB_3:
   \   0000F7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000FA   7403         MOV       A,#0x3
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
   1974          
   1975              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   0000FF   90....       MOV       DPTR,#pBeaconIndBuf
   \   000102   E0           MOVX      A,@DPTR
   \   000103   F8           MOV       R0,A
   \   000104   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000107   04           INC       A
   \   000108   F0           MOVX      @DPTR,A
   1976          
   1977              // Check if the buffer can fit in another beacon
   1978              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   000109   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00010C   A9F0         MOV       R1,B
   \   00010E   2416         ADD       A,#0x16
   \   000110   5001         JNC       ??MT_ZdoBeaconIndCB_4
   \   000112   09           INC       R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   000113   C3           CLR       C
   \   000114   94FA         SUBB      A,#-0x6
   \   000116   E9           MOV       A,R1
   \   000117   9400         SUBB      A,#0x0
   \   000119   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00011B   65D0         XRL       A,PSW
   \   00011D   33           RLC       A
   \   00011E   4033         JC        ??MT_ZdoBeaconIndCB_2
   1979              {
   1980                // Packet full, send the packet over MT
   1981                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1982                                             MT_ZDO_BEACON_NOTIFY_IND,
   1983                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000120                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000120   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000123   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1984                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   \   000126   12....       LCALL     ?Subroutine68 & 0xFFFF
   1985              }
   1986            }
   \                     ??CrossCallReturnLabel_216:
   \   000129   E4           CLR       A
   \   00012A   8026         SJMP      ??MT_ZdoBeaconIndCB_5
   1987            else
   1988            {
   1989              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   00012C   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00012F   6022         JZ        ??MT_ZdoBeaconIndCB_2
   \   000131   12....       LCALL     ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000134   600B         JZ        ??MT_ZdoBeaconIndCB_6
   1990              {
   1991                // End of beacon indication, send the packet over MT
   1992                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1993                                             MT_ZDO_BEACON_NOTIFY_IND,
   1994                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000136                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000136   12....       LCALL     ?Subroutine12 & 0xFFFF
   1995              }
   \                     ??CrossCallReturnLabel_19:
   \   000139   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1996              // Free the allocated memory
   1997              if(pBeaconIndBuf != NULL)
   \   00013C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00013F   6012         JZ        ??MT_ZdoBeaconIndCB_2
   1998              {
   1999                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_6:
   \   000141                ; Setup parameters for call to function osal_mem_free
   \   000141   90....       MOV       DPTR,#pBeaconIndBuf
   \   000144   E0           MOVX      A,@DPTR
   \   000145   FA           MOV       R2,A
   \   000146   A3           INC       DPTR
   \   000147   E0           MOVX      A,@DPTR
   \   000148   FB           MOV       R3,A
   \   000149   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2000                pBeaconIndBuf = NULL;
   \   00014C   90....       MOV       DPTR,#pBeaconIndBuf
   \   00014F   E4           CLR       A
   \   000150   F0           MOVX      @DPTR,A
   \   000151   A3           INC       DPTR
   \                     ??MT_ZdoBeaconIndCB_5:
   \   000152   F0           MOVX      @DPTR,A
   2001              }
   2002            }
   2003          
   2004            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000153   7A00         MOV       R2,#0x0
   \   000155   7B00         MOV       R3,#0x0
   \   000157   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   2005          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003                REQUIRE ??Subroutine97_0
   \   000003                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   75F015       MOV       B,#0x15
   \   000007   A4           MUL       AB
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine99_0
   \   000001                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FD           MOV       R5,A
   \   000008   75F015       MOV       B,#0x15
   \   00000B   F583         MOV       DPH,A
   \   00000D   8882         MOV       DPL,R0
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A4           MUL       AB
   \   000011   04           INC       A
   \   000012   FB           MOV       R3,A
   \   000013   7AC5         MOV       R2,#-0x3b
   \   000015   7945         MOV       R1,#0x45
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003                REQUIRE ??Subroutine100_0
   \   000003                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   EE           MOV       A,R6
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2006          
   2007          /***************************************************************************************************
   2008           * @fn          MT_ZdoJoinCnfCB
   2009           *
   2010           * @brief       Handle the ZDO Join Confirm from ZDO
   2011           *
   2012           * @param       pStr - pointer to a parameter and a structure of parameters
   2013           *
   2014           * @return      void
   2015           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2016          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   2017          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2018            /* pStr: zdoJoinCnf_t* */
   2019            /* Packet Format */
   2020            /* Status (1) | device addr (2) | parent addr (2) */
   2021          
   2022            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2023            zdoJoinCnf_t *joinCnf = pStr;
   2024          
   2025            /* Join Complete. De-register the callback with ZDO */
   2026            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   2027          
   2028            buf[0] = joinCnf->status;
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   2029            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_186:
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A882         MOV       R0,DPL
   \   000021   A983         MOV       R1,DPH
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   12....       LCALL     ?Subroutine50 & 0xFFFF
   2030            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_106:
   \   000030   C0E0         PUSH      A
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   D0E0         POP       A
   \   000039   F0           MOVX      @DPTR,A
   2031            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   00003A   EE           MOV       A,R6
   \   00003B   2403         ADD       A,#0x3
   \   00003D   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000040   E0           MOVX      A,@DPTR
   \   000041   C0E0         PUSH      A
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   D0E0         POP       A
   \   00004A   12....       LCALL     ?Subroutine50 & 0xFFFF
   2032            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \                     ??CrossCallReturnLabel_107:
   \   00004D   C0E0         PUSH      A
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   D0E0         POP       A
   \   000056   12....       LCALL     ?Subroutine57 & 0xFFFF
   2033          
   2034            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2035                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \                     ??CrossCallReturnLabel_120:
   \   000059   7B05         MOV       R3,#0x5
   \   00005B   7AC6         MOV       R2,#-0x3a
   \   00005D   7945         MOV       R1,#0x45
   \   00005F   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2036          
   2037            return NULL;
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   7405         MOV       A,#0x5
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006B   02....       LJMP      ?Subroutine6 & 0xFFFF
   2038          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   22           RET
   2039          
   2040          /*************************************************************************************************
   2041           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2042           *
   2043           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2044           *
   2045           * @param   pBuf  - MT message data
   2046           *
   2047           * @return  void
   2048           *************************************************************************************************/
   2049          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   2050          {
   2051            uint8 cmd0, cmd1, tmp;
   2052            uint16 cId;
   2053          
   2054            /* parse header */
   2055            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2056            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2057            pBuf += MT_RPC_FRAME_HDR_SZ;
   2058          
   2059            cId = osal_build_uint16( pBuf );
   2060            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   2061          
   2062            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2063            {
   2064              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2065            }
   2066          }
   2067          
   2068          /*************************************************************************************************
   2069           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2070           *
   2071           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2072           *
   2073           * @param   pBuf  - MT message data
   2074           *
   2075           * @return  void
   2076           *************************************************************************************************/
   2077          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   2078          {
   2079            uint8 cmd0, cmd1, tmp;
   2080            uint16 cId;
   2081          
   2082            /* parse header */
   2083            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2084            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2085            pBuf += MT_RPC_FRAME_HDR_SZ;
   2086          
   2087            cId = osal_build_uint16( pBuf );
   2088            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   2089          
   2090            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2091            {
   2092              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2093            }
   2094          }
   2095          
   2096          /*************************************************************************************************
   2097           * @fn      MT_ZdoSetRejoinParameters(pBuf);
   2098           *
   2099           * @brief   Set Rejoin backoff and scan duration from MT
   2100           *
   2101           * @param   pBuf  - MT message data
   2102           *
   2103           * @return  void
   2104           *************************************************************************************************/
   2105          static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
   2106          {
   2107            uint8 cmdId;
   2108            uint8 retValue;
   2109            uint32 rejoinBackoffDuration, rejoinScanDuration;
   2110          
   2111            // parse header
   2112            cmdId = pBuf[MT_RPC_POS_CMD1];
   2113            pBuf += MT_RPC_FRAME_HDR_SZ;
   2114          
   2115            //Rejoin Backoff Duration
   2116            rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
   2117            pBuf += 4;
   2118          
   2119            //Rejoin Scan Duration
   2120            rejoinScanDuration = osal_build_uint32(pBuf, 4);
   2121          
   2122            ZDApp_SetRejoinScanDuration(rejoinScanDuration);
   2123            ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
   2124          
   2125            retValue = ZSuccess;
   2126          
   2127            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   2128          
   2129          }
   2130          
   2131          #endif /* MT_ZDO_FUNC */
   2132          
   2133          
   2134          /***************************************************************************************************
   2135           * Callback handling function
   2136           ***************************************************************************************************/
   2137          
   2138          #if defined (MT_ZDO_CB_FUNC)
   2139          
   2140          /***************************************************************************************************
   2141           * @fn      MT_ZdoStateChangeCB
   2142           *
   2143           * @brief   Handle state change OSAL message from ZDO.
   2144           *
   2145           * @param   pMsg  - Message data
   2146           *
   2147           * @return  void
   2148           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2149          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   \                     MT_ZdoStateChangeCB:
   2150          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2151            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2152                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   AC82         MOV       R4,DPL
   \   00000B   AD83         MOV       R5,DPH
   \   00000D   7B01         MOV       R3,#0x1
   \   00000F   7AC0         MOV       R2,#-0x40
   \   000011   7945         MOV       R1,#0x45
   \   000013   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2153          }
   \   000016   02....       LJMP      ?Subroutine0 & 0xFFFF
   2154          
   2155          /***************************************************************************************************
   2156           * @fn     MT_ZdoDirectCB()
   2157           *
   2158           * @brief  ZDO direct callback.  Build an MT message directly from the
   2159           *         over-the-air ZDO message.
   2160           *
   2161           * @param  pData - Incoming AF frame.
   2162           *
   2163           * @return  none
   2164           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2165          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   \                     MT_ZdoDirectCB:
   2166          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2167            uint8 len, *pBuf;
   2168            uint16 origClusterId;
   2169          
   2170            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2171            origClusterId = pData->clusterId;
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V7,A
   2172          
   2173            // Is the message an exception or not a response?
   2174            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   \   00001E   75..01       MOV       ?V4,#0x1
   \   000021   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
   \   00002A   78..         MOV       R0,#?V2
   \   00002C   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for MT_ZdoDirectCB>_0`:
   \   00002F   0100         DW        1
   \   000031   0080         DW        32768
   \   000033   0180         DW        32769
   \   000035   ....         DW        ??MT_ZdoDirectCB_0
   \   000037   0200         DW        2
   \   000039   1300         DW        19
   \   00003B   ....         DW        ??MT_ZdoDirectCB_1
   \   00003D   0480         DW        32772
   \   00003F   ....         DW        ??MT_ZdoDirectCB_2
   \   000041   ....         DW        ??MT_ZdoDirectCB_3
   \                     ??MT_ZdoDirectCB_2:
   \   000043   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000046   C3           CLR       C
   \   000047   E0           MOVX      A,@DPTR
   \   000048   9406         SUBB      A,#0x6
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   9400         SUBB      A,#0x0
   \   00004E   5065         JNC       ??MT_ZdoDirectCB_3
   \   000050   75..00       MOV       ?V4,#0x0
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   7440         MOV       A,#0x40
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   E4           CLR       A
   \   000060   F0           MOVX      @DPTR,A
   \   000061   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000064   7402         MOV       A,#0x2
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   E4           CLR       A
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   804C         SJMP      ??MT_ZdoDirectCB_4
   \                     ??MT_ZdoDirectCB_1:
   \   00006C                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00006C   AC..         MOV       R4,?XSP + 0
   \   00006E   AD..         MOV       R5,?XSP + 1
   \   000070   EE           MOV       A,R6
   \   000071   FA           MOV       R2,A
   \   000072   EF           MOV       A,R7
   \   000073   FB           MOV       R3,A
   \   000074   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   \   000077                ; Setup parameters for call to function MT_ZdoEndDevAnnceCB
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   FC           MOV       R4,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   FD           MOV       R5,A
   \   000082   AA..         MOV       R2,?XSP + 0
   \   000084   AB..         MOV       R3,?XSP + 1
   \   000086   12....       LCALL     `??MT_ZdoEndDevAnnceCB::?relay`; Banked call to: MT_ZdoEndDevAnnceCB
   \   000089   802D         SJMP      ??MT_ZdoDirectCB_4
   \                     ??MT_ZdoDirectCB_0:
   \   00008B                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00008B   EE           MOV       A,R6
   \   00008C   FA           MOV       R2,A
   \   00008D   EF           MOV       A,R7
   \   00008E   FB           MOV       R3,A
   \   00008F   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000092   8A..         MOV       ?V2,R2
   \   000094   8B..         MOV       ?V3,R3
   \   000096   EA           MOV       A,R2
   \   000097   45..         ORL       A,?V3
   \   000099   601D         JZ        ??MT_ZdoDirectCB_4
   \   00009B   8A82         MOV       DPL,R2
   \   00009D   8B83         MOV       DPH,R3
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   700A         JNZ       ??MT_ZdoDirectCB_5
   \   0000A2                ; Setup parameters for call to function MT_ZdoAddrRspCB
   \   0000A2   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000A5   FC           MOV       R4,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   FD           MOV       R5,A
   \   0000A9   12....       LCALL     `??MT_ZdoAddrRspCB::?relay`; Banked call to: MT_ZdoAddrRspCB
   \                     ??MT_ZdoDirectCB_5:
   \   0000AC                ; Setup parameters for call to function osal_mem_free
   \   0000AC   AA..         MOV       R2,?V2
   \   0000AE   AB..         MOV       R3,?V3
   \   0000B0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B3   8003         SJMP      ??MT_ZdoDirectCB_4
   \                     ??MT_ZdoDirectCB_3:
   \   0000B5   75..00       MOV       ?V4,#0x0
   \                     ??MT_ZdoDirectCB_4:
   \   0000B8   E5..         MOV       A,?V4
   \   0000BA   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BC   4006         JC        ??MT_ZdoDirectCB_6
   \   0000BE   E5..         MOV       A,?V7
   \   0000C0   5480         ANL       A,#0x80
   \   0000C2   7003         JNZ       ??MT_ZdoDirectCB_7
   2175            {
   2176              return;  // Handled somewhere else or not needed.
   \                     ??MT_ZdoDirectCB_6:
   \   0000C4   02....       LJMP      ??MT_ZdoDirectCB_8 & 0xFFFF
   2177            }
   2178          
   2179            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2180             * two bytes for srcAddr.
   2181             */
   2182            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   \                     ??MT_ZdoDirectCB_7:
   \   0000C7   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0000CA   04           INC       A
   \   0000CB   F5..         MOV       ?V2,A
   2183          
   2184            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   0000CD                ; Setup parameters for call to function osal_mem_alloc
   \   0000CD   FA           MOV       R2,A
   \   0000CE   7B00         MOV       R3,#0x0
   \   0000D0   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D3   8A..         MOV       ?V4,R2
   \   0000D5   8B..         MOV       ?V5,R3
   \   0000D7   AE..         MOV       R6,?V4
   \   0000D9   AF..         MOV       R7,?V5
   \   0000DB   EE           MOV       A,R6
   \   0000DC   4F           ORL       A,R7
   \   0000DD   606E         JZ        ??MT_ZdoDirectCB_8
   2185            {
   2186              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   \   0000DF   85..82       MOV       DPL,?V0
   \   0000E2   85..83       MOV       DPH,?V1
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   A3           INC       DPTR
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   4480         ORL       A,#0x80
   \   0000EC   F5..         MOV       ?V3,A
   2187          
   2188              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   2406         ADD       A,#0x6
   \   0000F2   F8           MOV       R0,A
   \   0000F3   E4           CLR       A
   \   0000F4   35..         ADDC      A,?V1
   \   0000F6   F9           MOV       R1,A
   \   0000F7   8882         MOV       DPL,R0
   \   0000F9   8983         MOV       DPH,R1
   \   0000FB   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   2189              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_242:
   \   0000FE   8882         MOV       DPL,R0
   \   000100   8983         MOV       DPH,R1
   \   000102   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000105   F0           MOVX      @DPTR,A
   2190          
   2191              /* copy ZDO data, skipping one-byte sequence number */
   2192              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   \   000106                ; Setup parameters for call to function osal_memcpy
   \   000106   E5..         MOV       A,?V0
   \   000108   2422         ADD       A,#0x22
   \   00010A   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   00010D   2401         ADD       A,#0x1
   \   00010F   F5..         MOV       ?V4,A
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   3400         ADDC      A,#0x0
   \   000115   F5..         MOV       ?V5,A
   \   000117   75..00       MOV       ?V6,#0x0
   \   00011A   78..         MOV       R0,#?V4
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011F   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000122   24FF         ADD       A,#-0x1
   \   000124   FC           MOV       R4,A
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   34FF         ADDC      A,#-0x1
   \   000129   FD           MOV       R5,A
   \   00012A   EE           MOV       A,R6
   \   00012B   2402         ADD       A,#0x2
   \   00012D   FA           MOV       R2,A
   \   00012E   E4           CLR       A
   \   00012F   3F           ADDC      A,R7
   \   000130   FB           MOV       R3,A
   \   000131   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000134   7403         MOV       A,#0x3
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   2193          
   2194              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   000139                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000139   EE           MOV       A,R6
   \   00013A   FC           MOV       R4,A
   \   00013B   EF           MOV       A,R7
   \   00013C   FD           MOV       R5,A
   \   00013D   AB..         MOV       R3,?V2
   \   00013F   AA..         MOV       R2,?V3
   \   000141   7945         MOV       R1,#0x45
   \   000143   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2195              osal_mem_free(pBuf);
   \   000146                ; Setup parameters for call to function osal_mem_free
   \   000146   EE           MOV       A,R6
   \   000147   FA           MOV       R2,A
   \   000148   EF           MOV       A,R7
   \   000149   FB           MOV       R3,A
   \   00014A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2196            }
   2197          }
   \                     ??MT_ZdoDirectCB_8:
   \   00014D   740B         MOV       A,#0xb
   \   00014F   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E5..         MOV       A,?V0
   \   000002   2420         ADD       A,#0x20
   \   000004                REQUIRE ??Subroutine101_0
   \   000004                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8E82         MOV       DPL,R6
   \   000004   8F83         MOV       DPH,R7
   \   000006   A3           INC       DPTR
   \   000007   22           RET
   2198          
   2199          /***************************************************************************************************
   2200           * @fn     MT_ZdoHandleExceptions()
   2201           *
   2202           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2203           *
   2204           * @param  pData - Incoming AF frame.
   2205           *
   2206           * @return  TRUE if handled by this function, FALSE if not
   2207           ***************************************************************************************************/
   2208          static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2209          {
   2210            uint8 ret = TRUE;
   2211            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2212            ZDO_DeviceAnnce_t devAnnce;
   2213            uint8 doDefault = FALSE;
   2214          
   2215            switch ( inMsg->clusterID )
   2216            {
   2217              case NWK_addr_rsp:
   2218              case IEEE_addr_rsp:
   2219                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   2220                {
   2221                  if ( nwkRsp->status == ZDO_SUCCESS )
   2222                  {
   2223                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   2224                  }
   2225                  osal_mem_free( nwkRsp );
   2226                }
   2227                break;
   2228          
   2229              case Device_annce:
   2230                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   2231                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   2232                break;
   2233          
   2234              case Simple_Desc_rsp:
   2235                if ( pData->cmd.DataLength > 5 )
   2236                {
   2237                  ret = FALSE;
   2238                }
   2239                else
   2240                {
   2241                  doDefault = TRUE;
   2242                }
   2243                break;
   2244          
   2245              default:
   2246                ret = FALSE;
   2247                break;
   2248            }
   2249          
   2250            if ( doDefault )
   2251            {
   2252              ret = FALSE;
   2253              pData->clusterId = MtZdoDef_rsp;
   2254              pData->cmd.DataLength = 2;
   2255            }
   2256          
   2257            return ( ret );
   2258          }
   2259          
   2260          /***************************************************************************************************
   2261           * @fn      MT_ZdoAddrRspCB
   2262           *
   2263           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2264           *
   2265           * @param   pMsg  - Message data
   2266           *
   2267           * @return  void
   2268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2269          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   \                     MT_ZdoAddrRspCB:
   2270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   2271            uint8   listLen, len, *pBuf;
   2272          
   2273            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2274          
   2275            /* get length, sanity check length */
   2276            listLen = pMsg->numAssocDevs;
   \   00000B   EA           MOV       A,R2
   \   00000C   240B         ADD       A,#0xb
   \   00000E   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000011   F5..         MOV       ?V4,A
   2277          
   2278            /* calculate msg length */
   2279            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   240D         ADD       A,#0xd
   \   000017   F5..         MOV       ?V5,A
   2280          
   2281            /* get buffer */
   2282            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   FA           MOV       R2,A
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   8A..         MOV       ?V6,R2
   \   000021   8B..         MOV       ?V7,R3
   \   000023   EA           MOV       A,R2
   \   000024   45..         ORL       A,?V7
   \   000026   6074         JZ        ??MT_ZdoAddrRspCB_0
   2283            {
   2284              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2285              uint8 *pTmp = pBuf;
   \   000028   AE..         MOV       R6,?V6
   \   00002A   AF..         MOV       R7,?V7
   2286          
   2287              *pTmp++ = pMsg->status;
   \   00002C   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00002F   A3           INC       DPTR
   \   000030   AE82         MOV       R6,DPL
   \   000032   AF83         MOV       R7,DPH
   2288          
   2289              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \   000034                ; Setup parameters for call to function sAddrExtCpy
   \   000034   E5..         MOV       A,?V0
   \   000036   2403         ADD       A,#0x3
   \   000038   FC           MOV       R4,A
   \   000039   E4           CLR       A
   \   00003A   35..         ADDC      A,?V1
   \   00003C   FD           MOV       R5,A
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2290              pTmp += Z_EXTADDR_LEN;
   2291          
   2292              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   000044   85..82       MOV       DPL,?V0
   \   000047   85..83       MOV       DPH,?V1
   \   00004A   A3           INC       DPTR
   \   00004B   A882         MOV       R0,DPL
   \   00004D   A983         MOV       R1,DPH
   \   00004F   12....       LCALL     ?Subroutine20 & 0xFFFF
   2293              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_32:
   \   000052   8882         MOV       DPL,R0
   \   000054   8983         MOV       DPH,R1
   \   000056   A3           INC       DPTR
   \   000057   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00005A   F0           MOVX      @DPTR,A
   2294          
   2295              *pTmp++ = pMsg->startIndex;
   \   00005B   E5..         MOV       A,?V0
   \   00005D   240C         ADD       A,#0xc
   \   00005F   F582         MOV       DPL,A
   \   000061   E4           CLR       A
   \   000062   35..         ADDC      A,?V1
   \   000064   F583         MOV       DPH,A
   \   000066   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000069   A3           INC       DPTR
   \   00006A   F0           MOVX      @DPTR,A
   2296              *pTmp++ = listLen;
   \   00006B   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00006E   E5..         MOV       A,?V4
   \   000070   F0           MOVX      @DPTR,A
   2297          
   2298              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   \   000071                ; Setup parameters for call to function MT_Word2Buf
   \   000071   F9           MOV       R1,A
   \   000072   E5..         MOV       A,?V0
   \   000074   240D         ADD       A,#0xd
   \   000076   FC           MOV       R4,A
   \   000077   E4           CLR       A
   \   000078   35..         ADDC      A,?V1
   \   00007A   FD           MOV       R5,A
   \   00007B   EE           MOV       A,R6
   \   00007C   240C         ADD       A,#0xc
   \   00007E   FA           MOV       R2,A
   \   00007F   E4           CLR       A
   \   000080   3F           ADDC      A,R7
   \   000081   FB           MOV       R3,A
   \   000082   12....       LCALL     `??MT_Word2Buf::?relay`; Banked call to: MT_Word2Buf
   2299          
   2300              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   000085                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000085   AC..         MOV       R4,?V6
   \   000087   AD..         MOV       R5,?V7
   \   000089   AB..         MOV       R3,?V5
   \   00008B   E5..         MOV       A,?V2
   \   00008D   4480         ORL       A,#0x80
   \   00008F   FA           MOV       R2,A
   \   000090   7945         MOV       R1,#0x45
   \   000092   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2301              osal_mem_free(pBuf);
   \   000095                ; Setup parameters for call to function osal_mem_free
   \   000095   AA..         MOV       R2,?V6
   \   000097   AB..         MOV       R3,?V7
   \   000099   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2302            }
   2303          }
   \                     ??MT_ZdoAddrRspCB_0:
   \   00009C   02....       LJMP      ??Subroutine89_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine102_0
   \   000006                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   22           RET
   2304          
   2305          /***************************************************************************************************
   2306           * @fn      MT_ZdoEndDevAnnceCB
   2307           *
   2308           * @brief   Handle end device announce OSAL message from ZDO.
   2309           *
   2310           * @param   pMsg  - Message data
   2311           *
   2312           * @return  void
   2313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2314          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   \                     MT_ZdoEndDevAnnceCB:
   2315          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2316            uint8 *pBuf;
   2317          
   2318            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0D         MOV       R2,#0xd
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   EA           MOV       A,R2
   \   000019   45..         ORL       A,?V1
   \   00001B   605A         JZ        ??MT_ZdoEndDevAnnceCB_0
   2319            {
   2320              uint8 *pTmp = pBuf;
   2321          
   2322              *pTmp++ = LO_UINT16(srcAddr);
   \   00001D   EE           MOV       A,R6
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   F0           MOVX      @DPTR,A
   2323              *pTmp++ = HI_UINT16(srcAddr);
   \   000023   EF           MOV       A,R7
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
   2324          
   2325              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   000026   85..82       MOV       DPL,?V2
   \   000029   85..83       MOV       DPH,?V3
   \   00002C   12....       LCALL     ?Subroutine25 & 0xFFFF
   2326              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_39:
   \   00002F   85..82       MOV       DPL,?V2
   \   000032   85..83       MOV       DPH,?V3
   \   000035   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000038   EA           MOV       A,R2
   \   000039   2404         ADD       A,#0x4
   \   00003B   FE           MOV       R6,A
   \   00003C   E4           CLR       A
   \   00003D   35..         ADDC      A,?V1
   \   00003F   FF           MOV       R7,A
   2327          
   2328              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   E5..         MOV       A,?V2
   \   000042   2402         ADD       A,#0x2
   \   000044   FC           MOV       R4,A
   \   000045   E4           CLR       A
   \   000046   35..         ADDC      A,?V3
   \   000048   FD           MOV       R5,A
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2329              pTmp += Z_EXTADDR_LEN;
   2330          
   2331              *pTmp = pMsg->capabilities;
   \   000050   85..82       MOV       DPL,?V2
   \   000053   85..83       MOV       DPH,?V3
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   12....       LCALL     ?Subroutine20 & 0xFFFF
   2332          
   2333              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2334                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2335                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   \                     ??CrossCallReturnLabel_33:
   \   000063                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000063   AC..         MOV       R4,?V0
   \   000065   AD..         MOV       R5,?V1
   \   000067   7B0D         MOV       R3,#0xd
   \   000069   7AC1         MOV       R2,#-0x3f
   \   00006B   7945         MOV       R1,#0x45
   \   00006D   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2336              osal_mem_free(pBuf);
   \   000070                ; Setup parameters for call to function osal_mem_free
   \   000070   AA..         MOV       R2,?V0
   \   000072   AB..         MOV       R3,?V1
   \   000074   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2337            }
   2338          }
   \                     ??MT_ZdoEndDevAnnceCB_0:
   \   000077   80..         SJMP      ??Subroutine103_0
   2339          
   2340          /***************************************************************************************************
   2341           * @fn      MT_ZdoSrcRtgCB
   2342           *
   2343           * @brief   Handle Src Route from ZDO.
   2344           *
   2345           * @param   pStr  - pointer to the data structure for the src route
   2346           *
   2347           * @return  void*
   2348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2349          void* MT_ZdoSrcRtgCB( void *pStr )
   \                     MT_ZdoSrcRtgCB:
   2350          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2351            uint8 len, *pBuf;
   2352            zdoSrcRtg_t *pSrcRtg = pStr;
   2353          
   2354            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2355            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   C3           CLR       C
   \   000011   33           RLC       A
   \   000012   2403         ADD       A,#0x3
   \   000014   F5..         MOV       ?V2,A
   2356          
   2357            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   FA           MOV       R2,A
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001C   8A..         MOV       ?V4,R2
   \   00001E   8B..         MOV       ?V5,R3
   \   000020   AE..         MOV       R6,?V4
   \   000022   AF..         MOV       R7,?V5
   \   000024   EE           MOV       A,R6
   \   000025   4F           ORL       A,R7
   \   000026   6065         JZ        ??MT_ZdoSrcRtgCB_0
   2358            {
   2359              uint8 idx, *pTmp = pBuf;
   2360              uint16 *pRelay;
   2361          
   2362              // Packet payload
   2363              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   \   000028   12....       LCALL     ?Subroutine39 & 0xFFFF
   2364              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   \                     ??CrossCallReturnLabel_244:
   \   00002B   85..82       MOV       DPL,?V0
   \   00002E   85..83       MOV       DPH,?V1
   \   000031   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000034   12....       LCALL     ?Subroutine59 & 0xFFFF
   2365              *pTmp++ = pSrcRtg->relayCnt;
   \                     ??CrossCallReturnLabel_130:
   \   000037   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00003A   A3           INC       DPTR
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   EE           MOV       A,R6
   \   00003D   2403         ADD       A,#0x3
   \   00003F   FA           MOV       R2,A
   \   000040   E4           CLR       A
   \   000041   3F           ADDC      A,R7
   \   000042   FB           MOV       R3,A
   2366          
   2367              // Relay List
   2368              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00004F   6028         JZ        ??MT_ZdoSrcRtgCB_1
   2369              {
   2370                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   \   000051   75..00       MOV       ?V3,#0x0
   \   000054   8013         SJMP      ??MT_ZdoSrcRtgCB_2
   2371                {
   2372                  *pTmp++ = LO_UINT16(*pRelay);
   \                     ??MT_ZdoSrcRtgCB_3:
   \   000056   12....       LCALL     ?Subroutine13 & 0xFFFF
   2373                  *pTmp++ = HI_UINT16(*pRelay);
   \                     ??CrossCallReturnLabel_20:
   \   000059   EA           MOV       A,R2
   \   00005A   2402         ADD       A,#0x2
   \   00005C   FA           MOV       R2,A
   \   00005D   5001         JNC       ??MT_ZdoSrcRtgCB_4
   \   00005F   0B           INC       R3
   2374                  pRelay++;
   \                     ??MT_ZdoSrcRtgCB_4:
   \   000060   E8           MOV       A,R0
   \   000061   2402         ADD       A,#0x2
   \   000063   F8           MOV       R0,A
   \   000064   5001         JNC       ??MT_ZdoSrcRtgCB_5
   \   000066   09           INC       R1
   2375                }
   \                     ??MT_ZdoSrcRtgCB_5:
   \   000067   05..         INC       ?V3
   \                     ??MT_ZdoSrcRtgCB_2:
   \   000069   85..82       MOV       DPL,?V0
   \   00006C   85..83       MOV       DPH,?V1
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FC           MOV       R4,A
   \   000073   E5..         MOV       A,?V3
   \   000075   C3           CLR       C
   \   000076   9C           SUBB      A,R4
   \   000077   40DD         JC        ??MT_ZdoSrcRtgCB_3
   2376              }
   2377              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2378                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   \                     ??MT_ZdoSrcRtgCB_1:
   \   000079                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000079   EE           MOV       A,R6
   \   00007A   FC           MOV       R4,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FD           MOV       R5,A
   \   00007D   AB..         MOV       R3,?V2
   \   00007F   7AC4         MOV       R2,#-0x3c
   \   000081   7945         MOV       R1,#0x45
   \   000083   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2379              osal_mem_free(pBuf);
   \   000086                ; Setup parameters for call to function osal_mem_free
   \   000086   EE           MOV       A,R6
   \   000087   FA           MOV       R2,A
   \   000088   EF           MOV       A,R7
   \   000089   FB           MOV       R3,A
   \   00008A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2380            }
   2381          
   2382            return NULL;
   \                     ??MT_ZdoSrcRtgCB_0:
   \   00008D   7A00         MOV       R2,#0x0
   \   00008F   7B00         MOV       R3,#0x0
   \   000091   02....       LJMP      ??Subroutine103_0 & 0xFFFF
   2383          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   A3           INC       DPTR
   \   00000D   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET
   2384          
   2385          /***************************************************************************************************
   2386           * @fn          MT_ZdoConcentratorIndCB
   2387           *
   2388           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2389           *
   2390           * @param       pStr - pointer to a parameter and a structure of parameters
   2391           *
   2392           * @return      NULL
   2393           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2394          void *MT_ZdoConcentratorIndCB(void *pStr)
   \                     MT_ZdoConcentratorIndCB:
   2395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   2396            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2397            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2398          
   2399            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2400            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   \                     ??CrossCallReturnLabel_12:
   \   00000D   C0E0         PUSH      A
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   D0E0         POP       A
   \   000016   12....       LCALL     ?Subroutine79 & 0xFFFF
   2401            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_167:
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V1,A
   \   000021   75..00       MOV       ?V2,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000029   7C08         MOV       R4,#0x8
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7405         MOV       A,#0x5
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   AA82         MOV       R2,DPL
   \   000034   AB83         MOV       R3,DPH
   \   000036   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000039   7403         MOV       A,#0x3
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003E   8A..         MOV       ?V0,R2
   \   000040   8B..         MOV       ?V1,R3
   \   000042   A8..         MOV       R0,?V0
   \   000044   A9..         MOV       R1,?V1
   2402            *pTmp = pInd->pktCost;
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   12....       LCALL     ?Subroutine41 & 0xFFFF
   2403          
   2404            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2405                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   \                     ??CrossCallReturnLabel_63:
   \   000051                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000051   AC..         MOV       R4,?XSP + 0
   \   000053   AD..         MOV       R5,?XSP + 1
   \   000055   7B0B         MOV       R3,#0xb
   \   000057   7AC8         MOV       R2,#-0x38
   \   000059   7945         MOV       R1,#0x45
   \   00005B   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2406            return NULL;
   \   00005E   7A00         MOV       R2,#0x0
   \   000060   7B00         MOV       R3,#0x0
   \   000062   740B         MOV       A,#0xb
   \   000064   02....       LJMP      ?Subroutine7 & 0xFFFF
   2407          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0
   2408          
   2409          /***************************************************************************************************
   2410           * @fn          MT_ZdoLeaveInd
   2411           *
   2412           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2413           *
   2414           * @param       vPtr - Pointer to the received Leave Indication message.
   2415           *
   2416           * @return      NULL
   2417           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2418          static void *MT_ZdoLeaveInd(void *vPtr)
   \                     MT_ZdoLeaveInd:
   2419          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   2420            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2421            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2422          
   2423            buf[0] = LO_UINT16(pInd->srcAddr);
   2424            buf[1] = HI_UINT16(pInd->srcAddr);
   \                     ??CrossCallReturnLabel_13:
   \   00000D   C0E0         PUSH      A
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   D0E0         POP       A
   \   000016   12....       LCALL     ?Subroutine48 & 0xFFFF
   2425            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_98:
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C08         MOV       R4,#0x8
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7405         MOV       A,#0x5
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   AA82         MOV       R2,DPL
   \   000027   AB83         MOV       R3,DPH
   \   000029   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002C   7403         MOV       A,#0x3
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   2426            buf[2+Z_EXTADDR_LEN] = pInd->request;
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   C0E0         PUSH      A
   \   000042   740A         MOV       A,#0xa
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   D0E0         POP       A
   \   000049   12....       LCALL     ?Subroutine53 & 0xFFFF
   2427            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   \                     ??CrossCallReturnLabel_112:
   \   00004C   C0E0         PUSH      A
   \   00004E   740B         MOV       A,#0xb
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   D0E0         POP       A
   \   000055   12....       LCALL     ?Subroutine54 & 0xFFFF
   2428            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   \                     ??CrossCallReturnLabel_114:
   \   000058   C0E0         PUSH      A
   \   00005A   740C         MOV       A,#0xc
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   D0E0         POP       A
   \   000061   12....       LCALL     ?Subroutine57 & 0xFFFF
   2429          
   2430            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2431                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   \                     ??CrossCallReturnLabel_121:
   \   000064   7B0D         MOV       R3,#0xd
   \   000066   7AC9         MOV       R2,#-0x37
   \   000068   7945         MOV       R1,#0x45
   \   00006A   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2432            return NULL;
   \   00006D   7A00         MOV       R2,#0x0
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   740D         MOV       A,#0xd
   \   000073   02....       LJMP      ?Subroutine7 & 0xFFFF
   2433          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   A3           INC       DPTR
   \   000004   A982         MOV       R1,DPL
   \   000006   AA83         MOV       R2,DPH
   \   000008   89..         MOV       ?V0,R1
   \   00000A   8A..         MOV       ?V1,R2
   \   00000C   75..00       MOV       ?V2,#0x0
   \   00000F   78..         MOV       R0,#?V0
   \   000011   22           RET
   2434          
   2435          /***************************************************************************************************
   2436           * @fn          MT_ZdoTcDeviceInd
   2437           *
   2438           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2439           *
   2440           * @param       params - pointer to Trust Center joining device information
   2441           *
   2442           * @return      NULL
   2443           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2444          void *MT_ZdoTcDeviceInd( void *params )
   \                     MT_ZdoTcDeviceInd:
   2445          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine9 & 0xFFFF
   2446            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2447            uint8 buf[12];
   2448          
   2449            buf[0] = LO_UINT16( pDev->nwkAddr );
   2450            buf[1] = HI_UINT16( pDev->nwkAddr );
   \                     ??CrossCallReturnLabel_14:
   \   00000D   C0E0         PUSH      A
   \   00000F   7401         MOV       A,#0x1
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   D0E0         POP       A
   \   000016   12....       LCALL     ?Subroutine48 & 0xFFFF
   2451            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_99:
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001C   7C08         MOV       R4,#0x8
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7405         MOV       A,#0x5
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   AA82         MOV       R2,DPL
   \   000027   AB83         MOV       R3,DPH
   \   000029   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002C   7403         MOV       A,#0x3
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   2452            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   \   000031   EE           MOV       A,R6
   \   000032   240A         ADD       A,#0xa
   \   000034   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000037   E0           MOVX      A,@DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   740A         MOV       A,#0xa
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   D0E0         POP       A
   \   000041   12....       LCALL     ?Subroutine50 & 0xFFFF
   2453            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   \                     ??CrossCallReturnLabel_108:
   \   000044   C0E0         PUSH      A
   \   000046   740B         MOV       A,#0xb
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   D0E0         POP       A
   \   00004D   12....       LCALL     ?Subroutine57 & 0xFFFF
   2454          
   2455            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2456                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   \                     ??CrossCallReturnLabel_122:
   \   000050   7B0C         MOV       R3,#0xc
   \   000052   7ACA         MOV       R2,#-0x36
   \   000054   7945         MOV       R1,#0x45
   \   000056   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2457          
   2458            return ( NULL );
   \   000059   7A00         MOV       R2,#0x0
   \   00005B   7B00         MOV       R3,#0x0
   \   00005D   740C         MOV       A,#0xc
   \   00005F   02....       LJMP      ?Subroutine7 & 0xFFFF
   2459          }
   2460          
   2461          /***************************************************************************************************
   2462           * @fn          MT_ZdoPermitJoinInd
   2463           *
   2464           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2465           *
   2466           * @param       duration - permit join duration
   2467           *
   2468           * @return      NULL
   2469           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2470          void *MT_ZdoPermitJoinInd( void *duration )
   \                     MT_ZdoPermitJoinInd:
   2471          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2472            if ( ignoreIndication == FALSE )
   \   000004   90....       MOV       DPTR,#ignoreIndication
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700D         JNZ       ??MT_ZdoPermitJoinInd_0
   2473            {
   2474              MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2475                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   \   00000A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000A   EA           MOV       A,R2
   \   00000B   FC           MOV       R4,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FD           MOV       R5,A
   \   00000E   7B01         MOV       R3,#0x1
   \   000010   7ACB         MOV       R2,#-0x35
   \   000012   7945         MOV       R1,#0x45
   \   000014   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2476            }
   2477          
   2478            return ( NULL );
   \                     ??MT_ZdoPermitJoinInd_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   02....       LJMP      ?Subroutine0 & 0xFFFF
   2479          }
   2480          #endif // MT_ZDO_CB_FUNC
   2481          
   2482          /***************************************************************************************************
   2483           * @fn      MT_ZdoSendMsgCB
   2484           *
   2485           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2486           *
   2487           * @param   pMsg  - Message data
   2488           *
   2489           * @return  void
   2490           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2491          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2492          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2493            uint8 len = pMsg->asduLen + 9;
   \   000009   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00000C   2409         ADD       A,#0x9
   \   00000E   F5..         MOV       ?V2,A
   2494            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000010                ; Setup parameters for call to function osal_mem_alloc
   \   000010   FA           MOV       R2,A
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   2495          
   2496            if (pBuf != NULL)
   \   00001A   EA           MOV       A,R2
   \   00001B   45..         ORL       A,?V1
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??MT_ZdoSendMsgCB_0 & 0xFFFF
   2497            {
   2498              uint8 *pTmp = pBuf;
   2499          
   2500              // Assuming exclusive use of network short addresses.
   2501              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000022   EE           MOV       A,R6
   \   000023   2402         ADD       A,#0x2
   \   000025   F8           MOV       R0,A
   \   000026   E4           CLR       A
   \   000027   3F           ADDC      A,R7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     ?Subroutine13 & 0xFFFF
   2502              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   2503              *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_21:
   \   00002C   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00002F   12....       LCALL     ?Subroutine25 & 0xFFFF
   2504              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_40:
   \   000032   EE           MOV       A,R6
   \   000033   240C         ADD       A,#0xc
   \   000035   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000038   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   2505              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_222:
   \   00003B   8882         MOV       DPL,R0
   \   00003D   8983         MOV       DPH,R1
   \   00003F   12....       LCALL     ?Subroutine33 & 0xFFFF
   2506              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_55:
   \   000042   EE           MOV       A,R6
   \   000043   240E         ADD       A,#0xe
   \   000045   F582         MOV       DPL,A
   \   000047   E4           CLR       A
   \   000048   3F           ADDC      A,R7
   \   000049   F583         MOV       DPH,A
   \   00004B   12....       LCALL     ?Subroutine31 & 0xFFFF
   2507              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_53:
   \   00004E   EE           MOV       A,R6
   \   00004F   240F         ADD       A,#0xf
   \   000051   F582         MOV       DPL,A
   \   000053   E4           CLR       A
   \   000054   3F           ADDC      A,R7
   \   000055   F583         MOV       DPH,A
   \   000057   12....       LCALL     ?Subroutine27 & 0xFFFF
   2508              // Skipping asduLen since it can be deduced from the RPC packet length.
   2509              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_44:
   \   00005A   EE           MOV       A,R6
   \   00005B   2411         ADD       A,#0x11
   \   00005D   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000060   12....       LCALL     ?Subroutine26 & 0xFFFF
   2510              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_42:
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   12....       LCALL     ?Subroutine18 & 0xFFFF
   2511              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_29:
   \   00006A                ; Setup parameters for call to function osal_memcpy
   \   00006A   EE           MOV       A,R6
   \   00006B   2413         ADD       A,#0x13
   \   00006D   F582         MOV       DPL,A
   \   00006F   E4           CLR       A
   \   000070   3F           ADDC      A,R7
   \   000071   F583         MOV       DPH,A
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F5..         MOV       ?V4,A
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F5..         MOV       ?V5,A
   \   00007A   75..00       MOV       ?V6,#0x0
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000082   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000085   FC           MOV       R4,A
   \   000086   7D00         MOV       R5,#0x0
   \   000088   EA           MOV       A,R2
   \   000089   2409         ADD       A,#0x9
   \   00008B   FA           MOV       R2,A
   \   00008C   E4           CLR       A
   \   00008D   35..         ADDC      A,?V1
   \   00008F   FB           MOV       R3,A
   \   000090   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000093   7403         MOV       A,#0x3
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   2512          
   2513              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2514                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   000098                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000098   AC..         MOV       R4,?V0
   \   00009A   AD..         MOV       R5,?V1
   \   00009C   AB..         MOV       R3,?V2
   \   00009E   7AFF         MOV       R2,#-0x1
   \   0000A0   7945         MOV       R1,#0x45
   \   0000A2   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2515          
   2516              osal_mem_free(pBuf);
   \   0000A5                ; Setup parameters for call to function osal_mem_free
   \   0000A5   AA..         MOV       R2,?V0
   \   0000A7   AB..         MOV       R3,?V1
   \   0000A9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2517            }
   2518          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000AC   7F07         MOV       R7,#0x7
   \   0000AE   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   EE           MOV       A,R6
   \   000001   2410         ADD       A,#0x10
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   2519          
   2520          
   2521          #if defined ( MT_ZDO_EXTENSIONS )
   2522          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2523          /***************************************************************************************************
   2524           * @fn          MT_ZdoSecUpdateNwkKey
   2525           *
   2526           * @brief       Handle the ZDO Security Update Network Key extension message
   2527           *
   2528           * @param       pBuf - Pointer to the received message data.
   2529           *
   2530           * @return      NULL
   2531           ***************************************************************************************************/
   2532          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2533          {
   2534            uint16 dstAddr;
   2535            uint8 keySeqNum;
   2536            uint8 status;
   2537          
   2538            pBuf += MT_RPC_FRAME_HDR_SZ;
   2539          
   2540            dstAddr = osal_build_uint16( pBuf );
   2541            pBuf += 2;
   2542            keySeqNum = *pBuf++;
   2543          
   2544            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2545          
   2546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2547                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2548          }
   2549          
   2550          /***************************************************************************************************
   2551           * @fn          MT_ZdoSecSwitchNwkKey
   2552           *
   2553           * @brief       Handle the ZDO Security Switch Network Key extension message
   2554           *
   2555           * @param       pBuf - Pointer to the received message data.
   2556           *
   2557           * @return      NULL
   2558           ***************************************************************************************************/
   2559          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2560          {
   2561            uint16 dstAddr;
   2562            uint8 keySeqNum;
   2563            uint8 status;
   2564          
   2565            pBuf += MT_RPC_FRAME_HDR_SZ;
   2566          
   2567            dstAddr = osal_build_uint16( pBuf );
   2568            pBuf += 2;
   2569            keySeqNum = *pBuf++;
   2570          
   2571            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2572          
   2573            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2574                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2575          }
   2576          #endif // ZG_BUILD_COORDINATOR_TYPE
   2577          
   2578          /***************************************************************************************************
   2579           * @fn          MT_ZdoSecAddLinkKey
   2580           *
   2581           * @brief       Handle the ZDO Security Add Link Key extension message
   2582           *
   2583           * @param       pBuf - Pointer to the received message data.
   2584           *
   2585           * @return      NULL
   2586           ***************************************************************************************************/
   2587          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2588          {
   2589            uint16 shortAddr;
   2590            uint8 *pExtAddr;
   2591            uint8 status;
   2592          
   2593            pBuf += MT_RPC_FRAME_HDR_SZ;
   2594          
   2595            shortAddr = osal_build_uint16( pBuf );
   2596            pBuf += 2;
   2597            pExtAddr = pBuf;
   2598            pBuf += Z_EXTADDR_LEN;
   2599          
   2600            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2601          
   2602            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2603                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2604          }
   2605          
   2606          /***************************************************************************************************
   2607           * @fn          MT_ZdoSecEntryLookupExt
   2608           *
   2609           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2610           *
   2611           * @param       pBuf - Pointer to the received message data.
   2612           *
   2613           * @return      NULL
   2614           ***************************************************************************************************/
   2615          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2616          {
   2617            ZDSecMgrEntry_t *pEntry = NULL;
   2618            uint8 buf[6] = {0};
   2619          
   2620            pBuf += MT_RPC_FRAME_HDR_SZ;
   2621          
   2622            // lookup entry index for specified EXT address
   2623            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2624            if ( pEntry )
   2625            {
   2626              buf[1] = LO_UINT16( pEntry->ami );
   2627              buf[2] = HI_UINT16( pEntry->ami );
   2628              buf[3] = LO_UINT16( pEntry->keyNvId );
   2629              buf[4] = HI_UINT16( pEntry->keyNvId );
   2630              buf[5] = (uint8)pEntry->authenticateOption;
   2631            }
   2632          
   2633            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2634                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2635          }
   2636          
   2637          /***************************************************************************************************
   2638           * @fn          MT_ZdoSecDeviceRemove
   2639           *
   2640           * @brief       Handle the ZDO Security Remove Device extension message
   2641           *
   2642           * @param       pBuf - Pointer to the received message data.
   2643           *
   2644           * @return      NULL
   2645           ***************************************************************************************************/
   2646          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2647          {
   2648            ZStatus_t status;
   2649          
   2650            pBuf += MT_RPC_FRAME_HDR_SZ;
   2651          
   2652            // lookup entry index for specified EXT address
   2653            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2654          
   2655            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2656                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2657          }
   2658          
   2659          /***************************************************************************************************
   2660           * @fn          MT_ZdoExtRouteDisc
   2661           *
   2662           * @brief       Handle the ZDO Route Discovery extension message
   2663           *
   2664           * @param       pBuf - Pointer to the received message data.
   2665           *
   2666           * @return      NULL
   2667           ***************************************************************************************************/
   2668          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2669          {
   2670            ZStatus_t status;
   2671            uint16 dstAddr;
   2672          
   2673            pBuf += MT_RPC_FRAME_HDR_SZ;
   2674          
   2675            dstAddr = osal_build_uint16( pBuf );
   2676          
   2677            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2678          
   2679          
   2680            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2681                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2682          }
   2683          
   2684          /***************************************************************************************************
   2685           * @fn          MT_ZdoExtRouteCheck
   2686           *
   2687           * @brief       Handle the ZDO Route Check extension message
   2688           *
   2689           * @param       pBuf - Pointer to the received message data.
   2690           *
   2691           * @return      NULL
   2692           ***************************************************************************************************/
   2693          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2694          {
   2695            ZStatus_t status;
   2696            uint16 dstAddr;
   2697          
   2698            pBuf += MT_RPC_FRAME_HDR_SZ;
   2699          
   2700            dstAddr = osal_build_uint16( pBuf );
   2701          
   2702            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2703          
   2704            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2705                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2706          }
   2707          
   2708          /***************************************************************************************************
   2709           * @fn          MT_ZdoExtRemoveGroup
   2710           *
   2711           * @brief       Handle the ZDO extension Remove Group message
   2712           *
   2713           * @param       pBuf - Pointer to the received message data.
   2714           *
   2715           * @return      NULL
   2716           ***************************************************************************************************/
   2717          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2718          {
   2719            ZStatus_t status;
   2720            uint8 endpoint;
   2721            uint16 groupID;
   2722          
   2723            pBuf += MT_RPC_FRAME_HDR_SZ;
   2724          
   2725            endpoint = *pBuf++;
   2726            groupID = osal_build_uint16( pBuf );
   2727          
   2728            if ( aps_RemoveGroup( endpoint, groupID ) )
   2729            {
   2730              status = ZSuccess;
   2731            }
   2732            else
   2733            {
   2734              status = ZFailure;
   2735            }
   2736          
   2737            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2738                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2739          }
   2740          
   2741          /***************************************************************************************************
   2742           * @fn          MT_ZdoExtRemoveAllGroup
   2743           *
   2744           * @brief       Handle the ZDO extension Remove All Groups message
   2745           *
   2746           * @param       pBuf - Pointer to the received message data.
   2747           *
   2748           * @return      NULL
   2749           ***************************************************************************************************/
   2750          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2751          {
   2752            ZStatus_t status = ZSuccess;
   2753          
   2754            pBuf += MT_RPC_FRAME_HDR_SZ;
   2755          
   2756            aps_RemoveAllGroup( *pBuf );
   2757          
   2758            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2759                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2760          }
   2761          
   2762          /***************************************************************************************************
   2763           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2764           *
   2765           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2766           *
   2767           * @param       pBuf - Pointer to the received message data.
   2768           *
   2769           * @return      NULL
   2770           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2771          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   \                     MT_ZdoExtFindAllGroupsEndpoint:
   2772          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   2773            uint16 groupList[ APS_MAX_GROUPS ];
   2774            uint8 groups;
   2775            uint8 msgLen;
   2776            uint8 *pMsg;
   2777          
   2778            pBuf += MT_RPC_FRAME_HDR_SZ;
   2779          
   2780            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   \   00000E                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP101_8
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   12....       LCALL     `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   00001B   E9           MOV       A,R1
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   F0           MOVX      @DPTR,A
   2781          
   2782            msgLen = 1 + (2 * groups);
   \   000023   C3           CLR       C
   \   000024   33           RLC       A
   \   000025   04           INC       A
   \   000026   F5..         MOV       ?V0,A
   2783            pMsg = osal_mem_alloc( msgLen );
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   FA           MOV       R2,A
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV       ?V2,R2
   \   000030   8B..         MOV       ?V3,R3
   \   000032   AE..         MOV       R6,?V2
   \   000034   AF..         MOV       R7,?V3
   2784            if ( pMsg )
   \   000036   EE           MOV       A,R6
   \   000037   4F           ORL       A,R7
   \   000038   6068         JZ        ??MT_ZdoExtFindAllGroupsEndpoint_0
   2785            {
   2786              uint8 x;
   2787              uint8 *pBuf = pMsg;
   \   00003A   EE           MOV       A,R6
   \   00003B   F8           MOV       R0,A
   \   00003C   EF           MOV       A,R7
   \   00003D   F9           MOV       R1,A
   2788          
   2789              *pBuf++ = groups;
   \   00003E   85..82       MOV       DPL,?XSP + 0
   \   000041   85..83       MOV       DPH,?XSP + 1
   \   000044   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000047   A3           INC       DPTR
   \   000048   A882         MOV       R0,DPL
   \   00004A   A983         MOV       R1,DPH
   2790              for ( x = 0; x < groups; x++ )
   \   00004C   7C00         MOV       R4,#0x0
   \   00004E   802F         SJMP      ??MT_ZdoExtFindAllGroupsEndpoint_1
   2791              {
   2792                *pBuf++ = LO_UINT16( groupList[x] );
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_2:
   \   000050   EC           MOV       A,R4
   \   000051   25E0         ADD       A,0xE0 /* A   */
   \   000053   FA           MOV       R2,A
   \   000054   E4           CLR       A
   \   000055   33           RLC       A
   \   000056   FB           MOV       R3,A
   \   000057   7401         MOV       A,#0x1
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E582         MOV       A,DPL
   \   00005E   2A           ADD       A,R2
   \   00005F   FA           MOV       R2,A
   \   000060   E583         MOV       A,DPH
   \   000062   3B           ADDC      A,R3
   \   000063   FB           MOV       R3,A
   \   000064   8A82         MOV       DPL,R2
   \   000066   8B83         MOV       DPH,R3
   \   000068   12....       LCALL     ?Subroutine41 & 0xFFFF
   2793                *pBuf++ = HI_UINT16( groupList[x] );
   \                     ??CrossCallReturnLabel_65:
   \   00006B   8A82         MOV       DPL,R2
   \   00006D   8B83         MOV       DPH,R3
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   A3           INC       DPTR
   \   000076   F0           MOVX      @DPTR,A
   \   000077   E8           MOV       A,R0
   \   000078   2402         ADD       A,#0x2
   \   00007A   F8           MOV       R0,A
   \   00007B   5001         JNC       ??MT_ZdoExtFindAllGroupsEndpoint_3
   \   00007D   09           INC       R1
   2794              }
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_3:
   \   00007E   0C           INC       R4
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_1:
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   E0           MOVX      A,@DPTR
   \   000086   FA           MOV       R2,A
   \   000087   EC           MOV       A,R4
   \   000088   C3           CLR       C
   \   000089   9A           SUBB      A,R2
   \   00008A   40C4         JC        ??MT_ZdoExtFindAllGroupsEndpoint_2
   2795          
   2796              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2797                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   \   00008C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008C   EE           MOV       A,R6
   \   00008D   FC           MOV       R4,A
   \   00008E   EF           MOV       A,R7
   \   00008F   FD           MOV       R5,A
   \   000090   AB..         MOV       R3,?V0
   \   000092   7A49         MOV       R2,#0x49
   \   000094   7965         MOV       R1,#0x65
   \   000096   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2798              osal_mem_free( pMsg );
   \   000099                ; Setup parameters for call to function osal_mem_free
   \   000099   EE           MOV       A,R6
   \   00009A   FA           MOV       R2,A
   \   00009B   EF           MOV       A,R7
   \   00009C   FB           MOV       R3,A
   \   00009D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A0   8011         SJMP      ??MT_ZdoExtFindAllGroupsEndpoint_4
   2799            }
   2800            else
   2801            {
   2802              groups = 0;
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_0:
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \   0000A8   E4           CLR       A
   \   0000A9   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   2803              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2804                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2805            }
   \                     ??CrossCallReturnLabel_254:
   \   0000AC   7A49         MOV       R2,#0x49
   \   0000AE   7965         MOV       R1,#0x65
   \   0000B0   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2806          }
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_4:
   \   0000B3   7421         MOV       A,#0x21
   \   0000B5   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   7B01         MOV       R3,#0x1
   \   000007   22           RET
   2807          
   2808          /***************************************************************************************************
   2809           * @fn          MT_ZdoExtFindGroup
   2810           *
   2811           * @brief       Handle the ZDO extension Find Group message
   2812           *
   2813           * @param       pBuf - Pointer to the received message data.
   2814           *
   2815           * @return      NULL
   2816           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2817          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   \                     MT_ZdoExtFindGroup:
   2818          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2819            uint8 endpoint;
   2820            uint16 groupID;
   2821            aps_Group_t *pGroup;
   2822            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   \   00000A   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7413         MOV       A,#0x13
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2823          
   2824            pBuf += MT_RPC_FRAME_HDR_SZ;
   2825          
   2826            endpoint = *pBuf++;
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FE           MOV       R6,A
   2827            groupID = osal_build_uint16( pBuf );
   \   00001F                ; Setup parameters for call to function osal_build_uint16
   \   00001F   EA           MOV       A,R2
   \   000020   2404         ADD       A,#0x4
   \   000022   FA           MOV       R2,A
   \   000023   5001         JNC       ??MT_ZdoExtFindGroup_0
   \   000025   0B           INC       R3
   \                     ??MT_ZdoExtFindGroup_0:
   \   000026   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   2828          
   2829            pGroup = aps_FindGroup( endpoint, groupID );
   \   000029                ; Setup parameters for call to function aps_FindGroup
   \   000029   EE           MOV       A,R6
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   2830            if ( pGroup  )
   \   00002E   EA           MOV       A,R2
   \   00002F   4B           ORL       A,R3
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   6053         JZ        ??MT_ZdoExtFindGroup_1
   2831            {
   2832              buf[0] = ZSuccess;
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
   2833              buf[1] = LO_UINT16( pGroup->ID );
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   C0E0         PUSH      A
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   D0E0         POP       A
   \   000048   12....       LCALL     ?Subroutine78 & 0xFFFF
   2834              buf[2] = HI_UINT16( pGroup->ID );
   2835              buf[3] = pGroup->name[0];
   2836              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2837            }
   \                     ??CrossCallReturnLabel_164:
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   C0E0         PUSH      A
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   D0E0         POP       A
   \   000055   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F9           MOV       R1,A
   \   00005A   7403         MOV       A,#0x3
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   E9           MOV       A,R1
   \   000060   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000063   A3           INC       DPTR
   \   000064   AC82         MOV       R4,DPL
   \   000066   AD83         MOV       R5,DPH
   \   000068   8C..         MOV       ?V0,R4
   \   00006A   8D..         MOV       ?V1,R5
   \   00006C   75..00       MOV       ?V2,#0x0
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000074   E9           MOV       A,R1
   \   000075   FC           MOV       R4,A
   \   000076   7D00         MOV       R5,#0x0
   \   000078   7407         MOV       A,#0x7
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   AA82         MOV       R2,DPL
   \   00007F   AB83         MOV       R3,DPH
   \   000081   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000084   7403         MOV       A,#0x3
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   8003         SJMP      ??MT_ZdoExtFindGroup_2
   2838            else
   2839            {
   2840              buf[0] = ZFailure;
   \                     ??MT_ZdoExtFindGroup_1:
   \   00008B   7401         MOV       A,#0x1
   \   00008D   F0           MOVX      @DPTR,A
   2841            }
   2842          
   2843            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2844                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   \                     ??MT_ZdoExtFindGroup_2:
   \   00008E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008E   AC..         MOV       R4,?XSP + 0
   \   000090   AD..         MOV       R5,?XSP + 1
   \   000092   7B13         MOV       R3,#0x13
   \   000094   7A4A         MOV       R2,#0x4a
   \   000096   7965         MOV       R1,#0x65
   \   000098   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2845          }
   \   00009B   7413         MOV       A,#0x13
   \   00009D                REQUIRE ?Subroutine7
   \   00009D                ; // Fall through to label ?Subroutine7
   2846          
   2847          /***************************************************************************************************
   2848           * @fn          MT_ZdoExtAddGroup
   2849           *
   2850           * @brief       Handle the ZDO extension Add Group message
   2851           *
   2852           * @param       pBuf - Pointer to the received message data.
   2853           *
   2854           * @return      NULL
   2855           ***************************************************************************************************/
   2856          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2857          {
   2858            ZStatus_t status = ZSuccess;
   2859            aps_Group_t group = {0};
   2860            uint8 endpoint;
   2861          
   2862            pBuf += MT_RPC_FRAME_HDR_SZ;
   2863          
   2864            endpoint = *pBuf++;
   2865            group.ID = osal_build_uint16( pBuf );
   2866            group.name[0] = pBuf[2];
   2867            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2868            {
   2869              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2870            }
   2871          
   2872            if (group.name[0] > 0 )
   2873            {
   2874              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2875            }
   2876          
   2877            status = aps_AddGroup( endpoint, &group );
   2878          
   2879            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2880                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2881          }
   2882          
   2883          /***************************************************************************************************
   2884           * @fn          MT_ZdoExtCountAllGroups
   2885           *
   2886           * @brief       Handle the ZDO extension Count All Groups message
   2887           *
   2888           * @param       pBuf - Pointer to the received message data.
   2889           *
   2890           * @return      NULL
   2891           ***************************************************************************************************/
   2892          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2893          {
   2894            ZStatus_t status = 0;
   2895          
   2896            pBuf += MT_RPC_FRAME_HDR_SZ;
   2897          
   2898            status = (ZStatus_t)aps_CountAllGroups();
   2899          
   2900            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2901                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2902          }
   2903          
   2904          
   2905          /***************************************************************************************************
   2906           * @fn          MT_ZdoExtRxIdle
   2907           *
   2908           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
   2909           *
   2910           * @param       pBuf - Pointer to the received message data.
   2911           *
   2912           * @return      NULL
   2913           ***************************************************************************************************/
   2914          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2915          {
   2916            uint8 setFlag;
   2917            uint8 setValue;
   2918          
   2919            pBuf += MT_RPC_FRAME_HDR_SZ;
   2920          
   2921            setFlag = *pBuf++;
   2922            setValue = *pBuf++;
   2923          
   2924            if ( setFlag )
   2925            {
   2926              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2927            }
   2928            else
   2929            {
   2930              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2931            }
   2932          
   2933            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2934                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   2935          }
   2936          
   2937          /***************************************************************************************************
   2938           * @fn          MT_ZdoExtNwkInfo
   2939           *
   2940           * @brief       Handle the ZDO extension Network Info Request message
   2941           *
   2942           * @param       pBuf - Pointer to the received message data.
   2943           *
   2944           * @return      NULL
   2945           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2946          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   \                     MT_ZdoExtNwkInfo:
   2947          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2948            uint8 buf[24];
   2949            uint8 *pMsg;
   2950          
   2951            pMsg = buf;
   2952          
   2953            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   \   00000A   12....       LCALL     ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00000D   E8           MOV       A,R0
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   2954            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   \   000015   7401         MOV       A,#0x1
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E9           MOV       A,R1
   \   00001B   F0           MOVX      @DPTR,A
   2955          
   2956            *pMsg++ = devState;
   \   00001C   90....       MOV       DPTR,#devState
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   F0           MOVX      @DPTR,A
   2957            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   \   00002A   90....       MOV       DPTR,#_NIB + 33
   \   00002D   12....       LCALL     ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000030   7403         MOV       A,#0x3
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   E8           MOV       A,R0
   \   000036   F0           MOVX      @DPTR,A
   2958            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E9           MOV       A,R1
   \   00003D   F0           MOVX      @DPTR,A
   2959            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   \   00003E   90....       MOV       DPTR,#_NIB + 23
   \   000041   12....       LCALL     ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000044   7405         MOV       A,#0x5
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E8           MOV       A,R0
   \   00004A   F0           MOVX      @DPTR,A
   2960            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   \   00004B   7406         MOV       A,#0x6
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   E9           MOV       A,R1
   \   000051   F0           MOVX      @DPTR,A
   2961            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   \   000052                ; Setup parameters for call to function osal_memcpy
   \   000052   75....       MOV       ?V0,#(_NIB + 53) & 0xff
   \   000055   75....       MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000058   75..00       MOV       ?V2,#0x0
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000060   7C08         MOV       R4,#0x8
   \   000062   7D00         MOV       R5,#0x0
   \   000064   740A         MOV       A,#0xa
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   AA82         MOV       R2,DPL
   \   00006B   AB83         MOV       R3,DPH
   \   00006D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000070   7403         MOV       A,#0x3
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
   2962            pMsg += 8;
   2963            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   75....       MOV       ?V0,#(_NIB + 25) & 0xff
   \   000078   75....       MOV       ?V1,#((_NIB + 25) >> 8) & 0xff
   \   00007B   78..         MOV       R0,#?V0
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000080   7C08         MOV       R4,#0x8
   \   000082   7D00         MOV       R5,#0x0
   \   000084   7412         MOV       A,#0x12
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   AA82         MOV       R2,DPL
   \   00008B   AB83         MOV       R3,DPH
   \   00008D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000090   7403         MOV       A,#0x3
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   2964            pMsg += 8;
   2965            *pMsg++ = _NIB.nwkLogicalChannel;
   \   000095   90....       MOV       DPTR,#_NIB + 22
   \   000098   E0           MOVX      A,@DPTR
   \   000099   C0E0         PUSH      A
   \   00009B   7417         MOV       A,#0x17
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   D0E0         POP       A
   \   0000A2   12....       LCALL     ?Subroutine57 & 0xFFFF
   2966          
   2967            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2968                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   \                     ??CrossCallReturnLabel_123:
   \   0000A5   7B18         MOV       R3,#0x18
   \   0000A7   7A50         MOV       R2,#0x50
   \   0000A9   7965         MOV       R1,#0x65
   \   0000AB   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2969          }
   \   0000AE   7418         MOV       A,#0x18
   \   0000B0   02....       LJMP      ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   F5..         MOV       ?V0,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V1
   \   000007   FB           MOV       R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005   E5..         MOV       A,?V0
   \   000007   2402         ADD       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   EA           MOV       A,R2
   \   000001   2403         ADD       A,#0x3
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F5..         MOV       ?V1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV       R1,#0x4
   \   000005   0A           INC       R2
   \   000006   0A           INC       R2
   \   000007   0A           INC       R2
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   740A         MOV       A,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   EA           MOV       A,R2
   \   000001   2420         ADD       A,#0x20
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine104_0
   \   000007                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNWKAddressRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMatchDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUnbindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtNwkUpdateRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtNwkUpdateRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkDiscoveryCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBeaconIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStateChangeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStateChangeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoDirectCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoDirectCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoAddrRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoAddrRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnceCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnceCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSrcRtgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSrcRtgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoConcentratorIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoConcentratorIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoLeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoLeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoTcDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoTcDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPermitJoinInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPermitJoinInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoExtFindAllGroupsEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoExtFindAllGroupsEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoExtFindGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoExtFindGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoExtNwkInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoExtNwkInfo

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `:
   \   000000   0000         DW 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   2970          
   2971          /***************************************************************************************************
   2972           * @fn          MT_ZdoExtSecApsRemoveReq
   2973           *
   2974           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   2975           *
   2976           * @param       pBuf - Pointer to the received message data.
   2977           *
   2978           * @return      NULL
   2979           ***************************************************************************************************/
   2980          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   2981          {
   2982            ZStatus_t status = 0;
   2983            uint16 parentAddr;
   2984            uint16 nwkAddr;
   2985          
   2986            pBuf += MT_RPC_FRAME_HDR_SZ;
   2987          
   2988            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2989            {
   2990              parentAddr = osal_build_uint16( pBuf );
   2991              pBuf += 2;
   2992          
   2993              nwkAddr = osal_build_uint16( pBuf );
   2994              pBuf += 2;
   2995          
   2996              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   2997            }
   2998            else
   2999            {
   3000              status = ZUnsupportedMode;
   3001            }
   3002          
   3003            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3004                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3005          }
   3006          
   3007          /***************************************************************************************************
   3008           * @fn          MT_ZdoExtSetParams
   3009           *
   3010           * @brief       Set Parameters not settable through NV.
   3011           *
   3012           * @param       pBuf - Pointer to the received message data.
   3013           *
   3014           * @return      NULL
   3015           ***************************************************************************************************/
   3016          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3017          {
   3018            ZStatus_t status = ZSuccess;
   3019            uint8 useMultiCast;
   3020          
   3021            pBuf += MT_RPC_FRAME_HDR_SZ;
   3022          
   3023            // Is the useMulticast in this message
   3024            useMultiCast = *pBuf++;
   3025            if ( useMultiCast & 0x80 )
   3026            {
   3027              if ( useMultiCast & 0x7F )
   3028              {
   3029                _NIB.nwkUseMultiCast = TRUE;
   3030              }
   3031              else
   3032              {
   3033                _NIB.nwkUseMultiCast = FALSE;
   3034              }
   3035            }
   3036          
   3037            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3038                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3039          }
   3040          #endif // MT_ZDO_EXTENSIONS
   3041          
   3042          #endif   /*ZDO Command Processing in MT*/
   3043          /***************************************************************************************************
   3044          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     47   MT_ZdoAddrRspCB
        0     18   -> MT_BuildAndSendZToolResponse
        0     18   -> MT_Word2Buf
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> sAddrExtCpy
      1     23   MT_ZdoBeaconIndCB
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
        0     14   -> osal_memcpy
      1    113   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> osal_build_uint16
        0     35   -> sAddrExtCpy
      1     75   MT_ZdoCommandProcessing
        0     70   -> MT_BuildAndSendZToolResponse
        0     70   -> MT_ZdoBindRequest
        0     70   -> MT_ZdoEndDevBindRequest
        0     70   -> MT_ZdoExtFindAllGroupsEndpoint
        0     70   -> MT_ZdoExtFindGroup
        0     70   -> MT_ZdoExtNwkInfo
        0     70   -> MT_ZdoMatchDescRequest
        0     70   -> MT_ZdoMgmtNwkUpdateRequest
        0     70   -> MT_ZdoNWKAddressRequest
        0     70   -> MT_ZdoNwkAddrOfInterestReq
        0     70   -> MT_ZdoSendData
        0     70   -> MT_ZdoUnbindRequest
        0     70   -> NLME_RouteDiscoveryRequest
        0     70   -> RTG_CheckRtStatus
        0     70   -> ZDApp_ForceConcentratorChange
        0     74   -> ZDApp_JoinReq
        0     70   -> ZDApp_NetworkDiscoveryReq
        0     70   -> ZDApp_SetRejoinBackoffDuration
        0     70   -> ZDApp_SetRejoinScanDuration
        0     70   -> ZDOInitDevice
        0     70   -> ZDO_RegisterForZDOMsg
        0     70   -> ZDO_RegisterForZdoCB
        0     70   -> ZDO_RemoveRegisteredCB
        0     71   -> ZDP_DeviceAnnce
        0     70   -> ZDP_IEEEAddrReq
        0     71   -> ZDP_MgmtDirectJoinReq
        0     72   -> ZDP_MgmtLeaveReq
        0     74   -> ZDP_MgmtNwkDiscReq
        0     70   -> ZDP_MgmtPermitJoinReq
        0     71   -> ZDP_NWKAddrOfInterestReq
        0     75   -> ZDP_SendData
        0     70   -> ZDP_ServerDiscReq
        0     71   -> ZDP_SimpleDescReq
        0     72   -> ZDP_UserDescSet
        0     72   -> ZDSecMgrAPSRemove
        0     72   -> ZDSecMgrAddLinkKey
        0     70   -> ZDSecMgrDeviceRemoveByExtAddr
        0     70   -> ZDSecMgrEntryLookupExt
        0     70   -> ZDSecMgrSwitchNwkKey
        0     70   -> ZDSecMgrUpdateNwkKey
        0     70   -> ZMacGetReq
        0     70   -> ZMacSetReq
        0     70   -> aps_AddGroup
        0     70   -> aps_CountAllGroups
        0     70   -> aps_RemoveAllGroup
        0     70   -> aps_RemoveGroup
        0     70   -> osal_build_uint16
        0     70   -> osal_build_uint32
        0     73   -> osal_memcpy
      1     25   MT_ZdoConcentratorIndCB
        0     22   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_memcpy
      1     32   MT_ZdoDirectCB
        0     29   -> MT_BuildAndSendZToolResponse
        0     29   -> MT_ZdoAddrRspCB
        0     29   -> MT_ZdoEndDevAnnceCB
        0     29   -> ZDO_ParseAddrRsp
        0     29   -> ZDO_ParseDeviceAnnce
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     32   -> osal_memcpy
      1     43   MT_ZdoEndDevAnnceCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> sAddrExtCpy
      1    169   MT_ZdoEndDevBindRequest
        0     90   -> MT_BuildAndSendZToolResponse
        0     99   -> ZDP_EndDeviceBindReq
        0     90   -> osal_build_uint16
      1    115   MT_ZdoExtFindAllGroupsEndpoint
        0     45   -> MT_BuildAndSendZToolResponse
        0     45   -> aps_FindAllGroupsForEndpoint
        0     45   -> osal_mem_alloc
        0     45   -> osal_mem_free
      1    103   MT_ZdoExtFindGroup
        0     30   -> MT_BuildAndSendZToolResponse
        0     30   -> aps_FindGroup
        0     30   -> osal_build_uint16
        0     33   -> osal_memcpy
      1    108   MT_ZdoExtNwkInfo
        0     35   -> MT_BuildAndSendZToolResponse
        0     38   -> osal_memcpy
      2      0   MT_ZdoInit
        2      0   -> ZDO_RegisterForZdoCB
      1     14   MT_ZdoJoinCnfCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDO_DeregisterForZdoCB
      1     27   MT_ZdoLeaveInd
        0     24   -> MT_BuildAndSendZToolResponse
        0     27   -> osal_memcpy
      1    170   MT_ZdoMatchDescRequest
        0     92   -> MT_BuildAndSendZToolResponse
        0    100   -> ZDP_MatchDescReq
        0     92   -> osal_build_uint16
      1    106   MT_ZdoMgmtNwkUpdateRequest
        0     30   -> MT_BuildAndSendZToolResponse
        0     36   -> ZDP_MgmtNwkUpdateReq
        0     30   -> osal_build_uint16
        0     30   -> osal_build_uint32
      1    104   MT_ZdoNWKAddressRequest
        0     34   -> AssocGetWithExt
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> NLME_GetShortAddr
        0     34   -> ZDP_NwkAddrReq
        0     34   -> sAddrExtCpy
      1     95   MT_ZdoNwkAddrOfInterestReq
        0     24   -> MT_BuildAndSendZToolResponse
        0     25   -> ZDP_NWKAddrOfInterestReq
        0     24   -> osal_build_uint16
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      2      0   MT_ZdoPermitJoinInd
        2      0   -> MT_BuildAndSendZToolResponse
      1    100   MT_ZdoSendData
        0     25   -> MT_BuildAndSendZToolResponse
        0     30   -> ZDP_SendData
        0     25   -> osal_build_uint16
      1     18   MT_ZdoSendMsgCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      1     14   MT_ZdoSrcRtgCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      2      0   MT_ZdoStateChangeCB
        2      0   -> MT_BuildAndSendZToolResponse
      1     26   MT_ZdoTcDeviceInd
        0     23   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_memcpy
      1    113   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> osal_build_uint16
        0     35   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      19  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       6  ?<Constant {0, 0, 0, 0, 0, 0}>
      18  ?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       8  ??Subroutine100_0
       9  ??Subroutine101_0
       7  ??Subroutine102_0
       5  ??Subroutine103_0
       8  ??Subroutine104_0
       5  ??Subroutine105_0
       7  ??Subroutine87_0
       4  ??Subroutine88_0
       5  ??Subroutine89_0
       7  ??Subroutine90_0
      14  ??Subroutine91_0
      10  ??Subroutine92_0
       8  ??Subroutine93_0
       6  ??Subroutine94_0
       3  ??Subroutine95_0
       6  ??Subroutine96_0
       9  ??Subroutine97_0
       4  ??Subroutine98_0
       7  ??Subroutine99_0
       7  ?Subroutine0
      18  ?Subroutine1
       3  ?Subroutine10
      12  ?Subroutine11
      24  ?Subroutine12
      18  ?Subroutine13
      10  ?Subroutine14
       8  ?Subroutine15
       8  ?Subroutine16
       1  ?Subroutine17
       5  ?Subroutine18
      13  ?Subroutine19
       8  ?Subroutine2
       5  ?Subroutine20
       5  ?Subroutine21
       9  ?Subroutine22
       3  ?Subroutine23
       2  ?Subroutine24
       6  ?Subroutine25
       6  ?Subroutine26
       5  ?Subroutine27
      40  ?Subroutine28
       4  ?Subroutine29
       3  ?Subroutine3
      18  ?Subroutine30
       6  ?Subroutine31
      12  ?Subroutine32
       6  ?Subroutine33
      12  ?Subroutine34
       1  ?Subroutine35
       5  ?Subroutine36
       1  ?Subroutine37
      13  ?Subroutine38
       6  ?Subroutine39
       8  ?Subroutine4
       8  ?Subroutine40
       7  ?Subroutine41
       8  ?Subroutine42
       9  ?Subroutine43
      10  ?Subroutine44
       9  ?Subroutine45
      10  ?Subroutine46
       6  ?Subroutine47
      18  ?Subroutine48
       9  ?Subroutine49
       3  ?Subroutine5
       8  ?Subroutine50
      19  ?Subroutine51
       7  ?Subroutine52
       6  ?Subroutine53
       5  ?Subroutine54
      14  ?Subroutine55
       5  ?Subroutine56
       6  ?Subroutine57
       6  ?Subroutine58
       4  ?Subroutine59
       5  ?Subroutine6
       4  ?Subroutine60
       4  ?Subroutine61
       9  ?Subroutine62
       2  ?Subroutine63
       4  ?Subroutine64
      11  ?Subroutine65
      11  ?Subroutine66
      10  ?Subroutine67
       3  ?Subroutine68
       7  ?Subroutine69
       3  ?Subroutine7
      14  ?Subroutine70
      17  ?Subroutine71
       4  ?Subroutine72
      14  ?Subroutine73
       8  ?Subroutine74
       5  ?Subroutine75
       9  ?Subroutine76
      10  ?Subroutine77
       7  ?Subroutine78
       7  ?Subroutine79
       6  ?Subroutine8
      10  ?Subroutine80
       9  ?Subroutine81
      11  ?Subroutine82
      10  ?Subroutine83
      12  ?Subroutine84
      12  ?Subroutine85
       6  ?Subroutine86
      18  ?Subroutine9
     159  MT_ZdoAddrRspCB
       6  MT_ZdoAddrRspCB::?relay
     346  MT_ZdoBeaconIndCB
       6  MT_ZdoBeaconIndCB::?relay
     145  MT_ZdoBindRequest
       6  MT_ZdoBindRequest::?relay
    2538  MT_ZdoCommandProcessing
       6  MT_ZdoCommandProcessing::?relay
     103  MT_ZdoConcentratorIndCB
       6  MT_ZdoConcentratorIndCB::?relay
     338  MT_ZdoDirectCB
       6  MT_ZdoDirectCB::?relay
     121  MT_ZdoEndDevAnnceCB
       6  MT_ZdoEndDevAnnceCB::?relay
     321  MT_ZdoEndDevBindRequest
       6  MT_ZdoEndDevBindRequest::?relay
     184  MT_ZdoExtFindAllGroupsEndpoint
       6  MT_ZdoExtFindAllGroupsEndpoint::?relay
     157  MT_ZdoExtFindGroup
       6  MT_ZdoExtFindGroup::?relay
     179  MT_ZdoExtNwkInfo
       6  MT_ZdoExtNwkInfo::?relay
      49  MT_ZdoInit
       6  MT_ZdoInit::?relay
     110  MT_ZdoJoinCnfCB
       6  MT_ZdoJoinCnfCB::?relay
     118  MT_ZdoLeaveInd
       6  MT_ZdoLeaveInd::?relay
     295  MT_ZdoMatchDescRequest
       6  MT_ZdoMatchDescRequest::?relay
     212  MT_ZdoMgmtNwkUpdateRequest
       6  MT_ZdoMgmtNwkUpdateRequest::?relay
     245  MT_ZdoNWKAddressRequest
       6  MT_ZdoNWKAddressRequest::?relay
     168  MT_ZdoNwkAddrOfInterestReq
       6  MT_ZdoNwkAddrOfInterestReq::?relay
      43  MT_ZdoNwkDiscoveryCnfCB
       6  MT_ZdoNwkDiscoveryCnfCB::?relay
      30  MT_ZdoPermitJoinInd
       6  MT_ZdoPermitJoinInd::?relay
     218  MT_ZdoSendData
       6  MT_ZdoSendData::?relay
     177  MT_ZdoSendMsgCB
       6  MT_ZdoSendMsgCB::?relay
     148  MT_ZdoSrcRtgCB
       6  MT_ZdoSrcRtgCB::?relay
      25  MT_ZdoStateChangeCB
       6  MT_ZdoStateChangeCB::?relay
      98  MT_ZdoTcDeviceInd
       6  MT_ZdoTcDeviceInd::?relay
     148  MT_ZdoUnbindRequest
       6  MT_ZdoUnbindRequest::?relay
       4  _zdoCallbackSub
       1  ignoreIndication
       2  pBeaconIndBuf

 
 7 557 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
    43 bytes in segment XDATA_ROM_C
     7 bytes in segment XDATA_Z
 
   156 bytes of CODE     memory
    43 bytes of CONST    memory
 7 557 bytes of HUGECODE memory
     7 bytes of XDATA    memory

Errors: none
Warnings: none
