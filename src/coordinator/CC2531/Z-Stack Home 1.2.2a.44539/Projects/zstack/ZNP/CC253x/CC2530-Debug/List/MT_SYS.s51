///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              16/Feb/2018  21:39:24
// Copyright 2004-2017 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_SYS.c
//    Command line       =  
//        -f C:\Users\Oskar\AppData\Local\Temp\EW67CC.tmp ("C:\Texas
//        Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_SYS.c" -D
//        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  German_Germany.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\MT_SYS.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_SYS

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8

        PUBLIC `??MT_SysCommandProcessing::?relay`
        FUNCTION `??MT_SysCommandProcessing::?relay`,0203H
        FUNCTION `??MT_SysGetUtcTime::?relay`,0203H
        FUNCTION `??MT_SysGpio::?relay`,0203H
        FUNCTION `??MT_SysOsalNVItemInit::?relay`,0203H
        FUNCTION `??MT_SysOsalNVRead::?relay`,0203H
        FUNCTION `??MT_SysOsalNVWrite::?relay`,0203H
        PUBLIC `??MT_SysOsalTimerExpired::?relay`
        FUNCTION `??MT_SysOsalTimerExpired::?relay`,0203H
        PUBLIC `??MT_SysResetInd::?relay`
        FUNCTION `??MT_SysResetInd::?relay`,0203H
        FUNCTION `??MT_SysSetUtcTime::?relay`,0203H
        PUBLIC MT_SysCommandProcessing
        FUNCTION MT_SysCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION MT_SysGetUtcTime,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        FUNCTION MT_SysGpio,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        FUNCTION MT_SysOsalNVItemInit,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION MT_SysOsalNVRead,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION MT_SysOsalNVWrite,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC MT_SysOsalTimerExpired
        FUNCTION MT_SysOsalTimerExpired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysResetInd
        FUNCTION MT_SysResetInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION MT_SysSetUtcTime,0a1203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBWEAK P0DIR
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1INP
        PUBWEAK P1SEL
        PUBWEAK P2INP
        PUBWEAK PICTL
        PUBWEAK SLEEPSTA
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalAdcRead          SYMBOL "HalAdcRead"
`??HalAdcRead::?relay` SYMBOL "?relay", HalAdcRead
MAC_MlmeSetReq      SYMBOL "MAC_MlmeSetReq"
`??MAC_MlmeSetReq::?relay` SYMBOL "?relay", MAC_MlmeSetReq
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
Onboard_rand        SYMBOL "Onboard_rand"
`??Onboard_rand::?relay` SYMBOL "?relay", Onboard_rand
ZDiagsClearStats    SYMBOL "ZDiagsClearStats"
`??ZDiagsClearStats::?relay` SYMBOL "?relay", ZDiagsClearStats
ZDiagsGetStatsAttr  SYMBOL "ZDiagsGetStatsAttr"
`??ZDiagsGetStatsAttr::?relay` SYMBOL "?relay", ZDiagsGetStatsAttr
ZDiagsInitStats     SYMBOL "ZDiagsInitStats"
`??ZDiagsInitStats::?relay` SYMBOL "?relay", ZDiagsInitStats
ZDiagsRestoreStatsFromNV SYMBOL "ZDiagsRestoreStatsFromNV"
`??ZDiagsRestoreStatsFromNV::?relay` SYMBOL "?relay", ZDiagsRestoreStatsFromNV
ZDiagsSaveStatsToNV SYMBOL "ZDiagsSaveStatsToNV"
`??ZDiagsSaveStatsToNV::?relay` SYMBOL "?relay", ZDiagsSaveStatsToNV
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
macRadioSetTxPower  SYMBOL "macRadioSetTxPower"
`??macRadioSetTxPower::?relay` SYMBOL "?relay", macRadioSetTxPower
osal_ConvertUTCSecs SYMBOL "osal_ConvertUTCSecs"
`??osal_ConvertUTCSecs::?relay` SYMBOL "?relay", osal_ConvertUTCSecs
osal_ConvertUTCTime SYMBOL "osal_ConvertUTCTime"
`??osal_ConvertUTCTime::?relay` SYMBOL "?relay", osal_ConvertUTCTime
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_getClock       SYMBOL "osal_getClock"
`??osal_getClock::?relay` SYMBOL "?relay", osal_getClock
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_setClock       SYMBOL "osal_setClock"
`??osal_setClock::?relay` SYMBOL "?relay", osal_setClock
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zgSetItem           SYMBOL "zgSetItem"
`??zgSetItem::?relay` SYMBOL "?relay", zgSetItem
MT_SysCommandProcessing SYMBOL "MT_SysCommandProcessing"
`??MT_SysCommandProcessing::?relay` SYMBOL "?relay", MT_SysCommandProcessing
MT_SysOsalTimerExpired SYMBOL "MT_SysOsalTimerExpired"
`??MT_SysOsalTimerExpired::?relay` SYMBOL "?relay", MT_SysOsalTimerExpired
MT_SysResetInd      SYMBOL "MT_SysResetInd"
`??MT_SysResetInd::?relay` SYMBOL "?relay", MT_SysResetInd

        EXTERN `??HalAdcRead::?relay`
        FUNCTION `??HalAdcRead::?relay`,00H
        EXTERN `??MAC_MlmeSetReq::?relay`
        FUNCTION `??MAC_MlmeSetReq::?relay`,00H
        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??Onboard_rand::?relay`
        FUNCTION `??Onboard_rand::?relay`,00H
        EXTERN `??ZDiagsClearStats::?relay`
        FUNCTION `??ZDiagsClearStats::?relay`,00H
        EXTERN `??ZDiagsGetStatsAttr::?relay`
        FUNCTION `??ZDiagsGetStatsAttr::?relay`,00H
        EXTERN `??ZDiagsInitStats::?relay`
        FUNCTION `??ZDiagsInitStats::?relay`,00H
        EXTERN `??ZDiagsRestoreStatsFromNV::?relay`
        FUNCTION `??ZDiagsRestoreStatsFromNV::?relay`,00H
        EXTERN `??ZDiagsSaveStatsToNV::?relay`
        FUNCTION `??ZDiagsSaveStatsToNV::?relay`,00H
        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??macRadioSetTxPower::?relay`
        FUNCTION `??macRadioSetTxPower::?relay`,00H
        EXTERN `??osal_ConvertUTCSecs::?relay`
        FUNCTION `??osal_ConvertUTCSecs::?relay`,00H
        EXTERN `??osal_ConvertUTCTime::?relay`
        FUNCTION `??osal_ConvertUTCTime::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_getClock::?relay`
        FUNCTION `??osal_getClock::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_setClock::?relay`
        FUNCTION `??osal_setClock::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zgSetItem::?relay`
        FUNCTION `??zgSetItem::?relay`,00H
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSetReq
        FUNCTION MAC_MlmeSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MTVersionString
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDiagsClearStats
        FUNCTION ZDiagsClearStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDiagsGetStatsAttr
        FUNCTION ZDiagsGetStatsAttr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDiagsInitStats
        FUNCTION ZDiagsInitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDiagsRestoreStatsFromNV
        FUNCTION ZDiagsRestoreStatsFromNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDiagsSaveStatsToNV
        FUNCTION ZDiagsSaveStatsToNV,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioSetTxPower
        FUNCTION macRadioSetTxPower,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCSecs
        FUNCTION osal_ConvertUTCSecs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCTime
        FUNCTION osal_ConvertUTCTime,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_getClock
        FUNCTION osal_getClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_setClock
        FUNCTION osal_setClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgSetItem
        FUNCTION zgSetItem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_SYS.c
//    1 /******************************************************************************
//    2   Filename:       MT_SYS.c
//    3   Revised:        $Date: 2015-02-09 19:10:05 -0800 (Mon, 09 Feb 2015) $
//    4   Revision:       $Revision: 42469 $
//    5 
//    6   Description:   MonitorTest functions for SYS commands.
//    7 
//    8   Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  *****************************************************************************/
//   39 
//   40 /******************************************************************************
//   41  * INCLUDES
//   42  *****************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT.h"
//   45 #include "MT_SYS.h"
//   46 #include "MT_VERSION.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_NV.h"
//   49 #include "Onboard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f6H
// unsigned char volatile __sfr P1INP
P1INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   50 #include "OSAL_Clock.h"
//   51 #include "mac_low_level.h"
//   52 #include "ZMAC.h"
//   53 #include "MT_UART.h"
//   54 
//   55 #if !defined( CC26XX )
//   56   #include "hal_adc.h"
//   57 #endif
//   58 #if !defined( CC253X_MACNP )
//   59   #include "ZGlobals.h"
//   60 #endif
//   61 #if defined( FEATURE_NVEXID )
//   62   #include "zstackconfig.h"
//   63 #endif
//   64 #if defined( FEATURE_DUAL_MAC )
//   65   #include "dmmgr.h"
//   66 #endif
//   67 #if defined( FEATURE_SYSTEM_STATS )
//   68 #include "ZDiags.h"
//   69 #endif
//   70 #if defined( MT_SYS_JAMMER_FEATURE )
//   71   #include "mac_rx.h"
//   72   #include "mac_radio_defs.h"
//   73 #endif
//   74 #if (defined INCLUDE_REVISION_INFORMATION) && ((defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)) //built for bootloader
//   75   #include "hal_flash.h"
//   76   #include "sb_shared.h"
//   77 #endif
//   78 
//   79 /******************************************************************************
//   80  * MACROS
//   81  *****************************************************************************/
//   82 
//   83 /* RPC_CMD responses for MT_SYS commands */
//   84 #define MT_ARSP_SYS ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS)
//   85 #define MT_SRSP_SYS ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS)
//   86 
//   87 /* Max possible MT response length, limited by TX buffer and sizeof uint8 */
//   88 #define MT_MAX_RSP_LEN  ( MIN( MT_UART_DEFAULT_MAX_TX_BUFF, 255 ) )
//   89 
//   90 /* Max possible MT response data length, MT protocol overhead */
//   91 #define MT_MAX_RSP_DATA_LEN  ( (MT_MAX_RSP_LEN - 1) - SPI_0DATA_MSG_LEN )
//   92 
//   93 #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
//   94 
//   95 #if !defined HAL_GPIO || !HAL_GPIO
//   96 #define GPIO_DIR_IN(IDX)
//   97 #define GPIO_DIR_OUT(IDX)
//   98 #define GPIO_TRI(IDX)
//   99 #define GPIO_PULL_UP(IDX)
//  100 #define GPIO_PULL_DN(IDX)
//  101 #define GPIO_SET(IDX)
//  102 #define GPIO_CLR(IDX)
//  103 #define GPIO_TOG(IDX)
//  104 #define GPIO_GET(IDX) 0
//  105 #define GPIO_HiD_SET() (val = 0)
//  106 #define GPIO_HiD_CLR() (val = 0)
//  107 #endif
//  108 
//  109 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  110 #if defined ( HAL_MCU_CC2530 ) && !defined ( HAL_BOARD_CC2530USB )
//  111   // This only works with CC253x chips
//  112   #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() st         \ 
//  113   (                                                                                                                                                                                                                                   \ 
//  114     OBSSEL3 = 0xFD;                                        \ 
//  115     OBSSEL4 = 0xFC;                                        \ 
//  116     RFC_OBS_CTRL1 = 0x09; /* 9 - sniff clk */              \ 
//  117     RFC_OBS_CTRL2 = 0x08; /* 8 - sniff data */             \ 
//  118     MDMTEST1 |= 0x04;                                      \ 
//  119   )
//  120 
//  121   // This only works with CC253x chips
//  122   #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() st        \ 
//  123   (                                                                                                                                                                                                                                   \ 
//  124     OBSSEL3 &= ~0x80;                                                                                                                                                                             \ 
//  125     OBSSEL4 &= ~0x80;                                                                                                                                                                             \ 
//  126     RFC_OBS_CTRL1 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[1] */                                                                                   \ 
//  127     RFC_OBS_CTRL2 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[2] */                                                                                   \ 
//  128     MDMTEST1 &= ~0x04;                                                                                                                                                         \ 
//  129   )
//  130 #else
//  131   #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
//  132   #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
//  133 #endif
//  134 #endif // MT_SYS_SNIFFER_FEATURE
//  135 
//  136 #define RESET_HARD     0
//  137 #define RESET_SOFT     1
//  138 #define RESET_SHUTDOWN 2
//  139 
//  140 /******************************************************************************
//  141  * CONSTANTS
//  142  *****************************************************************************/
//  143 
//  144 #if !defined( MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA )
//  145 #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
//  146 #endif
//  147 
//  148 #if defined( MT_SYS_FUNC )

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  149 static const uint16 MT_SysOsalEventId[] =
MT_SysOsalEventId:
        DATA16
        DW 2048
        DW 1024
        DW 512
        DW 256
//  150 {
//  151   MT_SYS_OSAL_EVENT_0,
//  152   MT_SYS_OSAL_EVENT_1,
//  153   MT_SYS_OSAL_EVENT_2,
//  154   MT_SYS_OSAL_EVENT_3
//  155 };
//  156 #endif
//  157 
//  158 typedef enum {
//  159   GPIO_DIR,
//  160   GPIO_TRI,
//  161   GPIO_SET,
//  162   GPIO_CLR,
//  163   GPIO_TOG,
//  164   GPIO_GET,
//  165   GPIO_HiD = 0x12
//  166 } GPIO_Op_t;
//  167 
//  168 #if defined( MT_SYS_JAMMER_FEATURE )
//  169   #define JAMMER_CHECK_EVT                           0x0001
//  170 
//  171   #if !defined( JAMMER_DETECT_CONTINUOUS_EVENTS )
//  172     #define JAMMER_DETECT_CONTINUOUS_EVENTS          150
//  173   #endif
//  174   #if !defined( JAMMER_DETECT_PERIOD_TIME )
//  175     #define JAMMER_DETECT_PERIOD_TIME                100  // In milliseconds
//  176   #endif
//  177   #if !defined( JAMMER_HIGH_NOISE_LEVEL )
//  178     #define JAMMER_HIGH_NOISE_LEVEL                  -65
//  179   #endif
//  180 #endif // MT_SYS_JAMMER_FEATURE
//  181 
//  182 /******************************************************************************
//  183  * EXTERNAL VARIABLES
//  184  *****************************************************************************/
//  185 #if defined( FEATURE_NVEXID )
//  186 extern zstack_Config_t *pZStackCfg;
//  187 #endif /* FEATURE_NVEXID */
//  188 
//  189 /******************************************************************************
//  190  * LOCAL VARIABLES
//  191  *****************************************************************************/
//  192 #if defined( MT_SYS_JAMMER_FEATURE )
//  193 static uint8 jammerTaskID;
//  194 static uint16 jammerContinuousEvents = JAMMER_DETECT_CONTINUOUS_EVENTS;
//  195 static uint16 jammerDetections = JAMMER_DETECT_CONTINUOUS_EVENTS;
//  196 static int8 jammerHighNoiseLevel = JAMMER_HIGH_NOISE_LEVEL;
//  197 static uint32 jammerDetectPeriodTime = JAMMER_DETECT_PERIOD_TIME;
//  198 #endif
//  199 
//  200 #if defined( MT_SYS_SNIFFER_FEATURE )
//  201 static uint8 sniffer = FALSE;
//  202 #endif
//  203 
//  204 /******************************************************************************
//  205  * LOCAL FUNCTIONS
//  206  *****************************************************************************/
//  207 #if defined( MT_SYS_FUNC )
//  208 static void MT_SysReset(uint8 *pBuf);
//  209 static void MT_SysPing(void);
//  210 static void MT_SysVersion(void);
//  211 static void MT_SysSetExtAddr(uint8 *pBuf);
//  212 static void MT_SysGetExtAddr(void);
//  213 static void MT_SysOsalStartTimer(uint8 *pBuf);
//  214 static void MT_SysOsalStopTimer(uint8 *pBuf);
//  215 static void MT_SysRandom(void);
//  216 static void MT_SysGpio(uint8 *pBuf);
//  217 static void MT_SysStackTune(uint8 *pBuf);
//  218 static void MT_SysSetUtcTime(uint8 *pBuf);
//  219 static void MT_SysGetUtcTime(void);
//  220 static void MT_SysSetTxPower(uint8 *pBuf);
//  221 #if !defined( CC26XX )
//  222 static void MT_SysAdcRead(uint8 *pBuf);
//  223 #endif /* !CC26xx */
//  224 #if !defined( CC253X_MACNP )
//  225 static void MT_SysOsalNVItemInit(uint8 *pBuf);
//  226 static void MT_SysOsalNVDelete(uint8 *pBuf);
//  227 static void MT_SysOsalNVLength(uint8 *pBuf);
//  228 static void MT_SysOsalNVRead(uint8 *pBuf);
//  229 static void MT_SysOsalNVWrite(uint8 *pBuf);
//  230 static uint8 MT_CheckNvId(uint16 nvId);
//  231 #if defined( FEATURE_NVEXID )
//  232 static void MT_SysNvCompact(uint8 *pBuf);
//  233 static void MT_SysNvCreate(uint8 *pBuf);
//  234 static void MT_SysNvDelete(uint8 *pBuf);
//  235 static void MT_SysNvLength(uint8 *pBuf);
//  236 static void MT_SysNvRead(uint8 *pBuf);
//  237 static void MT_SysNvWrite(uint8 *pBuf);
//  238 static uint8 MT_StackNvExtId( NVINTF_itemID_t *nvId );
//  239 static uint8 *MT_ParseNvExtId( uint8 *pBuf, NVINTF_itemID_t *nvId );
//  240 #endif /* FEATURE_NVEXID */
//  241 #endif /* !CC253X_MACNP */
//  242 #if defined( MT_SYS_JAMMER_FEATURE )
//  243 static void MT_SysJammerParameters( uint8 *pBuf );
//  244 #endif /* MT_SYS_JAMMER_FEATURE */
//  245 #if defined( MT_SYS_SNIFFER_FEATURE )
//  246 static void MT_SysSnifferParameters( uint8 *pBuf );
//  247 #endif /* MT_SYS_SNIFFER_FEATURE */
//  248 #if defined( FEATURE_SYSTEM_STATS )
//  249 static void MT_SysZDiagsInitStats(void);
//  250 static void MT_SysZDiagsClearStats(uint8 *pBuf);
//  251 static void MT_SysZDiagsGetStatsAttr(uint8 *pBuf);
//  252 static void MT_SysZDiagsRestoreStatsFromNV(void);
//  253 static void MT_SysZDiagsSaveStatsToNV(void);
//  254 #endif /* FEATURE_SYSTEM_STATS */
//  255 #if defined( ENABLE_MT_SYS_RESET_SHUTDOWN )
//  256 static void powerOffSoc(void);
//  257 #endif /* ENABLE_MT_SYS_RESET_SHUTDOWN */
//  258 #endif /* MT_SYS_FUNC */
//  259 
//  260 #if defined( MT_SYS_FUNC )
//  261 /******************************************************************************
//  262  * @fn      MT_SysProcessing
//  263  *
//  264  * @brief   Process all the SYS commands that are issued by test tool
//  265  *
//  266  * @param   pBuf - pointer to the msg buffer
//  267  *
//  268  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  269  *          |  1   |   1   |   1   |  0-255 |
//  270  *
//  271  * @return  status
//  272  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  273 uint8 MT_SysCommandProcessing(uint8 *pBuf)
MT_SysCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
        CODE
//  274 {
        FUNCALL MT_SysCommandProcessing, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, Onboard_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGpio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, macRadioSetTxPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVItemInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZDiagsInitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZDiagsClearStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZDiagsGetStatsAttr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZDiagsRestoreStatsFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, ZDiagsSaveStatsToNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  275   uint8 status = MT_RPC_SUCCESS;
        MOV       R6,#0x0
//  276 
//  277   switch (pBuf[MT_RPC_POS_CMD1])
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        LCALL     ?UC_SWITCH_DENSE
`?<Jumptable for MT_SysCommandProcessing>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DB        29
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_8
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_12
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_13
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_14
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_15
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_17
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_18
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_19
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_20
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_21
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_22
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_23
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_24
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_7
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_8
        CODE
//  278   {
//  279     case MT_SYS_RESET_REQ:
//  280       MT_SysReset(pBuf);
??MT_SysCommandProcessing_1:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??MT_SysCommandProcessing_25
        DEC       A
        JZ        ??MT_SysCommandProcessing_26
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
??MT_SysCommandProcessing_25:
        CLR       0xa8.7
        CLR       0xa8.7
        MOV       0xc9,#-0x55
        MOV       0xc9,#0x5b
??MT_SysCommandProcessing_28:
        SJMP      ??MT_SysCommandProcessing_28
??MT_SysCommandProcessing_26:
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL     Onboard_soft_reset & 0xFFFF
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
//  281       break;
//  282 
//  283     case MT_SYS_PING:
//  284       MT_SysPing();
??MT_SysCommandProcessing_2:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x79
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,#0x1
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  285       break;
//  286 
//  287     case MT_SYS_VERSION:
//  288       MT_SysVersion();
??MT_SysCommandProcessing_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,#MTVersionString & 0xff
        MOV       R5,#(MTVersionString >> 8) & 0xff
        MOV       R3,#0x5
        MOV       R2,#0x2
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  289       break;
//  290 
//  291     case MT_SYS_SET_EXTADDR:
//  292       MT_SysSetExtAddr(pBuf);
??MT_SysCommandProcessing_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV       R1,#-0x1e
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
        JNZ       ??MT_SysCommandProcessing_30
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V0,#0x8
        MOV       ?V1,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
??MT_SysCommandProcessing_30:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,#0x3
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  293       break;
//  294 
//  295     case MT_SYS_GET_EXTADDR:
//  296       MT_SysGetExtAddr();
??MT_SysCommandProcessing_5:
        ; Setup parameters for call to function ZMacGetReq
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#-0x1e
        LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x8
        MOV       R2,#0x4
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  297       break;
//  298 
//  299     case MT_SYS_OSAL_START_TIMER:
//  300       MT_SysOsalStartTimer(pBuf);
??MT_SysCommandProcessing_9:
        MOV       A,R2
        ADD       A,#0x3
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x4
        JNC       ??MT_SysCommandProcessing_31
        ; Setup parameters for call to function osal_build_uint16
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
        ; Setup parameters for call to function osal_start_timerEx
        CLR       A
        MOV       ?V6,A
        MOV       ?V7,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        SJMP      ??MT_SysCommandProcessing_32
??MT_SysCommandProcessing_31:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
??MT_SysCommandProcessing_32:
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV       R2,#0xa
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  301       break;
//  302 
//  303     case MT_SYS_OSAL_STOP_TIMER:
//  304       MT_SysOsalStopTimer(pBuf);
??MT_SysCommandProcessing_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x4
        JNC       ??MT_SysCommandProcessing_33
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        SJMP      ??MT_SysCommandProcessing_34
??MT_SysCommandProcessing_33:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
??MT_SysCommandProcessing_34:
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV       R2,#0xb
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  305       break;
//  306 
//  307     case MT_SYS_RANDOM:
//  308       MT_SysRandom();
??MT_SysCommandProcessing_11:
        ; Setup parameters for call to function Onboard_rand
        LCALL     `??Onboard_rand::?relay`; Banked call to: Onboard_rand
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,#0xc
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  309       break;
//  310 
//  311 #if !defined( CC26XX )
//  312     case MT_SYS_ADC_READ:
//  313       MT_SysAdcRead(pBuf);
??MT_SysCommandProcessing_12:
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R1
        LCALL     ?UC_SWITCH_SPARSE
`?<Jumptable for MT_SysCommandProcessing>_1`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_35
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        14
        DATA
        DATA8
        DATA
        DATA8
        DB        15
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_36
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysCommandProcessing_37
        CODE
??MT_SysCommandProcessing_36:
        MOV       R2,#0x4
??MT_SysCommandProcessing_35:
        ; Setup parameters for call to function HalAdcRead
        LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
??MT_SysCommandProcessing_37:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,#0xd
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  314       break;
//  315 #endif /* !CC26XX */
//  316 
//  317     case MT_SYS_GPIO:
//  318       MT_SysGpio(pBuf);
??MT_SysCommandProcessing_13:
        ; Setup parameters for call to function MT_SysGpio
        LCALL     `??MT_SysGpio::?relay`; Banked call to: MT_SysGpio
//  319       break;
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
//  320 
//  321     case MT_SYS_STACK_TUNE:
//  322       MT_SysStackTune(pBuf);
??MT_SysCommandProcessing_14:
        MOV       A,R2
        ADD       A,#0x3
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        JZ        ??MT_SysCommandProcessing_38
        DEC       A
        JNZ       ??MT_SysCommandProcessing_39
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??MT_SysCommandProcessing_40
        MOVX      A,@DPTR
        JZ        ??MT_SysCommandProcessing_40
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        SJMP      ??MT_SysCommandProcessing_41
??MT_SysCommandProcessing_40:
        ; Setup parameters for call to function ZMacSetReq
        MOV       R1,#0x52
        SJMP      ??MT_SysCommandProcessing_42
??MT_SysCommandProcessing_38:
        ; Setup parameters for call to function ZMacSetReq
        MOV       R1,#-0x20
??MT_SysCommandProcessing_42:
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        SJMP      ??MT_SysCommandProcessing_43
??MT_SysCommandProcessing_39:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
??MT_SysCommandProcessing_43:
        MOVX      @DPTR,A
??MT_SysCommandProcessing_41:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,#0xf
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  323       break;
//  324 
//  325     case MT_SYS_SET_TIME:
//  326       MT_SysSetUtcTime(pBuf);
??MT_SysCommandProcessing_15:
        ; Setup parameters for call to function MT_SysSetUtcTime
        LCALL     `??MT_SysSetUtcTime::?relay`; Banked call to: MT_SysSetUtcTime
//  327       break;
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
//  328 
//  329     case MT_SYS_GET_TIME:
//  330       MT_SysGetUtcTime();
??MT_SysCommandProcessing_16:
        ; Setup parameters for call to function MT_SysGetUtcTime
        LCALL     `??MT_SysGetUtcTime::?relay`; Banked call to: MT_SysGetUtcTime
//  331       break;
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
//  332 
//  333     case MT_SYS_SET_TX_POWER:
//  334       MT_SysSetTxPower(pBuf);
??MT_SysCommandProcessing_19:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function macRadioSetTxPower
        MOV       R1,A
        LCALL     `??macRadioSetTxPower::?relay`; Banked call to: macRadioSetTxPower
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#-0x20
        LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x1
        MOV       R2,#0x14
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  335       break;
//  336 
//  337 // CC253X MAC Network Processor does not have NV support
//  338 #if !defined( CC253X_MACNP )
//  339     case MT_SYS_OSAL_NV_DELETE:
//  340       MT_SysOsalNVDelete(pBuf);
??MT_SysCommandProcessing_17:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x24
        XRL       A,?V2
        ORL       A,?V3
        JNZ       ??MT_SysCommandProcessing_44
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        SJMP      ??MT_SysCommandProcessing_45
??MT_SysCommandProcessing_44:
        ; Setup parameters for call to function osal_nv_delete
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_SysCommandProcessing_45:
        LCALL     ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV       R2,#0x12
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  341       break;
//  342 
//  343     case MT_SYS_OSAL_NV_ITEM_INIT:
//  344       MT_SysOsalNVItemInit(pBuf);
??MT_SysCommandProcessing_6:
        ; Setup parameters for call to function MT_SysOsalNVItemInit
        LCALL     `??MT_SysOsalNVItemInit::?relay`; Banked call to: MT_SysOsalNVItemInit
//  345       break;
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
//  346 
//  347     case MT_SYS_OSAL_NV_LENGTH:
//  348       MT_SysOsalNVLength(pBuf);
??MT_SysCommandProcessing_18:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_SysCommandProcessing_46
        INC       R3
??MT_SysCommandProcessing_46:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x24
        XRL       A,R2
        ORL       A,R3
        JNZ       ??MT_SysCommandProcessing_47
        MOV       R0,#0x0
        MOV       R1,#0x0
        SJMP      ??MT_SysCommandProcessing_48
??MT_SysCommandProcessing_47:
        ; Setup parameters for call to function osal_nv_item_len
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
??MT_SysCommandProcessing_48:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,#0x13
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  349       break;
//  350 
//  351     case MT_SYS_OSAL_NV_READ:
//  352     case MT_SYS_OSAL_NV_READ_EXT:
//  353       MT_SysOsalNVRead(pBuf);
??MT_SysCommandProcessing_7:
        ; Setup parameters for call to function MT_SysOsalNVRead
        LCALL     `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
//  354       break;
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
//  355 
//  356     case MT_SYS_OSAL_NV_WRITE:
//  357     case MT_SYS_OSAL_NV_WRITE_EXT:
//  358       MT_SysOsalNVWrite(pBuf);
??MT_SysCommandProcessing_8:
        ; Setup parameters for call to function MT_SysOsalNVWrite
        LCALL     `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
//  359       break;
        LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
//  360 
//  361 #if defined( FEATURE_NVEXID )
//  362     case MT_SYS_NV_COMPACT:
//  363       MT_SysNvCompact(pBuf);
//  364       break;
//  365 
//  366     case MT_SYS_NV_CREATE:
//  367       MT_SysNvCreate(pBuf);
//  368       break;
//  369 
//  370     case MT_SYS_NV_DELETE:
//  371       MT_SysNvDelete(pBuf);
//  372       break;
//  373 
//  374     case MT_SYS_NV_LENGTH:
//  375       MT_SysNvLength(pBuf);
//  376       break;
//  377 
//  378     case MT_SYS_NV_READ:
//  379       MT_SysNvRead(pBuf);
//  380       break;
//  381 
//  382     case MT_SYS_NV_WRITE:
//  383     case MT_SYS_NV_UPDATE:
//  384       MT_SysNvWrite(pBuf);
//  385       break;
//  386 #endif  /* FEATURE_NVEXID */
//  387 #endif  /* !CC253X_MACNP */
//  388 
//  389 #if !defined( CC26XX )
//  390 #if defined( MT_SYS_JAMMER_FEATURE )
//  391     case MT_SYS_JAMMER_PARAMETERS:
//  392       MT_SysJammerParameters( pBuf );
//  393       break;
//  394 #endif  /* MT_SYS_JAMMER_FEATURE */
//  395 
//  396 #if defined( MT_SYS_SNIFFER_FEATURE )
//  397     case MT_SYS_SNIFFER_PARAMETERS:
//  398       MT_SysSnifferParameters( pBuf );
//  399       break;
//  400 #endif  /* MT_SYS_SNIFFER_FEATURE */
//  401 #endif /* !CC26XX */
//  402 
//  403 #if defined( FEATURE_SYSTEM_STATS )
//  404     case MT_SYS_ZDIAGS_INIT_STATS:
//  405       MT_SysZDiagsInitStats();
??MT_SysCommandProcessing_20:
        ; Setup parameters for call to function ZDiagsInitStats
        LCALL     `??ZDiagsInitStats::?relay`; Banked call to: ZDiagsInitStats
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV       R2,#0x17
        LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
//  406       break;
//  407 
//  408     case MT_SYS_ZDIAGS_CLEAR_STATS:
//  409       MT_SysZDiagsClearStats(pBuf);
??MT_SysCommandProcessing_21:
        ; Setup parameters for call to function ZDiagsClearStats
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDiagsClearStats::?relay`; Banked call to: ZDiagsClearStats
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x4
        MOV       R2,#0x18
        SJMP      ??MT_SysCommandProcessing_29
//  410       break;
//  411 
//  412     case MT_SYS_ZDIAGS_GET_STATS:
//  413       MT_SysZDiagsGetStatsAttr(pBuf);
??MT_SysCommandProcessing_22:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_SysCommandProcessing_49
        INC       R3
??MT_SysCommandProcessing_49:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDiagsGetStatsAttr
        LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x4
        MOV       R2,#0x19
        SJMP      ??MT_SysCommandProcessing_29
//  414        break;
//  415 
//  416     case MT_SYS_ZDIAGS_RESTORE_STATS_NV:
//  417       MT_SysZDiagsRestoreStatsFromNV();
??MT_SysCommandProcessing_23:
        ; Setup parameters for call to function ZDiagsRestoreStatsFromNV
        LCALL     `??ZDiagsRestoreStatsFromNV::?relay`; Banked call to: ZDiagsRestoreStatsFromNV
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV       R2,#0x1a
        SJMP      ??MT_SysCommandProcessing_29
//  418       break;
//  419 
//  420     case MT_SYS_ZDIAGS_SAVE_STATS_TO_NV:
//  421       MT_SysZDiagsSaveStatsToNV();
??MT_SysCommandProcessing_24:
        ; Setup parameters for call to function ZDiagsSaveStatsToNV
        LCALL     `??ZDiagsSaveStatsToNV::?relay`; Banked call to: ZDiagsSaveStatsToNV
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x4
        MOV       R2,#0x1b
??MT_SysCommandProcessing_29:
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  422       break;
        SJMP      ??MT_SysCommandProcessing_27
//  423 #endif /* FEATURE_SYSTEM_STATS */
//  424 
//  425     default:
//  426       status = MT_RPC_ERR_COMMAND_ID;
??MT_SysCommandProcessing_0:
        MOV       R6,#0x2
//  427       break;
//  428   }
//  429 
//  430   return status;
??MT_SysCommandProcessing_27:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x10
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  431 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function MT_SysCommandProcessing
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V1,A
        ; Setup parameters for call to function ZMacSetReq
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,A
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function MT_SysCommandProcessing
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOVX      A,@DPTR
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,#MT_SysOsalEventId & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(MT_SysOsalEventId >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPTR,#MT_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//  432 
//  433 /******************************************************************************
//  434  * @fn      MT_SysReset
//  435  *
//  436  * @brief   Reset the device.
//  437  * @param   typID: 0=reset, 1=serial bootloader,
//  438  *
//  439  * @return  None
//  440  *****************************************************************************/
//  441 void MT_SysReset( uint8 *pBuf )
//  442 {
//  443   switch( pBuf[MT_RPC_POS_DAT0] )
//  444   {
//  445     case MT_SYS_RESET_HARD:
//  446       SystemReset();
//  447       break;
//  448 
//  449     case MT_SYS_RESET_SOFT:
//  450 #if !defined( HAL_BOARD_F5438 )
//  451       SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
//  452 #endif
//  453       break;
//  454 
//  455     case MT_SYS_RESET_SHUTDOWN:
//  456       {
//  457 #if defined( ENABLE_MT_SYS_RESET_SHUTDOWN )
//  458         // Disable interrupts and put into deep sleep, use hardware reset to wakeup
//  459         powerOffSoc();
//  460 #endif
//  461       }
//  462       break;
//  463   }
//  464 }
//  465 
//  466 /******************************************************************************
//  467  * @fn      MT_SysPing
//  468  *
//  469  * @brief   Process the Ping command
//  470  *
//  471  * @param   None
//  472  *
//  473  * @return  None
//  474  *****************************************************************************/
//  475 static void MT_SysPing(void)
//  476 {
//  477   uint16 tmp16;
//  478   uint8 retArray[2];
//  479 
//  480   /* Build Capabilities */
//  481   tmp16 = MT_CAP_SYS | MT_CAP_MAC  | MT_CAP_NWK  | MT_CAP_AF    |
//  482           MT_CAP_ZDO | MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG |
//  483           MT_CAP_APP | MT_CAP_GP   | MT_CAP_ZOAD;
//  484 
//  485   /* Convert to high byte first into temp buffer */
//  486   retArray[0] = LO_UINT16( tmp16 );
//  487   retArray[1] = HI_UINT16( tmp16 );
//  488 
//  489   /* Build and send back the response */
//  490   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_PING,
//  491                                 sizeof(retArray), retArray );
//  492 }
//  493 
//  494 /******************************************************************************
//  495  * @fn      MT_SysVersion
//  496  *
//  497  * @brief   Process the Version command
//  498  *
//  499  * @param   None
//  500  *
//  501  * @return  None
//  502  *****************************************************************************/
//  503 static void MT_SysVersion(void)
//  504 {
//  505 #if !defined( INCLUDE_REVISION_INFORMATION )
//  506   /* Build and send back the default response */
//  507   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_VERSION,
//  508                                 sizeof(MTVersionString),(uint8*)MTVersionString);
//  509 #else
//  510   uint8 verStr[sizeof(MTVersionString) + 4];
//  511   uint8 *pBuf = &verStr[sizeof(MTVersionString)];
//  512 #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
//  513   uint32 sblSig;
//  514   uint32 sblRev;
//  515 #endif
//  516 
//  517   osal_memcpy(verStr, (uint8 *)MTVersionString, sizeof(MTVersionString));
//  518 
//  519 #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
//  520   HalFlashRead(SBL_SIG_ADDR / HAL_FLASH_PAGE_SIZE,
//  521                SBL_SIG_ADDR % HAL_FLASH_PAGE_SIZE,
//  522                (uint8 *)&sblSig, sizeof(sblSig));
//  523 
//  524   if (sblSig == SBL_SIGNATURE)
//  525   {
//  526     // SBL is supported and its revision is provided (in a known flash location)
//  527     HalFlashRead(SBL_REV_ADDR / HAL_FLASH_PAGE_SIZE,
//  528                  SBL_REV_ADDR % HAL_FLASH_PAGE_SIZE,
//  529                  (uint8 *)&sblRev, sizeof(sblRev));
//  530   }
//  531   else
//  532   {
//  533     //  SBL is supported but its revision is not provided
//  534     sblRev = 0x00000000;
//  535   }
//  536 #else
//  537   // SBL is NOT supported
//  538   sblRev = 0xFFFFFFFF;
//  539 #endif
//  540 
//  541   // Plug the SBL revision indication
//  542   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,sblRev);
//  543 
//  544   /* Build and send back the response */
//  545   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_VERSION,
//  546                                 sizeof(verStr), verStr);
//  547 #endif
//  548 }
//  549 
//  550 /******************************************************************************
//  551  * @fn      MT_SysSetExtAddr
//  552  *
//  553  * @brief   Set the Extended Address
//  554  *
//  555  * @param   pBuf
//  556  *
//  557  * @return  None
//  558  *****************************************************************************/
//  559 static void MT_SysSetExtAddr(uint8 *pBuf)
//  560 {
//  561   uint8 retValue = ZFailure;
//  562 
//  563   /* Skip over RPC header */
//  564   pBuf += MT_RPC_FRAME_HDR_SZ;
//  565 
//  566   if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
//  567   {
//  568 // CC253X MAC Network Processor does not have NV support
//  569 #if defined(CC253X_MACNP)
//  570     retValue = ZSuccess;
//  571 #else
//  572     retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
//  573 #endif
//  574   }
//  575 
//  576   /* Build and send back the response */
//  577   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SET_EXTADDR,
//  578                                 sizeof(retValue), &retValue);
//  579 }
//  580 
//  581 /******************************************************************************
//  582  * @fn      MT_SysGetExtAddr
//  583  *
//  584  * @brief   Get the Extended Address
//  585  *
//  586  * @param   None
//  587  *
//  588  * @return  None
//  589  *****************************************************************************/
//  590 static void MT_SysGetExtAddr(void)
//  591 {
//  592   uint8 extAddr[Z_EXTADDR_LEN];
//  593 
//  594   ZMacGetReq( ZMacExtAddr, extAddr );
//  595 
//  596   /* Build and send back the response */
//  597   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_GET_EXTADDR,
//  598                                 sizeof(extAddr), extAddr);
//  599 }
//  600 
//  601 #if !defined( CC253X_MACNP )
//  602 /******************************************************************************
//  603  * @fn      MT_CheckNvId
//  604  *
//  605  * @brief   Check whether (ZigBee Stack) NV read should be blocked
//  606  *
//  607  * @param   nvId - NV item ID
//  608  *
//  609  * @return  'ZInvalidParameter' if blocked, otherwise 'ZSuccess'
//  610  *****************************************************************************/
//  611 static uint8 MT_CheckNvId( uint16 nvId )
//  612 {
//  613 #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
//  614   if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
//  615       (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
//  616       (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
//  617   {
//  618     /* Access to Security Certificate Data is denied */
//  619     return( ZInvalidParameter );
//  620   }
//  621 #endif  /* MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA */
//  622 
//  623 #if !MT_SYS_KEY_MANAGEMENT
//  624   if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
//  625        (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
//  626       ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
//  627       ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
//  628        (nvId == ZCD_NV_PRECFGKEY) )
//  629   {
//  630     /* Access to Security Key Data is denied */
//  631     return( ZInvalidParameter );
//  632   }
//  633 #endif  /* !MT_SYS_KEY_MANAGEMENT */
//  634 
//  635   return( ZSuccess );
//  636 }
//  637 
//  638 /******************************************************************************
//  639  * @fn      MT_SysOsalNVRead
//  640  *
//  641  * @brief   Attempt to read an NV value
//  642  *
//  643  * @param   pBuf - pointer to the data
//  644  *
//  645  * @return  None
//  646  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  647 static void MT_SysOsalNVRead(uint8 *pBuf)
MT_SysOsalNVRead:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
        CODE
//  648 {
        FUNCALL MT_SysOsalNVRead, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  649   uint8 error;
//  650   uint8 cmdId;
//  651   uint16 nvId;
//  652   uint16 dataLen;
//  653   uint16 dataOfs;
//  654   uint16 nvItemLen;
//  655 
//  656   /* MT command ID */
//  657   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
//  658   /* Skip over RPC header */
//  659   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_SysOsalNVRead_0
        INC       R7
//  660 
//  661   /* NV item ID */
//  662   nvId = osal_build_uint16( pBuf );
??MT_SysOsalNVRead_0:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
//  663 
//  664 #if defined( ZCD_NV_POLL_RATE_OLD16 )
//  665   if( nvId == ZCD_NV_POLL_RATE_OLD16 )
        MOV       A,#0x24
        XRL       A,?V0
        ORL       A,R3
        JNZ       ??MT_SysOsalNVRead_1
//  666   {
//  667     // This ID shouldn't exist anymore, it was converted to the new size and ID
//  668     // then deleted during initialization. But, a read of this item will
//  669     // read the new item and convert the size and return the size expected.
//  670     uint32 pollRate;
//  671     uint16 *pOldPollRate;
//  672     uint8 respBuf[4];
//  673     uint8 respLen;
//  674     // Convert from old uint16 NV item to the new uint32 NV item
//  675     if ( osal_nv_read( ZCD_NV_POLL_RATE, 0, sizeof( uint32 ), &pollRate ) == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,#0x4
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x35
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JNZ       ??MT_SysOsalNVRead_2
//  676     {
//  677       respBuf[0] = ZSuccess;
        CLR       A
        MOVX      @DPTR,A
//  678       respBuf[1] = sizeof( uint16 );
        INC       A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  679       pOldPollRate = (uint16 *)&respBuf[2];
//  680       *pOldPollRate = (uint16)pollRate;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  681       respLen = 4;
        MOV       R3,#0x4
        SJMP      ??MT_SysOsalNVRead_3
//  682     }
//  683     else
//  684     {
//  685       respBuf[0] = ZFailure;
??MT_SysOsalNVRead_2:
        MOV       A,#0x1
        MOVX      @DPTR,A
//  686       respBuf[1] = 0;
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  687       respLen = 2;
        MOV       R3,#0x2
//  688     }
//  689     /* Build and send back the response */
//  690     MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_READ,
//  691                                   respLen, respBuf );
??MT_SysOsalNVRead_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,#0x8
        LJMP      ??MT_SysOsalNVRead_4 & 0xFFFF
//  692     return;
//  693   }
//  694 #endif
//  695 
//  696   /* Check whether read-access to this item is allowed */
//  697   error = MT_CheckNvId( nvId );
??MT_SysOsalNVRead_1:
        MOV       A,#0x69
        XRL       A,?V0
        JNZ       ??MT_SysOsalNVRead_5
        MOV       A,R3
??MT_SysOsalNVRead_5:
        JZ        ??MT_SysOsalNVRead_6
        MOV       A,#0x6b
        XRL       A,?V0
        JNZ       ??MT_SysOsalNVRead_7
        MOV       A,R3
??MT_SysOsalNVRead_7:
        JZ        ??MT_SysOsalNVRead_6
        MOV       A,#0x6a
        XRL       A,?V0
        JNZ       ??MT_SysOsalNVRead_8
        MOV       A,R3
??MT_SysOsalNVRead_8:
        JZ        ??MT_SysOsalNVRead_6
        MOV       A,#0x3a
        XRL       A,?V0
        JNZ       ??MT_SysOsalNVRead_9
        MOV       A,R3
??MT_SysOsalNVRead_9:
        JZ        ??MT_SysOsalNVRead_6
        MOV       A,#0x3b
        XRL       A,?V0
        JNZ       ??MT_SysOsalNVRead_10
        MOV       A,R3
??MT_SysOsalNVRead_10:
        JZ        ??MT_SysOsalNVRead_6
        MOV       A,R2
        ADD       A,#-0x1
        MOV       R0,A
        MOV       A,R3
        ADDC      A,#-0x2
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,#-0x1
        MOV       A,R1
        SUBB      A,#0x0
        JC        ??MT_SysOsalNVRead_6
        DEC       R1
        CLR       C
        MOV       A,R0
        SUBB      A,#-0x1
        MOV       A,R1
        SUBB      A,#0x0
        JC        ??MT_SysOsalNVRead_6
        MOV       A,#0x62
        XRL       A,?V0
        JNZ       ??MT_SysOsalNVRead_11
        MOV       A,R3
??MT_SysOsalNVRead_11:
        JZ        ??MT_SysOsalNVRead_6
        MOV       ?V2,#0x0
        SJMP      ??MT_SysOsalNVRead_12
??MT_SysOsalNVRead_6:
        MOV       ?V2,#0x2
//  698 
//  699   /* Get NV data offset */
//  700   if( cmdId == MT_SYS_OSAL_NV_READ )
??MT_SysOsalNVRead_12:
        MOV       A,#0x8
        XRL       A,?V3
        JNZ       ??MT_SysOsalNVRead_13
//  701   {
//  702     /* MT_SYS_OSAL_NV_READ has 1-byte offset */
//  703     dataOfs = (uint16)pBuf[2];
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       R7,#0x0
        SJMP      ??MT_SysOsalNVRead_14
//  704   }
//  705   else
//  706   {
//  707     /* MT_SYS_OSAL_NV_READ_EXT has 2-byte offset */
//  708     dataOfs = osal_build_uint16( pBuf+2 );
??MT_SysOsalNVRead_13:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
//  709   }
//  710 
//  711   /* Length of entire NV item data */
//  712   nvItemLen = osal_nv_item_len( nvId );
??MT_SysOsalNVRead_14:
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
//  713   if( nvItemLen <= dataOfs )
        CLR       C
        MOV       A,R6
        SUBB      A,R0
        MOV       A,R7
        SUBB      A,R1
        JC        ??MT_SysOsalNVRead_15
//  714   {
//  715     /* Offset is past end of data */
//  716     error = ZInvalidParameter;
        MOV       ?V2,#0x2
        LJMP      ??MT_SysOsalNVRead_16 & 0xFFFF
//  717   }
//  718 
//  719   if( error == ZSuccess )
??MT_SysOsalNVRead_15:
        MOV       A,?V2
        JZ        $+5
        LJMP      ??MT_SysOsalNVRead_17 & 0xFFFF
//  720   {
//  721     uint8 *pRetBuf;
//  722     uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
//  723 
//  724     dataLen = nvItemLen - dataOfs;
        MOV       A,R0
        CLR       C
        SUBB      A,R6
        MOV       ?V8,A
        MOV       A,R1
        SUBB      A,R7
        MOV       ?V9,A
//  725     if (dataLen > (uint16)(MT_MAX_RSP_DATA_LEN - respLen))
        CLR       C
        MOV       A,?V8
        SUBB      A,#-0x9
        MOV       A,?V9
        SUBB      A,#0x0
        JC        ??MT_SysOsalNVRead_18
//  726     {
//  727       /* Data length is limited by TX buffer size and MT protocol */
//  728       dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
        MOV       ?V8,#-0xa
        MOV       ?V9,#0x0
//  729     }
//  730     respLen += dataLen;
??MT_SysOsalNVRead_18:
        MOV       A,?V8
        ADD       A,#0x2
        MOV       ?V4,A
//  731 
//  732     pRetBuf = osal_mem_alloc(respLen);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V6,R2
        MOV       ?V7,R3
//  733     if( pRetBuf != NULL )
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??MT_SysOsalNVRead_19 & 0xFFFF
//  734     {
//  735       osal_memset(&pRetBuf[2], 0, dataLen);
        MOV       A,R2
        ADD       A,#0x2
        MOV       ?V10,A
        CLR       A
        ADDC      A,?V7
        MOV       ?V11,A
        ; Setup parameters for call to function osal_memset
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       R1,#0x0
        INC       R2
        INC       R2
        MOV       R3,A
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  736       if (((osal_nv_read( nvId, dataOfs, dataLen, &pRetBuf[2] )) == ZSUCCESS))
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JNZ       ??MT_SysOsalNVRead_20
//  737       {
//  738         pRetBuf[0] = ZSuccess;
        MOV       DPL,?V6
        MOV       DPH,?V7
        CLR       A
        MOVX      @DPTR,A
//  739         pRetBuf[1] = dataLen;
        INC       DPTR
        MOV       A,?V8
        MOVX      @DPTR,A
//  740         MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId,
//  741                                       respLen, pRetBuf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R3,?V4
        MOV       R2,?V3
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        SJMP      ??MT_SysOsalNVRead_21
//  742       }
//  743       else
//  744       {
//  745         error = NV_OPER_FAILED;
??MT_SysOsalNVRead_20:
        MOV       ?V2,#0xa
//  746       }
//  747       osal_mem_free(pRetBuf);
??MT_SysOsalNVRead_21:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  748     }
//  749     else
//  750     {
//  751       /* Could not get buffer for NV data */
//  752       error = ZMemError;
//  753     }
//  754   }
//  755 
//  756   if( error != ZSuccess )
??MT_SysOsalNVRead_17:
        MOV       A,?V2
        JZ        ??MT_SysOsalNVRead_22
//  757   {
//  758     uint8 tmp[2] = { error, 0 };
??MT_SysOsalNVRead_16:
        MOV       DPTR,#`?<Constant {0, 0}>`
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x2
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V2
        MOVX      @DPTR,A
//  759     MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId,
//  760                                   sizeof(tmp), tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        MOV       R2,?V3
??MT_SysOsalNVRead_4:
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  761   }
//  762 }
??MT_SysOsalNVRead_22:
        MOV       A,#0xa
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 30)
??MT_SysOsalNVRead_19:
        MOV       ?V2,#0x10
        SJMP      ??MT_SysOsalNVRead_16
          CFI EndBlock cfiBlock7

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {0, 0}>`:
        DATA8
        DB 0
        DB 0
//  763 
//  764 /******************************************************************************
//  765  * @fn      MT_SysOsalNVWrite
//  766  *
//  767  * @brief   Attempt to write an NV item
//  768  *
//  769  * @param   pBuf - pointer to the data
//  770  *
//  771  * @return  None
//  772  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  773 static void MT_SysOsalNVWrite(uint8 *pBuf)
MT_SysOsalNVWrite:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
        CODE
//  774 {
        FUNCALL MT_SysOsalNVWrite, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, zgSetItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V5,R3
//  775   uint8 cmdId;
//  776   uint16 nvId;
//  777   uint16 dataLen;
//  778   uint16 dataOfs;
//  779   uint16 nvItemLen;
//  780   uint8 rtrn = ZSuccess;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  781 
//  782   /* MT command ID */
//  783   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
//  784   /* Skip over RPC header */
//  785   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V4,A
        JNC       ??MT_SysOsalNVWrite_0
        INC       ?V5
//  786 
//  787   /* NV item ID */
//  788   nvId = osal_build_uint16( pBuf );
??MT_SysOsalNVWrite_0:
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V5
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
//  789 
//  790   /* Get NV data offset & length */
//  791   if ( cmdId == MT_SYS_OSAL_NV_WRITE )
        MOV       A,#0x9
        XRL       A,?V2
        JNZ       ??MT_SysOsalNVWrite_1
//  792   {
//  793     /* MT_SYS_OSAL_NV_WRITE has 1-byte offset & length */
//  794     dataOfs = (uint16)pBuf[2];
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
//  795     dataLen = (uint16)pBuf[3];
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       ?V7,#0x0
//  796     pBuf += 4;
        MOV       A,?V4
        ADD       A,#0x4
        SJMP      ??MT_SysOsalNVWrite_2
//  797   }
//  798   else
//  799   {
//  800     /* MT_SYS_OSAL_NV_WRITE_EXT has 2-byte offset & length */
//  801     dataOfs = osal_build_uint16( pBuf+2 );
??MT_SysOsalNVWrite_1:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,?V4
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
//  802     dataLen = osal_build_uint16( pBuf+4 );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,?V4
        ADD       A,#0x4
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V6,R2
        MOV       ?V7,R3
//  803     pBuf += 6;
        MOV       A,?V4
        ADD       A,#0x6
??MT_SysOsalNVWrite_2:
        MOV       ?V4,A
        JNC       ??MT_SysOsalNVWrite_3
        INC       ?V5
//  804   }
//  805 
//  806 #if defined ( ZCD_NV_POLL_RATE_OLD16 )
//  807   if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
??MT_SysOsalNVWrite_3:
        MOV       A,#0x24
        XRL       A,R6
        ORL       A,R7
        JNZ       ??MT_SysOsalNVWrite_4
//  808   {
//  809     // This ID shouldn't exist anymore, it was converted to the new size and ID
//  810     // then deleted during initialization.  But a write to this item will
//  811     // convert the 16 bits to the new 32 bits and write that value to the new
//  812     // NV item.
//  813     uint32 pollRate;
//  814     uint16 *pOldPollRate = (uint16 *)pBuf;
//  815     uint16 oldPollRate = *pOldPollRate;
//  816     nvId = ZCD_NV_POLL_RATE;
        MOV       R6,#0x35
        MOV       R7,#0x0
//  817     nvItemLen = sizeof ( uint32 );
//  818     pollRate = (uint32)oldPollRate;
//  819     pBuf = (uint8 *)&pollRate;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
//  820   }
//  821 #endif
//  822 
//  823   /* Length of entire NV item data */
//  824   nvItemLen = osal_nv_item_len(nvId);
//  825   if ((dataOfs + dataLen) <= nvItemLen)
??MT_SysOsalNVWrite_4:
        ; Setup parameters for call to function osal_nv_item_len
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       A,?V0
        ADD       A,?V6
        MOV       R0,A
        MOV       A,?V1
        ADDC      A,?V7
        MOV       R1,A
        CLR       C
        MOV       A,R2
        SUBB      A,R0
        MOV       A,R3
        SUBB      A,R1
        JC        ??MT_SysOsalNVWrite_5
//  826   {
//  827     if (dataOfs == 0)
        MOV       A,?V0
        ORL       A,?V1
        JNZ       ??MT_SysOsalNVWrite_6
//  828     {
//  829       /* Set the Z-Globals value of this NV item */
//  830       zgSetItem( nvId, dataLen, pBuf );
        ; Setup parameters for call to function zgSetItem
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zgSetItem::?relay`; Banked call to: zgSetItem
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
//  831     }
//  832 
//  833     if ((osal_nv_write(nvId, dataOfs, dataLen, pBuf)) == ZSUCCESS)
??MT_SysOsalNVWrite_6:
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R1
        JNZ       ??MT_SysOsalNVWrite_7
//  834     {
//  835       if (nvId == ZCD_NV_EXTADDR)
        MOV       A,#0x1
        XRL       A,R6
        ORL       A,R7
        JNZ       ??MT_SysOsalNVWrite_8
//  836       {
//  837         rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
        ; Setup parameters for call to function ZMacSetReq
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       R1,#-0x1e
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        SJMP      ??MT_SysOsalNVWrite_9
//  838       }
//  839     }
//  840     else
//  841     {
//  842       rtrn = NV_OPER_FAILED;
??MT_SysOsalNVWrite_7:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0xa
        SJMP      ??MT_SysOsalNVWrite_9
//  843     }
//  844   }
//  845   else
//  846   {
//  847     /* Bad length or/and offset */
//  848     rtrn = ZInvalidParameter;
??MT_SysOsalNVWrite_5:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
??MT_SysOsalNVWrite_9:
        MOVX      @DPTR,A
//  849   }
//  850 
//  851   /* Build and send back the response */
//  852   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId,
//  853                                 sizeof(rtrn), &rtrn);
??MT_SysOsalNVWrite_8:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V2
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  854 }
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8
//  855 
//  856 /******************************************************************************
//  857  * @fn      MT_SysOsalNVItemInit
//  858  *
//  859  * @brief   Attempt to create an NV item
//  860  *
//  861  * @param   pBuf - pointer to the data
//  862  *
//  863  * @return  None
//  864  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  865 static void MT_SysOsalNVItemInit(uint8 *pBuf)
MT_SysOsalNVItemInit:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function MT_SysOsalNVItemInit
        CODE
//  866 {
        FUNCALL MT_SysOsalNVItemInit, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       ?V1,R3
//  867   uint8 ret;
//  868   uint8 idLen;
//  869   uint16 nvId;
//  870   uint16 nvLen;
//  871 
//  872   /* Skip over RPC header */
//  873   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_SysOsalNVItemInit_0
        INC       ?V1
//  874 
//  875   /* NV item ID */
//  876   nvId = osal_build_uint16( pBuf );
??MT_SysOsalNVItemInit_0:
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
//  877   /* NV item length */
//  878   nvLen = osal_build_uint16( pBuf+2 );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
//  879   /* Initialization data length */
//  880   idLen = pBuf[4];
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
//  881   pBuf += 5;
        MOV       A,?V0
        ADD       A,#0x5
        MOV       ?V0,A
        JNC       ??MT_SysOsalNVItemInit_1
        INC       ?V1
//  882 
//  883 #if defined( ZCD_NV_POLL_RATE_OLD16 )
//  884   if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
??MT_SysOsalNVItemInit_1:
        MOV       A,#0x24
        XRL       A,R6
        ORL       A,R7
        JNZ       ??MT_SysOsalNVItemInit_2
//  885   {
//  886     /* This item shouldn't exist anymore.  Read and write will convert
//  887      * to the new NV item, so return Success.
//  888      */
//  889     ret = ZSuccess;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        SJMP      ??MT_SysOsalNVItemInit_3
//  890   }
//  891   else
//  892 #endif
//  893   {
//  894     if ( idLen < nvLen )
??MT_SysOsalNVItemInit_2:
        CLR       C
        MOV       A,?V2
        SUBB      A,R4
        CLR       A
        SUBB      A,R5
        JNC       ??MT_SysOsalNVItemInit_4
//  895     {
//  896       /* Attempt to create a new NV item */
//  897       ret = osal_nv_item_init( nvId, nvLen, NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V4,A
        MOV       ?V5,A
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  898       if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
        XRL       A,#0x9
        JNZ       ??MT_SysOsalNVItemInit_5
        MOV       A,?V2
        JZ        ??MT_SysOsalNVItemInit_5
//  899       {
//  900         /* Write initialization data to first part of new item */
//  901         (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,?V2
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        SJMP      ??MT_SysOsalNVItemInit_5
//  902       }
//  903     }
//  904     else
//  905     {
//  906       /* Attempt to create/initialize a new NV item */
//  907       ret = osal_nv_item_init( nvId, nvLen, pBuf );
??MT_SysOsalNVItemInit_4:
        ; Setup parameters for call to function osal_nv_item_init
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_SysOsalNVItemInit_3:
        MOVX      @DPTR,A
//  908     }
//  909   }
//  910 
//  911   /* Build and send back the response */
//  912   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_ITEM_INIT,
//  913                                 sizeof(ret), &ret);
??MT_SysOsalNVItemInit_5:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,#0x7
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  914 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  915 
//  916 /******************************************************************************
//  917  * @fn      MT_SysOsalNVDelete
//  918  *
//  919  * @brief   Attempt to delete an NV item
//  920  *
//  921  * @param   pBuf - pointer to the data
//  922  *
//  923  * @return  None
//  924  *****************************************************************************/
//  925 static void MT_SysOsalNVDelete(uint8 *pBuf)
//  926 {
//  927   uint16 nvId;
//  928   uint16 nvLen;
//  929   uint8 ret;
//  930 
//  931   /* Skip over RPC header */
//  932   pBuf += MT_RPC_FRAME_HDR_SZ;
//  933 
//  934   /* Get the ID */
//  935   nvId = osal_build_uint16( pBuf );
//  936   /* Get the length */
//  937   nvLen = osal_build_uint16( pBuf+2 );
//  938 
//  939 #if defined ( ZCD_NV_POLL_RATE_OLD16 )
//  940   if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
//  941   {
//  942     /* This item shouldn't exist anymore.  Read and write will convert
//  943      * to the new NV item, so return Success.
//  944      */
//  945     ret = ZSuccess;
//  946   }
//  947   else
//  948 #endif
//  949   {
//  950     /* Attempt to delete the NV item */
//  951     ret = osal_nv_delete( nvId, nvLen );
//  952   }
//  953 
//  954   /* Build and send back the response */
//  955   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_DELETE,
//  956                                 sizeof(ret), &ret);
//  957 }
//  958 
//  959 /******************************************************************************
//  960  * @fn      MT_SysOsalNVLength
//  961  *
//  962  * @brief   Attempt to get the length to an NV item
//  963  *
//  964  * @param   pBuf - pointer to the data
//  965  *
//  966  * @return  None
//  967  *****************************************************************************/
//  968 static void MT_SysOsalNVLength(uint8 *pBuf)
//  969 {
//  970   uint16 nvId;
//  971   uint16 nvLen;
//  972   uint8 rsp[2];
//  973 
//  974   /* Skip over RPC header */
//  975   pBuf += MT_RPC_FRAME_HDR_SZ;
//  976 
//  977   /* Get the ID */
//  978   nvId = osal_build_uint16( pBuf );
//  979 
//  980 #if defined ( ZCD_NV_POLL_RATE_OLD16 )
//  981   if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
//  982   {
//  983     /* Ignore this item and force return  */
//  984     nvLen = 0;
//  985   }
//  986   else
//  987 #endif
//  988   {
//  989     /* Attempt to get NV item length */
//  990     nvLen = osal_nv_item_len( nvId );
//  991   }
//  992 
//  993   rsp[0] = LO_UINT16( nvLen );
//  994   rsp[1] = HI_UINT16( nvLen );
//  995 
//  996   /* Build and send back the response */
//  997   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_LENGTH,
//  998                                 sizeof(rsp), rsp);
//  999 }
// 1000 
// 1001 #if defined( FEATURE_NVEXID )
// 1002 /******************************************************************************
// 1003  * @fn      MT_ParseNvExtId
// 1004  *
// 1005  * @brief   Parse the incoming NV ID parameters
// 1006  *
// 1007  * @param   pBuf - pointer to incoming data
// 1008  * @param   nvId - pointer to outgoing NV ID
// 1009  *
// 1010  * @return  pointer to next incoming data byte
// 1011  *****************************************************************************/
// 1012 static uint8 *MT_ParseNvExtId( uint8 *pBuf, NVINTF_itemID_t *nvId )
// 1013 {
// 1014   /* Skip over RPC header */
// 1015   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1016 
// 1017   nvId->systemID = pBuf[0];
// 1018   nvId->itemID = osal_build_uint16( pBuf+1 );
// 1019   nvId->subID = osal_build_uint16( pBuf+3 );
// 1020 
// 1021   return( pBuf + 5 );
// 1022 }
// 1023 
// 1024 /******************************************************************************
// 1025  * @fn      MT_StackNvExtId
// 1026  *
// 1027  * @brief   Check whether extended NV ID is from ZigBee Stack
// 1028  *
// 1029  * @param   nvId - pointer to extended NV ID
// 1030  *
// 1031  * @return  TRUE if ZigBee Stack NV item, otherwise FALSE
// 1032  *****************************************************************************/
// 1033 static uint8 MT_StackNvExtId( NVINTF_itemID_t *nvId )
// 1034 {
// 1035   return( (nvId->systemID == NVINTF_SYSID_ZSTACK) && (nvId->itemID == 0) );
// 1036 }
// 1037 
// 1038 /******************************************************************************
// 1039  * @fn      MT_SysNvCompact
// 1040  *
// 1041  * @brief   Attempt to compact the active NV page
// 1042  *
// 1043  * @param   pBuf - pointer to the data
// 1044  *
// 1045  * @return  None
// 1046  *****************************************************************************/
// 1047 static void MT_SysNvCompact(uint8 *pBuf)
// 1048 {
// 1049   uint8 retVal;
// 1050 
// 1051   if (( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.compactNV == NULL ))
// 1052   {
// 1053     /* NV item compact function not available */
// 1054     retVal = NVINTF_NOTREADY;
// 1055   }
// 1056   else
// 1057   {
// 1058     uint16 minSize;
// 1059 
// 1060     /* Skip over RPC header */
// 1061     pBuf += MT_RPC_FRAME_HDR_SZ;
// 1062 
// 1063     /* Get the remaining size threshold */
// 1064     minSize = osal_build_uint16( pBuf );
// 1065 
// 1066     /* Attempt to compact the active NV page */
// 1067     retVal = pZStackCfg->nvFps.compactNV( minSize );
// 1068   }
// 1069 
// 1070   /* Build and send back the response */
// 1071   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_COMPACT,
// 1072                                 sizeof(retVal), &retVal);
// 1073 }
// 1074 
// 1075 /******************************************************************************
// 1076  * @fn      MT_SysNvCreate
// 1077  *
// 1078  * @brief   Attempt to create an NV item (extended item ID)
// 1079  *
// 1080  * @param   pBuf - pointer to the data
// 1081  *
// 1082  * @return  None
// 1083  *****************************************************************************/
// 1084 static void MT_SysNvCreate(uint8 *pBuf)
// 1085 {
// 1086   uint8 retVal;
// 1087 
// 1088   if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.createItem == NULL ))
// 1089   {
// 1090     /* NV item create function not available */
// 1091     retVal = NVINTF_NOTREADY;
// 1092   }
// 1093   else
// 1094   {
// 1095     uint32 nvLen;
// 1096     NVINTF_itemID_t nvId;
// 1097 
// 1098     /* Get the NV ID parameters */
// 1099     pBuf = MT_ParseNvExtId( pBuf, &nvId );
// 1100 
// 1101     /* Get the length */
// 1102     nvLen = osal_build_uint32( pBuf, sizeof(nvLen) );
// 1103 
// 1104     /* Attempt to create the specified item with no initial data */
// 1105     retVal = pZStackCfg->nvFps.createItem( nvId, nvLen, NULL );
// 1106   }
// 1107 
// 1108   /* Build and send back the response */
// 1109   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_CREATE,
// 1110                                 sizeof(retVal), &retVal);
// 1111 }
// 1112 
// 1113 /******************************************************************************
// 1114  * @fn      MT_SysNvDelete
// 1115  *
// 1116  * @brief   Attempt to delete an NV item (extended item ID)
// 1117  *
// 1118  * @param   pBuf - pointer to the data
// 1119  *
// 1120  * @return  None
// 1121  *****************************************************************************/
// 1122 static void MT_SysNvDelete(uint8 *pBuf)
// 1123 {
// 1124   uint8 retVal;
// 1125 
// 1126   if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.deleteItem == NULL ))
// 1127   {
// 1128     /* NV item delete function not available */
// 1129     retVal = NVINTF_NOTREADY;
// 1130   }
// 1131   else
// 1132   {
// 1133     NVINTF_itemID_t nvId;
// 1134 
// 1135     /* Get the NV ID parameters */
// 1136     MT_ParseNvExtId( pBuf, &nvId );
// 1137 
// 1138     /* Attempt to delete the specified item */
// 1139     retVal = pZStackCfg->nvFps.deleteItem( nvId );
// 1140   }
// 1141 
// 1142   /* Build and send back the response */
// 1143   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_DELETE,
// 1144                                 sizeof(retVal), &retVal);
// 1145 }
// 1146 
// 1147 /******************************************************************************
// 1148  * @fn      MT_SysNvLength
// 1149  *
// 1150  * @brief   Attempt to delete an NV item (extended item ID)
// 1151  *
// 1152  * @param   pBuf - pointer to the data
// 1153  *
// 1154  * @return  None
// 1155  *****************************************************************************/
// 1156 static void MT_SysNvLength(uint8 *pBuf)
// 1157 {
// 1158   uint32 nvLen;
// 1159   uint8 retBuf[4];
// 1160 
// 1161   if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.getItemLen == NULL ))
// 1162   {
// 1163     /* NV item length function not available */
// 1164     nvLen = 0;
// 1165   }
// 1166   else
// 1167   {
// 1168     NVINTF_itemID_t nvId;
// 1169 
// 1170     /* Get the NV ID parameters */
// 1171     MT_ParseNvExtId( pBuf, &nvId );
// 1172 
// 1173     /* Attempt to get length of the specified item */
// 1174     nvLen = pZStackCfg->nvFps.getItemLen( nvId );
// 1175   }
// 1176 
// 1177   /* Serialize the length bytes */
// 1178   osal_buffer_uint32( retBuf, nvLen );
// 1179 
// 1180   /* Build and send back the response */
// 1181   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_LENGTH,
// 1182                                 sizeof(retBuf), retBuf);
// 1183 }
// 1184 
// 1185 /******************************************************************************
// 1186  * @fn      MT_SysNvRead
// 1187  *
// 1188  * @brief   Attempt to read an NV item (extended item ID)
// 1189  *
// 1190  * @param   pBuf - pointer to the data
// 1191  *
// 1192  * @return  None
// 1193  *****************************************************************************/
// 1194 static void MT_SysNvRead(uint8 *pBuf)
// 1195 {
// 1196   uint8 error;
// 1197 
// 1198   if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.readItem == NULL ))
// 1199   {
// 1200     /* NV item length/read function not available */
// 1201     error = NVINTF_NOTREADY;
// 1202   }
// 1203   else
// 1204   {
// 1205     uint8 dataLen;
// 1206     uint16 dataOfs;
// 1207     uint8 *pRetBuf;
// 1208     uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
// 1209     NVINTF_itemID_t nvId;
// 1210 
// 1211     /* Get the NV ID parameters */
// 1212     pBuf = MT_ParseNvExtId( pBuf, &nvId );
// 1213 
// 1214     if( MT_StackNvExtId(&nvId) == TRUE )
// 1215     {
// 1216       /* Check whether read-access to this ZigBee Stack item is allowed */
// 1217       if( MT_CheckNvId( nvId.subID ) != ZSuccess )
// 1218       {
// 1219         /* Convert to NVINTF error code */
// 1220         error = NVINTF_BADSUBID;
// 1221       }
// 1222     }
// 1223     else
// 1224     {
// 1225       /* It's OK to read this item */
// 1226       error = ZSuccess;
// 1227     }
// 1228 
// 1229     /* Get the read data offset */
// 1230     dataOfs = osal_build_uint16( pBuf );
// 1231 
// 1232     /* And the read data length */
// 1233     dataLen = pBuf[2];
// 1234 
// 1235     if( dataLen > (MT_MAX_RSP_DATA_LEN - respLen) )
// 1236     {
// 1237       /* Data length is limited by TX buffer size and MT protocol */
// 1238       dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
// 1239     }
// 1240     respLen += dataLen;
// 1241 
// 1242     pRetBuf = osal_mem_alloc(respLen);
// 1243     if( pRetBuf != NULL )
// 1244     {
// 1245       /* Attempt to read data from the specified item */
// 1246       error = pZStackCfg->nvFps.readItem( nvId, dataOfs, dataLen, pRetBuf+2 );
// 1247       if( error == NVINTF_SUCCESS )
// 1248       {
// 1249         pRetBuf[0] = ZSuccess;
// 1250         pRetBuf[1] = dataLen;
// 1251         MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_READ,
// 1252                                       respLen, pRetBuf );
// 1253       }
// 1254       osal_mem_free(pRetBuf);
// 1255     }
// 1256     else
// 1257     {
// 1258       /* Could not get buffer for NV data */
// 1259       error = ZMemError;
// 1260     }
// 1261   }
// 1262 
// 1263   if( error != ZSuccess )
// 1264   {
// 1265     uint8 tmp[2] = { error, 0 };
// 1266     MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_READ,
// 1267                                   sizeof(tmp), tmp );
// 1268   }
// 1269 }
// 1270 
// 1271 /******************************************************************************
// 1272  * @fn      MT_SysNvWrite
// 1273  *
// 1274  * @brief   Attempt to write an NV item (extended item ID)
// 1275  *
// 1276  * @param   pBuf - pointer to the data
// 1277  *
// 1278  * @return  None
// 1279  *****************************************************************************/
// 1280 static void MT_SysNvWrite(uint8 *pBuf)
// 1281 {
// 1282   uint8 cmdId;
// 1283   uint8 error;
// 1284 
// 1285   /* MT command ID */
// 1286   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1287 
// 1288   if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.writeItem == NULL ))
// 1289   {
// 1290     /* NV item length/read function not available */
// 1291     error = NVINTF_NOTREADY;
// 1292   }
// 1293   else
// 1294   {
// 1295     uint8 dataLen;
// 1296     uint16 dataOfs = 0;
// 1297     NVINTF_itemID_t nvId;
// 1298 
// 1299     /* Get the NV ID parameters */
// 1300     pBuf = MT_ParseNvExtId( pBuf, &nvId );
// 1301 
// 1302     if( cmdId == MT_SYS_NV_WRITE )
// 1303     {
// 1304       /* Get data offset for Write command */
// 1305       dataOfs = osal_build_uint16( pBuf );
// 1306       pBuf += 2;
// 1307     }
// 1308 
// 1309     /* Get the write data length */
// 1310     dataLen = pBuf[0];
// 1311     pBuf += 1;
// 1312 
// 1313     if( (dataOfs == 0) && (MT_StackNvExtId(&nvId) == TRUE) )
// 1314     {
// 1315       /* Set the Z-Globals value of this NV item */
// 1316       zgSetItem( nvId.subID, dataLen, pBuf );
// 1317 
// 1318       if( nvId.subID == ZCD_NV_EXTADDR )
// 1319       {
// 1320         /* Give MAC the new 64-bit address */
// 1321         ZMacSetReq( ZMacExtAddr, pBuf );
// 1322       }
// 1323     }
// 1324 
// 1325     if( cmdId == MT_SYS_NV_UPDATE )
// 1326     {
// 1327       /* Attempt to update (create) data to the specified item */
// 1328       error = pZStackCfg->nvFps.writeItem( nvId, dataLen, pBuf );
// 1329     }
// 1330     else
// 1331     {
// 1332       /* Attempt to write data (existing) to the specified item */
// 1333       error = pZStackCfg->nvFps.writeItemEx( nvId, dataOfs, dataLen, pBuf );
// 1334     }
// 1335   }
// 1336 
// 1337   /* Build and send back the response */
// 1338   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId, sizeof(error), &error);
// 1339 }
// 1340 #endif  /* FEATURE_NVEXID */
// 1341 #endif  /* !CC253X_MACNP */
// 1342 
// 1343 /******************************************************************************
// 1344  * @fn      MT_SysOsalStartTimer
// 1345  *
// 1346  * @brief
// 1347  *
// 1348  * @param   uint8 pBuf - pointer to the data
// 1349  *
// 1350  * @return  None
// 1351  *****************************************************************************/
// 1352 static void MT_SysOsalStartTimer(uint8 *pBuf)
// 1353 {
// 1354   uint8 retValue;
// 1355 
// 1356   /* Skip over RPC header */
// 1357   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1358 
// 1359   if (*pBuf <= 3)
// 1360   {
// 1361     uint16 timer = osal_build_uint16( pBuf+1 );
// 1362     uint16 eventId = (uint16)MT_SysOsalEventId[pBuf[0]];
// 1363 
// 1364     retValue = osal_start_timerEx(MT_TaskID, eventId, timer);
// 1365   }
// 1366   else
// 1367   {
// 1368     retValue = ZInvalidParameter;
// 1369   }
// 1370 
// 1371   /* Build and send back the response */
// 1372   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_START_TIMER,
// 1373                                 sizeof(retValue), &retValue);
// 1374 }
// 1375 
// 1376 /******************************************************************************
// 1377  * @fn      MT_SysOsalStopTimer
// 1378  *
// 1379  * @brief
// 1380  *
// 1381  * @param   uint8 pBuf - pointer to the data
// 1382  *
// 1383  * @return  None
// 1384  *****************************************************************************/
// 1385 static void MT_SysOsalStopTimer(uint8 *pBuf)
// 1386 {
// 1387   uint16 eventId;
// 1388   uint8 retValue = ZFailure;
// 1389 
// 1390   /* Skip over RPC header */
// 1391   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1392 
// 1393   if (*pBuf <= 3)
// 1394   {
// 1395     eventId = (uint16) MT_SysOsalEventId[*pBuf];
// 1396     retValue = osal_stop_timerEx(MT_TaskID, eventId);
// 1397   }
// 1398   else
// 1399   {
// 1400     retValue = ZInvalidParameter;
// 1401   }
// 1402 
// 1403   /* Build and send back the response */
// 1404   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_STOP_TIMER,
// 1405                                 sizeof(retValue), &retValue );
// 1406 }
// 1407 
// 1408 /******************************************************************************
// 1409  * @fn      MT_SysRandom
// 1410  *
// 1411  * @brief
// 1412  *
// 1413  * @param   uint8 pData - pointer to the data
// 1414  *
// 1415  * @return  None
// 1416  *****************************************************************************/
// 1417 static void MT_SysRandom()
// 1418 {
// 1419   uint16 randValue = Onboard_rand();
// 1420   uint8 retArray[2];
// 1421 
// 1422   retArray[0] = LO_UINT16(randValue);
// 1423   retArray[1] = HI_UINT16(randValue);
// 1424 
// 1425   /* Build and send back the response */
// 1426   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_RANDOM,
// 1427                                 sizeof(retArray), retArray );
// 1428 }
// 1429 
// 1430 #if !defined( CC26XX )
// 1431 /******************************************************************************
// 1432  * @fn      MT_SysAdcRead
// 1433  *
// 1434  * @brief   Reading ADC value, temperature sensor and voltage
// 1435  *
// 1436  * @param   uint8 pBuf - pointer to the data
// 1437  *
// 1438  * @return  None
// 1439  *****************************************************************************/
// 1440 static void MT_SysAdcRead(uint8 *pBuf)
// 1441 {
// 1442   uint16 tempValue = 0;
// 1443   uint8 retArray[2];
// 1444 
// 1445   /* Skip over RPC header */
// 1446   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1447 
// 1448   {
// 1449     uint8 channel = *pBuf++;  /* ADC channel */
// 1450     uint8 resolution = *pBuf++;  /* ADC resolution */
// 1451 
// 1452     /* Voltage reading */
// 1453     switch (channel)
// 1454     {
// 1455       case HAL_ADC_CHANNEL_TEMP:  /* Temperature sensor */
// 1456       case HAL_ADC_CHANNEL_VDD:   /* Voltage reading */
// 1457         resolution = HAL_ADC_RESOLUTION_14;
// 1458 
// 1459       case HAL_ADC_CHANNEL_0:  /* Analog input channels */
// 1460       case HAL_ADC_CHANNEL_1:
// 1461       case HAL_ADC_CHANNEL_2:
// 1462       case HAL_ADC_CHANNEL_3:
// 1463       case HAL_ADC_CHANNEL_4:
// 1464       case HAL_ADC_CHANNEL_5:
// 1465       case HAL_ADC_CHANNEL_6:
// 1466       case HAL_ADC_CHANNEL_7:
// 1467         tempValue = HalAdcRead(channel, resolution);
// 1468         break;
// 1469 
// 1470       default:  /* Undefined channel */
// 1471         break;
// 1472     }
// 1473   }
// 1474 
// 1475   retArray[0] = LO_UINT16(tempValue);
// 1476   retArray[1] = HI_UINT16(tempValue);
// 1477 
// 1478   /* Build and send back the response */
// 1479   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ADC_READ,
// 1480                                 sizeof(retArray), retArray);
// 1481 }
// 1482 #endif /* !CC26XX */
// 1483 
// 1484 /******************************************************************************
// 1485  * @fn      MT_SysGpio
// 1486  *
// 1487  * @brief   ZAccel RPC interface for controlling the available GPIO pins.
// 1488  *
// 1489  * @param   uint8 pBuf - pointer to the data
// 1490  *
// 1491  * @return  None
// 1492  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1493 static void MT_SysGpio(uint8 *pBuf)
MT_SysGpio:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function MT_SysGpio
        CODE
// 1494 {
        FUNCALL MT_SysGpio, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
// 1495   uint8 val;
// 1496   GPIO_Op_t op;
// 1497 
// 1498   /* Skip over RPC header */
// 1499   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1500 
// 1501   op = (GPIO_Op_t)(*pBuf++);
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
// 1502   val = *pBuf;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ?Subroutine4 & 0xFFFF
// 1503 
// 1504   switch (op)
??CrossCallReturnLabel_7:
        MOV       A,R0
        JZ        ??MT_SysGpio_0
        DEC       A
        JZ        ??MT_SysGpio_1
        DEC       A
        JNZ       $+5
        LJMP      ??MT_SysGpio_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_SysGpio_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_SysGpio_4 & 0xFFFF
        ADD       A,#-0xe
        JNZ       $+5
        LJMP      ??MT_SysGpio_5 & 0xFFFF
        LJMP      ??MT_SysGpio_6 & 0xFFFF
// 1505   {
// 1506     case GPIO_DIR:
// 1507       if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
??MT_SysGpio_0:
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??MT_SysGpio_7
        ORL       0xfd,#0x1
        SJMP      ??MT_SysGpio_8
??MT_SysGpio_7:
        ANL       0xfd,#0xfe
// 1508       if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
??MT_SysGpio_8:
        MOV       C,0xE0 /* A   */.1
        JNC       ??MT_SysGpio_9
        ORL       0xfd,#0x2
        SJMP      ??MT_SysGpio_10
??MT_SysGpio_9:
        ANL       0xfd,#0xfd
// 1509       if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
??MT_SysGpio_10:
        MOV       C,0xE0 /* A   */.2
        JNC       ??MT_SysGpio_11
        ORL       0xfd,#0x40
        SJMP      ??MT_SysGpio_12
??MT_SysGpio_11:
        ANL       0xfd,#0xbf
// 1510       if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
??MT_SysGpio_12:
        MOV       C,0xE0 /* A   */.3
        JNC       ??MT_SysGpio_13
        ORL       0xfe,#0x1
        LJMP      ??MT_SysGpio_6 & 0xFFFF
??MT_SysGpio_13:
        ANL       0xfe,#0xfe
        LJMP      ??MT_SysGpio_6 & 0xFFFF
// 1511       break;
// 1512 
// 1513     case GPIO_TRI:
// 1514       if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
??MT_SysGpio_1:
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??MT_SysGpio_14
        ANL       0xf3,#0xfe
        ANL       0xfd,#0xfe
        ORL       0x8f,#0x1
        SJMP      ??MT_SysGpio_15
??MT_SysGpio_14:
        MOV       C,0xE0 /* A   */.4
        ANL       0xf3,#0xfe
        ANL       0xfd,#0xfe
        ANL       0x8f,#0xfe
        JNC       ??MT_SysGpio_16
        ORL       0xf7,#0x20
        SJMP      ??MT_SysGpio_15
??MT_SysGpio_16:
        ANL       0xf7,#0xdf
// 1515       if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
??MT_SysGpio_15:
        MOV       C,0xE0 /* A   */.1
        JNC       ??MT_SysGpio_17
        ANL       0xf3,#0xfd
        ANL       0xfd,#0xfd
        ORL       0x8f,#0x2
        SJMP      ??MT_SysGpio_18
??MT_SysGpio_17:
        MOV       C,0xE0 /* A   */.5
        ANL       0xf3,#0xfd
        ANL       0xfd,#0xfd
        ANL       0x8f,#0xfd
        JNC       ??MT_SysGpio_19
        ORL       0xf7,#0x20
        SJMP      ??MT_SysGpio_18
??MT_SysGpio_19:
        ANL       0xf7,#0xdf
// 1516       if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
??MT_SysGpio_18:
        MOV       C,0xE0 /* A   */.2
        JNC       ??MT_SysGpio_20
        ANL       0xf3,#0xbf
        ANL       0xfd,#0xbf
        ORL       0x8f,#0x40
        SJMP      ??MT_SysGpio_21
??MT_SysGpio_20:
        MOV       C,0xE0 /* A   */.6
        ANL       0xf3,#0xbf
        ANL       0xfd,#0xbf
        ANL       0x8f,#0xbf
        JNC       ??MT_SysGpio_22
        ORL       0xf7,#0x20
        SJMP      ??MT_SysGpio_21
??MT_SysGpio_22:
        ANL       0xf7,#0xdf
// 1517       if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
??MT_SysGpio_21:
        MOV       C,0xE0 /* A   */.3
        JNC       ??MT_SysGpio_23
        ANL       0xf4,#0xfe
        ANL       0xfe,#0xfe
        ORL       0xf6,#0x1
        SJMP      ??MT_SysGpio_6
??MT_SysGpio_23:
        MOV       C,0xE0 /* A   */.7
        ANL       0xf4,#0xfe
        ANL       0xfe,#0xfe
        ANL       0xf6,#0xfe
        JNC       ??MT_SysGpio_24
        ORL       0xf7,#0x40
        SJMP      ??MT_SysGpio_6
??MT_SysGpio_24:
        ANL       0xf7,#0xbf
        SJMP      ??MT_SysGpio_6
// 1518       break;
// 1519 
// 1520     case GPIO_SET:
// 1521       if (val & BV(0)) {GPIO_SET(0);}
??MT_SysGpio_2:
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??MT_SysGpio_25
        SETB      0x80.0
// 1522       if (val & BV(1)) {GPIO_SET(1);}
??MT_SysGpio_25:
        MOV       C,0xE0 /* A   */.1
        JNC       ??MT_SysGpio_26
        SETB      0x80.1
// 1523       if (val & BV(2)) {GPIO_SET(2);}
??MT_SysGpio_26:
        MOV       C,0xE0 /* A   */.2
        JNC       ??MT_SysGpio_27
        SETB      0x80.6
// 1524       if (val & BV(3)) {GPIO_SET(3);}
??MT_SysGpio_27:
        MOV       C,0xE0 /* A   */.3
        JNC       ??MT_SysGpio_6
        SETB      0x90.0
        SJMP      ??MT_SysGpio_6
// 1525       break;
// 1526 
// 1527     case GPIO_CLR:
// 1528       if (val & BV(0)) {GPIO_CLR(0);}
??MT_SysGpio_3:
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??MT_SysGpio_28
        CLR       0x80.0
// 1529       if (val & BV(1)) {GPIO_CLR(1);}
??MT_SysGpio_28:
        MOV       C,0xE0 /* A   */.1
        JNC       ??MT_SysGpio_29
        CLR       0x80.1
// 1530       if (val & BV(2)) {GPIO_CLR(2);}
??MT_SysGpio_29:
        MOV       C,0xE0 /* A   */.2
        JNC       ??MT_SysGpio_30
        CLR       0x80.6
// 1531       if (val & BV(3)) {GPIO_CLR(3);}
??MT_SysGpio_30:
        MOV       C,0xE0 /* A   */.3
        JNC       ??MT_SysGpio_6
        CLR       0x90.0
        SJMP      ??MT_SysGpio_6
// 1532       break;
// 1533 
// 1534     case GPIO_TOG:
// 1535       if (val & BV(0)) {GPIO_TOG(0);}
??MT_SysGpio_4:
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??MT_SysGpio_31
        XRL       0x80,#0x1
// 1536       if (val & BV(1)) {GPIO_TOG(1);}
??MT_SysGpio_31:
        MOV       C,0xE0 /* A   */.1
        JNC       ??MT_SysGpio_32
        XRL       0x80,#0x2
// 1537       if (val & BV(2)) {GPIO_TOG(2);}
??MT_SysGpio_32:
        MOV       C,0xE0 /* A   */.2
        JNC       ??MT_SysGpio_33
        XRL       0x80,#0x40
// 1538       if (val & BV(3)) {GPIO_TOG(3);}
??MT_SysGpio_33:
        MOV       C,0xE0 /* A   */.3
        JNC       ??MT_SysGpio_6
        XRL       0x90,#0x1
        SJMP      ??MT_SysGpio_6
// 1539       break;
// 1540 
// 1541     case GPIO_GET:
// 1542       break;
// 1543 
// 1544     case GPIO_HiD:
// 1545       (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
??MT_SysGpio_5:
        MOVX      A,@DPTR
        JZ        ??MT_SysGpio_34
        ORL       0x8c,#0x80
        SJMP      ??MT_SysGpio_6
??MT_SysGpio_34:
        ANL       0x8c,#0x7f
// 1546       break;
// 1547 
// 1548     default:
// 1549       break;
// 1550   }
// 1551 
// 1552   val  = (GPIO_GET(0)) ? BV(0) : 0;
??MT_SysGpio_6:
        MOV       C,0x80.0
        CLR       A
        RLC       A
        MOVX      @DPTR,A
// 1553   val |= (GPIO_GET(1)) ? BV(1) : 0;
        MOV       C,0x80.1
        JNC       ??MT_SysGpio_35
        MOV       R0,#0x2
        SJMP      ??MT_SysGpio_36
??MT_SysGpio_35:
        MOV       R0,#0x0
??MT_SysGpio_36:
        ORL       A,R0
        MOVX      @DPTR,A
// 1554   val |= (GPIO_GET(2)) ? BV(2) : 0;
        MOV       C,0x80.6
        JNC       ??MT_SysGpio_37
        MOV       R0,#0x4
        SJMP      ??MT_SysGpio_38
??MT_SysGpio_37:
        MOV       R0,#0x0
??MT_SysGpio_38:
        ORL       A,R0
        MOVX      @DPTR,A
// 1555   val |= (GPIO_GET(3)) ? BV(3) : 0;
        MOV       C,0x90.0
        JNC       ??MT_SysGpio_39
        MOV       R0,#0x8
        SJMP      ??MT_SysGpio_40
??MT_SysGpio_39:
        MOV       R0,#0x0
??MT_SysGpio_40:
        ORL       A,R0
        LCALL     ??Subroutine11_0 & 0xFFFF
// 1556 
// 1557   /* Build and send back the response */
// 1558   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_GPIO,
// 1559                                 sizeof(val), &val);
??CrossCallReturnLabel_25:
        MOV       R2,#0xe
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1560 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock10
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P0SEL
        REQUIRE P0INP
        REQUIRE P2INP
        REQUIRE P1SEL
        REQUIRE P1INP
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE PICTL

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function MT_SysGpio
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond12) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond12) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond12) CFA_SP SP+-7
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
// 1561 
// 1562 /******************************************************************************
// 1563  * @fn      MT_SysStackTune
// 1564  *
// 1565  * @brief   RPC interface for tuning the stack parameters to adjust performance
// 1566  *
// 1567  * @param   uint8 pBuf - pointer to the data
// 1568  *
// 1569  * @return  None
// 1570  *****************************************************************************/
// 1571 static void MT_SysStackTune(uint8 *pBuf)
// 1572 {
// 1573   uint8 rtrn;
// 1574 
// 1575   /* Skip over RPC header */
// 1576   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1577 
// 1578   switch (*pBuf++)
// 1579   {
// 1580   case STK_TX_PWR:
// 1581     rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
// 1582     break;
// 1583 
// 1584   case STK_RX_ON_IDLE:
// 1585     if ((*pBuf != TRUE) && (*pBuf != FALSE))
// 1586     {
// 1587       (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
// 1588     }
// 1589     else
// 1590     {
// 1591       rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
// 1592     }
// 1593     break;
// 1594 
// 1595   default:
// 1596     rtrn = ZInvalidParameter;
// 1597     break;
// 1598   }
// 1599 
// 1600   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_STACK_TUNE,
// 1601                                 sizeof(rtrn), &rtrn);
// 1602 }
// 1603 
// 1604 /******************************************************************************
// 1605  * @fn      MT_SysSetUtcTime
// 1606  *
// 1607  * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
// 1608  *
// 1609  * @param   pBuf - pointer to time parameters
// 1610  *
// 1611  * @return  None
// 1612  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1613 static void MT_SysSetUtcTime(uint8 *pBuf)
MT_SysSetUtcTime:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
        CODE
// 1614 {
        FUNCALL MT_SysSetUtcTime, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_ConvertUTCSecs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_setClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1615   uint8 retStat;
// 1616   UTCTime utcSecs;
// 1617 
// 1618   /* Skip over RPC header */
// 1619   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_SysSetUtcTime_0
        INC       R7
// 1620 
// 1621   utcSecs = osal_build_uint32( pBuf, 4 );
??MT_SysSetUtcTime_0:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 1622   if ( utcSecs == 0 )
        MOV       A,R2
        ORL       A,?V1
        ORL       A,?V2
        ORL       A,?V3
        JZ        $+5
        LJMP      ??MT_SysSetUtcTime_1 & 0xFFFF
// 1623   {
// 1624     UTCTimeStruct utc;
// 1625 
// 1626     /* Skip past UTC time */
// 1627     pBuf += 4;
// 1628 
// 1629     /* Get time and date parameters */
// 1630     utc.hour = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine8 & 0xFFFF
// 1631     utc.minutes = *pBuf++;
??CrossCallReturnLabel_12:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine8 & 0xFFFF
// 1632     utc.seconds = *pBuf++;
??CrossCallReturnLabel_13:
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine6 & 0xFFFF
// 1633     utc.month = (*pBuf++) - 1;
??CrossCallReturnLabel_8:
        MOVX      A,@DPTR
        DEC       A
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine6 & 0xFFFF
// 1634     utc.day = (*pBuf++) - 1;
??CrossCallReturnLabel_9:
        INC       DPTR
        MOVX      A,@DPTR
        DEC       A
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1635     utc.year = osal_build_uint16 ( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x9
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1636 
// 1637     if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
// 1638         (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x18
        JC        $+5
        LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x3c
        JC        $+5
        LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x3c
        JC        $+5
        LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0xc
        JC        $+5
        LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x1f
        JC        $+5
        LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x30
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x8
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,#-0x78
        MOV       A,R1
        SUBB      A,#0x0
        JNC       ??MT_SysSetUtcTime_2
// 1639     {
// 1640       /* Got past the course filter, now check for leap year */
// 1641       if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??MT_SysSetUtcTime_3
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#-0x70
        MOV       R3,#0x1
        LCALL     ?US_DIV_MOD
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??MT_SysSetUtcTime_4
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     ?US_DIV_MOD
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??MT_SysSetUtcTime_5
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        JNZ       ??MT_SysSetUtcTime_5
??MT_SysSetUtcTime_4:
        MOV       R0,#0x1d
        SJMP      ??MT_SysSetUtcTime_6
??MT_SysSetUtcTime_5:
        MOV       R0,#0x1c
??MT_SysSetUtcTime_6:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R0
        SUBB      A,0xE0 /* A   */
        CLR       C
        XRL       A,PSW
        RLC       A
        JNC       ??MT_SysSetUtcTime_2
// 1642       {
// 1643         /* Numbers look reasonable, convert to UTC */
// 1644         utcSecs = osal_ConvertUTCSecs( &utc );
??MT_SysSetUtcTime_3:
        ; Setup parameters for call to function osal_ConvertUTCSecs
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 1645       }
// 1646     }
// 1647   }
// 1648 
// 1649   if ( utcSecs == 0 )
??MT_SysSetUtcTime_1:
        MOV       A,?V0
        ORL       A,?V1
        ORL       A,?V2
        ORL       A,?V3
        JNZ       ??MT_SysSetUtcTime_7
// 1650   {
// 1651     /* Bad parameter(s) */
// 1652     retStat = ZInvalidParameter;
??MT_SysSetUtcTime_2:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
        SJMP      ??MT_SysSetUtcTime_8
// 1653   }
// 1654   else
// 1655   {
// 1656     /* Parameters accepted, set the time */
// 1657     osal_setClock( utcSecs );
??MT_SysSetUtcTime_7:
        ; Setup parameters for call to function osal_setClock
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??osal_setClock::?relay`; Banked call to: osal_setClock
// 1658     retStat = ZSuccess;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
// 1659   }
??MT_SysSetUtcTime_8:
        LCALL     ??Subroutine11_0 & 0xFFFF
// 1660 
// 1661   /* Build and send back the response */
// 1662   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SET_TIME,
// 1663                                 sizeof(retStat), &retStat);
??CrossCallReturnLabel_26:
        MOV       R2,#0x10
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1664 }
        MOV       A,#0x8
          CFI EndBlock cfiBlock14
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MT_SysSetUtcTime
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MT_SysSetUtcTime
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_13
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-4
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_SysSetUtcTime
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_8
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function MT_SysSetUtcTime
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_9
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-4
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function MT_SysSetUtcTime
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_15:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_SysCommandProcessing
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function MT_SysOsalTimerExpired
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_SysCommandProcessing
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MT_SysCommandProcessing
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_SysGpio
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond34) CFA_SP SP+-7
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MT_SysSetUtcTime
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_SysCommandProcessing
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_SysCommandProcessing
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function MT_SysOsalTimerExpired
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39
// 1665 
// 1666 /******************************************************************************
// 1667  * @fn      MT_SysGetUtcTime
// 1668  *
// 1669  * @brief   Get the OSAL UTC time
// 1670  *
// 1671  * @param   None
// 1672  *
// 1673  * @return  32-bit and Parsed UTC time
// 1674  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1675 static void MT_SysGetUtcTime(void)
MT_SysGetUtcTime:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
        CODE
// 1676 {
        FUNCALL MT_SysGetUtcTime, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_getClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_ConvertUTCTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV       A,#-0x7
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1677   uint8 len;
// 1678   uint8 *buf;
// 1679 
// 1680   len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
// 1681 
// 1682   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xb
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 1683   if ( buf )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??MT_SysGetUtcTime_0 & 0xFFFF
// 1684   {
// 1685     uint8 *pBuf;
// 1686     UTCTime utcSecs;
// 1687     UTCTimeStruct utcTime;
// 1688 
// 1689     // Get current 32-bit UTC time and parse it
// 1690     utcSecs = osal_getClock();
        ; Setup parameters for call to function osal_getClock
        LCALL     `??osal_getClock::?relay`; Banked call to: osal_getClock
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 1691     osal_ConvertUTCTime( &utcTime, utcSecs );
        ; Setup parameters for call to function osal_ConvertUTCTime
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_ConvertUTCTime::?relay`; Banked call to: osal_ConvertUTCTime
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1692 
// 1693     // Start with 32-bit UTC time
// 1694     pBuf = osal_buffer_uint32( buf, utcSecs );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1695 
// 1696     // Concatenate parsed UTC time fields
// 1697     *pBuf++ = utcTime.hour;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 1698     *pBuf++ = utcTime.minutes;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX      @DPTR,A
// 1699     *pBuf++ = utcTime.seconds;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_17:
        INC       DPTR
        MOVX      @DPTR,A
// 1700     *pBuf++ = utcTime.month + 1;  // Convert to human numbers
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX      @DPTR,A
// 1701     *pBuf++ = utcTime.day + 1;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        INC       DPTR
        MOVX      @DPTR,A
// 1702     *pBuf++ = LO_UINT16( utcTime.year );
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX      @DPTR,A
// 1703     *pBuf++ = HI_UINT16( utcTime.year );
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        INC       DPTR
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        INC       DPTR
        MOVX      @DPTR,A
// 1704 
// 1705     /* Build and send back the response */
// 1706     MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_GET_TIME,
// 1707                                  (uint8)(pBuf-buf), buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,R6
        MOV       R0,A
        MOV       A,R2
        ADD       A,#0x7
        CLR       C
        SUBB      A,R0
        MOV       R3,A
        MOV       R2,#0x11
        MOV       R1,#0x61
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1708 
// 1709     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1710   }
// 1711 }
??MT_SysGetUtcTime_0:
        MOV       A,#0x7
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function MT_SysGetUtcTime
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOVX      A,@DPTR
        INC       A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function MT_SysGetUtcTime
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_SysGetUtcTime
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_SysGetUtcTime
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_2
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_SysGetUtcTime
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_3
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-4
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51
// 1712 
// 1713 /******************************************************************************
// 1714  * @fn      MT_SysSetTxPower
// 1715  *
// 1716  * @brief   Set the transmit power.
// 1717  *
// 1718  * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
// 1719  *
// 1720  * @return  None
// 1721  *****************************************************************************/
// 1722 static void MT_SysSetTxPower(uint8 *pBuf)
// 1723 {
// 1724   /* A local variable to hold the signed dBm value of TxPower that is being requested. */
// 1725   uint8 signed_dBm_of_TxPower_requeseted;
// 1726 
// 1727   /*
// 1728    * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
// 1729    * the requested dBm value of TxPower, but which is also valid according to a complex set of
// 1730    * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
// 1731    * function.
// 1732    */
// 1733   uint8 signed_dBm_of_TxPower_range_corrected;
// 1734 
// 1735   /* Parse the requested dBm from the RPC message. */
// 1736   signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
// 1737 
// 1738   /*
// 1739    * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
// 1740    * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
// 1741    * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
// 1742    * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
// 1743    * the code that will properly constrain the requested dBm to a valid range based on both the
// 1744    * compile-time and the run-time configurations that affect the available valid ranges
// 1745    * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
// 1746    */
// 1747   signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
// 1748 
// 1749   /*
// 1750    * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
// 1751    * as possible within the TxPower range that is valid for the compile-time and run-time
// 1752    * configuration.
// 1753    */
// 1754   (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
// 1755 
// 1756   /* Send back response that includes the actual dBm TxPower that can be set. */
// 1757   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SET_TX_POWER, 1,
// 1758                                 &signed_dBm_of_TxPower_range_corrected);
// 1759 }
// 1760 
// 1761 #if defined ( FEATURE_SYSTEM_STATS )
// 1762 /******************************************************************************
// 1763  * @fn      MT_SysZDiagsInitStats
// 1764  *
// 1765  * @brief   Initialize the statistics table in NV or restore values from
// 1766  *          NV into the Statistics table in RAM
// 1767  *
// 1768  * @param   None
// 1769  *
// 1770  * @return  None
// 1771  *****************************************************************************/
// 1772 static void MT_SysZDiagsInitStats(void)
// 1773 {
// 1774   uint8 retValue;
// 1775 
// 1776   retValue = ZDiagsInitStats();
// 1777 
// 1778   /* Build and send back the response */
// 1779   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_INIT_STATS,
// 1780                                 sizeof(retValue), &retValue);
// 1781 }
// 1782 
// 1783 /******************************************************************************
// 1784  * @fn      MT_SysZDiagsClearStats
// 1785  *
// 1786  * @brief   Clears the statistics table in RAM and NV if option flag set.
// 1787  *
// 1788  * @param   uint8 pBuf - pointer to the data
// 1789  *
// 1790  * @return  None
// 1791  *****************************************************************************/
// 1792 static void MT_SysZDiagsClearStats(uint8 *pBuf)
// 1793 {
// 1794   uint32 sysClock;
// 1795   uint8 retBuf[4];
// 1796 
// 1797   /* parse header */
// 1798   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1799 
// 1800   /* returns the system clock of the time when the statistics were cleared */
// 1801   sysClock = ZDiagsClearStats( *pBuf );
// 1802 
// 1803   osal_buffer_uint32( retBuf, sysClock );
// 1804 
// 1805   /* Build and send back the response */
// 1806   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_CLEAR_STATS,
// 1807                                 sizeof(retBuf), retBuf);
// 1808 }
// 1809 
// 1810 /******************************************************************************
// 1811  * @fn      MT_SysZDiagsGetStatsAttr
// 1812  *
// 1813  * @brief   Reads specific system (attribute) ID statistics and/or metrics.
// 1814  *
// 1815  * @param   uint8 pBuf - pointer to the data
// 1816  *
// 1817  * @return  None
// 1818  *****************************************************************************/
// 1819 static void MT_SysZDiagsGetStatsAttr(uint8 *pBuf)
// 1820 {
// 1821   uint16 attrId;
// 1822   uint32 attrValue;
// 1823   uint8 retBuf[4];
// 1824 
// 1825   /* parse header */
// 1826   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1827 
// 1828   /* Get the Attribute ID */
// 1829   attrId = osal_build_uint16( pBuf );
// 1830 
// 1831   attrValue = ZDiagsGetStatsAttr( attrId );
// 1832 
// 1833   osal_buffer_uint32( retBuf, attrValue );
// 1834 
// 1835   /* Build and send back the response */
// 1836   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_GET_STATS,
// 1837                                 sizeof(retBuf), retBuf);
// 1838 }
// 1839 
// 1840 /******************************************************************************
// 1841  * @fn      MT_SysZDiagsRestoreStatsFromNV
// 1842  *
// 1843  * @brief   Restores the statistics table from NV into the RAM table.
// 1844  *
// 1845  * @param   None
// 1846  *
// 1847  * @return  None
// 1848  *****************************************************************************/
// 1849 static void MT_SysZDiagsRestoreStatsFromNV(void)
// 1850 {
// 1851   uint8 retValue;
// 1852 
// 1853   retValue = ZDiagsRestoreStatsFromNV();
// 1854 
// 1855   /* Build and send back the response */
// 1856   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_RESTORE_STATS_NV,
// 1857                                 sizeof(retValue), &retValue);
// 1858 }
// 1859 
// 1860 /******************************************************************************
// 1861  * @fn      MT_SysZDiagsSaveStatsToNV
// 1862  *
// 1863  * @brief   Saves the statistics table from RAM to NV.
// 1864  *
// 1865  * @param   None
// 1866  *
// 1867  * @return  None
// 1868  *****************************************************************************/
// 1869 static void MT_SysZDiagsSaveStatsToNV(void)
// 1870 {
// 1871   uint32 sysClock;
// 1872   uint8 retBuf[4];
// 1873 
// 1874   /* Returns system clock of the time when the statistics were saved to NV */
// 1875   sysClock = ZDiagsSaveStatsToNV();
// 1876 
// 1877   osal_buffer_uint32( retBuf, sysClock );
// 1878 
// 1879   /* Build and send back the response */
// 1880   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_SAVE_STATS_TO_NV,
// 1881                                 sizeof(retBuf), retBuf);
// 1882 }
// 1883 #endif /* FEATURE_SYSTEM_STATS */
// 1884 #endif /* MT_SYS_FUNC */
// 1885 
// 1886 /******************************************************************************
// 1887  * SUPPORT
// 1888  *****************************************************************************/
// 1889 
// 1890 /******************************************************************************
// 1891  * @fn      MT_SysResetInd()
// 1892  *
// 1893  * @brief   Sends a ZTOOL "reset response" message.
// 1894  *
// 1895  * @param   None
// 1896  *
// 1897  * @return  None
// 1898  *
// 1899  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1900 void MT_SysResetInd(void)
MT_SysResetInd:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function MT_SysResetInd
        CODE
// 1901 {
        FUNCALL MT_SysResetInd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysResetInd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1902   uint8 retArray[6];
// 1903 
// 1904   retArray[0] = ResetReason();   /* Reason */
        MOV       A,0x9d
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        ANL       A,#0x3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1905   osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#MTVersionString & 0xff
        MOV       ?V1,#(MTVersionString >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1906 
// 1907   /* Send out Reset Response message */
// 1908   MT_BuildAndSendZToolResponse( MT_ARSP_SYS, MT_SYS_RESET_IND,
// 1909                                 sizeof(retArray), retArray);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x6
        MOV       R2,#-0x80
        MOV       R1,#0x41
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1910 }
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock52
        REQUIRE SLEEPSTA
// 1911 
// 1912 /******************************************************************************
// 1913  * @fn      MT_SysOsalTimerExpired()
// 1914  *
// 1915  * @brief   Sends a SYS Osal Timer Expired
// 1916  *
// 1917  * @param   None
// 1918  *
// 1919  * @return  None
// 1920  *
// 1921  *****************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1922 void MT_SysOsalTimerExpired(uint8 Id)
MT_SysOsalTimerExpired:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function MT_SysOsalTimerExpired
        CODE
// 1923 {
        FUNCALL MT_SysOsalTimerExpired, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LCALL     ?Subroutine5 & 0xFFFF
// 1924   uint8 retValue = Id;
// 1925 
// 1926   MT_BuildAndSendZToolResponse( MT_ARSP_SYS, MT_SYS_OSAL_TIMER_EXPIRED,
// 1927                                 sizeof(retValue), &retValue);
??CrossCallReturnLabel_21:
        MOV       R2,#-0x7f
        MOV       R1,#0x41
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1928 }
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock53

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVItemInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVItemInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGpio::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGpio

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysSetUtcTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGetUtcTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysResetInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysResetInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalTimerExpired::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalTimerExpired

        END
// 1929 
// 1930 #if defined ( MT_SYS_JAMMER_FEATURE )
// 1931 /******************************************************************************
// 1932  * @fn      MT_SysJammerParameters
// 1933  *
// 1934  * @brief   Set the Jammer detection parameters.
// 1935  *
// 1936  * @param   pBuf - MT message containing the parameters.
// 1937  *
// 1938  * @return  None
// 1939  *****************************************************************************/
// 1940 static void MT_SysJammerParameters( uint8 *pBuf )
// 1941 {
// 1942   uint8 status = SUCCESS;
// 1943 
// 1944   // Adjust for the data
// 1945   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1946 
// 1947   // Number of continuous events needed to detect Jam
// 1948   jammerContinuousEvents = osal_build_uint16( pBuf );
// 1949   jammerDetections = jammerContinuousEvents;
// 1950   pBuf += 2;
// 1951 
// 1952   // Noise Level need to be a Jam
// 1953   jammerHighNoiseLevel = *pBuf++;
// 1954 
// 1955   // The time between each noise level reading
// 1956   jammerDetectPeriodTime = osal_build_uint32( pBuf, 4 );
// 1957 
// 1958   // Update the timer
// 1959   osal_start_reload_timer( jammerTaskID, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
// 1960 
// 1961   /* Send out Reset Response message */
// 1962   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_JAMMER_PARAMETERS,
// 1963                                 sizeof(status), &status );
// 1964 }
// 1965 
// 1966 /******************************************************************************
// 1967  * @fn      MT_SysJammerInd()
// 1968  *
// 1969  * @brief   Sends a jammer indication message.
// 1970  *
// 1971  * @param   jammerInd - TRUE if jammer detected, FALSE if changed to undetected
// 1972  *
// 1973  * @return  None
// 1974  *
// 1975  *****************************************************************************/
// 1976 void MT_SysJammerInd( uint8 jammerInd )
// 1977 {
// 1978   /* Send out Reset Response message */
// 1979   MT_BuildAndSendZToolResponse( MT_ARSP_SYS, MT_SYS_JAMMER_IND,
// 1980                                 sizeof(jammerInd), &jammerInd );
// 1981 }
// 1982 
// 1983 /******************************************************************************
// 1984  * @fn      jammerInit()
// 1985  *
// 1986  * @brief   Jammer Detection task initialization function
// 1987  *
// 1988  * @param   taskId - task ID
// 1989  *
// 1990  * @return  None
// 1991  *
// 1992  *****************************************************************************/
// 1993 void jammerInit( uint8 taskId )
// 1994 {
// 1995   jammerTaskID = taskId;
// 1996 
// 1997   // Start the jammer check timer
// 1998   osal_start_reload_timer( taskId, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
// 1999 }
// 2000 
// 2001 /******************************************************************************
// 2002  * @fn      jammerEventLoop()
// 2003  *
// 2004  * @brief   Jammer Detection task event processing function
// 2005  *
// 2006  * @param   taskId - task ID
// 2007  * @param   events - task events
// 2008  *
// 2009  * @return  remaining events
// 2010  *
// 2011  *****************************************************************************/
// 2012 uint16 jammerEventLoop( uint8 taskId, uint16 events )
// 2013 {
// 2014   osal_event_hdr_t  *pMsg;
// 2015 
// 2016   if (events & SYS_EVENT_MSG)
// 2017   {
// 2018     if ( (pMsg = (osal_event_hdr_t *) osal_msg_receive( taskId )) != NULL )
// 2019     {
// 2020       switch ( pMsg->event )
// 2021       {
// 2022         default:
// 2023           break;
// 2024       }
// 2025 
// 2026       osal_msg_deallocate( (byte *)pMsg );
// 2027     }
// 2028 
// 2029     events ^= SYS_EVENT_MSG;
// 2030   }
// 2031   else if ( events & JAMMER_CHECK_EVT )
// 2032   {
// 2033 #ifdef FEATURE_DUAL_MAC
// 2034     if ( DMMGR_IsDefaultMac() )
// 2035 #endif /* FEATURE_DUAL_MAC */
// 2036     {
// 2037     // Make sure we aren't currently receiving a message and radio is active.
// 2038     if ( MAC_RX_IS_PHYSICALLY_ACTIVE() == MAC_RX_ACTIVE_NO_ACTIVITY )
// 2039     {
// 2040       int8 rssiDbm = -128;
// 2041 
// 2042       // Read the noise level
// 2043       if ( RSSISTAT & 0x01 )
// 2044       {
// 2045         /* Add the RSSI offset */
// 2046         rssiDbm = RSSI + MAC_RADIO_RSSI_OFFSET;
// 2047 
// 2048         /* Adjust for external PA/LNA, if any */
// 2049         MAC_RADIO_RSSI_LNA_OFFSET( rssiDbm );
// 2050 
// 2051         // Check for a noise level that's high
// 2052         if ( jammerDetections && (rssiDbm  > jammerHighNoiseLevel) )
// 2053         {
// 2054           jammerDetections--;
// 2055           if ( jammerDetections == 0 )
// 2056           {
// 2057             // Jam detected
// 2058             MT_SysJammerInd( TRUE );
// 2059           }
// 2060         }
// 2061         else if ( rssiDbm <= jammerHighNoiseLevel )
// 2062         {
// 2063           if ( jammerDetections == 0 )
// 2064           {
// 2065             // Jam cleared
// 2066             MT_SysJammerInd( FALSE );
// 2067           }
// 2068           jammerDetections = jammerContinuousEvents;
// 2069         }
// 2070       }
// 2071     }
// 2072     }
// 2073     events ^= JAMMER_CHECK_EVT;
// 2074   }
// 2075   else
// 2076   {
// 2077     events = 0;  /* Discard unknown events. */
// 2078   }
// 2079 
// 2080   return ( events );
// 2081 }
// 2082 #endif // MT_SYS_JAMMER_FEATURE
// 2083 
// 2084 #if defined ( MT_SYS_SNIFFER_FEATURE )
// 2085 /******************************************************************************
// 2086  * @fn      MT_SysSnifferParameters
// 2087  *
// 2088  * @brief   Set the sniffer parameters.
// 2089  *
// 2090  * @param   pBuf - MT message containing the parameters.
// 2091  *
// 2092  * @return  None
// 2093  *****************************************************************************/
// 2094 static void MT_SysSnifferParameters( uint8 *pBuf )
// 2095 {
// 2096   uint8 status = SUCCESS;
// 2097   uint8 param;
// 2098 
// 2099   // Adjust for the data
// 2100   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2101 
// 2102   // Noise Level need to be a Jam
// 2103   param = *pBuf;
// 2104 
// 2105   if ( param == MT_SYS_SNIFFER_DISABLE )
// 2106   {
// 2107     // Disable Sniffer
// 2108     HAL_BOARD_DISABLE_INTEGRATED_SNIFFER();
// 2109     sniffer = FALSE;
// 2110   }
// 2111   else if ( param == MT_SYS_SNIFFER_ENABLE )
// 2112   {
// 2113     // Enable the Sniffer
// 2114     HAL_BOARD_ENABLE_INTEGRATED_SNIFFER();
// 2115     sniffer = TRUE;
// 2116   }
// 2117   else if ( param == MT_SYS_SNIFFER_GET_SETTING )
// 2118   {
// 2119     status = sniffer; // sniffer setting
// 2120   }
// 2121   else
// 2122   {
// 2123     status = INVALIDPARAMETER;
// 2124   }
// 2125 
// 2126   /* Send back response that includes the actual dBm TxPower that can be set. */
// 2127   MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SNIFFER_PARAMETERS,
// 2128                                 sizeof(status), &status );
// 2129 }
// 2130 #endif // MT_SYS_SNIFFER_FEATURE
// 2131 
// 2132 #if defined( ENABLE_MT_SYS_RESET_SHUTDOWN )
// 2133 /******************************************************************************
// 2134  * @fn          powerOffSoc
// 2135  *
// 2136  * @brief   Put the device in lowest power mode infinitely
// 2137  *
// 2138  * @param   None
// 2139  *
// 2140  * @return  None
// 2141  *****************************************************************************/
// 2142 static void powerOffSoc(void)
// 2143 {
// 2144   HAL_DISABLE_INTERRUPTS();
// 2145 
// 2146   /* turn off the RF front end device */
// 2147   //TBD, based on the rf-front-end being used
// 2148 
// 2149   /* turn off the receiver */
// 2150   MAC_RADIO_RXTX_OFF();
// 2151 
// 2152   /* just in case a receive was about to start, flush the receive FIFO */
// 2153   MAC_RADIO_FLUSH_RX_FIFO();
// 2154 
// 2155   /* clear any receive interrupt that happened to squeak through */
// 2156   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
// 2157 
// 2158   /* put MAC timer to sleep */
// 2159   MAC_RADIO_TIMER_SLEEP();
// 2160 
// 2161   /* power of radio */
// 2162   MAC_RADIO_TURN_OFF_POWER();
// 2163 
// 2164   STIF = 0; //HAL_SLEEP_TIMER_CLEAR_INT;
// 2165 
// 2166   if (ZNP_CFG1_UART == znpCfg1)
// 2167   {
// 2168     HalUARTSuspend();
// 2169   }
// 2170 
// 2171   /* Prep CC2530 power mode */
// 2172   //HAL_SLEEP_PREP_POWER_MODE(3);
// 2173   SLEEPCMD &= ~PMODE; /* clear mode bits */
// 2174   SLEEPCMD |= 3;      /* set mode bits  to PM3 */
// 2175   while (!(STLOAD & LDRDY));
// 2176 
// 2177   while (1) //just in case we wake up for some unknown reason
// 2178   {
// 2179     /* Execution is supposed to halt at this instruction. Interrupts are
// 2180        disabled - the only way to exit this state is from hardware reset. */
// 2181     PCON = halSleepPconValue;
// 2182     asm("NOP");
// 2183   }
// 2184 }
// 2185 #endif
// 2186 
// 2187 /******************************************************************************
// 2188  *****************************************************************************/
// 
// 3 226 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//    13 bytes in segment SFR_AN
//    10 bytes in segment XDATA_ROM_C
// 
//    54 bytes of CODE     memory
//    10 bytes of CONST    memory
//     0 bytes of DATA     memory (+ 13 bytes shared)
// 3 226 bytes of HUGECODE memory
//
//Errors: none
//Warnings: 16
