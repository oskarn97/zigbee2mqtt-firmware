###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:05
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\nwk\nwk_globals.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW760.tmp ("C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\nwk\nwk_globals.c" -D
#        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\nwk_globals.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\nwk_globals.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2015-01-08 16:32:12 -0800 (Thu, 08 Jan 2015) $
      4            Revision:       $Revision: 41678 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          #include "ZDApp.h"
     57          
     58          #if defined ( LCD_SUPPORTED )
     59            #include "OnBoard.h"
     60          #endif
     61          
     62          /* HAL */
     63          #include "hal_lcd.h"
     64          
     65          /*********************************************************************
     66           * MACROS
     67           */
     68          
     69          /*********************************************************************
     70           * CONSTANTS
     71           */
     72          // Maximums for the data buffer queue
     73          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     74          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     75          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     76          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     77          
     78          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     79          // A known shortcoming is that when a message is enqueued as "hold" for a
     80          // sleeping device, the timer tick may have counted down to 1, so that msg
     81          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     82          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     83          // So the hold time will vary within this interval:
     84          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     85          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     86          #define NWK_INDIRECT_CNT_RTG_TMR    1
     87          // To hold msg for sleeping end devices for 30 secs:
     88          // #define CNT_RTG_TIMER            1
     89          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     90          // To hold msg for sleeping end devices for 30 mins:
     91          // #define CNT_RTG_TIMER            60
     92          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     93          // To hold msg for sleeping end devices for 30 days:
     94          // #define CNT_RTG_TIMER            60
     95          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     96          // Maximum msgs to hold per associated device.
     97          #define NWK_INDIRECT_MSG_MAX_PER    3
     98          // Maximum total msgs to hold for all associated devices.
     99          #define NWK_INDIRECT_MSG_MAX_ALL    \
    100                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          
    106          /*********************************************************************
    107           * NWK GLOBAL VARIABLES
    108           */
    109          
    110          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    111          CONST deviceTableIndex_t gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   15           DB 21
    112          
    113          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    114          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    115          
    116          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    117          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    121          

   \                                 In  segment CODE_C, align 1
    122          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    125          
    126          // change this if using a different stack profile...
    127          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    129          
    130          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    133          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    134            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    135            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    136          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    137            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    138            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    140            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    141            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142          #endif // STACK_PROFILE_ID
    143          
    144          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 gMIN_TREE_LQI = MIN_LQI_COST_3;
   \                     gMIN_TREE_LQI:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LQI>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 588
   \   00024C                REQUIRE __INIT_XDATA_Z
    149          
    150          #if defined ( ZIGBEEPRO )

   \                                 In  segment CODE_C, align 1
    151            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    152            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    153          #else
    154            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    155            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    156          #endif
    157          

   \                                 In  segment CODE_C, align 1
    158          CONFIG_ITEM rtgTableIndex_t gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    159          CONFIG_ITEM srcRtgTableIndex_t gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    160          CONFIG_ITEM rreqTableIndex_t gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    161          

   \                                 In  segment CODE_C, align 1
    162          CONFIG_ITEM neighborTableIndex_t gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    163          
    164           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment CODE_C, align 1
    167          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    170          

   \                                 In  segment CODE_C, align 1
    171          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    172          

   \                                 In  segment CODE_C, align 1
    173          CONST uint8 gGOOD_LINK_COST = GOOD_LINK_COST;
   \                     gGOOD_LINK_COST:
   \   000000   03           DB 3
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    176          
    177          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    179          
    180          #if defined ( ZIGBEEPRO ) || defined ( ZBIT )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    183          #endif
    184          
    185          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    187          
    188          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    190          
    191          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    194          

   \                                 In  segment CODE_C, align 1
    195          CONFIG_ITEM bcastTableIndex_t gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    196          
    197          // For tree addressing, this switch allows the allocation of a
    198          // router address to an end device when end device address are
    199          // all used up.  If this option is enabled, address space
    200          // could be limited.

   \                                 In  segment CODE_C, align 1
    201          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    202          
    203          #if defined ( ZIGBEEPRO ) || defined ( ZBIT )
    204          // number of link status periods after the last received address conflict report
    205          // (network status command)

   \                                 In  segment CODE_C, align 1
    206          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    207          #endif
    208          
    209          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    210          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    211          #endif
    212          
    213          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    214          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    215          
    216          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    217          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    218          
    219          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    220          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    221          
    222          // Network message radius

   \                                 In  segment CODE_C, align 1
    223          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    224          
    225          #if ( ZSTACK_ROUTER_BUILD ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    226          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    227          #endif
    228          
    229          // Maximum number of devices either aged out or not recognized as child

   \                                 In  segment CODE_C, align 1
    230          CONST uint8 gMAX_NOT_MYCHILD_DEVICES = MAX_NOT_MYCHILD_DEVICES;
   \                     gMAX_NOT_MYCHILD_DEVICES:
   \   000000   05           DB 5
    231          
    232          // Child table Management timeout values

   \                                 In  segment CODE_C, align 1
    233          CONST uint32 timeoutValue[15] =
   \                     timeoutValue:
   \   000000   0A000000     DD 10
   \   000004   02000000     DD 2
   \   000008   04000000     DD 4
   \   00000C   08000000     DD 8
   \   000010   10000000     DD 16
   \   000014   20000000     DD 32
   \   000018   40000000     DD 64
   \   00001C   80000000     DD 128
   \   000020   00010000     DD 256
   \   000024   00020000     DD 512
   \   000028   00040000     DD 1024
   \   00002C   00080000     DD 2048
   \   000030   00100000     DD 4096
   \   000034   00200000     DD 8192
   \   000038   00400000     DD 16384
    234          {   10, // 0	10 seconds
    235               2, // 1	2 minutes
    236               4, // 2	4 minutes
    237               8, // 3	8 minutes
    238              16, // 4	16 minutes
    239              32, // 5	32 minutes
    240              64, // 6	64 minutes
    241             128, // 7	128 minutes
    242             256, // 8	256 minutes
    243             512, // 9	512 minutes
    244            1024, // 10	1024 minutes
    245            2048, // 11	2048 minutes
    246            4096, // 12	4096 minutes
    247            8192, // 13	8192 minutes
    248           16384 // 14	16384 minutes
    249          };
    250          
    251          // This table stores devices that have been aged out by the Child Aging Table
    252          // mechanism or have never been a child of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    253          nwkNotMyChild_t notMyChildList[MAX_NOT_MYCHILD_DEVICES];
   \                     notMyChildList:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    254          

   \                                 In  segment CODE_C, align 1
    255          CONST uint32 gMAX_NWK_FRAMECOUNTER_CHANGES = MAX_NWK_FRAMECOUNTER_CHANGES;
   \                     gMAX_NWK_FRAMECOUNTER_CHANGES:
   \   000000   E8030000     DD 1000
    256          
    257          #if defined ( FEATURE_MNP )
    258            uint8 gMAX_MNP_QUEUED = MAX_MNP_QUEUED;
    259          #endif
    260          
    261          /*********************************************************************
    262           * APS GLOBAL VARIABLES
    263           */
    264          
    265          // The Maximum number of binding records
    266          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    267          CONFIG_ITEM bindTableIndex_t gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   04           DB 4
    268          
    269          #if defined ( REFLECTOR )
    270            // The Maximum number of cluster IDs in a binding record
    271            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    272            CONFIG_ITEM uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    273          

   \                                 In  segment CODE_C, align 1
    274            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    275          
    276            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    277            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    278          #endif
    279          
    280          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    281          CONFIG_ITEM uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    282          
    283          // APS End Device Broadcast Table
    284          #if ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    285            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
   \                     apsEndDeviceBroadcastTable:
   \   000000                DS 90
   \   00005A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    286            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
   \                     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
   \   000001                REQUIRE __INIT_XDATA_I
    287          #endif
    288          
    289          /*********************************************************************
    290           * SECURITY GLOBAL VARIABLES
    291           */
    292          
    293          // This is the default pre-configured key,
    294          // change this to make a unique key
    295          // SEC_KEY_LEN is defined in ssp.h.
    296          
    297          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    298          CONFIG_ITEM uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13
    299          #else
    300          CONST uint8 defaultKey[SEC_KEY_LEN] =
    301          {
    302          #if defined ( APP_TP ) || defined ( APP_TP2 )
    303            // Key for ZigBee Conformance Testing
    304            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    305            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    306          #else
    307            // Key for In-House Testing
    308            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    309            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    310          #endif
    311          };
    312          #endif
    313          
    314          // This is the default pre-configured Trust Center Link key,
    315          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    316          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    317          
    318          /*********************************************************************
    319           * STATUS STRINGS
    320           */
    321          #if defined ( LCD_SUPPORTED )
    322            const char PingStr[]         = "Ping Rcvd from";
    323            const char AssocCnfStr[]     = "Assoc Cnf";
    324            const char SuccessStr[]      = "Success";
    325            const char EndDeviceStr[]    = "EndDevice:";
    326            const char ParentStr[]       = "Parent:";
    327            const char ZigbeeCoordStr[]  = "ZigBee Coord";
    328            const char NetworkIDStr[]    = "Network ID:";
    329            const char RouterStr[]       = "Router:";
    330            const char OrphanRspStr[]    = "Orphan Response";
    331            const char SentStr[]         = "Sent";
    332            const char FailedStr[]       = "Failed";
    333            const char AssocRspFailStr[] = "Assoc Rsp fail";
    334            const char AssocIndStr[]     = "Assoc Ind";
    335            const char AssocCnfFailStr[] = "Assoc Cnf fail";
    336            const char EnergyLevelStr[]  = "Energy Level";
    337            const char ScanFailedStr[]   = "Scan Failed";
    338          #endif
    339          
    340          /*********************************************************************
    341           * @fn       nwk_globals_init()
    342           *
    343           * @brief
    344           *
    345           *   Initialize nwk layer globals.  These are the system defaults and
    346           *   should be changed by the user here.  The default definitions are
    347           *   defined in nwk.h or NLMEDE.h.
    348           *
    349           * @param   none
    350           *
    351           * @return  none
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          void nwk_globals_init( void )
   \                     nwk_globals_init:
    354          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    355            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV       R2,#0x1a
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     `??AddrMgrInit::?relay`; Banked call to: AddrMgrInit
    356          
    357          #if !defined ( ZIGBEEPRO )
    358            if ( ZSTACK_ROUTER_BUILD )
    359            {
    360              // Initialize the Cskip Table
    361              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    362              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    363            }
    364          #endif
    365          
    366          #if defined ( ZIGBEE_FREQ_AGILITY )
    367            NwkFreqAgilityInit();
   \   00000B                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00000B   12....       LCALL     `??NwkFreqAgilityInit::?relay`; Banked call to: NwkFreqAgilityInit
    368          #endif
    369          
    370            if ( ( ZSTACK_ROUTER_BUILD ) && ( zgChildAgingEnable == TRUE ) )
   \   00000E   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6004         JZ        ??nwk_globals_init_0
   \   000014   6401         XRL       A,#0x1
   \   000016   700B         JNZ       ??nwk_globals_init_1
   \                     ??nwk_globals_init_0:
   \   000018   90....       MOV       DPTR,#zgChildAgingEnable
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6401         XRL       A,#0x1
   \   00001E   7003         JNZ       ??nwk_globals_init_1
    371            {
    372              // Set the function pointers for the Child Aging feature
    373              NwkInitChildAging();
   \   000020                ; Setup parameters for call to function NwkInitChildAging
   \   000020   12....       LCALL     `??NwkInitChildAging::?relay`; Banked call to: NwkInitChildAging
    374            }
    375          }
   \                     ??nwk_globals_init_1:
   \   000023   D083         POP       DPH
   \   000025   D082         POP       DPL
   \   000027   02....       LJMP      ?BRET
    376          
    377          /*********************************************************************
    378           * @fn       NIB_init()
    379           *
    380           * @brief
    381           *
    382           *   Initialize attribute values in NIB
    383           *
    384           * @param   none
    385           *
    386           * @return  none
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          void NIB_init()
   \                     NIB_init:
    389          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    390            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000008   EA           MOV       A,R2
   \   000009   90....       MOV       DPTR,#_NIB
   \   00000C   F0           MOVX      @DPTR,A
    391          
    392            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000D   90....       MOV       DPTR,#_NIB + 17
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    393            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000013   90....       MOV       DPTR,#_NIB + 4
   \   000016   7414         MOV       A,#0x14
   \   000018   F0           MOVX      @DPTR,A
    394          
    395          #if ( NWK_MODE == NWK_MODE_MESH )
    396            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000019   90....       MOV       DPTR,#_NIB + 40
   \   00001C   740F         MOV       A,#0xf
   \   00001E   F0           MOVX      @DPTR,A
    397            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001F   A3           INC       DPTR
   \   000020   F0           MOVX      @DPTR,A
    398          #endif
    399          
    400            // BROADCAST SETTINGS:
    401            // *******************
    402            //   Broadcast Delivery Time
    403            //     - set to multiples of 100ms
    404            //     - should be 500ms more than the retry time
    405            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    406            //   Passive Ack Timeout
    407            //     - set to multiples of 100ms
    408            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000021   90....       MOV       DPTR,#zgBcastDeliveryTime
   \   000024   E0           MOVX      A,@DPTR
   \   000025   90....       MOV       DPTR,#_NIB + 7
   \   000028   F0           MOVX      @DPTR,A
    409            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000029   90....       MOV       DPTR,#zgPassiveAckTimeout
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   90....       MOV       DPTR,#_NIB + 1
   \   000030   F0           MOVX      @DPTR,A
    410            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000031   90....       MOV       DPTR,#zgMaxBcastRetires
   \   000034   E0           MOVX      A,@DPTR
   \   000035   90....       MOV       DPTR,#_NIB + 2
   \   000038   F0           MOVX      @DPTR,A
    411          
    412            _NIB.ReportConstantCost = 0;
   \   000039   90....       MOV       DPTR,#_NIB + 8
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
    413            _NIB.RouteDiscRetries = 0;
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
    414            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000040   90....       MOV       DPTR,#_NIB + 11
   \   000043   04           INC       A
   \   000044   F0           MOVX      @DPTR,A
    415            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000045   90....       MOV       DPTR,#_NIB + 104
   \   000048   F0           MOVX      @DPTR,A
    416          
    417            if ( ZG_SECURE_ENABLED )
    418            {
    419              _NIB.SecurityLevel = SECURITY_LEVEL;
   \   000049   90....       MOV       DPTR,#_NIB + 12
   \   00004C   7405         MOV       A,#0x5
   \   00004E   F0           MOVX      @DPTR,A
    420            }
    421            else
    422            {
    423              _NIB.SecurityLevel = 0;
    424            }
    425          
    426            _NIB.SymLink = TRUE;
   \   00004F   A3           INC       DPTR
   \   000050   7401         MOV       A,#0x1
   \   000052   F0           MOVX      @DPTR,A
    427          
    428            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000053   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000056   E0           MOVX      A,@DPTR
   \   000057   90....       MOV       DPTR,#_NIB + 14
   \   00005A   F0           MOVX      @DPTR,A
    429          
    430            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   00005B   90....       MOV       DPTR,#zgIndirectMsgTimeout
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   90....       MOV       DPTR,#_NIB + 15
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   E4           CLR       A
   \   000065   F0           MOVX      @DPTR,A
    431          
    432            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000066   90....       MOV       DPTR,#zgRouteDiscoveryTime
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   90....       MOV       DPTR,#_NIB + 18
   \   00006D   F0           MOVX      @DPTR,A
    433            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006E   90....       MOV       DPTR,#zgRouteExpiryTime
   \   000071   E0           MOVX      A,@DPTR
   \   000072   90....       MOV       DPTR,#_NIB + 19
   \   000075   12....       LCALL     ?Subroutine1 & 0xFFFF
    434          
    435            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    436            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000078   A3           INC       DPTR
   \   000079   E4           CLR       A
   \   00007A   12....       LCALL     ?Subroutine1 & 0xFFFF
    437            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    438            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   00007D                ; Setup parameters for call to function osal_memset
   \   00007D   7C08         MOV       R4,#0x8
   \   00007F   7D00         MOV       R5,#0x0
   \   000081   7900         MOV       R1,#0x0
   \   000083   7A..         MOV       R2,#(_NIB + 25) & 0xff
   \   000085   7B..         MOV       R3,#((_NIB + 25) >> 8) & 0xff
   \   000087   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    439            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   00008A   90....       MOV       DPTR,#_NIB + 33
   \   00008D   74FE         MOV       A,#-0x2
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   04           INC       A
   \   000092   F0           MOVX      @DPTR,A
    440          
    441            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   000093                ; Setup parameters for call to function sAddrExtCpy
   \   000093   7C..         MOV       R4,#zgExtendedPANID & 0xff
   \   000095   7D..         MOV       R5,#(zgExtendedPANID >> 8) & 0xff
   \   000097   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   000099   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00009B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    442          
    443            _NIB.nwkKeyLoaded = FALSE;
   \   00009E   90....       MOV       DPTR,#_NIB + 61
   \   0000A1   E4           CLR       A
   \   0000A2   F0           MOVX      @DPTR,A
    444          
    445            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000A3   90....       MOV       DPTR,#_NIB + 98
   \   0000A6   740F         MOV       A,#0xf
   \   0000A8   F0           MOVX      @DPTR,A
    446            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000A9   A3           INC       DPTR
   \   0000AA   7403         MOV       A,#0x3
   \   0000AC   F0           MOVX      @DPTR,A
    447          
    448            //MTO and source routing
    449            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000AD   90....       MOV       DPTR,#zgConcentratorDiscoveryTime
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   90....       MOV       DPTR,#_NIB + 102
   \   0000B4   F0           MOVX      @DPTR,A
    450            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000B5   90....       MOV       DPTR,#zgConcentratorEnable
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   90....       MOV       DPTR,#_NIB + 101
   \   0000BC   F0           MOVX      @DPTR,A
    451            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000BD   90....       MOV       DPTR,#zgConcentratorRadius
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   90....       MOV       DPTR,#_NIB + 103
   \   0000C4   F0           MOVX      @DPTR,A
    452          
    453          #if defined ( ZIGBEEPRO )
    454            _NIB.nwkUseMultiCast = MULTICAST_ENABLED;
   \   0000C5   90....       MOV       DPTR,#_NIB + 100
   \   0000C8   7401         MOV       A,#0x1
   \   0000CA   F0           MOVX      @DPTR,A
    455          #else
    456            _NIB.nwkUseMultiCast = FALSE;
    457          #endif
    458          
    459          #if defined ( NV_RESTORE )
    460            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    461                               &_NIB.nwkManagerAddr ) != SUCCESS )
   \   0000CB                ; Setup parameters for call to function osal_nv_read
   \   0000CB   75....       MOV       ?V0,#(_NIB + 105) & 0xff
   \   0000CE   75....       MOV       ?V1,#((_NIB + 105) >> 8) & 0xff
   \   0000D1   78..         MOV       R0,#?V0
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D6   75..02       MOV       ?V0,#0x2
   \   0000D9   75..00       MOV       ?V1,#0x0
   \   0000DC   78..         MOV       R0,#?V0
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E1   7C00         MOV       R4,#0x0
   \   0000E3   7D00         MOV       R5,#0x0
   \   0000E5   7A89         MOV       R2,#-0x77
   \   0000E7   7B00         MOV       R3,#0x0
   \   0000E9   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000EC   7404         MOV       A,#0x4
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV       A,R1
   \   0000F2   6007         JZ        ??NIB_init_0
    462          #endif
    463            {
    464              _NIB.nwkManagerAddr = 0x0000;
   \   0000F4   90....       MOV       DPTR,#_NIB + 105
   \   0000F7   E4           CLR       A
   \   0000F8   F0           MOVX      @DPTR,A
   \   0000F9   A3           INC       DPTR
   \   0000FA   F0           MOVX      @DPTR,A
    465            }
    466          
    467            _NIB.nwkUpdateId = 0;
   \                     ??NIB_init_0:
   \   0000FB   90....       MOV       DPTR,#_NIB + 109
   \   0000FE   E4           CLR       A
   \   0000FF   F0           MOVX      @DPTR,A
    468            _NIB.nwkTotalTransmissions = 0;
   \   000100   90....       MOV       DPTR,#_NIB + 107
   \   000103   F0           MOVX      @DPTR,A
   \   000104   A3           INC       DPTR
   \   000105   F0           MOVX      @DPTR,A
    469          }
   \   000106                REQUIRE ?Subroutine0
   \   000106                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   74FE         MOV       A,#-0x2
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   04           INC       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    470          
    471          /*********************************************************************
    472           * @fn       nwk_Status()
    473           *
    474           * @brief
    475           *
    476           *   Status report.
    477           *
    478           * @param   statusCode
    479           * @param   statusValue
    480           *
    481           * @return  none
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    484          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    485          #if defined ( LCD_SUPPORTED )
    486            switch ( statusCode )
    487            {
    488              case NWK_STATUS_COORD_ADDR:
    489                if ( ZSTACK_ROUTER_BUILD )
    490                {
    491                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
    492                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    493                  BuzzerControl( BUZZER_BLIP );
    494                }
    495                break;
    496          
    497              case NWK_STATUS_ROUTER_ADDR:
    498                if ( ZSTACK_ROUTER_BUILD )
    499                {
    500                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
    501                }
    502                break;
    503          
    504              case NWK_STATUS_ORPHAN_RSP:
    505                if ( ZSTACK_ROUTER_BUILD )
    506                {
    507                  if ( statusValue == ZSuccess )
    508                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
    509                  else
    510                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
    511                }
    512                break;
    513          
    514              case NWK_ERROR_ASSOC_RSP:
    515                if ( ZSTACK_ROUTER_BUILD )
    516                {
    517                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
    518                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    519                }
    520                break;
    521          
    522              case NWK_STATUS_ED_ADDR:
    523                if ( ZSTACK_END_DEVICE_BUILD )
    524                {
    525                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    526                }
    527                break;
    528          
    529              case NWK_STATUS_PARENT_ADDR:
    530                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
    531                break;
    532          
    533              case NWK_STATUS_ASSOC_CNF:
    534                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
    535                break;
    536          
    537              case NWK_ERROR_ASSOC_CNF_DENIED:
    538                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
    539                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    540                break;
    541          
    542              case NWK_ERROR_ENERGY_SCAN_FAILED:
    543                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
    544                break;
    545            }
    546          #endif
    547          }
   \   000000   02....       LJMP      ?BRET
    548          
    549          /*********************************************************************
    550           * @fn      nwk_adjustDelay()
    551           *
    552           * @brief   Adjust the retransmit delay. Modify this function to
    553           *          change the default delay behavior.
    554           *
    555           * @param   existingDelay - default delay
    556           * @param   confirmStatus - data confirm status
    557           * @param   bufOptions - network buffer options
    558           *
    559           * @return  delay value - this number is the number of
    560           *          network event ticks (~2ms).
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          uint16 nwk_adjustDelay( uint16 existingDelay, uint8 confirmStatus, uint16 bufOptions )
   \                     nwk_adjustDelay:
    563          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    564            uint16 result = existingDelay;
   \   000007   EA           MOV       A,R2
   \   000008   F8           MOV       R0,A
   \   000009   EB           MOV       A,R3
   \   00000A   F9           MOV       R1,A
    565            uint16 mask = 0;       // Random mask
    566            uint16 startValue = 0; // Start value
    567          
    568            switch ( confirmStatus )
   \   00000B   EE           MOV       A,R6
   \   00000C   241F         ADD       A,#0x1f
   \   00000E   6004         JZ        ??nwk_adjustDelay_0
   \   000010   24F0         ADD       A,#-0x10
   \   000012   7013         JNZ       ??nwk_adjustDelay_1
    569            {
    570              case ZMacTransactionOverFlow:
    571              case ZMacChannelAccessFailure:
    572                if ( bufOptions & (HANDLE_DELAY | HANDLE_HI_DELAY) )
   \                     ??nwk_adjustDelay_0:
   \   000014   EC           MOV       A,R4
   \   000015   5430         ANL       A,#0x30
   \   000017   600E         JZ        ??nwk_adjustDelay_1
    573                {
    574                  // Delay 4 - 18 ms
    575                  mask = 0x0007;
    576                  startValue = 2;
    577                }
    578                break;
    579          
    580              case ZNwkNoRoute:
    581              case ZMAC_NO_RESOURCES:
    582              case ZMacNoACK:
    583              default:
    584                // leave default delay
    585                mask = 0;
    586                startValue = 0;
    587                break;
    588            }
    589          
    590            if ( (mask > 0) && (startValue > 0) )
    591            {
    592              result = (osal_rand() & mask) + startValue;
   \   000019                ; Setup parameters for call to function osal_rand
   \   000019   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00001C   EA           MOV       A,R2
   \   00001D   5407         ANL       A,#0x7
   \   00001F   7900         MOV       R1,#0x0
   \   000021   2402         ADD       A,#0x2
   \   000023   F8           MOV       R0,A
   \   000024   5001         JNC       ??nwk_adjustDelay_1
   \   000026   09           INC       R1
    593            }
    594          
    595            return ( result );
   \                     ??nwk_adjustDelay_1:
   \   000027   E8           MOV       A,R0
   \   000028   FA           MOV       R2,A
   \   000029   E9           MOV       A,R1
   \   00002A   FB           MOV       R3,A
   \   00002B   80..         SJMP      ?Subroutine0
    596          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LQI>`:
   \   000000   06           DB 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
   \   000000   12           DB 18

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_globals_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NIB_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_Status::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_adjustDelay::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_adjustDelay
    597          
    598          /*********************************************************************
    599          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     14   NIB_init
        0     10   -> osal_memset
        0     14   -> osal_nv_read
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0      0   nwk_Status
      0     10   nwk_adjustDelay
        0     10   -> osal_rand
      2      0   nwk_globals_init
        2      0   -> AddrMgrInit
        2      0   -> NwkFreqAgilityInit
        2      0   -> NwkInitChildAging


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST
       1  ?<Initializer for gMIN_TREE_LQI>
       5  ?Subroutine0
       9  ?Subroutine1
     588  AssociatedDevList
      56  BindingTable
       2  Cskip
       1  CskipChldrn
       1  CskipRtrs
     262  NIB_init
       6  NIB_init::?relay
      90  apsEndDeviceBroadcastTable
      36  bcastHoldAckMask
       9  bcastHoldHandle
      72  bcastTable
      16  defaultKey
      16  defaultTCLinkKey
       1  gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
       1  gAPS_MAX_GROUPS
       2  gBIND_REC_SIZE
       1  gDEFAULT_ROUTE_REQUEST_RADIUS
       1  gDEF_NWK_RADIUS
       1  gGOOD_LINK_COST
       1  gLINK_DOWN_TRIGGER
       2  gLINK_STATUS_JITTER_MASK
       1  gMAX_BCAST
       1  gMAX_BINDING_CLUSTER_IDS
       1  gMAX_BROADCAST_QUEUED
       1  gMAX_NEIGHBOR_ENTRIES
       1  gMAX_NOT_MYCHILD_DEVICES
       4  gMAX_NWK_FRAMECOUNTER_CHANGES
       1  gMAX_PASSIVE_ACK_CNT
       1  gMAX_RREQ_ENTRIES
       1  gMAX_RTG_ENTRIES
       1  gMAX_RTG_SRC_ENTRIES
       1  gMAX_SOURCE_ROUTE
       1  gMIN_TREE_LQI
       1  gMTO_ROUTE_EXPIRY_TIME
       2  gMTO_RREQ_LIMIT_TIME
       1  gNWK_CONFLICTED_ADDR_EXPIRY_TIME
       1  gNWK_FREQ_AGILITY_ALL_MAC_ERRS
       1  gNWK_INDIRECT_CNT_RTG_TMR
       1  gNWK_INDIRECT_MSG_MAX_ALL
       1  gNWK_INDIRECT_MSG_MAX_PER
       1  gNWK_MAX_BINDING_ENTRIES
       1  gNWK_MAX_DATABUFS_CONFIRMED
       1  gNWK_MAX_DATABUFS_SCHEDULED
       1  gNWK_MAX_DATABUFS_TOTAL
       1  gNWK_MAX_DATABUFS_WAITING
       1  gNWK_MAX_DEVICE_LIST
       1  gNWK_MAX_SLEEPING_END_DEVICES
       2  gNWK_MIN_ENDDEVICE_CHILDREN
       2  gNWK_MIN_ROUTER_CHILDREN
       1  gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
     368  neighborTable
      20  notMyChildList
       3  nwk_Status
       6  nwk_Status::?relay
      45  nwk_adjustDelay
       6  nwk_adjustDelay::?relay
      42  nwk_globals_init
       6  nwk_globals_init::?relay
      64  rtDiscTable
      24  rtgSrcRelayList
      72  rtgSrcTable
     280  rtgTable
      60  timeoutValue

 
   366 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
   135 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
 1 683 bytes in segment XDATA_Z
 
   161 bytes of CODE     memory
   366 bytes of HUGECODE memory
 1 685 bytes of XDATA    memory

Errors: none
Warnings: none
