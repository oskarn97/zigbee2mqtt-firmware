###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:03
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530ZNP\hal_sleep.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW7F.tmp ("C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530ZNP\hal_sleep.c" -D
#        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\hal_sleep.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\hal_sleep.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\hal\target\CC2530ZNP\hal_sleep.c
      1          /**************************************************************************************************
      2            Filename:       hal_sleep.c
      3            Revised:        $Date: 2012-03-27 13:03:05 -0700 (Tue, 27 Mar 2012) $
      4            Revision:       $Revision: 29907 $
      5          
      6            Description:    This module contains the HAL power management procedures for the CC2530.
      7          
      8          
      9            Copyright 2006-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          #include "hal_types.h"
     45          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x87
   \   unsigned char volatile __sfr PCON
   \                     PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x96
   \   unsigned char volatile __sfr ST1
   \                     ST1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x97
   \   unsigned char volatile __sfr ST2
   \                     ST2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr STLOAD
   \                     STLOAD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1
     46          #include "hal_board.h"
     47          #include "hal_sleep.h"
     48          #include "hal_led.h"
     49          #include "hal_key.h"
     50          #include "mac_api.h"
     51          #include "OSAL.h"
     52          #include "OSAL_Timers.h"
     53          #include "OSAL_Tasks.h"
     54          #include "OSAL_PwrMgr.h"
     55          #include "OnBoard.h"
     56          #include "hal_drivers.h"
     57          #include "hal_assert.h"
     58          #include "mac_mcu.h"
     59          #include "ZGlobals.h"
     60          #include "hal_uart.h"
     61          
     62          #if !defined ZG_BUILD_ENDDEVICE_TYPE
     63          #define ZG_BUILD_ENDDEVICE_TYPE FALSE
     64          #endif
     65          
     66          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
     67          #include "nwk_globals.h"
     68          #include "ZGlobals.h"
     69          #endif
     70          
     71          /* ------------------------------------------------------------------------------------------------
     72           *                                           Macros
     73           * ------------------------------------------------------------------------------------------------
     74           */
     75          
     76          /* POWER CONSERVATION DEFINITIONS
     77           * Sleep mode H/W definitions (enabled with POWER_SAVING compile option)
     78           */
     79          #define CC2530_PM0            0  /* PM0, Clock oscillators on, voltage regulator on */
     80          #define CC2530_PM1            1  /* PM1, 32.768 kHz oscillators on, voltage regulator on */
     81          #define CC2530_PM2            2  /* PM2, 32.768 kHz oscillators on, voltage regulator off */
     82          #define CC2530_PM3            3  /* PM3, All clock oscillators off, voltage regulator off */
     83          
     84          /* HAL power management mode is set according to the power management state. The default
     85           * setting is HAL_SLEEP_OFF. The actual value is tailored to different HW platform. Both
     86           * HAL_SLEEP_TIMER and HAL_SLEEP_DEEP selections will:
     87           *   1. turn off the system clock, and
     88           *   2. halt the MCU.
     89           * HAL_SLEEP_TIMER can be woken up by sleep timer interrupt, I/O interrupt and reset.
     90           * HAL_SLEEP_DEEP can be woken up by I/O interrupt and reset.
     91           */
     92          #define HAL_SLEEP_OFF         CC2530_PM0
     93          #define HAL_SLEEP_TIMER       CC2530_PM2
     94          #define HAL_SLEEP_DEEP        CC2530_PM3
     95          
     96          /* MAX_SLEEP_TIME calculation:
     97           *   Sleep timer maximum duration = 0xFFFF7F / 32768 Hz = 511.996 seconds
     98           *   Round it to 510 seconds or 510000 ms
     99           */
    100          #define MAX_SLEEP_TIME                   510000             /* maximum time to sleep allowed by ST */
    101          #define TICKS_SUBTRACTED                 2
    102          
    103          /* 
    104           * Choosing value to be lower than MAC_BACKOFF_TIMER_DEFAULT_NONBEACON_ROLLOVER
    105           *  The unit is in ms. The back off timer rollover should be greater 
    106           * than the value below
    107           */ 
    108          #define MAX_SLEEP_LOOP_TIME              0x510000           /* ~84 minutes */ 
    109          #define TICKS_SUBTRACTED                 2
    110          
    111          /* minimum time to sleep, this macro is to:
    112           * 1. avoid thrashing in-and-out of sleep with short OSAL timer (~2ms)
    113           * 2. define minimum safe sleep period
    114           */
    115          #if !defined (PM_MIN_SLEEP_TIME)
    116          #define PM_MIN_SLEEP_TIME                2                  /* default to minimum safe sleep time minimum CAP */
    117          #endif
    118          
    119          /* The PCON instruction must be 4-byte aligned. The following code may cause excessive power
    120           * consumption if not aligned. See linker file ".xcl" for actual placement.
    121           */
    122          #pragma location = "SLEEP_CODE"
    123          void halSetSleepMode(void);
    124          
    125          /* This value is used to adjust the sleep timer compare value such that the sleep timer
    126           * compare takes into account the amount of processing time spent in function halSleep().
    127           * The first value is determined by measuring the number of sleep timer ticks it from
    128           * the beginning of the function to entering sleep mode or more precisely, when
    129           * MAC_PwrNextTimeout() is called.  The second value is determined by measuring the number
    130           * of sleep timer ticks from exit of sleep mode to the call to MAC_PwrOnReq() where the
    131           * MAC timer is restarted.
    132           */
    133          #define HAL_SLEEP_ADJ_TICKS   (11 + 12)
    134          
    135          #ifndef HAL_SLEEP_DEBUG_POWER_MODE
    136          /* set CC2530 power mode; always use PM2 */
    137          #define HAL_SLEEP_PREP_POWER_MODE(mode)     st( SLEEPCMD &= ~PMODE; /* clear mode bits */    \
    138                                                          SLEEPCMD |= mode;   /* set mode bits   */    \
    139                                                          while (!(STLOAD & LDRDY));                   \
    140                                                          halSleepPconValue = PCON_IDLE;               \
    141                                                        )
    142          #define HAL_SLEEP_SET_POWER_MODE()          halSetSleepMode()
    143          #else
    144          /* Debug: don't set power mode, just block until sleep timer interrupt */
    145          #define HAL_SLEEP_PREP_POWER_MODE(mode)     /* nothing */
    146          #define HAL_SLEEP_SET_POWER_MODE()          st( while(halSleepInt == FALSE); \
    147                                                          halSleepInt = FALSE;         \
    148                                                          HAL_DISABLE_INTERRUPTS();    \
    149                                                        )
    150          #endif
    151          
    152          /* sleep and external interrupt port masks */
    153          #define STIE_BV                             BV(5)
    154          #define P0IE_BV                             BV(5)
    155          #define P1IE_BV                             BV(4)
    156          #define P2IE_BV                             BV(1)
    157          
    158          /* sleep timer interrupt control */
    159          #define HAL_SLEEP_TIMER_ENABLE_INT()        st(IEN0 |= STIE_BV;)     /* enable sleep timer interrupt */
    160          #define HAL_SLEEP_TIMER_DISABLE_INT()       st(IEN0 &= ~STIE_BV;)    /* disable sleep timer interrupt */
    161          #define HAL_SLEEP_TIMER_CLEAR_INT()         st(STIF = 0;)            /* clear sleep interrupt flag */
    162          
    163          /* backup interrupt enable registers before sleep */
    164          #define HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2) st(ien0  = IEN0;    /* backup IEN0 register */ \
    165                                                                       ien1  = IEN1;    /* backup IEN1 register */ \
    166                                                                       ien2  = IEN2;    /* backup IEN2 register */ \
    167                                                                       IEN0 &= STIE_BV; /* disable IEN0 except STIE */ \
    168                                                                       IEN1 &= P0IE_BV; /* disable IEN1 except P0IE */ \
    169                                                                       IEN2 &= (P1IE_BV|P2IE_BV);) /* disable IEN2 except P1IE, P2IE */
    170          
    171          /* restore interrupt enable registers before sleep */
    172          #define HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2) st(IEN0 = ien0;   /* restore IEN0 register */ \
    173                                                            IEN1 = ien1;   /* restore IEN1 register */ \
    174                                                            IEN2 = ien2;)  /* restore IEN2 register */
    175          
    176          /* convert msec to 320 usec units with round */
    177          #define HAL_SLEEP_MS_TO_320US(ms)           (((((uint32) (ms)) * 100) + 31) / 32)
    178          
    179          /* for optimized indexing of uint32's */
    180          #if HAL_MCU_LITTLE_ENDIAN()
    181          #define UINT32_NDX0   0
    182          #define UINT32_NDX1   1
    183          #define UINT32_NDX2   2
    184          #define UINT32_NDX3   3
    185          #else
    186          #define UINT32_NDX0   3
    187          #define UINT32_NDX1   2
    188          #define UINT32_NDX2   1
    189          #define UINT32_NDX3   0
    190          #endif
    191          
    192          /* ------------------------------------------------------------------------------------------------
    193           *                                        Global Variables
    194           * ------------------------------------------------------------------------------------------------
    195           */
    196          /* PCON register value to program when setting power mode */

   \                                 In  segment DATA_I, align 1, keep-with-next
    197          volatile __data uint8 halSleepPconValue = PCON_IDLE;
   \                     halSleepPconValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for halSleepPconValue>`
   \   000001                REQUIRE __INIT_DATA_I
    198          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    199          static uint32 maxSleepLoopTime =  HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME);
   \                     maxSleepLoopTime:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for maxSleepLoopTime>`
   \   000004                REQUIRE __INIT_XDATA_I
    200          
    201          /* ------------------------------------------------------------------------------------------------
    202           *                                        Local Variables
    203           * ------------------------------------------------------------------------------------------------
    204           */
    205          
    206          /* HAL power management mode is set according to the power management state.
    207           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static uint8 halPwrMgtMode = HAL_SLEEP_OFF;
   \                     halPwrMgtMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209          
    210          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    211          static bool halSleepInt = FALSE;
    212          #endif
    213          
    214          /* ------------------------------------------------------------------------------------------------
    215           *                                      Function Prototypes
    216           * ------------------------------------------------------------------------------------------------
    217           */
    218          
    219          void halSleepSetTimer(uint32 timeout);
    220          
    221          /**************************************************************************************************
    222           * @fn          halSetSleepMode
    223           *
    224           * @brief       This function put the CC2530 to sleep. The PCON instruction must be 4-byte aligned.
    225           *              The following code may cause excessive power consumption if not aligned. See linker
    226           *              file ".xcl" for actual placement.
    227           *
    228           * input parameters
    229           *
    230           * @param       None.
    231           *
    232           * output parameters
    233           *
    234           * None.
    235           *
    236           * @return      None.
    237           **************************************************************************************************
    238           */

   \                                 In  segment SLEEP_CODE, align 1, keep-with-next
    239          void halSetSleepMode(void)
   \                     halSetSleepMode:
    240          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    241            PCON = halSleepPconValue;
   \   000000   85..87       MOV       0x87,halSleepPconValue
    242            asm("NOP");
   \   000003   00           NOP
    243          }
   \   000004   02....       LJMP      ?BRET
   \   000007                REQUIRE PCON
    244          
    245          /**************************************************************************************************
    246           * @fn          halSetMaxSleepLoopTime
    247           *
    248           * @brief       This function is to used to setup the maximum sleep loop time. This sleep loop time 
    249           *              should be lesser than T2 rollover so that a maximum of only one rollover occurs 
    250           *              when cc2530 is in sleep. This function should be called whenever rolloverTime is 
    251           *              changed using the function macBackoffTimerSetRollover(macTimerRollover);
    252           *
    253           * input parameters
    254           *
    255           * @param       rolloverTime.
    256           *
    257           * output parameters
    258           *
    259           * None.
    260           *
    261           * @return      None.
    262           **************************************************************************************************
    263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    264          void halSetMaxSleepLoopTime(uint32 rolloverTime)
   \                     halSetMaxSleepLoopTime:
    265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    266            if( rolloverTime > HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME) )
    267            {
    268              maxSleepLoopTime = HAL_SLEEP_MS_TO_320US(MAX_SLEEP_TIME);
    269            }
    270            maxSleepLoopTime = (rolloverTime - TICKS_SUBTRACTED);
   \   00000D   90....       MOV       DPTR,#__Constant_fffffffe
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_ADD_X
   \   000015   90....       MOV       DPTR,#maxSleepLoopTime
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?L_MOV_TO_X
    271          }
   \   00001D   7F04         MOV       R7,#0x4
   \   00001F   02....       LJMP      ?BANKED_LEAVE_XDATA
    272          
    273          /**************************************************************************************************
    274           * @fn          halSleep
    275           *
    276           * @brief       This function is called from the OSAL task loop using and existing OSAL
    277           *              interface.  It sets the low power mode of the MAC and the CC2530.
    278           *
    279           * input parameters
    280           *
    281           * @param       osal_timeout - Next OSAL timer timeout.
    282           *
    283           * output parameters
    284           *
    285           * None.
    286           *
    287           * @return      None.
    288           **************************************************************************************************
    289           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    290          void halSleep( uint32 osal_timeout )
   \                     halSleep:
    291          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V6,R4
   \   00000B   8D..         MOV       ?V7,R5
    292            uint32        timeout;
    293            uint32        macTimeout = 0;
    294          
    295            /* get next OSAL timer expiration converted to 320 usec units */
    296            timeout = HAL_SLEEP_MS_TO_320US(osal_timeout);
   \   00000D   90....       MOV       DPTR,#__Constant_64
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?L_MOV_X
   \   000015   78..         MOV       R0,#?V4
   \   000017   79..         MOV       R1,#?V0
   \   000019   12....       LCALL     ?L_MUL
   \   00001C   90....       MOV       DPTR,#__Constant_1f
   \   00001F   78..         MOV       R0,#?V4
   \   000021   12....       LCALL     ?L_ADD_X
   \   000024   7405         MOV       A,#0x5
   \   000026   78..         MOV       R0,#?V4
   \   000028   12....       LCALL     ?UL_SHR
    297            if (timeout == 0)
   \   00002B   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00002E   7019         JNZ       ??halSleep_0
    298            {
    299              timeout = MAC_PwrNextTimeout();
   \   000030                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000030   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   000033   8A..         MOV       ?V4,R2
   \   000035   8B..         MOV       ?V5,R3
   \   000037   8C..         MOV       ?V6,R4
   \   000039   8D..         MOV       ?V7,R5
    300            }
    301            else
    302            {
    303              /* get next MAC timer expiration */
    304              macTimeout = MAC_PwrNextTimeout();
    305          
    306              /* get lesser of two timeouts */
    307              if ((macTimeout != 0) && (macTimeout < timeout))
    308              {
    309                timeout = macTimeout;
    310              }
    311            }
    312          
    313            /* HAL_SLEEP_PM2 is entered only if the timeout is zero and
    314             * the device is a stimulated device.
    315             */
    316            halPwrMgtMode = (timeout == 0) ? HAL_SLEEP_DEEP : HAL_SLEEP_TIMER;
   \   00003B   EA           MOV       A,R2
   \   00003C   12....       LCALL     ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00003F   702D         JNZ       ??halSleep_1
   \   000041   90....       MOV       DPTR,#halPwrMgtMode
   \   000044   7403         MOV       A,#0x3
   \   000046   F0           MOVX      @DPTR,A
   \   000047   803D         SJMP      ??halSleep_2
   \                     ??halSleep_0:
   \   000049                ; Setup parameters for call to function MAC_PwrNextTimeout
   \   000049   12....       LCALL     `??MAC_PwrNextTimeout::?relay`; Banked call to: MAC_PwrNextTimeout
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   \   000050   8C..         MOV       ?V2,R4
   \   000052   8D..         MOV       ?V3,R5
   \   000054   EA           MOV       A,R2
   \   000055   45..         ORL       A,?V1
   \   000057   45..         ORL       A,?V2
   \   000059   45..         ORL       A,?V3
   \   00005B   6011         JZ        ??halSleep_1
   \   00005D   78..         MOV       R0,#?V4
   \   00005F   79..         MOV       R1,#?V0
   \   000061   12....       LCALL     ?UL_GT
   \   000064   5008         JNC       ??halSleep_1
   \   000066   8A..         MOV       ?V4,R2
   \   000068   8B..         MOV       ?V5,R3
   \   00006A   8C..         MOV       ?V6,R4
   \   00006C   8D..         MOV       ?V7,R5
   \                     ??halSleep_1:
   \   00006E   90....       MOV       DPTR,#halPwrMgtMode
   \   000071   7402         MOV       A,#0x2
   \   000073   F0           MOVX      @DPTR,A
    317          
    318            /* DEEP sleep can only be entered when zgPollRate == 0.
    319             * This is to eliminate any possibility of entering PM3 between
    320             * two network timers.
    321             */
    322          #if ZG_BUILD_ENDDEVICE_TYPE && defined (NWK_AUTO_POLL)
    323            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    324                (timeout == 0 && zgPollRate == 0))
   \   000074   90....       MOV       DPTR,#__Constant_8
   \   000077   78..         MOV       R0,#?V4
   \   000079   12....       LCALL     ?UL_GE_X
   \   00007C   4017         JC        ??halSleep_3
   \   00007E   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000081   6003         JZ        $+5
   \   000083   02....       LJMP      ??halSleep_4 & 0xFFFF
   \                     ??halSleep_2:
   \   000086   90....       MOV       DPTR,#zgPollRate
   \   000089   12....       LCALL     ?XLOAD_R0123
   \   00008C   E8           MOV       A,R0
   \   00008D   49           ORL       A,R1
   \   00008E   4A           ORL       A,R2
   \   00008F   4B           ORL       A,R3
   \   000090   6003         JZ        $+5
   \   000092   02....       LJMP      ??halSleep_4 & 0xFFFF
    325          #else
    326            if ((timeout > HAL_SLEEP_MS_TO_320US(PM_MIN_SLEEP_TIME)) ||
    327                (timeout == 0))
    328          #endif
    329            {
    330              halIntState_t ien0, ien1, ien2;
    331          
    332              HAL_ASSERT(HAL_INTERRUPTS_ARE_ENABLED());
   \                     ??halSleep_3:
   \   000095   A2AF         MOV       C,0xa8.7
   \   000097   4003         JC        ??halSleep_5
   \   000099                ; Setup parameters for call to function halAssertHandler
   \   000099   12....       LCALL     `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    333              HAL_DISABLE_INTERRUPTS();
   \                     ??halSleep_5:
   \   00009C   C2AF         CLR       0xa8.7
    334          
    335              /* always use "deep sleep" to turn off radio VREG on CC2530 */
    336              if (halSleepPconValue != 0 && MAC_PwrOffReq(MAC_PWR_SLEEP_DEEP) == MAC_SUCCESS)
   \   00009E   E5..         MOV       A,halSleepPconValue
   \   0000A0   7003         JNZ       $+5
   \   0000A2   02....       LJMP      ??halSleep_6 & 0xFFFF
   \   0000A5                ; Setup parameters for call to function MAC_PwrOffReq
   \   0000A5   7902         MOV       R1,#0x2
   \   0000A7   12....       LCALL     `??MAC_PwrOffReq::?relay`; Banked call to: MAC_PwrOffReq
   \   0000AA   E9           MOV       A,R1
   \   0000AB   6003         JZ        $+5
   \   0000AD   02....       LJMP      ??halSleep_6 & 0xFFFF
    337              {
    338                /* The PCON value is not zero. There is no interrupt overriding the 
    339                 * sleep decision. Also, the radio granted the sleep request.
    340                 */
    341          
    342          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    343                /* get peripherals ready for sleep */
    344                HalKeyEnterSleep();
    345          #endif
    346          
    347          #ifdef HAL_SLEEP_DEBUG_LED
    348                HAL_TURN_OFF_LED3();
    349          #else
    350                /* use this to turn LEDs off during sleep */
    351                HalLedEnterSleep();
   \   0000B0                ; Setup parameters for call to function HalLedEnterSleep
   \   0000B0   12....       LCALL     `??HalLedEnterSleep::?relay`; Banked call to: HalLedEnterSleep
    352          #endif
    353          
    354                if(timeout > maxSleepLoopTime)
   \   0000B3   90....       MOV       DPTR,#maxSleepLoopTime
   \   0000B6   78..         MOV       R0,#?V4
   \   0000B8   12....       LCALL     ?UL_GT_X
   \   0000BB   5008         JNC       ??halSleep_7
    355                {
    356                  timeout = maxSleepLoopTime;
   \   0000BD   90....       MOV       DPTR,#maxSleepLoopTime
   \   0000C0   78..         MOV       R0,#?V4
   \   0000C2   12....       LCALL     ?L_MOV_X
    357                }  
    358                
    359                do
    360                {
    361                  /* enable sleep timer interrupt */
    362                  if(timeout != 0)
   \                     ??halSleep_7:
   \   0000C5   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000C8   6038         JZ        ??halSleep_8
    363                  { 
    364                    if (timeout > HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ))
   \   0000CA   90....       MOV       DPTR,#__Constant_185197
   \   0000CD   78..         MOV       R0,#?V4
   \   0000CF   12....       LCALL     ?UL_GE_X
   \   0000D2   5013         JNC       ??halSleep_9
    365                    {
    366                      timeout -= HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME );
   \   0000D4   90....       MOV       DPTR,#__Constant_ffe7ae6a
   \   0000D7   78..         MOV       R0,#?V4
   \   0000D9   12....       LCALL     ?L_ADD_X
    367                      halSleepSetTimer(HAL_SLEEP_MS_TO_320US( MAX_SLEEP_TIME ));
   \   0000DC                ; Setup parameters for call to function halSleepSetTimer
   \   0000DC   90....       MOV       DPTR,#__Constant_185196
   \   0000DF   12....       LCALL     ?XLOAD_R2345
   \   0000E2   12....       LCALL     `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
   \   0000E5   8017         SJMP      ??halSleep_10
    368                    }
    369                    else
    370                    {
    371                      /* set sleep timer */
    372                      halSleepSetTimer(timeout);
   \                     ??halSleep_9:
   \   0000E7                ; Setup parameters for call to function halSleepSetTimer
   \   0000E7   AA..         MOV       R2,?V4
   \   0000E9   AB..         MOV       R3,?V5
   \   0000EB   AC..         MOV       R4,?V6
   \   0000ED   AD..         MOV       R5,?V7
   \   0000EF   12....       LCALL     `??halSleepSetTimer::?relay`; Banked call to: halSleepSetTimer
    373                      timeout = 0;
   \   0000F2   75..00       MOV       ?V4,#0x0
   \   0000F5   75..00       MOV       ?V5,#0x0
   \   0000F8   75..00       MOV       ?V6,#0x0
   \   0000FB   75..00       MOV       ?V7,#0x0
    374                    }
    375                    
    376                    /* set up sleep timer interrupt */
    377                    HAL_SLEEP_TIMER_CLEAR_INT();
   \                     ??halSleep_10:
   \   0000FE   C2C7         CLR       0xc0.7
    378                    HAL_SLEEP_TIMER_ENABLE_INT();
   \   000100   D2AD         SETB      0xa8.5
    379                  }
    380          
    381          #ifdef HAL_SLEEP_DEBUG_LED
    382                  if (halPwrMgtMode == CC2530_PM1)
    383                  {
    384                    HAL_TURN_ON_LED1();
    385                  }
    386                  else
    387                  {
    388                    HAL_TURN_OFF_LED1();
    389                  }
    390          #endif
    391          
    392                  if (ZNP_CFG1_UART == znpCfg1)
   \                     ??halSleep_8:
   \   000102   90....       MOV       DPTR,#znpCfg1
   \   000105   E0           MOVX      A,@DPTR
   \   000106   7003         JNZ       ??halSleep_11
    393                  {
    394                    HalUARTSuspend();
   \   000108                ; Setup parameters for call to function HalUARTSuspend
   \   000108   12....       LCALL     `??HalUARTSuspend::?relay`; Banked call to: HalUARTSuspend
    395                  }
    396          
    397                  /* Prep CC2530 power mode */
    398                  HAL_SLEEP_PREP_POWER_MODE(halPwrMgtMode);
   \                     ??halSleep_11:
   \   00010B   53BEFC       ANL       0xbe,#0xfc
   \   00010E   90....       MOV       DPTR,#halPwrMgtMode
   \   000111   E0           MOVX      A,@DPTR
   \   000112   42BE         ORL       0xbe,A
   \                     ??halSleep_12:
   \   000114   E5AD         MOV       A,0xad
   \   000116   A2E0         MOV       C,0xE0 /* A   */.0
   \   000118   50FA         JNC       ??halSleep_12
   \   00011A   75..01       MOV       halSleepPconValue,#0x1
    399          
    400                  /* save interrupt enable registers and disable all interrupts */
    401                  HAL_SLEEP_IE_BACKUP_AND_DISABLE(ien0, ien1, ien2);
   \   00011D   85A8..       MOV       ?V0,0xa8+0x0
   \   000120   AFB8         MOV       R7,0xb8+0x0
   \   000122   AE9A         MOV       R6,0x9a+0x0
   \   000124   53A820       ANL       0xa8,#0x20
   \   000127   53B820       ANL       0xb8,#0x20
   \   00012A   539A12       ANL       0x9a,#0x12
    402                  HAL_ENABLE_INTERRUPTS();
   \   00012D   D2AF         SETB      0xa8.7
    403          
    404                  /* set CC2530 power mode, interrupt is disabled after this function
    405                   * Note that an ISR (that could wake up from power mode) which runs
    406                   * between the previous instruction enabling interrupts and before
    407                   * power mode is set would switch the halSleepPconValue so that
    408                   * power mode shall not be entered in such a case. 
    409                   */
    410                  HAL_SLEEP_SET_POWER_MODE();
   \   00012F                ; Setup parameters for call to function halSetSleepMode
   \   00012F   12....       LCALL     `??halSetSleepMode::?relay`; Banked call to: halSetSleepMode
    411          
    412                  /* Disable interrupt immediately */
    413                  HAL_DISABLE_INTERRUPTS();
   \   000132   C2AF         CLR       0xa8.7
    414          
    415                  /* restore interrupt enable registers */
    416                  HAL_SLEEP_IE_RESTORE(ien0, ien1, ien2);
   \   000134   85..A8       MOV       0xa8,?V0
   \   000137   8FB8         MOV       0xb8,R7
   \   000139   8E9A         MOV       0x9a,R6
    417          
    418                  /* disable sleep timer interrupt */
    419                  HAL_SLEEP_TIMER_DISABLE_INT();
   \   00013B   C2AD         CLR       0xa8.5
    420          
    421                  if (ZNP_CFG1_UART == znpCfg1)
   \   00013D   90....       MOV       DPTR,#znpCfg1
   \   000140   E0           MOVX      A,@DPTR
   \   000141   7003         JNZ       ??halSleep_13
    422                  {
    423                    HalUARTResume();
   \   000143                ; Setup parameters for call to function HalUARTResume
   \   000143   12....       LCALL     `??HalUARTResume::?relay`; Banked call to: HalUARTResume
    424                  }
    425          
    426          #ifdef HAL_SLEEP_DEBUG_LED
    427                  HAL_TURN_ON_LED3();
    428          #else
    429                /* use this to turn LEDs back on after sleep */
    430                  HalLedExitSleep();
   \                     ??halSleep_13:
   \   000146                ; Setup parameters for call to function HalLedExitSleep
   \   000146   12....       LCALL     `??HalLedExitSleep::?relay`; Banked call to: HalLedExitSleep
    431          #endif
    432          
    433          #if ((defined HAL_KEY) && (HAL_KEY == TRUE))
    434                  /* handle peripherals */
    435                  if(HalKeyExitSleep())
    436                  {
    437                    break; 
    438                  }
    439          #endif
    440          
    441                } while(timeout != 0);
   \   000149   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00014C   6003         JZ        $+5
   \   00014E   02....       LJMP      ??halSleep_7 & 0xFFFF
    442          
    443                /* power on the MAC; blocks until completion */
    444                MAC_PwrOnReq();
   \   000151                ; Setup parameters for call to function MAC_PwrOnReq
   \   000151   12....       LCALL     `??MAC_PwrOnReq::?relay`; Banked call to: MAC_PwrOnReq
    445          
    446                HAL_ENABLE_INTERRUPTS();
   \   000154   D2AF         SETB      0xa8.7
    447          
    448                /* For CC2530, T2 interrupt won’t be generated when the current count is greater than
    449                 * the comparator. The interrupt is only generated when the current count is equal to
    450                 * the comparator. When the CC2530 is waking up from sleep, there is a small window
    451                 * that the count may be grater than the comparator, therefore, missing the interrupt.
    452                 * This workaround will call the T2 ISR when the current T2 count is greater than the
    453                 * comparator. The problem only occurs when POWER_SAVING is turned on, i.e. the 32KHz
    454                 * drives the chip in sleep and SYNC start is used.
    455                 */
    456                macMcuTimer2OverflowWorkaround();
   \   000156                ; Setup parameters for call to function macMcuTimer2OverflowWorkaround
   \   000156   12....       LCALL     `??macMcuTimer2OverflowWorkaround::?relay`; Banked call to: macMcuTimer2OverflowWorkaround
   \   000159   8002         SJMP      ??halSleep_4
    457              }
    458              else
    459              {
    460                /* An interrupt may have changed the sleep decision. Do not sleep at all. Turn on
    461                 * the interrupt, exit normally, and the next sleep will be allowed.
    462                 */
    463                HAL_ENABLE_INTERRUPTS();
   \                     ??halSleep_6:
   \   00015B   D2AF         SETB      0xa8.7
    464              }
    465            }
    466          }
   \                     ??halSleep_4:
   \   00015D                REQUIRE ?Subroutine0
   \   00015D                REQUIRE _A_IEN0
   \   00015D                REQUIRE _A_IRCON
   \   00015D                REQUIRE SLEEPCMD
   \   00015D                REQUIRE STLOAD
   \   00015D                REQUIRE _A_IEN1
   \   00015D                REQUIRE IEN2
   \   00015D                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E5..         MOV       A,?V4
   \   000002                REQUIRE ??Subroutine2_0
   \   000002                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   45..         ORL       A,?V5
   \   000002   45..         ORL       A,?V6
   \   000004   45..         ORL       A,?V7
   \   000006   22           RET
    467          
    468          /**************************************************************************************************
    469           * @fn          halSleepSetTimer
    470           *
    471           * @brief       This function sets the CC2530 sleep timer compare value.  First it reads and
    472           *              stores the value of the sleep timer; this value is used later to update OSAL
    473           *              timers.  Then the timeout value is converted from 320 usec units to 32 kHz
    474           *              period units and the compare value is set to the timeout.
    475           *
    476           * input parameters
    477           *
    478           * @param       timeout - Timeout value in 320 usec units.  The sleep timer compare is set to
    479           *                        this value.
    480           *
    481           * output parameters
    482           *
    483           * None.
    484           *
    485           * @return      None.
    486           **************************************************************************************************
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          void halSleepSetTimer(uint32 timeout)
   \                     halSleepSetTimer:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   8C..         MOV       ?V2,R4
   \   000010   8D..         MOV       ?V3,R5
    490            uint32 ticks;
    491          
    492            /* read the sleep timer; ST0 must be read first */
    493            ((uint8 *) &ticks)[UINT32_NDX0] = ST0;
   \   000012   E595         MOV       A,0x95
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   F0           MOVX      @DPTR,A
    494            ((uint8 *) &ticks)[UINT32_NDX1] = ST1;
   \   00001B   E596         MOV       A,0x96
   \   00001D   C0E0         PUSH      A
   \   00001F   7401         MOV       A,#0x1
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   D0E0         POP       A
   \   000026   F0           MOVX      @DPTR,A
    495            ((uint8 *) &ticks)[UINT32_NDX2] = ST2;
   \   000027   E597         MOV       A,0x97
   \   000029   C0E0         PUSH      A
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
    496            ((uint8 *) &ticks)[UINT32_NDX3] = 0;
   \   000033   7403         MOV       A,#0x3
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
    497          
    498            /* Compute sleep timer compare value.  The ratio of 32 kHz ticks to 320 usec ticks
    499             * is 32768/3125 = 10.48576.  This is nearly 671/64 = 10.484375.
    500             */
    501            ticks += (timeout * 671) / 64;
    502          
    503            /* subtract the processing time spent in function halSleep() */
    504            ticks -= HAL_SLEEP_ADJ_TICKS;
   \   00003A   90....       MOV       DPTR,#__Constant_29f
   \   00003D   78..         MOV       R0,#?V4
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   78..         MOV       R0,#?V0
   \   000044   79..         MOV       R1,#?V4
   \   000046   12....       LCALL     ?L_MUL
   \   000049   7406         MOV       A,#0x6
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   12....       LCALL     ?UL_SHR
   \   000050   90....       MOV       DPTR,#__Constant_ffffffe9
   \   000053   78..         MOV       R0,#?V0
   \   000055   12....       LCALL     ?L_ADD_X
   \   000058   85..82       MOV       DPL,?XSP + 0
   \   00005B   85..83       MOV       DPH,?XSP + 1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?L_ADD_TO_X
    505          
    506            /* set sleep timer compare; ST0 must be written last */
    507            ST2 = ((uint8 *) &ticks)[UINT32_NDX2];
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F597         MOV       0x97,A
    508            ST1 = ((uint8 *) &ticks)[UINT32_NDX1];
   \   00006B   7401         MOV       A,#0x1
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F596         MOV       0x96,A
    509            ST0 = ((uint8 *) &ticks)[UINT32_NDX0];
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F595         MOV       0x95,A
    510          }
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000081   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   000084                REQUIRE ST0
   \   000084                REQUIRE ST1
   \   000084                REQUIRE ST2
    511          
    512          /**************************************************************************************************
    513           * @fn          TimerElapsed
    514           *
    515           * @brief       Determine the number of OSAL timer ticks elapsed during sleep.
    516           *              Deprecated for CC2530 and CC2430 SoC.
    517           *
    518           * input parameters
    519           *
    520           * @param       None.
    521           *
    522           * output parameters
    523           *
    524           * None.
    525           *
    526           * @return      Number of timer ticks elapsed during sleep.
    527           **************************************************************************************************
    528           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          uint32 TimerElapsed( void )
   \                     TimerElapsed:
    530          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    531            /* Stubs */
    532            return (0);
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B00         MOV       R3,#0x0
   \   000004   7C00         MOV       R4,#0x0
   \   000006   7D00         MOV       R5,#0x0
   \   000008   02....       LJMP      ?BRET
    533          }
    534          
    535          /**************************************************************************************************
    536           * @fn          halRestoreSleepLevel
    537           *
    538           * @brief       Restore the deepest timer sleep level.
    539           *
    540           * input parameters
    541           *
    542           * @param       None
    543           *
    544           * output parameters
    545           *
    546           *              None.
    547           *
    548           * @return      None.
    549           **************************************************************************************************
    550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          void halRestoreSleepLevel( void )
   \                     halRestoreSleepLevel:
    552          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    553            /* Stubs */
    554          }
   \   000000   02....       LJMP      ?BRET
    555          
    556          /**************************************************************************************************
    557           * @fn          halSleepTimerIsr
    558           *
    559           * @brief       Sleep timer ISR.
    560           *
    561           * input parameters
    562           *
    563           * None.
    564           *
    565           * output parameters
    566           *
    567           * None.
    568           *
    569           * @return      None.
    570           **************************************************************************************************
    571           */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    572          HAL_ISR_FUNCTION(halSleepTimerIsr, ST_VECTOR)
   \                     halSleepTimerIsr:
    573          {
   \   000000   C0E0         PUSH      A
   \   000002   C0D0         PUSH      PSW
   \   000004   E8           MOV       A,R0
   \   000005   C0E0         PUSH      A
   \   000007                ; Saved register size: 3
   \   000007                ; Auto size: 0
    574            HAL_ENTER_ISR();
   \   000007   A8A8         MOV       R0,0xa8+0x0
   \   000009   D2AF         SETB      0xa8.7
    575            HAL_SLEEP_TIMER_CLEAR_INT();
   \   00000B   C2C7         CLR       0xc0.7
    576          
    577          #ifdef HAL_SLEEP_DEBUG_POWER_MODE
    578            halSleepInt = TRUE;
    579          #endif
    580            
    581            CLEAR_SLEEP_MODE();
   \   00000D   75..00       MOV       halSleepPconValue,#0x0
    582            HAL_EXIT_ISR();
   \   000010   E8           MOV       A,R0
   \   000011   A2E7         MOV       C,0xE0 /* A   */.7
   \   000013   92AF         MOV       0xa8.7,C
    583          }
   \   000015   D0E0         POP       A
   \   000017   F8           MOV       R0,A
   \   000018   D0D0         POP       PSW
   \   00001A   D0E0         POP       A
   \   00001C   32           RETI
   \   00001D                REQUIRE _A_IEN0
   \   00001D                REQUIRE _A_IRCON

   \                                 In  segment INTVEC, offset 0x2b, root
   \                     `??halSleepTimerIsr::??INTVEC 43`:
   \   00002B   02....       LJMP       (halSleepTimerIsr)

   \                                 In  segment DATA_ID, align 1, keep-with-next
   \                     `?<Initializer for halSleepPconValue>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for maxSleepLoopTime>`:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffffffe:
   \   000000   FEFFFFFF     DD 4294967294

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f:
   \   000000   1F000000     DD 31

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_8:
   \   000000   08000000     DD 8

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185197:
   \   000000   97511800     DD 1593751

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffe7ae6a:
   \   000000   6AAEE7FF     DD 4293373546

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_185196:
   \   000000   96511800     DD 1593750

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_29f:
   \   000000   9F020000     DD 671

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffe9:
   \   000000   E9FFFFFF     DD 4294967273

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSetSleepMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetSleepMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSetMaxSleepLoopTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSetMaxSleepLoopTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halSleepSetTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halSleepSetTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TimerElapsed::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TimerElapsed

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halRestoreSleepLevel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halRestoreSleepLevel
    584          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   TimerElapsed
      0      0   halRestoreSleepLevel
      0     12   halSetMaxSleepLoopTime
      0     16   halSetSleepMode
      0     16   halSleep
        0     16   -> HalLedEnterSleep
        0     16   -> HalLedExitSleep
        0     16   -> HalUARTResume
        0     16   -> HalUARTSuspend
        0     16   -> MAC_PwrNextTimeout
        0     16   -> MAC_PwrOffReq
        0     16   -> MAC_PwrOnReq
        0     16   -> halAssertHandler
        0     16   -> halSetSleepMode
        0     16   -> halSleepSetTimer
        0     16   -> macMcuTimer2OverflowWorkaround
      1     36   halSleepSetTimer
      3      0   halSleepTimerIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for halSleepPconValue>
       4  ?<Initializer for maxSleepLoopTime>
       7  ??Subroutine2_0
       5  ?Subroutine0
       2  ?Subroutine1
       1  IEN2
       1  PCON
       1  SLEEPCMD
       1  ST0
       1  ST1
       1  ST2
       1  STLOAD
      11  TimerElapsed
       6  TimerElapsed::?relay
       1  _A_IEN0
       1  _A_IEN1
       1  _A_IRCON
       4  __Constant_185196
       4  __Constant_185197
       4  __Constant_1f
       4  __Constant_29f
       4  __Constant_64
       4  __Constant_8
       4  __Constant_ffe7ae6a
       4  __Constant_ffffffe9
       4  __Constant_fffffffe
       1  halPwrMgtMode
       3  halRestoreSleepLevel
       6  halRestoreSleepLevel::?relay
      34  halSetMaxSleepLoopTime
       6  halSetMaxSleepLoopTime::?relay
       7  halSetSleepMode
       6  halSetSleepMode::?relay
     349  halSleep
       6  halSleep::?relay
       1  halSleepPconValue
     132  halSleepSetTimer
       6  halSleepSetTimer::?relay
      29  halSleepTimerIsr
       3  halSleepTimerIsr::??INTVEC 43
       4  maxSleepLoopTime

 
 543 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   1 byte  in segment DATA_I
   1 byte  in segment DATA_ID
   3 bytes in segment INTVEC
  29 bytes in segment NEAR_CODE
  10 bytes in segment SFR_AN
   7 bytes in segment SLEEP_CODE
   4 bytes in segment XDATA_I
   4 bytes in segment XDATA_ID
  36 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  70 bytes of CODE     memory (+  3 bytes shared)
   0 bytes of CONST    memory (+ 36 bytes shared)
   1 byte  of DATA     memory (+ 10 bytes shared)
 550 bytes of HUGECODE memory
   5 bytes of XDATA    memory

Errors: none
Warnings: none
