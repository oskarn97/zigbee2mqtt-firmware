###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:33
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW7025.tmp ("C:\Texas
#        Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDApp.c" -D
#        FEATURE_SYSTEM_STATS -D CC2531ZNP -D POWER_SAVING -D xTC_LINKKEY_JOIN
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\cc2531\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\class_cdc\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List\ZDApp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj\ZDApp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )
    164            uint8 MatchRsps = 0;
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    191          
    192          /*********************************************************************
    193           * EXTERNAL VARIABLES
    194           */
    195          
    196          /*********************************************************************
    197           * EXTERNAL FUNCTIONS
    198           */
    199          
    200          /*********************************************************************
    201           * LOCAL FUNCTIONS
    202           */
    203          
    204          void ZDApp_NetworkStartEvt( void );
    205          void ZDApp_DeviceAuthEvt( void );
    206          void ZDApp_SaveNetworkStateEvt( void );
    207          
    208          uint8 ZDApp_ReadNetworkRestoreState( void );
    209          uint8 ZDApp_RestoreNetworkState( void );
    210          void ZDAppDetermineDeviceType( void );
    211          void ZDApp_InitUserDesc( void );
    212          void ZDAppCheckForHoldKey( void );
    213          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    214          void ZDApp_ProcessNetworkJoin( void );
    215          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    216          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    217          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    218          
    219          void ZDApp_SecInit( uint8 state );
    220          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    221          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    222          
    223          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    224          
    225          void ZDApp_ResetTimerStart( uint16 delay );
    226          void ZDApp_ResetTimerCancel( void );
    227          void ZDApp_LeaveCtrlInit( void );
    228          void ZDApp_LeaveCtrlSet( uint8 ra );
    229          uint8 ZDApp_LeaveCtrlBypass( void );
    230          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    231          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    232                                  uint8 removeChildren );
    233          void ZDApp_NodeProfileSync( uint8 stackProfile );
    234          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    235          void ZDApp_RegisterCBs( void );
    236          void ZDApp_InitZdoCBFunc(void);
    237          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    238          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    239          void ZDApp_InitPendingBind( void );
    240          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    241          void ZDApp_AgeOutPendingBindEntry( void );
    242          #endif
    243          
    244          void ZDApp_SetParentAnnceTimer( void );
    245          
    246          /*********************************************************************
    247           * LOCAL VARIABLES
    248           */
    249          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    250          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    251          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    252          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    253          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    254          
    255          #if defined( HOLD_AUTO_START )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256            devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    257          #else
    258            devStates_t devState = DEV_INIT;
    259          #endif
    260          
    261          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    262            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    263          
    264          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    265            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    266            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    267                                  // to parent. Set to make the device do an Orphan scan.
    268          #else
    269            // Set the default to coodinator
    270            devStartModes_t devStartMode = MODE_HARD;
    271          #endif
    272          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    273          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    274          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    275          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    276          {
    277            ZDO_EP,
    278            &ZDAppTaskID,
    279            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    280            (afNetworkLatencyReq_t)0            // No Network Latency req
    281          };
    282          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    283          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    284          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    285          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    286          
    287          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    288          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    289          
    290          /*********************************************************************
    291           * @fn      ZDApp_Init
    292           *
    293           * @brief   ZDApp Initialization function.
    294           *
    295           * @param   task_id - ZDApp Task ID
    296           *
    297           * @return  None
    298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    299          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    300          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    301            // Save the task ID
    302            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    303          
    304            // Initialize the ZDO global device short address storage
    305            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    306            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    307            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    308          
    309            // Check for manual "Hold Auto Start"
    310            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL     `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
    311          
    312            // Initialize ZDO items and setup the device - type of device to create.
    313            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    314          
    315            // Register the endpoint description with the AF
    316            // This task doesn't have a Simple description, but we still need
    317            // to register the endpoint.
    318            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    319          
    320          #if defined( ZDO_USERDESC_RESPONSE )
    321            ZDApp_InitUserDesc();
   \   000029                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000029   12....       LCALL     `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    322          #endif // ZDO_USERDESC_RESPONSE
    323          
    324            // Start the device?
    325            if ( devState != DEV_HOLD )
   \   00002C   90....       MOV       DPTR,#devState
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6009         JZ        ??ZDApp_Init_0
    326            {
    327              ZDOInitDevice( 0 );
   \   000032                ; Setup parameters for call to function ZDOInitDevice
   \   000032   7A00         MOV       R2,#0x0
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000039   8014         SJMP      ??ZDApp_Init_1
    328            }
    329            else
    330            {
    331              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   00003B                ; Setup parameters for call to function ZDOInitDevice
   \   00003B   7AFF         MOV       R2,#-0x1
   \   00003D   7BFF         MOV       R3,#-0x1
   \   00003F   12....       LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    332              // Blink LED to indicate HOLD_START
    333              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   000042                ; Setup parameters for call to function HalLedBlink
   \   000042   7CF4         MOV       R4,#-0xc
   \   000044   7D01         MOV       R5,#0x1
   \   000046   7B32         MOV       R3,#0x32
   \   000048   7A00         MOV       R2,#0x0
   \   00004A   7908         MOV       R1,#0x8
   \   00004C   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    334            }
    335          
    336            // Initialize the ZDO callback function pointers zdoCBFunc[]
    337            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004F                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004F   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    338          
    339            ZDApp_RegisterCBs();
   \   000052                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   000052   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    340          
    341          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    342          #if defined ( REFLECTOR )
    343            ZDApp_InitPendingBind();
   \   000055                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000055   12....       LCALL     `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    344          #endif
    345          #endif
    346          } /* ZDApp_Init() */
   \   000058   02....       LJMP      ??Subroutine69_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    347          
    348          /*********************************************************************
    349           * @fn          ZDApp_SecInit
    350           *
    351           * @brief       ZDApp initialize security.
    352           *
    353           * @param       state - device initialization state
    354           *
    355           * @return      none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    358          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    359            uint8 zgPreConfigKey[SEC_KEY_LEN];
    360          
    361            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   00000C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7007         JNZ       ??ZDApp_SecInit_0
    362            {
    363              // Set the Trust Center bit
    364              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
   \   000012   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000015   E0           MOVX      A,@DPTR
   \   000016   4401         ORL       A,#0x1
   \   000018   F0           MOVX      @DPTR,A
    365            }
    366          
    367            // Initialize ZigBee Device Security Manager
    368            ZDSecMgrInit(state);
   \                     ??ZDApp_SecInit_0:
   \   000019                ; Setup parameters for call to function ZDSecMgrInit
   \   000019   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    369          
    370            if ( ZG_SECURE_ENABLED )
    371            {
    372              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00001C   E5..         MOV       A,?V0
   \   00001E   604B         JZ        ??ZDApp_SecInit_1
    373              {
    374                nwkFrameCounter = 0;
   \   000020   90....       MOV       DPTR,#nwkFrameCounter
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    375          
    376                if( _NIB.nwkKeyLoaded == FALSE )
   \   00002B   90....       MOV       DPTR,#_NIB + 61
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   703A         JNZ       ??ZDApp_SecInit_1
    377                {
    378                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    379                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000031   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000034   E0           MOVX      A,@DPTR
   \   000035   600E         JZ        ??ZDApp_SecInit_2
   \   000037   90....       MOV       DPTR,#zgSecurityMode
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6401         XRL       A,#0x1
   \   00003D   702C         JNZ       ??ZDApp_SecInit_1
   \   00003F   90....       MOV       DPTR,#zgPreConfigKeys
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6026         JZ        ??ZDApp_SecInit_1
    380                  {
    381                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \                     ??ZDApp_SecInit_2:
   \   000045                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000045   AC..         MOV       R4,?XSP + 0
   \   000047   AD..         MOV       R5,?XSP + 1
   \   000049   7A62         MOV       R2,#0x62
   \   00004B   7B00         MOV       R3,#0x0
   \   00004D   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    382                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000050                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000050   7900         MOV       R1,#0x0
   \   000052   AA..         MOV       R2,?XSP + 0
   \   000054   AB..         MOV       R3,?XSP + 1
   \   000056   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    383                      SSP_SwitchNwkKey( 0 );
   \   000059                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000059   7900         MOV       R1,#0x0
   \   00005B   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    384          
    385                      // clear local copy of key
    386                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00005E                ; Setup parameters for call to function osal_memset
   \   00005E   7C10         MOV       R4,#0x10
   \   000060   7D00         MOV       R5,#0x0
   \   000062   7900         MOV       R1,#0x0
   \   000064   AA..         MOV       R2,?XSP + 0
   \   000066   AB..         MOV       R3,?XSP + 1
   \   000068   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    387                  }
    388                }
    389              }
    390          
    391              // clean the new devices list when Security module is initialized
    392              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_1:
   \   00006B   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00006E   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000071   601B         JZ        ??ZDApp_SecInit_3
    393              {
    394                ZDAppNewDevice_t *pNewDeviceNext;
    395          
    396                while ( ZDApp_NewDeviceList )
    397                {
    398                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_4:
   \   000073   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000076   FE           MOV       R6,A
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   FF           MOV       R7,A
    399                  osal_mem_free( ZDApp_NewDeviceList );
   \   00007A                ; Setup parameters for call to function osal_mem_free
   \   00007A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00007D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    400                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000080   EE           MOV       A,R6
   \   000081   F8           MOV       R0,A
   \   000082   EF           MOV       A,R7
   \   000083   F9           MOV       R1,A
   \   000084   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000087   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    401                }
   \                     ??CrossCallReturnLabel_108:
   \   00008A   E8           MOV       A,R0
   \   00008B   49           ORL       A,R1
   \   00008C   70E5         JNZ       ??ZDApp_SecInit_4
    402              }
    403            }
    404          }
   \                     ??ZDApp_SecInit_3:
   \   00008E   7410         MOV       A,#0x10
   \   000090   02....       LJMP      ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine57_0
   \   000003                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   80..         SJMP      ??Subroutine69_0
    405          
    406          /*********************************************************************
    407           * @fn      ZDApp_event_loop()
    408           *
    409           * @brief   Main event loop for Zigbee device objects task. This function
    410           *          should be called at periodic intervals.
    411           *
    412           * @param   task_id - Task ID
    413           * @param   events  - Bitmap of events
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    419            uint8 *msg_ptr;
    420          
    421            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL       A,#0x80
   \   00000D   702D         JNZ       ??ZDApp_event_loop_0
    422            {
    423              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    424              {
    425                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    426          
    427                // Release the memory
    428                osal_msg_deallocate( msg_ptr );
    429              }
    430          
    431              // Return unprocessed events
    432              return (events ^ SYS_EVENT_MSG);
    433            }
    434          
    435            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV       A,R6
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5041         JNC       ??ZDApp_event_loop_1
    436            {
    437              // Initialize apps and start the network
    438              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    439          
    440              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    441                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV       R4,#0xf
   \   00001B   7B0F         MOV       R3,#0xf
   \   00001D   90....       MOV       DPTR,#devStartMode
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    442          
    443              // Return unprocessed events
    444              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV       A,R6
   \   00002D   6401         XRL       A,#0x1
   \   00002F   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    445            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV       R2,?V0
   \   000037   AB..         MOV       R3,?V1
   \   000039   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV       DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV       ?V0,R2
   \   000046   8B..         MOV       ?V1,R3
   \   000048   EA           MOV       A,R2
   \   000049   45..         ORL       A,?V1
   \   00004B   70E5         JNZ       ??ZDApp_event_loop_3
   \   00004D   EE           MOV       A,R6
   \   00004E   FA           MOV       R2,A
   \   00004F   EF           MOV       A,R7
   \   000050   6480         XRL       A,#0x80
   \   000052   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    446          
    447            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_event_loop_1:
   \   000055   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000058   E0           MOVX      A,@DPTR
   \   000059   6004         JZ        ??ZDApp_event_loop_5
   \   00005B   6401         XRL       A,#0x1
   \   00005D   7057         JNZ       ??ZDApp_event_loop_6
    448            {
    449              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_5:
   \   00005F   EE           MOV       A,R6
   \   000060   5402         ANL       A,#0x2
   \   000062   6009         JZ        ??ZDApp_event_loop_7
    450              {
    451                ZDApp_NetworkStartEvt();
   \   000064                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   000064   12....       LCALL     `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    452          
    453                // Return unprocessed events
    454                return (events ^ ZDO_NETWORK_START);
   \   000067   EE           MOV       A,R6
   \   000068   6402         XRL       A,#0x2
   \   00006A   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    455              }
    456          
    457              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_7:
   \   00006D   EE           MOV       A,R6
   \   00006E   5420         ANL       A,#0x20
   \   000070   6034         JZ        ??ZDApp_event_loop_8
    458              {
    459                if ( nwkStatus == ZSuccess )
   \   000072   90....       MOV       DPTR,#nwkStatus
   \   000075   E0           MOVX      A,@DPTR
   \   000076   701D         JNZ       ??ZDApp_event_loop_9
    460                {
    461                  if ( devState == DEV_END_DEVICE )
   \   000078   90....       MOV       DPTR,#devState
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   6406         XRL       A,#0x6
   \   00007E   7005         JNZ       ??ZDApp_event_loop_10
    462                  {
    463                    ZDApp_ChangeState( DEV_ROUTER );
   \   000080                ; Setup parameters for call to function ZDApp_ChangeState
   \   000080   7907         MOV       R1,#0x7
   \   000082   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    464                  }
    465          
    466                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_10:
   \   000085                ; Setup parameters for call to function osal_pwrmgr_device
   \   000085   7900         MOV       R1,#0x0
   \   000087   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    467          
    468                  if ( zgChildAgingEnable == TRUE )
   \   00008A   90....       MOV       DPTR,#zgChildAgingEnable
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   6401         XRL       A,#0x1
   \   000090   7003         JNZ       ??ZDApp_event_loop_9
    469                  {
    470                    // Once the device has changed its state to a ROUTER set the timer to send
    471                    // Parent annce
    472                    ZDApp_SetParentAnnceTimer();
   \   000092                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000092   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
    473                  }
    474                }
    475                else
    476                {
    477                  // remain as end device
    478                }
    479                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_9:
   \   000095                ; Setup parameters for call to function osal_set_event
   \   000095   7A10         MOV       R2,#0x10
   \   000097   7B00         MOV       R3,#0x0
   \   000099   90....       MOV       DPTR,#ZDAppTaskID
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F9           MOV       R1,A
   \   00009E   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    480          
    481                // Return unprocessed events
    482                return (events ^ ZDO_ROUTER_START);
   \   0000A1   EE           MOV       A,R6
   \   0000A2   6420         XRL       A,#0x20
   \   0000A4   807F         SJMP      ??ZDApp_event_loop_2
    483              }
    484          
    485              if ( events & ZDO_PARENT_ANNCE_EVT )
   \                     ??ZDApp_event_loop_8:
   \   0000A6   EF           MOV       A,R7
   \   0000A7   5440         ANL       A,#0x40
   \   0000A9   600B         JZ        ??ZDApp_event_loop_6
    486              {
    487                ZDApp_SendParentAnnce();
   \   0000AB                ; Setup parameters for call to function ZDApp_SendParentAnnce
   \   0000AB   12....       LCALL     `??ZDApp_SendParentAnnce::?relay`; Banked call to: ZDApp_SendParentAnnce
    488          
    489                // Return unprocessed events
    490                return (events ^ ZDO_PARENT_ANNCE_EVT);
   \   0000AE   EE           MOV       A,R6
   \   0000AF   FA           MOV       R2,A
   \   0000B0   EF           MOV       A,R7
   \   0000B1   6440         XRL       A,#0x40
   \   0000B3   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    491              }
    492            }
    493          
    494            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_6:
   \   0000B6   EF           MOV       A,R7
   \   0000B7   5420         ANL       A,#0x20
   \   0000B9   603B         JZ        ??ZDApp_event_loop_11
    495            {
    496              if( devState == DEV_NWK_BACKOFF )
   \   0000BB   90....       MOV       DPTR,#devState
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   640C         XRL       A,#0xc
   \   0000C1   700D         JNZ       ??ZDApp_event_loop_12
    497              {
    498                ZDApp_ChangeState(DEV_NWK_DISC);
   \   0000C3                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000C3   7902         MOV       R1,#0x2
   \   0000C5   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    499                // Restart scan for rejoin
    500                ZDApp_StartJoiningCycle();
   \   0000C8                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   0000C8   12....       LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    501                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   0000CB                ; Setup parameters for call to function osal_start_timerEx
   \   0000CB   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   0000CE   800B         SJMP      ??ZDApp_event_loop_13
    502              }
    503              else
    504              {
    505                // Rejoin backoff, silent period
    506                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_12:
   \   0000D0                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000D0   790C         MOV       R1,#0xc
   \   0000D2   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    507                ZDApp_StopJoiningCycle();
   \   0000D5                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   0000D5   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    508                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   0000D8                ; Setup parameters for call to function osal_start_timerEx
   \   0000D8   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_13:
   \   0000DB   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000DE   7A00         MOV       R2,#0x0
   \   0000E0   7B20         MOV       R3,#0x20
   \   0000E2   90....       MOV       DPTR,#ZDAppTaskID
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   F9           MOV       R1,A
   \   0000E7   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EA   7404         MOV       A,#0x4
   \   0000EC   12....       LCALL     ?DEALLOC_XSTACK8
    509              }
    510          
    511              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   0000EF   EE           MOV       A,R6
   \   0000F0   FA           MOV       R2,A
   \   0000F1   EF           MOV       A,R7
   \   0000F2   6420         XRL       A,#0x20
   \   0000F4   8076         SJMP      ??ZDApp_event_loop_4
    512            }
    513          
    514            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_11:
   \   0000F6   EE           MOV       A,R6
   \   0000F7   5410         ANL       A,#0x10
   \   0000F9   602E         JZ        ??ZDApp_event_loop_14
    515            {
    516              ZDO_UpdateNwkStatus( devState );
   \   0000FB                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000FB   90....       MOV       DPTR,#devState
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   F9           MOV       R1,A
   \   000100   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    517          
    518              // At start up, do one MTO route discovery if the device is a concentrator
    519              if ( zgConcentratorEnable == TRUE )
   \   000103   90....       MOV       DPTR,#zgConcentratorEnable
   \   000106   E0           MOVX      A,@DPTR
   \   000107   6401         XRL       A,#0x1
   \   000109   7017         JNZ       ??ZDApp_event_loop_15
    520              {
    521                // Start next event
    522                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   00010B                ; Setup parameters for call to function osal_start_timerEx
   \   00010B   90....       MOV       DPTR,#__Constant_64
   \   00010E   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000111   7A00         MOV       R2,#0x0
   \   000113   7B08         MOV       R3,#0x8
   \   000115   90....       MOV       DPTR,#NWK_TaskID
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F9           MOV       R1,A
   \   00011A   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00011D   7404         MOV       A,#0x4
   \   00011F   12....       LCALL     ?DEALLOC_XSTACK8
    523              }
    524          
    525              // Return unprocessed events
    526              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_15:
   \   000122   EE           MOV       A,R6
   \   000123   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   000125   FA           MOV       R2,A
   \   000126   EF           MOV       A,R7
   \   000127   8043         SJMP      ??ZDApp_event_loop_4
    527            }
    528          
    529            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_14:
   \   000129   EE           MOV       A,R6
   \   00012A   5408         ANL       A,#0x8
   \   00012C   6006         JZ        ??ZDApp_event_loop_16
    530            {
    531              // User defined logic
    532          
    533              // Return unprocessed events
    534              return (events ^ ZDO_COMMAND_CNF);
   \   00012E   EE           MOV       A,R6
   \   00012F   6408         XRL       A,#0x8
   \   000131   FA           MOV       R2,A
   \   000132   8044         SJMP      ??ZDApp_event_loop_17
    535            }
    536          
    537            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_16:
   \   000134   EF           MOV       A,R7
   \   000135   5401         ANL       A,#0x1
   \   000137   6017         JZ        ??ZDApp_event_loop_18
    538            {
    539              // Save only in valid state
    540              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   000139   90....       MOV       DPTR,#_NIB + 35
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   6408         XRL       A,#0x8
   \   00013F   6005         JZ        ??ZDApp_event_loop_19
   \   000141   E0           MOVX      A,@DPTR
   \   000142   6404         XRL       A,#0x4
   \   000144   7003         JNZ       ??ZDApp_event_loop_20
    541              {
    542                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_19:
   \   000146                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   000146   12....       LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    543              }
    544          
    545              // Return unprocessed events
    546              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_20:
   \   000149   EE           MOV       A,R6
   \   00014A   FA           MOV       R2,A
   \   00014B   EF           MOV       A,R7
   \   00014C   6401         XRL       A,#0x1
   \   00014E   801C         SJMP      ??ZDApp_event_loop_4
    547            }
    548          
    549            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_18:
   \   000150   EE           MOV       A,R6
   \   000151   5404         ANL       A,#0x4
   \   000153   600A         JZ        ??ZDApp_event_loop_21
    550            {
    551          #ifdef ZBA_FALLBACK_NWKKEY
    552              if ( devState == DEV_END_DEVICE_UNAUTH )
    553              {
    554                ZDSecMgrFallbackNwkKey();
    555              }
    556              else
    557          #endif
    558              {
    559                // Set the NV startup option to force a "new" join.
    560                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000155                ; Setup parameters for call to function zgWriteStartupOptions
   \   000155   7A02         MOV       R2,#0x2
   \   000157   79FF         MOV       R1,#-0x1
   \   000159   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    561          
    562                // The device has been in the UNAUTH state, so reset
    563                // Note: there will be no return from this call
    564                SystemResetSoft();
   \   00015C                ; Setup parameters for call to function Onboard_soft_reset
   \   00015C   12....       LCALL     Onboard_soft_reset & 0xFFFF
    565              }
    566            }
    567          
    568          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    569            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_21:
   \   00015F   EF           MOV       A,R7
   \   000160   5410         ANL       A,#0x10
   \   000162   600B         JZ        ??ZDApp_event_loop_22
    570            {
    571          #if defined ( REFLECTOR )
    572              ZDApp_AgeOutPendingBindEntry();
   \   000164                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   000164   12....       LCALL     `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    573          #endif
    574              // Return unprocessed events
    575              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   000167   EE           MOV       A,R6
   \   000168   FA           MOV       R2,A
   \   000169   EF           MOV       A,R7
   \   00016A   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   00016C   FB           MOV       R3,A
   \   00016D   8009         SJMP      ??ZDApp_event_loop_17
    576            }
    577          #endif
    578          
    579            if ( ZG_SECURE_ENABLED )
    580            {
    581              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_22:
   \   00016F                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   00016F   EE           MOV       A,R6
   \   000170   FA           MOV       R2,A
   \   000171   EF           MOV       A,R7
   \   000172   FB           MOV       R3,A
   \   000173   A9..         MOV       R1,?V2
   \   000175   12....       LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    582            }
   \                     ??ZDApp_event_loop_17:
   \   000178                REQUIRE ?Subroutine1
   \   000178                ; // Fall through to label ?Subroutine1
    583            else
    584            {
    585              // Discard or make more handlers
    586              return 0;
    587            }
    588          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    589          
    590          /*********************************************************************
    591           * @fn      ZDApp_ProcessSecEvent()
    592           *
    593           * @brief   Process incoming security events.
    594           *
    595           * @param   task_id - Task ID
    596           * @param   events  - Bitmap of events
    597           *
    598           * @return  none
    599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    601          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    602            (void)task_id;  // Intentionally unreferenced parameter
    603          
    604            if ( ZSTACK_ROUTER_BUILD )
   \   000009   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6007         JZ        ??ZDApp_ProcessSecEvent_0
   \   00000F   6401         XRL       A,#0x1
   \   000011   6003         JZ        $+5
   \   000013   02....       LJMP      ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    605            {
    606              if ( events & ZDO_NEW_DEVICE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000016   EE           MOV       A,R6
   \   000017   5440         ANL       A,#0x40
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    607              {
    608                // process the new device event
    609                if ( ZDApp_NewDeviceList )
   \   00001E   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000021   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000024   607D         JZ        ??ZDApp_ProcessSecEvent_2
    610                {
    611                  ZDAppNewDevice_t *pNewDevice;
    612                  uint16 timeDelta;
    613          
    614                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000026                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000026   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00002E   12....       LCALL     `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
    615          
    616                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000031   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000034   F5..         MOV       ?V0,A
   \   000036   A3           INC       DPTR
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F5..         MOV       ?V1,A
    617                  osal_mem_free( ZDApp_NewDeviceList );
   \   00003A                ; Setup parameters for call to function osal_mem_free
   \   00003A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00003D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    618                  ZDApp_NewDeviceList = pNewDevice;
   \   000040   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000043   E5..         MOV       A,?V0
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   E5..         MOV       A,?V1
   \   000049   F0           MOVX      @DPTR,A
    619          
    620                  if ( pNewDevice )
   \   00004A   E5..         MOV       A,?V0
   \   00004C   45..         ORL       A,?V1
   \   00004E   6053         JZ        ??ZDApp_ProcessSecEvent_2
    621                  {
    622                    timeDelta = pNewDevice->timeDelta;
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F5..         MOV       ?V4,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V5,A
    623                    pNewDevice = pNewDevice->next;
   \   000061   8014         SJMP      ??ZDApp_ProcessSecEvent_3
    624          
    625                    while ( pNewDevice )
    626                    {
    627                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000063   85..82       MOV       DPL,?V0
   \   000066   85..83       MOV       DPH,?V1
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   C3           CLR       C
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   95..         SUBB      A,?V4
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   95..         SUBB      A,?V5
   \   000076   F0           MOVX      @DPTR,A
    628                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000077   85..82       MOV       DPL,?V0
   \   00007A   85..83       MOV       DPH,?V1
    629                    }
   \   00007D   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000080   F5..         MOV       ?V1,A
   \   000082   E5..         MOV       A,?V0
   \   000084   45..         ORL       A,?V1
   \   000086   70DB         JNZ       ??ZDApp_ProcessSecEvent_4
    630          
    631                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   000088                ; Setup parameters for call to function osal_start_timerEx
   \   000088   E4           CLR       A
   \   000089   F5..         MOV       ?V6,A
   \   00008B   F5..         MOV       ?V7,A
   \   00008D   78..         MOV       R0,#?V4
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000092   7A40         MOV       R2,#0x40
   \   000094   7B00         MOV       R3,#0x0
   \   000096   90....       MOV       DPTR,#ZDAppTaskID
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   F9           MOV       R1,A
   \   00009B   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00009E   7404         MOV       A,#0x4
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
    632                  }
    633                }
    634          
    635                // Return unprocessed events
    636                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_2:
   \   0000A3   EE           MOV       A,R6
   \   0000A4   6440         XRL       A,#0x40
   \   0000A6   800B         SJMP      ??ZDApp_ProcessSecEvent_5
    637              }
    638            }
    639          
    640            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_1:
   \   0000A8   EE           MOV       A,R6
   \   0000A9   5480         ANL       A,#0x80
   \   0000AB   600A         JZ        ??ZDApp_ProcessSecEvent_6
    641            {
    642              ZDApp_DeviceAuthEvt();
   \   0000AD                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000AD   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    643          
    644              // Return unprocessed events
    645              return (events ^ ZDO_DEVICE_AUTH);
   \   0000B0   EE           MOV       A,R6
   \   0000B1   6480         XRL       A,#0x80
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000B3   FA           MOV       R2,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   802B         SJMP      ??ZDApp_ProcessSecEvent_7
    646            }
    647          
    648            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000B7   EF           MOV       A,R7
   \   0000B8   5402         ANL       A,#0x2
   \   0000BA   600A         JZ        ??ZDApp_ProcessSecEvent_8
    649            {
    650              ZDApp_SaveNwkKey();
   \   0000BC                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000BC   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    651          
    652              // Return unprocessed events
    653              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000BF   EE           MOV       A,R6
   \   0000C0   FA           MOV       R2,A
   \   0000C1   EF           MOV       A,R7
   \   0000C2   6402         XRL       A,#0x2
   \   0000C4   801C         SJMP      ??ZDApp_ProcessSecEvent_7
    654            }
    655          
    656            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000C6   EF           MOV       A,R7
   \   0000C7   5408         ANL       A,#0x8
   \   0000C9   600A         JZ        ??ZDApp_ProcessSecEvent_9
    657            {
    658          #if defined (NV_RESTORE)
    659              ZDSecMgrSaveApsLinkKey();
   \   0000CB                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   0000CB   12....       LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    660          #endif // (NV_RESTORE)
    661          
    662              // Return unprocessed events
    663              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000CE   EE           MOV       A,R6
   \   0000CF   FA           MOV       R2,A
   \   0000D0   EF           MOV       A,R7
   \   0000D1   6408         XRL       A,#0x8
   \   0000D3   800D         SJMP      ??ZDApp_ProcessSecEvent_7
    664            }
    665          
    666            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000D5   EF           MOV       A,R7
   \   0000D6   5404         ANL       A,#0x4
   \   0000D8   600B         JZ        ??ZDApp_ProcessSecEvent_10
    667            {
    668              ZDSecMgrSaveTCLinkKey();
   \   0000DA                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000DA   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    669          
    670              // Return unprocessed events
    671              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000DD   EE           MOV       A,R6
   \   0000DE   FA           MOV       R2,A
   \   0000DF   EF           MOV       A,R7
   \   0000E0   6404         XRL       A,#0x4
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000E2   FB           MOV       R3,A
   \   0000E3   8004         SJMP      ??ZDApp_ProcessSecEvent_11
    672            }
    673          
    674            // Discard or make more handlers
    675            return 0;
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000E5   7A00         MOV       R2,#0x0
   \   0000E7   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_11:
   \   0000E9   02....       LJMP      ?Subroutine2 & 0xFFFF
    676          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET
    677          
    678          /*********************************************************************
    679           * Application Functions
    680           */
    681          
    682          /*********************************************************************
    683           * @fn      ZDOInitDevice
    684           *
    685           * @brief   Start the device in the network.  This function will read
    686           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    687           *   restore the network state of the device.
    688           *
    689           * @param   startDelay - timeDelay to start device (in milliseconds).
    690           *                       There is a jitter added to this delay:
    691           *                       ((NWK_START_DELAY + startDelay)
    692           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    693           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    694           *                       this function will hold the network init. Application
    695           *                       can start the device.
    696           *
    697           * NOTE:    If the application would like to force a "new" join, the
    698           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    699           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    700           *          this function. "new" join means to not restore the network
    701           *          state of the device. Use zgWriteStartupOptions() to set these
    702           *          options.
    703           *
    704           * @return
    705           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    706           *          restored.
    707           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    708           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    709           *          it could mean that there was no network state to restore.
    710           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    712          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
    713            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000009   75..01       MOV       ?V0,#0x1
    714            uint16 extendedDelay = 0;
   \   00000C   7E00         MOV       R6,#0x0
   \   00000E   7F00         MOV       R7,#0x0
    715          
    716            if ( devState == DEV_HOLD )
   \   000010   90....       MOV       DPTR,#devState
   \   000013   E0           MOVX      A,@DPTR
   \   000014   7005         JNZ       ??ZDOInitDevice_0
    717            {
    718              // Initialize the RAM items table, in case an NV item has been updated.
    719              zgInitItems( FALSE );
   \   000016                ; Setup parameters for call to function zgInitItems
   \   000016   7900         MOV       R1,#0x0
   \   000018   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    720            }
    721          
    722            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   00001B                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00001B   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    723            //devtag.071807.todo - fix this temporary solution
    724            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00001E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000021   E0           MOVX      A,@DPTR
   \   000022   90....       MOV       DPTR,#_NIB + 14
   \   000025   F0           MOVX      @DPTR,A
    725          
    726          #if defined ( NV_RESTORE )
    727            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    728            // while booting to skip past NV Restore.
    729            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000026   90....       MOV       DPTR,#zdappHoldKeys
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6404         XRL       A,#0x4
   \   00002C   7064         JNZ       ??ZDOInitDevice_1
    730            {
    731              zdappHoldKeys = 0;   // Only once
   \   00002E   E4           CLR       A
   \   00002F   F0           MOVX      @DPTR,A
    732              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    733            }
    734            else
    735            {
    736              // Determine if NV should be restored
    737              networkStateNV = ZDApp_ReadNetworkRestoreState();
    738            }
    739          
    740            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    741            {
    742              networkStateNV = ZDApp_RestoreNetworkState();
    743              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    744            }
    745            else
    746            {
    747              // Wipe out the network state in NV
    748              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000030                ; Setup parameters for call to function NLME_InitNV
   \   000030   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    749              NLME_SetDefaultNV();
   \   000033                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000033   12....       LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    750              // clear NWK key values
    751              ZDSecMgrClearNVKeyValues();
   \   000036                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000036   12....       LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    752            }
    753          #endif
    754          
    755            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   000039   7401         MOV       A,#0x1
   \   00003B   65..         XRL       A,?V0
   \   00003D   7025         JNZ       ??ZDOInitDevice_4
    756            {
    757              ZDAppDetermineDeviceType();
   \   00003F                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00003F   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    758          
    759              // Only delay if joining network - not restoring network state
    760              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    761                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000042                ; Setup parameters for call to function osal_rand
   \   000042   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000045   EA           MOV       A,R2
   \   000046   547F         ANL       A,#0x7f
   \   000048   F8           MOV       R0,A
   \   000049   E5..         MOV       A,?V2
   \   00004B   28           ADD       A,R0
   \   00004C   F8           MOV       R0,A
   \   00004D   E4           CLR       A
   \   00004E   35..         ADDC      A,?V3
   \   000050   F9           MOV       R1,A
   \   000051   E8           MOV       A,R0
   \   000052   2464         ADD       A,#0x64
   \   000054   FE           MOV       R6,A
   \   000055   E4           CLR       A
   \   000056   39           ADDC      A,R1
   \   000057   FF           MOV       R7,A
    762          
    763              runtimeChannel = zgDefaultChannelList;
   \   000058   90....       MOV       DPTR,#zgDefaultChannelList
   \   00005B   12....       LCALL     ?XLOAD_R0123
   \   00005E   90....       MOV       DPTR,#runtimeChannel
   \   000061   12....       LCALL     ?XSTORE_R0123
    764            }
    765          
    766            // Initialize the security for type of device
    767            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000064                ; Setup parameters for call to function ZDApp_SecInit
   \   000064   A9..         MOV       R1,?V0
   \   000066   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    768          
    769            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000069   74FF         MOV       A,#-0x1
   \   00006B   65..         XRL       A,?V2
   \   00006D   7004         JNZ       ??ZDOInitDevice_5
   \   00006F   74FF         MOV       A,#-0x1
   \   000071   65..         XRL       A,?V3
   \                     ??ZDOInitDevice_5:
   \   000073   6010         JZ        ??ZDOInitDevice_6
    770            {
    771              devState = DEV_INIT;    // Remove the Hold state
   \   000075   90....       MOV       DPTR,#devState
   \   000078   7401         MOV       A,#0x1
   \   00007A   F0           MOVX      @DPTR,A
    772          
    773              // Initialize leave control logic
    774              ZDApp_LeaveCtrlInit();
   \   00007B                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007B   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    775          
    776              // Trigger the network start
    777              ZDApp_NetworkInit( extendedDelay );
   \   00007E                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   FB           MOV       R3,A
   \   000082   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    778            }
    779          
    780            // set broadcast address mask to support broadcast filtering
    781            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   000085                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000085   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    782          
    783            return ( networkStateNV );
   \   00008D   A9..         MOV       R1,?V0
   \   00008F   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??ZDOInitDevice_1:
   \   000092                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   000092   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   000095   E9           MOV       A,R1
   \   000096   F5..         MOV       ?V0,A
   \   000098   7096         JNZ       ??ZDOInitDevice_2
   \   00009A                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   00009A   12....       LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   00009D   E9           MOV       A,R1
   \   00009E   F5..         MOV       ?V0,A
   \   0000A0   75..01       MOV       ?V4,#0x1
   \   0000A3   8E..         MOV       ?V5,R6
   \   0000A5   8E..         MOV       ?V6,R6
   \   0000A7   8E..         MOV       ?V7,R6
   \   0000A9   90....       MOV       DPTR,#_NIB + 22
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   78..         MOV       R0,#?V4
   \   0000AF   12....       LCALL     ?L_SHL
   \   0000B2   90....       MOV       DPTR,#runtimeChannel
   \   0000B5   78..         MOV       R0,#?V4
   \   0000B7   12....       LCALL     ?L_MOV_TO_X
   \   0000BA   02....       LJMP      ??ZDOInitDevice_3 & 0xFFFF
    784          }
    785          
    786          /*********************************************************************
    787           * @fn      ZDApp_ReadNetworkRestoreState
    788           *
    789           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    790           *          or not to restore the network state.
    791           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    792           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    793           *
    794           * @param   none
    795           *
    796           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    797           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    798           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    799           *          ZCD_NV_STARTUP_OPTION
    800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    801          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    802          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    803            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    804          
    805            // Look for the New Network State option.
    806            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5002         JNC       ??ZDApp_ReadNetworkRestoreState_0
    807            {
    808              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    809            }
    810          
    811            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV       A,R6
   \   000013   F9           MOV       R1,A
   \   000014   02....       LJMP      ??Subroutine69_0 & 0xFFFF
    812          }
    813          
    814          /*********************************************************************
    815           * @fn      ZDAppDetermineDeviceType()
    816           *
    817           * @brief   Determines the type of device to start.
    818           *
    819           *          Looks at zgDeviceLogicalType and determines what type of
    820           *          device to start.  The types are:
    821           *            ZG_DEVICETYPE_COORDINATOR
    822           *            ZG_DEVICETYPE_ROUTER
    823           *            ZG_DEVICETYPE_ENDDEVICE
    824           *
    825           * @param   none
    826           *
    827           * @return  none
    828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    829          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    830          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    831            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    832            {
    833              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    834              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   8033         SJMP      ??ZDAppDetermineDeviceType_1
    835            }
    836            else
    837            {
    838              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL       A,#0x1
   \   00001A   700A         JNZ       ??ZDAppDetermineDeviceType_2
    839                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   54F8         ANL       A,#0xf8
   \   000022   4401         ORL       A,#0x1
   \   000024   800D         SJMP      ??ZDAppDetermineDeviceType_3
    840              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6402         XRL       A,#0x2
   \   000029   7009         JNZ       ??ZDAppDetermineDeviceType_4
    841                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002B   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   54F8         ANL       A,#0xf8
   \   000031   4402         ORL       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000033   F0           MOVX      @DPTR,A
    842          
    843              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    844              // The device shall do rejoin the network. Otherwise, do normal join
    845              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000034                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000034   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000036   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000038   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003B   E9           MOV       A,R1
   \   00003C   90....       MOV       DPTR,#devStartMode
   \   00003F   7003         JNZ       ??ZDAppDetermineDeviceType_5
    846              {
    847                devStartMode = MODE_JOIN;     // Assume joining
   \   000041   E4           CLR       A
   \   000042   8007         SJMP      ??ZDAppDetermineDeviceType_1
    848              }
    849              else
    850              {
    851                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000044   7403         MOV       A,#0x3
   \   000046   F0           MOVX      @DPTR,A
    852                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   000047   90....       MOV       DPTR,#prevDevState
   \   00004A   04           INC       A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004B   F0           MOVX      @DPTR,A
    853              }
    854            }
    855          }
   \   00004C   02....       LJMP      ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    856          
    857          /*********************************************************************
    858           * @fn      ZDApp_NetworkStartEvt()
    859           *
    860           * @brief   Process the Network Start Event
    861           *
    862           * @param   none
    863           *
    864           * @return  none
    865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    866          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    867          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    868            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7030         JNZ       ??ZDApp_NetworkStartEvt_0
    869            {
    870              // Successfully started a ZigBee network
    871              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7015         JNZ       ??ZDApp_NetworkStartEvt_1
    872              {
    873                //save NIB to NV before child joins if NV_RESTORE is defined
    874                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    875                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV       R1,#0x9
   \   000017   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    876          
    877                if ( zgChildAgingEnable == TRUE )
   \   00001A   90....       MOV       DPTR,#zgChildAgingEnable
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6401         XRL       A,#0x1
   \   000020   7011         JNZ       ??ZDApp_NetworkStartEvt_2
    878                {
    879                  // Once the device has changed its state to a COORDINATOR set the timer to send
    880                  // Parent annce
    881                  ZDApp_SetParentAnnceTimer();
   \   000022                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000022   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000025   800C         SJMP      ??ZDApp_NetworkStartEvt_2
    882                }
    883              }
    884              else
    885              {
    886                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000027                ; Setup parameters for call to function osal_set_event
   \   000027   7A10         MOV       R2,#0x10
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   90....       MOV       DPTR,#ZDAppTaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    887              }
    888          
    889              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000033                ; Setup parameters for call to function osal_pwrmgr_device
   \   000033   7900         MOV       R1,#0x0
   \   000035   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   000038   8037         SJMP      ??ZDApp_NetworkStartEvt_3
    890            }
    891            else
    892            {
    893              // Try again with a higher energy threshold
    894              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00003A                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00003A   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00003D   E9           MOV       A,R1
   \   00003E   7900         MOV       R1,#0x0
   \   000040   2410         ADD       A,#0x10
   \   000042   5001         JNC       ??ZDApp_NetworkStartEvt_4
   \   000044   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000045   C3           CLR       C
   \   000046   94FF         SUBB      A,#-0x1
   \   000048   E9           MOV       A,R1
   \   000049   9400         SUBB      A,#0x0
   \   00004B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00004D   65D0         XRL       A,PSW
   \   00004F   33           RLC       A
   \   000050   501A         JNC       ??ZDApp_NetworkStartEvt_5
    895              {
    896                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000052                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000052   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000055   E9           MOV       A,R1
   \   000056   F8           MOV       R0,A
   \   000057                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000057   7410         MOV       A,#0x10
   \   000059   29           ADD       A,R1
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    897                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00005E                ; Setup parameters for call to function osal_set_event
   \   00005E   7A01         MOV       R2,#0x1
   \   000060   7B00         MOV       R3,#0x0
   \   000062   90....       MOV       DPTR,#ZDAppTaskID
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F9           MOV       R1,A
   \   000067   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00006A   8005         SJMP      ??ZDApp_NetworkStartEvt_3
    898              }
    899              else
    900              {
    901                // Failed to start network. Enter a dormant state (until user intervenes)
    902                ZDApp_ChangeState( DEV_INIT );
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00006C                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    903              }
    904            }
    905          }
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000071   02....       LJMP      ??Subroutine62_0 & 0xFFFF
    906          
    907          /*********************************************************************
    908           * @fn      ZDApp_DeviceAuthEvt()
    909           *
    910           * @brief   Process the Device Authentic Event
    911           *
    912           * @param   none
    913           *
    914           * @return  none
    915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    916          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    917          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    918            // received authentication from trust center
    919            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   7049         JNZ       ??ZDApp_DeviceAuthEvt_0
    920            {
    921              // Stop the reset timer so it doesn't reset
    922              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    923          
    924              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV       R1,#0x6
   \   000011   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    925          
    926              // Set the Power Manager Device
    927          #if defined ( POWER_SAVING )
    928              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000014                ; Setup parameters for call to function osal_pwrmgr_device
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    929          #endif
    930          
    931              if ( ZSTACK_ROUTER_BUILD )
   \   000019   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6004         JZ        ??ZDApp_DeviceAuthEvt_1
   \   00001F   6401         XRL       A,#0x1
   \   000021   700E         JNZ       ??ZDApp_DeviceAuthEvt_2
    932              {
    933                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000023   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000026   6009         JZ        ??ZDApp_DeviceAuthEvt_2
    934                {
    935                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    936                  NLME_StartRouterRequest( 0, 0, false );
   \   000028                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   7A00         MOV       R2,#0x0
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
    937                }
    938              }
    939          
    940              // Notify to save info into NV
    941              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000031                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000031   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    942          
    943              // Save off the security
    944              ZDApp_SaveNwkKey();
   \   000034                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000034   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    945          
    946              ZDApp_AnnounceNewAddress();
   \   000037                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000037   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    947          
    948              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    949                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    950                    && (zgChildAgingEnable == TRUE) ) )
   \   00003A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   A2E3         MOV       C,0xE0 /* A   */.3
   \   000040   5008         JNC       ??ZDApp_DeviceAuthEvt_3
   \   000042   90....       MOV       DPTR,#zgChildAgingEnable
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6401         XRL       A,#0x1
   \   000048   700E         JNZ       ??ZDApp_DeviceAuthEvt_4
    951              {
    952                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   00004A                ; Setup parameters for call to function NLME_SetPollRate
   \   00004A   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00004D   12....       LCALL     ?XLOAD_R2345
   \   000050   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000053   8003         SJMP      ??ZDApp_DeviceAuthEvt_4
    953              }
    954            }
    955            else
    956            {
    957              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000055                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000055   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    958            }
    959          }
   \                     ??ZDApp_DeviceAuthEvt_4:
   \   000058   02....       LJMP      ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX      A,@DPTR
   \   000004   5407         ANL       A,#0x7
   \   000006   6402         XRL       A,#0x2
   \   000008   22           RET
    960          
    961          /*********************************************************************
    962           * @fn      ZDApp_SaveNetworkStateEvt()
    963           *
    964           * @brief   Process the Save the Network State Event
    965           *
    966           * @param   none
    967           *
    968           * @return  none
    969           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    970          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    971          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    972          #if defined ( NV_RESTORE )
    973           #if defined ( NV_TURN_OFF_RADIO )
    974            // Turn off the radio's receiver during an NV update
    975            uint8 RxOnIdle;
    976            uint8 x = false;
    977            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    978            ZMacSetReq( ZMacRxOnIdle, &x );
    979           #endif
    980          
    981            // Update the Network State in NV
    982            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    983                           NWK_NV_DEVICELIST_ENABLE |
    984                           NWK_NV_BINDING_ENABLE    |
    985                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV       R1,#0xf
   \   000006   12....       LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
    986          
    987            // Reset the NV startup option to resume from NV by
    988            // clearing the "New" join option.
    989            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV       R2,#0x2
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    990          
    991           #if defined ( NV_TURN_OFF_RADIO )
    992            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    993           #endif
    994          #endif // NV_RESTORE
    995          }
   \   000010   02....       LJMP      ??Subroutine62_0 & 0xFFFF
    996          
    997          #if defined ( NV_RESTORE )
    998          /*********************************************************************
    999           * @fn      ZDApp_RestoreNetworkState()
   1000           *
   1001           * @brief   This function will restore the network state of the
   1002           *          device if the network state is stored in NV.
   1003           *
   1004           * @param   none
   1005           *
   1006           * @return
   1007           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1008           *          restored.
   1009           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1010           *          This could mean that zgStartupOption said to not restore, or
   1011           *          it could mean that there was no network state to restore.
   1012           *
   1013           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1014          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1015          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1016            uint8 nvStat;
   1017          
   1018            // Initialize NWK NV items
   1019            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
   1020          
   1021            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV       A,#0xa
   \   00000C   6E           XRL       A,R6
   \   00000D   6044         JZ        ??ZDApp_RestoreNetworkState_0
   1022            {
   1023              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV       A,R1
   \   000013   6023         JZ        ??ZDApp_RestoreNetworkState_1
   1024              {
   1025                // Are we a coordinator
   1026                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   1027                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_162:
   \   00001E   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000024   7007         JNZ       ??ZDApp_RestoreNetworkState_2
   1028                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   54F8         ANL       A,#0xf8
   \   00002C   F0           MOVX      @DPTR,A
   1029                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002D   90....       MOV       DPTR,#devStartMode
   \   000030   12....       LCALL     ?Subroutine12 & 0xFFFF
   1030                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1031              }
   \                     ??CrossCallReturnLabel_83:
   \   000033   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000036   8002         SJMP      ??ZDApp_RestoreNetworkState_3
   1032              else
   1033                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000038   7E09         MOV       R6,#0x9
   1034          
   1035              if ( ZG_SECURE_ENABLED )
   1036              {
   1037                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00003A   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00003D   E4           CLR       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   F0           MOVX      @DPTR,A
   1038          
   1039                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   000041   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000044   E0           MOVX      A,@DPTR
   \   000045   7005         JNZ       ??ZDApp_RestoreNetworkState_4
   1040                {
   1041                  ZDApp_RestoreNwkKey( TRUE );
   \   000047                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000047   7901         MOV       R1,#0x1
   \   000049   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   1042                }
   1043              }
   1044          
   1045              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1046              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1047              // other than default.
   1048            }
   1049          
   1050            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00004C   EE           MOV       A,R6
   \   00004D   7004         JNZ       ??ZDApp_RestoreNetworkState_0
   1051              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00004F   7900         MOV       R1,#0x0
   \   000051   8002         SJMP      ??ZDApp_RestoreNetworkState_5
   1052            else
   1053              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000053   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_5:
   \   000055   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   1054          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine58_0
   \   000002                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1055          #endif // NV_RESTORE
   1056          
   1057          /*********************************************************************
   1058           * @fn      ZDApp_InitUserDesc()
   1059           *
   1060           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1061           *          when needed.  If you want to initialize the User descriptor to
   1062           *          something other than all zero, do it here.
   1063           *
   1064           * @param   none
   1065           *
   1066           * @return  none
   1067           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1068          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1069          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1070            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1071          
   1072            // Initialize the User Descriptor, the descriptor is read from NV
   1073            // when needed.  If you want to initialize the User descriptor to something
   1074            // other than all zero, do it here.
   1075            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   AA..         MOV       R2,?XSP + 0
   \   000012   AB..         MOV       R3,?XSP + 1
   \   000014   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1076            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1077                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV       R4,#0x11
   \   000026   7D00         MOV       R5,#0x0
   \   000028   7A81         MOV       R2,#-0x7f
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   E9           MOV       A,R1
   \   000035   7033         JNZ       ??ZDApp_InitUserDesc_0
   1078            {
   1079              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1080                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV       ?V0,#0x11
   \   00003F   75..00       MOV       ?V1,#0x0
   \   000042   78..         MOV       R0,#?V0
   \   000044   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV       R4,#0x0
   \   000049   7D00         MOV       R5,#0x0
   \   00004B   7A81         MOV       R2,#-0x7f
   \   00004D   7B00         MOV       R3,#0x0
   \   00004F   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   E9           MOV       A,R1
   \   000058   7010         JNZ       ??ZDApp_InitUserDesc_0
   1081              {
   1082                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   E0           MOVX      A,@DPTR
   \   000061   6007         JZ        ??ZDApp_InitUserDesc_0
   1083                {
   1084                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX      A,@DPTR
   \   000067   D2E4         SETB      0xE0 /* A   */.4
   \   000069   F0           MOVX      @DPTR,A
   1085                }
   1086              }
   1087            }
   1088          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV       A,#0x11
   \   00006C   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1089          
   1090          /*********************************************************************
   1091           * @fn      ZDAppCheckForHoldKey()
   1092           *
   1093           * @brief   Check for key to set the device into Hold Auto Start
   1094           *
   1095           * @param   none
   1096           *
   1097           * @return  none
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1100          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1101          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1102          
   1103            // Get Keypad directly to see if a HOLD is needed
   1104            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   000007   E9           MOV       A,R1
   \   000008   90....       MOV       DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX      @DPTR,A
   1105          
   1106            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1107            // while booting to avoid starting up the device.
   1108            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL       A,#0x1
   \   00000E   7005         JNZ       ??ZDAppCheckForHoldKey_0
   1109            {
   1110              // Change the device state to HOLD on start up
   1111              devState = DEV_HOLD;
   \   000010   90....       MOV       DPTR,#devState
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   1112            }
   1113          #endif // HAL_KEY
   1114          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   1115          
   1116          /*********************************************************************
   1117           * @fn      ZDApp_ProcessOSALMsg()
   1118           *
   1119           * @brief   Process the incoming task message.
   1120           *
   1121           * @param   msgPtr - message to process
   1122           *
   1123           * @return  none
   1124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1125          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1126          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1127            // Data Confirmation message fields
   1128            uint8 sentEP;       // This should always be 0
   1129            uint8 sentStatus;
   1130            afDataConfirm_t *afDataConfirm;
   1131            uint8 tmp;
   1132          
   1133            switch ( msgPtr->event )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   14           DEC       A
   \   000010   603B         JZ        ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC       A
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC       A
   \   000019   7003         JNZ       $+5
   \   00001B   02....       LJMP      ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD       A,#-0x17
   \   000020   600B         JZ        ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD       A,#0x47
   \   000024   600D         JZ        ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD       A,#-0x2a
   \   000028   600F         JZ        ??ZDApp_ProcessOSALMsg_5
   \   00002A   02....       LJMP      ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1134            {
   1135              // Incoming ZDO Message
   1136              case AF_INCOMING_MSG_CMD:
   1137                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002D                ; Setup parameters for call to function ZDP_IncomingData
   \   00002D   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1138                break;
   \   000030   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1139          
   1140              case ZDO_CB_MSG:
   1141                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000033                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000033   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1142                break;
   \   000036   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1143          
   1144              case AF_DATA_CONFIRM_CMD:
   1145                // This message is received as a confirmation of a data packet sent.
   1146                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1147                // The message fields are defined in AF.h
   1148                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1149                sentEP = afDataConfirm->endpoint;
   1150                sentStatus = afDataConfirm->hdr.status;
   1151          
   1152                // Action taken when confirmation is received.
   1153          #if defined ( ZIGBEE_FREQ_AGILITY )
   1154                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000039   90....       MOV       DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00003C   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1155                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000044                ; Setup parameters for indirect call
   \   000044   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000047   12....       LCALL     ?CALL_IND
   \   00004A   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1156          #endif
   1157                (void)sentEP;
   1158                (void)sentStatus;
   1159                break;
   1160          
   1161              case ZDO_NWK_DISC_CNF:
   1162                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00004D   90....       MOV       DPTR,#devState
   \   000050   E0           MOVX      A,@DPTR
   \   000051   6402         XRL       A,#0x2
   \   000053   6003         JZ        $+5
   \   000055   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1163                  break;
   1164          
   1165                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000058   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   6401         XRL       A,#0x1
   \   00005E   6008         JZ        ??ZDApp_ProcessOSALMsg_8
   \   000060   E0           MOVX      A,@DPTR
   \   000061   6402         XRL       A,#0x2
   \   000063   6003         JZ        $+5
   \   000065   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1166                {
   1167                  // Process the network discovery scan results and choose a parent
   1168                  // device to join/rejoin itself
   1169                  networkDesc_t *pChosenNwk;
   1170                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000068                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000068   12....       LCALL     `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   00006B   8A..         MOV       ?V0,R2
   \   00006D   8B..         MOV       ?V1,R3
   \   00006F   AE..         MOV       R6,?V0
   \   000071   AF..         MOV       R7,?V1
   \   000073   EE           MOV       A,R6
   \   000074   4F           ORL       A,R7
   \   000075   7003         JNZ       $+5
   \   000077   02....       LJMP      ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   \   00007A   90....       MOV       DPTR,#zdoDiscCounter
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   7003         JNZ       $+5
   \   000080   02....       LJMP      ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1171                  {
   1172                    if ( devStartMode == MODE_JOIN )
   \   000083   90....       MOV       DPTR,#devStartMode
   \   000086   E0           MOVX      A,@DPTR
   \   000087   7061         JNZ       ??ZDApp_ProcessOSALMsg_10
   1173                    {
   1174                      ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000089                ; Setup parameters for call to function ZDApp_ChangeState
   \   000089   7903         MOV       R1,#0x3
   \   00008B   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1175          
   1176                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   00008E                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   F9           MOV       R1,A
   \   00009A   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1177          
   1178                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1179                                            pChosenNwk->logicalChannel,
   1180                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1181                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   00009D                ; Setup parameters for call to function NLME_JoinRequest
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   F5..         MOV       ?V0,A
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B3   8E82         MOV       DPL,R6
   \   0000B5   8F83         MOV       DPH,R7
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000C1   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   F5..         MOV       ?V0,A
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CC   8E82         MOV       DPL,R6
   \   0000CE   8F83         MOV       DPH,R7
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   F9           MOV       R1,A
   \   0000D4   8E82         MOV       DPL,R6
   \   0000D6   8F83         MOV       DPH,R7
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   FC           MOV       R4,A
   \   0000DA   A3           INC       DPTR
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   12....       LCALL     ?Subroutine39 & 0xFFFF
   1182                      {
   1183                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1184                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1185                      }
   1186                    } // if ( devStartMode == MODE_JOIN )
   \                     ??CrossCallReturnLabel_87:
   \   0000DF   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000E2   7404         MOV       A,#0x4
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E7   02....       LJMP      ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1187                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000EA   6403         XRL       A,#0x3
   \   0000EC   6003         JZ        $+5
   \   0000EE   02....       LJMP      ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   1188                    {
   1189                      ZStatus_t rejoinStatus;
   1190          
   1191                      // Transition state machine to correct rejoin state based on previous state before network discovery
   1192                      if ( ZDApp_RestoreNwkKey( FALSE )== TRUE )
   \   0000F1                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0000F1   7900         MOV       R1,#0x0
   \   0000F3   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0000F6   E9           MOV       A,R1
   \   0000F7   6401         XRL       A,#0x1
   \   0000F9   90....       MOV       DPTR,#prevDevState
   \   0000FC   700D         JNZ       ??ZDApp_ProcessOSALMsg_13
   1193                      {
   1194                        if ( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   6404         XRL       A,#0x4
   \   000101   7004         JNZ       ??ZDApp_ProcessOSALMsg_14
   1195                        {
   1196                          ZDApp_ChangeState(DEV_NWK_SEC_REJOIN_ALL_CHANNEL);
   \   000103                ; Setup parameters for call to function ZDApp_ChangeState
   \   000103   790D         MOV       R1,#0xd
   \   000105   800F         SJMP      ??ZDApp_ProcessOSALMsg_15
   1197                        }
   1198                        else
   1199                        {
   1200                          ZDApp_ChangeState( DEV_NWK_SEC_REJOIN_CURR_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   000107                ; Setup parameters for call to function ZDApp_ChangeState
   \   000107   7904         MOV       R1,#0x4
   \   000109   800B         SJMP      ??ZDApp_ProcessOSALMsg_15
   1201                        }
   1202                      }
   1203                      else
   1204                      {
   1205                        if( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   640D         XRL       A,#0xd
   \   00010E   7004         JNZ       ??ZDApp_ProcessOSALMsg_16
   1206                        {
   1207                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_CURR_CHANNEL );
   \   000110                ; Setup parameters for call to function ZDApp_ChangeState
   \   000110   790E         MOV       R1,#0xe
   \   000112   8002         SJMP      ??ZDApp_ProcessOSALMsg_15
   1208                        }
   1209                        else
   1210                        {
   1211                          ZDApp_ChangeState( DEV_NWK_TC_REJOIN_ALL_CHANNEL );
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000114                ; Setup parameters for call to function ZDApp_ChangeState
   \   000114   790F         MOV       R1,#0xf
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   000116   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1212                        }
   1213                      }
   1214          
   1215                      // Before trying to do rejoin, check if the device has a valid short address
   1216                      // If not, generate a random short address for itself
   1217                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000119   90....       MOV       DPTR,#_NIB + 20
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   64FE         XRL       A,#0xfe
   \   00011F   7003         JNZ       ??ZDApp_ProcessOSALMsg_17
   \   000121   A3           INC       DPTR
   \   000122   E0           MOVX      A,@DPTR
   \   000123   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   000124   7065         JNZ       ??ZDApp_ProcessOSALMsg_18
   1218                      {
   1219                        uint16 commNwkAddr;
   1220          
   1221                        // Verify if the Network address has been commissioned by external tool
   1222                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1223                                           sizeof(commNwkAddr),
   1224                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1225                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   000126                ; Setup parameters for call to function osal_nv_read
   \   000126   7401         MOV       A,#0x1
   \   000128   12....       LCALL     ?XSTACK_DISP100_8
   \   00012B   88..         MOV       ?V0,R0
   \   00012D   89..         MOV       ?V1,R1
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000134   75..02       MOV       ?V0,#0x2
   \   000137   75..00       MOV       ?V1,#0x0
   \   00013A   78..         MOV       R0,#?V0
   \   00013C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013F   7C00         MOV       R4,#0x0
   \   000141   7D00         MOV       R5,#0x0
   \   000143   7A49         MOV       R2,#0x49
   \   000145   7B00         MOV       R3,#0x0
   \   000147   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00014A   7404         MOV       A,#0x4
   \   00014C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014F   E9           MOV       A,R1
   \   000150   7025         JNZ       ??ZDApp_ProcessOSALMsg_19
   \   000152   7401         MOV       A,#0x1
   \   000154   12....       LCALL     ?XSTACK_DISP0_8
   \   000157   E0           MOVX      A,@DPTR
   \   000158   64FE         XRL       A,#0xfe
   \   00015A   7003         JNZ       ??ZDApp_ProcessOSALMsg_20
   \   00015C   A3           INC       DPTR
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   00015F   6016         JZ        ??ZDApp_ProcessOSALMsg_19
   1226                        {
   1227                          _NIB.nwkDevAddress = commNwkAddr;
   \   000161   7401         MOV       A,#0x1
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000169   90....       MOV       DPTR,#_NIB + 20
   \   00016C   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1228          
   1229                          // clear Allocate address bit because device has a commissioned address
   1230                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \                     ??CrossCallReturnLabel_109:
   \   00016F   90....       MOV       DPTR,#_NIB + 14
   \   000172   E0           MOVX      A,@DPTR
   \   000173   C2E7         CLR       0xE0 /* A   */.7
   \   000175   800A         SJMP      ??ZDApp_ProcessOSALMsg_21
   1231                        }
   1232                        else
   1233                        {
   1234                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   000177                ; Setup parameters for call to function osal_rand
   \   000177   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00017A   90....       MOV       DPTR,#_NIB + 20
   \   00017D   EA           MOV       A,R2
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   EB           MOV       A,R3
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   000181   F0           MOVX      @DPTR,A
   1235                        }
   1236          
   1237                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   000182                ; Setup parameters for call to function ZMacSetReq
   \   000182   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   000184   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   000186   7953         MOV       R1,#0x53
   \   000188   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1238                      }
   1239          
   1240                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1241                      if ( _NIB.nwkPanId == 0xFFFF )
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   00018B   90....       MOV       DPTR,#_NIB + 33
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   F4           CPL       A
   \   000190   7003         JNZ       ??ZDApp_ProcessOSALMsg_22
   \   000192   A3           INC       DPTR
   \   000193   E0           MOVX      A,@DPTR
   \   000194   F4           CPL       A
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   000195   7012         JNZ       ??ZDApp_ProcessOSALMsg_23
   1242                      {
   1243                        _NIB.nwkPanId = pChosenNwk->panId;
   \   000197   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00019A   90....       MOV       DPTR,#_NIB + 33
   \   00019D   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1244                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \                     ??CrossCallReturnLabel_110:
   \   0001A0                ; Setup parameters for call to function ZMacSetReq
   \   0001A0   7A..         MOV       R2,#(_NIB + 33) & 0xff
   \   0001A2   7B..         MOV       R3,#((_NIB + 33) >> 8) & 0xff
   \   0001A4   7950         MOV       R1,#0x50
   \   0001A6   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1245                      }
   1246          
   1247                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   0001A9   85..82       MOV       DPL,?XSP + 0
   \   0001AC   85..83       MOV       DPH,?XSP + 1
   \   0001AF   7401         MOV       A,#0x1
   \   0001B1   F0           MOVX      @DPTR,A
   1248                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   0001B2                ; Setup parameters for call to function ZMacSetReq
   \   0001B2   AA..         MOV       R2,?XSP + 0
   \   0001B4   AB..         MOV       R3,?XSP + 1
   \   0001B6   7952         MOV       R1,#0x52
   \   0001B8   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1249          
   1250                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1251                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == TRUE ) )
   \   0001BB                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0001BB   7901         MOV       R1,#0x1
   \   0001BD   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   0001C0   E9           MOV       A,R1
   \   0001C1   6401         XRL       A,#0x1
   \   0001C3   8E82         MOV       DPL,R6
   \   0001C5   8F83         MOV       DPH,R7
   \   0001C7   A3           INC       DPTR
   \   0001C8   A3           INC       DPTR
   \   0001C9   700B         JNZ       ??ZDApp_ProcessOSALMsg_24
   1252                      {
   1253                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   0001CB                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   F9           MOV       R1,A
   \   0001CD   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0001CF   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001D1   12....       LCALL     `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   0001D4   8009         SJMP      ??ZDApp_ProcessOSALMsg_11
   1254                      }
   1255                      else
   1256                      {
   1257                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   0001D6                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   F9           MOV       R1,A
   \   0001D8   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   0001DA   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001DC   12....       LCALL     `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001DF   E9           MOV       A,R1
   1258                      }
   1259          
   1260                      if ( rejoinStatus != ZSuccess )
   \   0001E0   6009         JZ        ??ZDApp_ProcessOSALMsg_12
   1261                      {
   1262                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1263                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001E2                ; Setup parameters for call to function osal_rand
   \   0001E2   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001E5                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001E5   12....       LCALL     ?Subroutine36 & 0xFFFF
   1264                      }
   1265                    } // else if ( devStartMode == MODE_REJOIN )
   \                     ??CrossCallReturnLabel_33:
   \   0001E8   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1266          
   1267                    // The receiver is on, turn network layer polling off.
   1268                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0001EB   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001EE   E0           MOVX      A,@DPTR
   \   0001EF   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001F1   5034         JNC       ??ZDApp_ProcessOSALMsg_25
   1269                    {
   1270                      // for an End Device with NO Child Table Management process or for a Router
   1271                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1272                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001F3   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001F6   E0           MOVX      A,@DPTR
   \   0001F7   6015         JZ        ??ZDApp_ProcessOSALMsg_26
   \   0001F9   6401         XRL       A,#0x1
   \   0001FB   6011         JZ        ??ZDApp_ProcessOSALMsg_26
   \   0001FD   E0           MOVX      A,@DPTR
   \   0001FE   6402         XRL       A,#0x2
   \   000200   6003         JZ        $+5
   \   000202   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   000205   90....       MOV       DPTR,#zgChildAgingEnable
   \   000208   E0           MOVX      A,@DPTR
   \   000209   6003         JZ        $+5
   \   00020B   02....       LJMP      ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1273                      {
   1274                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_26:
   \   00020E                ; Setup parameters for call to function NLME_SetPollRate
   \   00020E   90....       MOV       DPTR,#__Constant_0
   \   000211   12....       LCALL     ?XLOAD_R2345
   \   000214   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1275                        NLME_SetQueuedPollRate( 0 );
   \   000217                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000217   7A00         MOV       R2,#0x0
   \   000219   7B00         MOV       R3,#0x0
   \   00021B   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1276                        NLME_SetResponseRate( 0 );
   \   00021E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00021E   7A00         MOV       R2,#0x0
   \   000220   7B00         MOV       R3,#0x0
   \   000222   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000225   807A         SJMP      ??ZDApp_ProcessOSALMsg_7
   1277                      }
   1278                    }
   1279                    else
   1280                    {
   1281                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000227   90....       MOV       DPTR,#devStartMode
   \   00022A   E0           MOVX      A,@DPTR
   \   00022B   7074         JNZ       ??ZDApp_ProcessOSALMsg_7
   1282                      {
   1283                        ZDApp_SavedPollRate = zgPollRate;
   \   00022D   90....       MOV       DPTR,#zgPollRate
   \   000230   12....       LCALL     ?XLOAD_R0123
   \   000233   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000236   12....       LCALL     ?XSTORE_R0123
   1284                        NLME_SetPollRate( zgRejoinPollRate );
   \   000239                ; Setup parameters for call to function NLME_SetPollRate
   \   000239   90....       MOV       DPTR,#zgRejoinPollRate
   \   00023C   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   1285                      }
   1286                    }
   1287                  }
   \                     ??CrossCallReturnLabel_90:
   \   00023F   AA..         MOV       R2,?V0
   \   000241   FB           MOV       R3,A
   \   000242   E4           CLR       A
   \   000243   FC           MOV       R4,A
   \   000244   FD           MOV       R5,A
   \   000245   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000248   8057         SJMP      ??ZDApp_ProcessOSALMsg_7
   1288                  else
   1289                  {
   1290                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   00024A   90....       MOV       DPTR,#continueJoining
   \   00024D   E0           MOVX      A,@DPTR
   \   00024E   6051         JZ        ??ZDApp_ProcessOSALMsg_7
   1291                    {
   1292          #if defined ( MANAGED_SCAN )
   1293                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1294          #else
   1295                      zdoDiscCounter++;
   \   000250   90....       MOV       DPTR,#zdoDiscCounter
   \   000253   E0           MOVX      A,@DPTR
   \   000254   04           INC       A
   \   000255   F0           MOVX      @DPTR,A
   1296                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1297                                                  + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000256                ; Setup parameters for call to function osal_rand
   \   000256   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000259                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000259   EA           MOV       A,R2
   \   00025A   2464         ADD       A,#0x64
   \   00025C   FA           MOV       R2,A
   \   00025D   E4           CLR       A
   \   00025E   3400         ADDC      A,#0x0
   \   000260   FB           MOV       R3,A
   \   000261   8036         SJMP      ??ZDApp_ProcessOSALMsg_27
   1298          #endif
   1299                    }
   1300                  }
   1301                }
   1302                break;
   1303          
   1304              case ZDO_NWK_JOIN_IND:
   1305                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000263   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000266   E0           MOVX      A,@DPTR
   \   000267   6401         XRL       A,#0x1
   \   000269   6005         JZ        ??ZDApp_ProcessOSALMsg_28
   \   00026B   E0           MOVX      A,@DPTR
   \   00026C   6402         XRL       A,#0x2
   \   00026E   7031         JNZ       ??ZDApp_ProcessOSALMsg_7
   1306                {
   1307                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_28:
   \   000270                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000270   12....       LCALL     `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000273   802C         SJMP      ??ZDApp_ProcessOSALMsg_7
   1308                }
   1309                break;
   1310          
   1311              case ZDO_NWK_JOIN_REQ:
   1312                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000275   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000278   E0           MOVX      A,@DPTR
   \   000279   6401         XRL       A,#0x1
   \   00027B   6005         JZ        ??ZDApp_ProcessOSALMsg_29
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   6402         XRL       A,#0x2
   \   000280   701F         JNZ       ??ZDApp_ProcessOSALMsg_7
   1313                {
   1314                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_29:
   \   000282   90....       MOV       DPTR,#retryCnt
   \   000285   E4           CLR       A
   \   000286   12....       LCALL     ?Subroutine15 & 0xFFFF
   1315                  devStartMode = MODE_RESUME;
   1316                  _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_5:
   \   000289   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   1317                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_85:
   \   00028C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1318                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   00028F   90....       MOV       DPTR,#zgDefaultStartingScanDuration
   \   000292   7402         MOV       A,#0x2
   \   000294   F0           MOVX      @DPTR,A
   1319                  ZDApp_NetworkInit( 0 );
   \   000295                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000295   7A00         MOV       R2,#0x0
   \   000297   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_27:
   \   000299   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   00029C   8003         SJMP      ??ZDApp_ProcessOSALMsg_7
   1320                }
   1321                break;
   1322          
   1323              default:
   1324                if ( ZG_SECURE_ENABLED )
   1325                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   00029E                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   00029E   12....       LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1326                break;
   1327            }
   1328          
   1329          }
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   0002A1   7403         MOV       A,#0x3
   \   0002A3   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   FD           MOV       R5,A
   \   000001                REQUIRE ??Subroutine59_0
   \   000001                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EA           MOV       A,R2
   \   000001   547F         ANL       A,#0x7f
   \   000003   2464         ADD       A,#0x64
   \   000005   FA           MOV       R2,A
   \   000006   7B00         MOV       R3,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#devStartMode
   \   000004   04           INC       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   90....       MOV       DPTR,#_tmpRejoinState
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine63_0
   \   000004                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   22           RET
   1330          
   1331          /*********************************************************************
   1332           * @fn      ZDApp_ProcessMsgCBs()
   1333           *
   1334           * @brief   Process response messages
   1335           *
   1336           * @param   none
   1337           *
   1338           * @return  none
   1339           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1340          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1341          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV       A,#-0x2c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1342            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000011   F5..         MOV       ?V1,A
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0300         DW        3
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   2180         DW        32801
   \   000028   2280         DW        32802
   \   00002A   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   00002C   0100         DW        1
   \   00002E   2000         DW        32
   \   000030   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000032   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1343            {
   1344          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1345              case NWK_addr_rsp:
   1346              case IEEE_addr_rsp:
   1347                {
   1348                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1349          
   1350                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   000034                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000034   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000037   8A..         MOV       ?V0,R2
   \   000039   8B..         MOV       ?V1,R3
   1351                  if ( pAddrRsp )
   \   00003B   EA           MOV       A,R2
   \   00003C   45..         ORL       A,?V1
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1352                  {
   1353                    if ( pAddrRsp->status == ZSuccess )
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   E0           MOVX      A,@DPTR
   \   000048   700F         JNZ       ??ZDApp_ProcessMsgCBs_5
   1354                    {
   1355                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00004A                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00004A   EA           MOV       A,R2
   \   00004B   2403         ADD       A,#0x3
   \   00004D   FC           MOV       R4,A
   \   00004E   E4           CLR       A
   \   00004F   35..         ADDC      A,?V1
   \   000051   FD           MOV       R5,A
   \   000052   A3           INC       DPTR
   \   000053   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1356                    }
   \                     ??CrossCallReturnLabel_94:
   \   000056   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1357          
   1358          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1359                    // look for pending bind entry for NWK_addr_rsp Only
   1360                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000059   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00005C   7004         JNZ       ??ZDApp_ProcessMsgCBs_6
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   6480         XRL       A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000062   700C         JNZ       ??ZDApp_ProcessMsgCBs_7
   1361                    {
   1362          #if defined ( REFLECTOR )
   1363                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   000064                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   000064   E5..         MOV       A,?V0
   \   000066   2403         ADD       A,#0x3
   \   000068   FA           MOV       R2,A
   \   000069   E4           CLR       A
   \   00006A   35..         ADDC      A,?V1
   \   00006C   FB           MOV       R3,A
   \   00006D   12....       LCALL     `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1364          #endif
   1365                    }
   1366          #endif
   1367          
   1368                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000070                ; Setup parameters for call to function osal_mem_free
   \   000070   AA..         MOV       R2,?V0
   \   000072   AB..         MOV       R3,?V1
   \   000074   807E         SJMP      ??CrossCallReturnLabel_96
   1369                  }
   1370                }
   1371                break;
   1372          #endif
   1373          
   1374          #if defined ( REFLECTOR )
   1375              case Bind_req:
   1376              case Unbind_req:
   1377                {
   1378                  ZDO_BindUnbindReq_t bindReq;
   1379                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000076                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000076   7417         MOV       A,#0x17
   \   000078   12....       LCALL     ?XSTACK_DISP102_8
   \   00007B   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1380                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00007E                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00007E   7417         MOV       A,#0x17
   \   000080   12....       LCALL     ?XSTACK_DISP102_8
   \   000083   EE           MOV       A,R6
   \   000084   FA           MOV       R2,A
   \   000085   EF           MOV       A,R7
   \   000086   FB           MOV       R3,A
   \   000087   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1381                }
   1382                break;
   \   00008A   806B         SJMP      ??ZDApp_ProcessMsgCBs_4
   1383          #endif
   1384          
   1385          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1386              case Bind_rsp:
   1387              case Unbind_rsp:
   1388                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00008C   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   7065         JNZ       ??ZDApp_ProcessMsgCBs_4
   \   000092   90....       MOV       DPTR,#matchED
   \   000095   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000098   605D         JZ        ??ZDApp_ProcessMsgCBs_4
   1389                {
   1390                  ZDMatchSendState(
   1391                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1392                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   00009A   12....       LCALL     ?Subroutine40 & 0xFFFF
   1393                }
   \                     ??CrossCallReturnLabel_43:
   \   00009D   6421         XRL       A,#0x21
   \   00009F   7004         JNZ       ??ZDApp_ProcessMsgCBs_8
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6480         XRL       A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   0000A5   7004         JNZ       ??ZDApp_ProcessMsgCBs_9
   \   0000A7   7903         MOV       R1,#0x3
   \   0000A9   8002         SJMP      ??ZDApp_ProcessMsgCBs_10
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   0000AB   7902         MOV       R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000AD                ; Setup parameters for call to function ZDMatchSendState
   \   0000AD   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000B0   FB           MOV       R3,A
   \   0000B1   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000B4   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000B7   FA           MOV       R2,A
   \   0000B8   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0000BB   803A         SJMP      ??ZDApp_ProcessMsgCBs_4
   1394                break;
   1395          
   1396              case End_Device_Bind_req:
   1397                if (ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000BD   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   7034         JNZ       ??ZDApp_ProcessMsgCBs_4
   1398                {
   1399                  ZDEndDeviceBind_t bindReq;
   1400                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \   0000C3                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000C3   AC..         MOV       R4,?XSP + 0
   \   0000C5   AD..         MOV       R5,?XSP + 1
   \   0000C7   12....       LCALL     `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1401                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000CA                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000CA   AA..         MOV       R2,?XSP + 0
   \   0000CC   AB..         MOV       R3,?XSP + 1
   \   0000CE   12....       LCALL     `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1402          
   1403                  // Freeing the cluster lists - if allocated.
   1404                  if ( bindReq.numInClusters )
   \   0000D1   7411         MOV       A,#0x11
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   600B         JZ        ??ZDApp_ProcessMsgCBs_11
   1405                    osal_mem_free( bindReq.inClusters );
   \   0000D9                ; Setup parameters for call to function osal_mem_free
   \   0000D9   7412         MOV       A,#0x12
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000E1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1406                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   0000E4   7414         MOV       A,#0x14
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   600B         JZ        ??ZDApp_ProcessMsgCBs_4
   1407                    osal_mem_free( bindReq.outClusters );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   7415         MOV       A,#0x15
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1408                }
   1409                break;
   1410          #endif
   1411            }
   \                     ??CrossCallReturnLabel_96:
   \   0000F4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1412          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000F7   742C         MOV       A,#0x2c
   \   0000F9   02....       LJMP      ??Subroutine76_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   EE           MOV       A,R6
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EE           MOV       A,R6
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine77_0
   \   000003                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1413          
   1414          /*********************************************************************
   1415           * @fn      ZDApp_RegisterCBs()
   1416           *
   1417           * @brief   Process response messages
   1418           *
   1419           * @param   none
   1420           *
   1421           * @return  none
   1422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1423          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1424          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1425          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1426            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   7B80         MOV       R3,#-0x80
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1427          #endif
   1428          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1429            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV       R2,#0x0
   \   000012   7B80         MOV       R3,#-0x80
   \   000014   90....       MOV       DPTR,#ZDAppTaskID
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1430          #endif
   1431          #if ZG_BUILD_COORDINATOR_TYPE
   1432            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV       R2,#0x21
   \   00001E   7B80         MOV       R3,#-0x80
   \   000020   90....       MOV       DPTR,#ZDAppTaskID
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F9           MOV       R1,A
   \   000025   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1433            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV       R2,#0x22
   \   00002A   7B80         MOV       R3,#-0x80
   \   00002C   90....       MOV       DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F9           MOV       R1,A
   \   000031   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1434            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \   000034                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000034   7A20         MOV       R2,#0x20
   \   000036   7B00         MOV       R3,#0x0
   \   000038   90....       MOV       DPTR,#ZDAppTaskID
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1435          #endif
   1436          #if defined ( REFLECTOR )
   1437            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   000040                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000040   7A21         MOV       R2,#0x21
   \   000042   7B00         MOV       R3,#0x0
   \   000044   90....       MOV       DPTR,#ZDAppTaskID
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   \   000049   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1438            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   00004C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00004C   7A22         MOV       R2,#0x22
   \   00004E   7B00         MOV       R3,#0x0
   \   000050   90....       MOV       DPTR,#ZDAppTaskID
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1439          #endif
   1440          }
   \   000058   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   1441          
   1442          /*********************************************************************
   1443           * @fn      ZDApp_ProcessSecMsg()
   1444           *
   1445           * @brief   Process the incoming security message.
   1446           *
   1447           * @param   msgPtr - message to process
   1448           *
   1449           * @return  none
   1450           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1451          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1452          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1453            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   24FC         ADD       A,#-0x4
   \   00000B   6009         JZ        ??ZDApp_ProcessSecMsg_0
   \   00000D   14           DEC       A
   \   00000E   6018         JZ        ??ZDApp_ProcessSecMsg_1
   \   000010   24FD         ADD       A,#-0x3
   \   000012   601F         JZ        ??ZDApp_ProcessSecMsg_2
   \   000014   802D         SJMP      ??ZDApp_ProcessSecMsg_3
   1454            {
   1455              case ZDO_TRANSPORT_KEY_IND:
   1456                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000016   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6401         XRL       A,#0x1
   \   00001C   6005         JZ        ??ZDApp_ProcessSecMsg_4
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6402         XRL       A,#0x2
   \   000021   7020         JNZ       ??ZDApp_ProcessSecMsg_3
   1457                {
   1458                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000023                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000023   12....       LCALL     `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000026   801B         SJMP      ??ZDApp_ProcessSecMsg_3
   1459                }
   1460                break;
   1461          
   1462              case ZDO_UPDATE_DEVICE_IND:
   1463                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000028   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   7015         JNZ       ??ZDApp_ProcessSecMsg_3
   1464                {
   1465                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   00002E                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   00002E   12....       LCALL     `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   \   000031   8010         SJMP      ??ZDApp_ProcessSecMsg_3
   1466                }
   1467                break;
   1468          
   1469              case ZDO_REMOVE_DEVICE_IND:
   1470                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1471                {
   1472                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1473                }
   1474                break;
   1475          
   1476              case ZDO_REQUEST_KEY_IND:
   1477                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1478                {
   1479                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1480                  {
   1481                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1482                  }
   1483                }
   1484                break;
   1485          
   1486              case ZDO_SWITCH_KEY_IND:
   1487                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000033   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000036   E0           MOVX      A,@DPTR
   \   000037   6401         XRL       A,#0x1
   \   000039   6005         JZ        ??ZDApp_ProcessSecMsg_5
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6402         XRL       A,#0x2
   \   00003E   7003         JNZ       ??ZDApp_ProcessSecMsg_3
   1488                {
   1489                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000040                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000040   12....       LCALL     `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1490                }
   1491                break;
   1492          
   1493              default:
   1494                // Unsupported messages
   1495                break;
   1496            }
   1497          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000043   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   1498          
   1499          /*********************************************************************
   1500           * @fn      ZDApp_ProcessNetworkJoin()
   1501           *
   1502           * @brief
   1503           *
   1504           *   Save off the Network key information.
   1505           *
   1506           * @param   none
   1507           *
   1508           * @return  none
   1509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1510          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1511          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1512            if ( (devState == DEV_NWK_JOINING) ||
   1513                ((devState == DEV_NWK_ORPHAN)  &&
   1514                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6403         XRL       A,#0x3
   \   000010   6015         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX      A,@DPTR
   \   000013   640A         XRL       A,#0xa
   \   000015   6003         JZ        $+5
   \   000017   02....       LJMP      ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   5407         ANL       A,#0x7
   \   000020   6401         XRL       A,#0x1
   \   000022   6003         JZ        $+5
   \   000024   02....       LJMP      ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1515            {
   1516              // Result of a Join attempt by this device.
   1517              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV       DPTR,#nwkStatus
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   706C         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1518              {
   1519                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV       R2,#0x10
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   90....       MOV       DPTR,#ZDAppTaskID
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1520          
   1521          #if defined ( POWER_SAVING )
   1522                osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000039                ; Setup parameters for call to function osal_pwrmgr_device
   \   000039   7901         MOV       R1,#0x1
   \   00003B   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1523          #endif
   1524          
   1525                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00003E                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00003E   7901         MOV       R1,#0x1
   \   000040   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000043   E9           MOV       A,R1
   \   000044   7003         JNZ       $+5
   \   000046   02....       LJMP      ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1526                {
   1527                  // wait for auth from trust center
   1528                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   1529          
   1530                  // Start the reset timer for MAX UNAUTH time
   1531                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1532                }
   1533                else
   1534                {
   1535                  if ( ZSTACK_ROUTER_BUILD )
   \   000049   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6004         JZ        ??ZDApp_ProcessNetworkJoin_5
   \   00004F   6401         XRL       A,#0x1
   \   000051   7015         JNZ       ??ZDApp_ProcessNetworkJoin_6
   1536                  {
   1537                    if ( devState == DEV_NWK_ORPHAN
   1538                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000053   90....       MOV       DPTR,#devState
   \   000056   E0           MOVX      A,@DPTR
   \   000057   640A         XRL       A,#0xa
   \   000059   700D         JNZ       ??ZDApp_ProcessNetworkJoin_6
   \   00005B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00005E   6013         JZ        ??ZDApp_ProcessNetworkJoin_7
   1539                    {
   1540                      // Change NIB state to router for restore
   1541                      _NIB.nwkState = NWK_ROUTER;
   \   000060   90....       MOV       DPTR,#_NIB + 35
   \   000063   7408         MOV       A,#0x8
   \   000065   F0           MOVX      @DPTR,A
   \   000066   800B         SJMP      ??ZDApp_ProcessNetworkJoin_7
   1542                    }
   1543                  }
   1544          
   1545                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000068   90....       MOV       DPTR,#devState
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6403         XRL       A,#0x3
   \   00006E   7003         JNZ       ??ZDApp_ProcessNetworkJoin_7
   1546                  {
   1547                    ZDApp_AnnounceNewAddress();
   \   000070                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000070   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1548                  }
   1549          
   1550                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000073                ; Setup parameters for call to function ZDApp_ChangeState
   \   000073   7906         MOV       R1,#0x6
   \   000075   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1551          
   1552                  if ( ZSTACK_ROUTER_BUILD )
   \   000078   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   6007         JZ        ??ZDApp_ProcessNetworkJoin_8
   \   00007E   6401         XRL       A,#0x1
   \   000080   6003         JZ        $+5
   \   000082   02....       LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1553                  {
   1554                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1555                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000085   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000088   7003         JNZ       $+5
   \   00008A   02....       LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1556                    {
   1557                      NLME_StartRouterRequest( 0, 0, false );
   \   00008D                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00008D   7B00         MOV       R3,#0x0
   \   00008F   7A00         MOV       R2,#0x0
   \   000091   7900         MOV       R1,#0x0
   \   000093   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000096   02....       LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1558                    }
   1559                  }
   1560                }
   1561              }
   1562              else
   1563              {
   1564                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000099   90....       MOV       DPTR,#devStartMode
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   6401         XRL       A,#0x1
   \   00009F   7026         JNZ       ??ZDApp_ProcessNetworkJoin_10
   \   0000A1   90....       MOV       DPTR,#retryCnt
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   04           INC       A
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   C3           CLR       C
   \   0000A8   9403         SUBB      A,#0x3
   \   0000AA   401B         JC        ??ZDApp_ProcessNetworkJoin_10
   1565                {
   1566                  if ( _NIB.nwkPanId == 0xFFFF )
   \   0000AC   90....       MOV       DPTR,#_NIB + 33
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   F4           CPL       A
   \   0000B1   7003         JNZ       ??ZDApp_ProcessNetworkJoin_11
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000B6   90....       MOV       DPTR,#devStartMode
   \   0000B9   7003         JNZ       ??ZDApp_ProcessNetworkJoin_12
   1567                    devStartMode = MODE_JOIN;
   \   0000BB   E4           CLR       A
   \   0000BC   8008         SJMP      ??ZDApp_ProcessNetworkJoin_13
   1568                  else
   1569                  {
   1570                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000BE   7403         MOV       A,#0x3
   \   0000C0   F0           MOVX      @DPTR,A
   1571                    _tmpRejoinState = true;
   \   0000C1   90....       MOV       DPTR,#_tmpRejoinState
   \   0000C4   7401         MOV       A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000C6   F0           MOVX      @DPTR,A
   1572                  }
   1573                }
   1574          
   1575                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1576                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000C7                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000C7   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000CA   8A..         MOV       ?V0,R2
   \   0000CC   8B..         MOV       ?V1,R3
   \   0000CE   74FE         MOV       A,#-0x2
   \   0000D0   65..         XRL       A,?V0
   \   0000D2   7004         JNZ       ??ZDApp_ProcessNetworkJoin_14
   \   0000D4   74FF         MOV       A,#-0x1
   \   0000D6   65..         XRL       A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000D8   700D         JNZ       ??ZDApp_ProcessNetworkJoin_15
   \   0000DA   90....       MOV       DPTR,#_NIB + 20
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   64FE         XRL       A,#0xfe
   \   0000E0   7003         JNZ       ??ZDApp_ProcessNetworkJoin_16
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000E5   601D         JZ        ??ZDApp_ProcessNetworkJoin_17
   1577                {
   1578                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000E7   85..82       MOV       DPL,?XSP + 0
   \   0000EA   85..83       MOV       DPH,?XSP + 1
   \   0000ED   74FE         MOV       A,#-0x2
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   04           INC       A
   \   0000F2   F0           MOVX      @DPTR,A
   1579                  // Invalidate nwk addr so end device does not use in its data reqs.
   1580                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000F3   90....       MOV       DPTR,#_NIB + 20
   \   0000F6   14           DEC       A
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   04           INC       A
   \   0000FA   F0           MOVX      @DPTR,A
   1581                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   0000FB                ; Setup parameters for call to function ZMacSetReq
   \   0000FB   AA..         MOV       R2,?XSP + 0
   \   0000FD   AB..         MOV       R3,?XSP + 1
   \   0000FF   7953         MOV       R1,#0x53
   \   000101   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1582                }
   1583          
   1584                // Clear the neighbor Table and network discovery tables.
   1585                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   000104                ; Setup parameters for call to function nwkNeighborInitTable
   \   000104   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1586                NLME_NwkDiscTerm();
   \   000107                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000107   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1587          
   1588                zdoDiscCounter = 1;
   \   00010A   90....       MOV       DPTR,#zdoDiscCounter
   \   00010D   7401         MOV       A,#0x1
   \   00010F   F0           MOVX      @DPTR,A
   1589          
   1590                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1591                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   000110                ; Setup parameters for call to function osal_rand
   \   000110   02....       LJMP      ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
   1592              }
   1593            }
   1594            else if ( devState == DEV_NWK_ORPHAN ||
   1595                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1596                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1597                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1598                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   000113   E0           MOVX      A,@DPTR
   \   000114   6404         XRL       A,#0x4
   \   000116   6012         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000118   E0           MOVX      A,@DPTR
   \   000119   640E         XRL       A,#0xe
   \   00011B   600D         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   640F         XRL       A,#0xf
   \   000120   6008         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000122   E0           MOVX      A,@DPTR
   \   000123   640D         XRL       A,#0xd
   \   000125   6003         JZ        $+5
   \   000127   02....       LJMP      ??ZDApp_ProcessNetworkJoin_19 & 0xFFFF
   1599            {
   1600              // results of an orphaning attempt by this device
   1601              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   00012A   90....       MOV       DPTR,#nwkStatus
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   6003         JZ        $+5
   \   000130   02....       LJMP      ??ZDApp_ProcessNetworkJoin_20 & 0xFFFF
   1602              {
   1603                //When the device has successfully rejoined then reset retryCnt
   1604                retryCnt = 0;
   \   000133   90....       MOV       DPTR,#retryCnt
   \   000136   E4           CLR       A
   \   000137   F0           MOVX      @DPTR,A
   1605          
   1606                // Verify NWK key is available before sending Device_annce
   1607                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   000138                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000138   7901         MOV       R1,#0x1
   \   00013A   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00013D   E9           MOV       A,R1
   \   00013E   700F         JNZ       ??ZDApp_ProcessNetworkJoin_21
   1608                {
   1609                  // wait for auth from trust center
   1610                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000140                ; Setup parameters for call to function ZDApp_ChangeState
   \   000140   7905         MOV       R1,#0x5
   \   000142   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1611          
   1612                  // Start the reset timer for MAX UNAUTH time
   1613                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000145                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000145   7A10         MOV       R2,#0x10
   \   000147   7B27         MOV       R3,#0x27
   \   000149   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   00014C   02....       LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1614                }
   1615                else
   1616                {
   1617                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   00014F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00014F   7906         MOV       R1,#0x6
   \   000151   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1618          
   1619                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   000154                ; Setup parameters for call to function osal_stop_timerEx
   \   000154   7A00         MOV       R2,#0x0
   \   000156   7B20         MOV       R3,#0x20
   \   000158   90....       MOV       DPTR,#ZDAppTaskID
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   F9           MOV       R1,A
   \   00015D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1620          
   1621                  // setup Power Manager Device
   1622          #if defined ( POWER_SAVING )
   1623                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000160                ; Setup parameters for call to function osal_pwrmgr_device
   \   000160   7901         MOV       R1,#0x1
   \   000162   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1624          #endif
   1625          
   1626                  // The receiver is on, turn network layer polling off.
   1627                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000165   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000168   E0           MOVX      A,@DPTR
   \   000169   A2E3         MOV       C,0xE0 /* A   */.3
   \   00016B   501D         JNC       ??ZDApp_ProcessNetworkJoin_22
   1628                  {
   1629                    // if Child Table Management process is not enabled
   1630                    if ( zgChildAgingEnable == FALSE )
   \   00016D   90....       MOV       DPTR,#zgChildAgingEnable
   \   000170   E0           MOVX      A,@DPTR
   \   000171   7017         JNZ       ??ZDApp_ProcessNetworkJoin_22
   1631                    {
   1632                      NLME_SetPollRate( 0 );
   \   000173                ; Setup parameters for call to function NLME_SetPollRate
   \   000173   90....       MOV       DPTR,#__Constant_0
   \   000176   12....       LCALL     ?XLOAD_R2345
   \   000179   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1633                      NLME_SetQueuedPollRate( 0 );
   \   00017C                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00017C   7A00         MOV       R2,#0x0
   \   00017E   7B00         MOV       R3,#0x0
   \   000180   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1634                      NLME_SetResponseRate( 0 );
   \   000183                ; Setup parameters for call to function NLME_SetResponseRate
   \   000183   7A00         MOV       R2,#0x0
   \   000185   7B00         MOV       R3,#0x0
   \   000187   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1635                    }
   1636                  }
   1637          
   1638                  if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00018A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   6004         JZ        ??ZDApp_ProcessNetworkJoin_23
   \   000190   6401         XRL       A,#0x1
   \   000192   700E         JNZ       ??ZDApp_ProcessNetworkJoin_24
   1639                  {
   1640                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1641                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000194   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000197   6009         JZ        ??ZDApp_ProcessNetworkJoin_24
   1642                    {
   1643                      NLME_StartRouterRequest( 0, 0, false );
   \   000199                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000199   7B00         MOV       R3,#0x0
   \   00019B   7A00         MOV       R2,#0x0
   \   00019D   7900         MOV       R1,#0x0
   \   00019F   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1644                    }
   1645                  }
   1646          
   1647                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001A2                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001A2   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1648          
   1649                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1650                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1651                        && (zgChildAgingEnable == TRUE) ) )
   \   0001A5   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001AB   500B         JNC       ??ZDApp_ProcessNetworkJoin_25
   \   0001AD   90....       MOV       DPTR,#zgChildAgingEnable
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   6401         XRL       A,#0x1
   \   0001B3   6003         JZ        $+5
   \   0001B5   02....       LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1652                  {
   1653                    NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   0001B8                ; Setup parameters for call to function NLME_SetPollRate
   \   0001B8   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   0001BB   12....       LCALL     ?XLOAD_R2345
   \   0001BE   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   0001C1   02....       LJMP      ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1654                  }
   1655                }
   1656              }
   1657              else
   1658              {
   1659                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   0001C4   90....       MOV       DPTR,#devStartMode
   \   0001C7   E0           MOVX      A,@DPTR
   \   0001C8   6401         XRL       A,#0x1
   \   0001CA   7038         JNZ       ??ZDApp_ProcessNetworkJoin_26
   1660                {
   1661                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   0001CC   90....       MOV       DPTR,#retryCnt
   \   0001CF   E0           MOVX      A,@DPTR
   \   0001D0   04           INC       A
   \   0001D1   F0           MOVX      @DPTR,A
   \   0001D2   C3           CLR       C
   \   0001D3   9404         SUBB      A,#0x4
   \   0001D5   501F         JNC       ??ZDApp_ProcessNetworkJoin_27
   1662                  {
   1663                    if ( _NIB.nwkPanId == 0xFFFF )
   \   0001D7   90....       MOV       DPTR,#_NIB + 33
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   F4           CPL       A
   \   0001DC   7003         JNZ       ??ZDApp_ProcessNetworkJoin_28
   \   0001DE   A3           INC       DPTR
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   0001E1   601B         JZ        ??ZDApp_ProcessNetworkJoin_29
   1664                      devStartMode = MODE_JOIN;
   1665                    else
   1666                    {
   1667                      devStartMode = MODE_REJOIN;
   \   0001E3   90....       MOV       DPTR,#devStartMode
   \   0001E6   7403         MOV       A,#0x3
   \   0001E8   F0           MOVX      @DPTR,A
   1668                      _tmpRejoinState = true;
   \   0001E9   90....       MOV       DPTR,#_tmpRejoinState
   \   0001EC   7401         MOV       A,#0x1
   \   0001EE   F0           MOVX      @DPTR,A
   1669                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   0001EF   90....       MOV       DPTR,#prevDevState
   \   0001F2   7404         MOV       A,#0x4
   \   0001F4   8070         SJMP      ??ZDApp_ProcessNetworkJoin_30
   1670                    }
   1671                  }
   1672                  // Do a normal join to the network after certain times of rejoin retries
   1673                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001F6   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   6401         XRL       A,#0x1
   \   0001FC   7069         JNZ       ??ZDApp_ProcessNetworkJoin_31
   1674                  {
   1675                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_29:
   \   0001FE   90....       MOV       DPTR,#devStartMode
   \   000201   E4           CLR       A
   \   000202   8062         SJMP      ??ZDApp_ProcessNetworkJoin_30
   1676                  }
   1677                }
   1678                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000204   E0           MOVX      A,@DPTR
   \   000205   6403         XRL       A,#0x3
   \   000207   705E         JNZ       ??ZDApp_ProcessNetworkJoin_31
   1679                {
   1680                  if ( ZSTACK_END_DEVICE_BUILD )
   \   000209   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00020C   E0           MOVX      A,@DPTR
   \   00020D   6402         XRL       A,#0x2
   \   00020F   7056         JNZ       ??ZDApp_ProcessNetworkJoin_31
   1681                  {
   1682                    devStartMode = MODE_REJOIN;
   1683                    _tmpRejoinState = true;
   \   000211   90....       MOV       DPTR,#_tmpRejoinState
   \   000214   7401         MOV       A,#0x1
   \   000216   F0           MOVX      @DPTR,A
   1684                    _NIB.nwkState = NWK_INIT;
   \   000217   90....       MOV       DPTR,#_NIB + 35
   \   00021A   E4           CLR       A
   \   00021B   F0           MOVX      @DPTR,A
   1685          
   1686                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   00021C   90....       MOV       DPTR,#prevDevState
   \   00021F   E0           MOVX      A,@DPTR
   \   000220   6404         XRL       A,#0x4
   \   000222   7007         JNZ       ??ZDApp_ProcessNetworkJoin_32
   1687                    {
   1688                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   000224   12....       LCALL     ?Subroutine11 & 0xFFFF
   1689                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1690                    }
   \                     ??CrossCallReturnLabel_0:
   \   000227   740D         MOV       A,#0xd
   \   000229   803B         SJMP      ??ZDApp_ProcessNetworkJoin_30
   1691                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   \                     ??ZDApp_ProcessNetworkJoin_32:
   \   00022B   E0           MOVX      A,@DPTR
   \   00022C   640D         XRL       A,#0xd
   \   00022E   702C         JNZ       ??ZDApp_ProcessNetworkJoin_33
   1692                    {
   1693                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1694                      _NIB.nwkKeyLoaded = FALSE;
   \   000230   90....       MOV       DPTR,#_NIB + 61
   \   000233   E4           CLR       A
   \   000234   F0           MOVX      @DPTR,A
   1695                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   \   000235                ; Setup parameters for call to function ZDApp_ResetNwkKey
   \   000235   12....       LCALL     `??ZDApp_ResetNwkKey::?relay`; Banked call to: ZDApp_ResetNwkKey
   1696                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   000238   75..01       MOV       ?V0,#0x1
   \   00023B   75..00       MOV       ?V1,#0x0
   \   00023E   75..00       MOV       ?V2,#0x0
   \   000241   75..00       MOV       ?V3,#0x0
   \   000244   90....       MOV       DPTR,#_NIB + 22
   \   000247   E0           MOVX      A,@DPTR
   \   000248   78..         MOV       R0,#?V0
   \   00024A   12....       LCALL     ?L_SHL
   \   00024D   90....       MOV       DPTR,#runtimeChannel
   \   000250   78..         MOV       R0,#?V0
   \   000252   12....       LCALL     ?L_MOV_TO_X
   1697                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   \   000255   90....       MOV       DPTR,#prevDevState
   \   000258   740E         MOV       A,#0xe
   \   00025A   800A         SJMP      ??ZDApp_ProcessNetworkJoin_30
   1698                    }
   1699                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_33:
   \   00025C   E0           MOVX      A,@DPTR
   \   00025D   640E         XRL       A,#0xe
   \   00025F   7006         JNZ       ??ZDApp_ProcessNetworkJoin_31
   1700                    {
   1701                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   000261   12....       LCALL     ?Subroutine11 & 0xFFFF
   1702                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1703                    }
   1704          
   1705                  }
   1706                }
   \                     ??CrossCallReturnLabel_1:
   \   000264   740F         MOV       A,#0xf
   \                     ??ZDApp_ProcessNetworkJoin_30:
   \   000266   F0           MOVX      @DPTR,A
   1707          
   1708                // Clear the neighbor Table and network discovery tables.
   1709                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_31:
   \   000267                ; Setup parameters for call to function nwkNeighborInitTable
   \   000267   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1710                NLME_NwkDiscTerm();
   \   00026A                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00026A   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1711          
   1712                // setup a retry for later...
   1713                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1714                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   00026D                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   00026D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000270                ; Setup parameters for call to function ZDApp_NetworkInit
   1715              }
   1716            }
   \   000270   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000273   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000276   8012         SJMP      ??ZDApp_ProcessNetworkJoin_9
   1717          #if defined ( ZIGBEEPRO )
   1718            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000278   E0           MOVX      A,@DPTR
   \   000279   600F         JZ        ??ZDApp_ProcessNetworkJoin_9
   1719            {
   1720              // Assume from address conflict
   1721          
   1722              // Notify the network
   1723              ZDApp_AnnounceNewAddress();
   \   00027B                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00027B   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1724          
   1725              // Notify apps
   1726              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00027E                ; Setup parameters for call to function osal_set_event
   \   00027E   7A10         MOV       R2,#0x10
   \   000280   7B00         MOV       R3,#0x0
   \   000282   90....       MOV       DPTR,#ZDAppTaskID
   \   000285   E0           MOVX      A,@DPTR
   \   000286   F9           MOV       R1,A
   \   000287   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1727            }
   1728          #endif
   1729          }
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   00028A   7402         MOV       A,#0x2
   \   00028C   02....       LJMP      ??Subroutine76_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV       DPTR,#runtimeChannel
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   74F8         MOV       A,#-0x8
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74FF         MOV       A,#-0x1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7407         MOV       A,#0x7
   \   000010   F0           MOVX      @DPTR,A
   \   000011   90....       MOV       DPTR,#prevDevState
   \   000014   22           RET
   1730          
   1731          /*********************************************************************
   1732           * @fn      ZDApp_SaveNwkKey()
   1733           *
   1734           * @brief   Save off the Network key information.
   1735           *
   1736           * @param   none
   1737           *
   1738           * @return  none
   1739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1740          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1741          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1742            nwkActiveKeyItems keyItems;
   1743          
   1744            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1745          
   1746            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1747                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV       R0,?XSP + 0
   \   000013   A9..         MOV       R1,?XSP + 1
   \   000015   88..         MOV       ?V0,R0
   \   000017   89..         MOV       ?V1,R1
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV       ?V0,#0x15
   \   000021   75..00       MOV       ?V1,#0x0
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV       R4,#0x0
   \   00002B   7D00         MOV       R5,#0x0
   \   00002D   7A82         MOV       R2,#-0x7e
   \   00002F   7B00         MOV       R3,#0x0
   \   000031   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV       A,#0x4
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
   1748          
   1749            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
   1750          
   1751            // Clear copy in RAM before return.
   1752            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV       R4,#0x15
   \   000042   FD           MOV       R5,A
   \   000043   F9           MOV       R1,A
   \   000044   AA..         MOV       R2,?XSP + 0
   \   000046   AB..         MOV       R3,?XSP + 1
   \   000048   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1753          
   1754          }
   \   00004B                REQUIRE ?Subroutine8
   \   00004B                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7415         MOV       A,#0x15
   \   000002   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   1755          
   1756          /*********************************************************************
   1757           * @fn      ZDApp_ForceConcentratorChange()
   1758           *
   1759           * @brief   Force a network concentrator change by resetting
   1760           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1761           *          from NV and set nwk event.
   1762           *
   1763           * @param   none
   1764           *
   1765           * @return  none
   1766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1767          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1769            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V0,#0x1
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A32         MOV       R2,#0x32
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   1770            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV       ?V0,#0x1
   \   000039   75..00       MOV       ?V1,#0x0
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV       R4,#0x0
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A33         MOV       R2,#0x33
   \   000047   7B00         MOV       R3,#0x0
   \   000049   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV       A,#0x4
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   1771          
   1772            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV       DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6401         XRL       A,#0x1
   \   000057   7019         JNZ       ??ZDApp_ForceConcentratorChange_0
   1773            {
   1774              // Start next event
   1775              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV       DPTR,#__Constant_64
   \   00005C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B08         MOV       R3,#0x8
   \   000063   90....       MOV       DPTR,#NWK_TaskID
   \   000066   E0           MOVX      A,@DPTR
   \   000067   F9           MOV       R1,A
   \   000068   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV       A,#0x4
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   800C         SJMP      ??ZDApp_ForceConcentratorChange_1
   1776            }
   1777            else
   1778            {
   1779              // Stop the next event
   1780              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV       R2,#0x0
   \   000074   7B08         MOV       R3,#0x8
   \   000076   90....       MOV       DPTR,#NWK_TaskID
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1781            }
   1782          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   1783          
   1784          /*********************************************************************
   1785           * @fn      ZDApp_ResetNwkKey()
   1786           *
   1787           * @brief   Reset the Network key information in NV.
   1788           *
   1789           * @param   none
   1790           *
   1791           * @return  none
   1792           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1793          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1794          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1795            nwkActiveKeyItems keyItems;
   1796          
   1797            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   AA..         MOV       R2,?XSP + 0
   \   000012   AB..         MOV       R3,?XSP + 1
   \   000014   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1798            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1799                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV       R0,?XSP + 0
   \   000019   A9..         MOV       R1,?XSP + 1
   \   00001B   88..         MOV       ?V0,R0
   \   00001D   89..         MOV       ?V1,R1
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV       ?V0,#0x15
   \   000027   75..00       MOV       ?V1,#0x0
   \   00002A   78..         MOV       R0,#?V0
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV       R4,#0x0
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7A82         MOV       R2,#-0x7e
   \   000035   7B00         MOV       R3,#0x0
   \   000037   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
   1800          }
   \   00003F   02....       LJMP      ?Subroutine8 & 0xFFFF
   1801          
   1802          /*********************************************************************
   1803           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1804           *
   1805           * @brief
   1806           *
   1807           *   Save off the Network key information.
   1808           *
   1809           * @param   incrFrmCnt - set to true if we want to increment the network
   1810                      frame counter, else set to false
   1811           *
   1812           * @return  true if restored from NV, false if not
   1813           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1814          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1815          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   1816            nwkActiveKeyItems keyItems;
   1817            uint8 ret = FALSE;
   \   00000C   7F00         MOV       R7,#0x0
   1818          
   1819            // Restore the key information
   1820            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1821                == ZSUCCESS )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   A8..         MOV       R0,?XSP + 0
   \   000010   A9..         MOV       R1,?XSP + 1
   \   000012   88..         MOV       ?V0,R0
   \   000014   89..         MOV       ?V1,R1
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75..15       MOV       ?V0,#0x15
   \   00001E   8F..         MOV       ?V1,R7
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7C00         MOV       R4,#0x0
   \   000027   7D00         MOV       R5,#0x0
   \   000029   7A82         MOV       R2,#-0x7e
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000030   7404         MOV       A,#0x4
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   \   000035   E9           MOV       A,R1
   \   000036   6003         JZ        $+5
   \   000038   02....       LJMP      ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1822            {
   1823              uint8 nullKey[SEC_KEY_LEN];
   1824          
   1825              // initialize default value to compare to
   1826              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C10         MOV       R4,#0x10
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   7900         MOV       R1,#0x0
   \   000041   7415         MOV       A,#0x15
   \   000043   12....       LCALL     ?XSTACK_DISP101_8
   \   000046   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1827          
   1828              // if stored key is different than default value, then a key has been established
   1829              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000049                ; Setup parameters for call to function osal_memcmp
   \   000049   7415         MOV       A,#0x15
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   88..         MOV       ?V0,R0
   \   000050   89..         MOV       ?V1,R1
   \   000052   8F..         MOV       ?V2,R7
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000059   7C10         MOV       R4,#0x10
   \   00005B   7D00         MOV       R5,#0x0
   \   00005D   7404         MOV       A,#0x4
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   A982         MOV       R1,DPL
   \   000064   AA83         MOV       R2,DPH
   \   000066   7B00         MOV       R3,#0x0
   \   000068   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00006B   7403         MOV       A,#0x3
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000070   E9           MOV       A,R1
   \   000071   7060         JNZ       ??ZDApp_RestoreNwkKey_0
   1830              {
   1831                if ( incrFrmCnt )
   \   000073   EE           MOV       A,R6
   \   000074   604E         JZ        ??ZDApp_RestoreNwkKey_1
   1832                {
   1833                  // Increment the frame counter stored in NV
   1834                  keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1835                                            NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000076   90....       MOV       DPTR,#__Constant_4e2
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   7411         MOV       A,#0x11
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   78..         MOV       R0,#?V0
   \   000085   12....       LCALL     ?L_ADD_TO_X
   1836          
   1837                  nwkFrameCounter = keyItems.frameCounter;
   \   000088   7411         MOV       A,#0x11
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?XLOAD_R0123
   \   000090   90....       MOV       DPTR,#nwkFrameCounter
   \   000093   12....       LCALL     ?XSTORE_R0123
   1838          
   1839                  // Save the updated Frame Counter right away
   1840                  osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1841                                (void *)&keyItems );
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   A8..         MOV       R0,?XSP + 0
   \   000098   A9..         MOV       R1,?XSP + 1
   \   00009A   88..         MOV       ?V0,R0
   \   00009C   89..         MOV       ?V1,R1
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   75..15       MOV       ?V0,#0x15
   \   0000A6   8F..         MOV       ?V1,R7
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   7C00         MOV       R4,#0x0
   \   0000AF   7D00         MOV       R5,#0x0
   \   0000B1   7A82         MOV       R2,#-0x7e
   \   0000B3   7B00         MOV       R3,#0x0
   \   0000B5   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B8   7404         MOV       A,#0x4
   \   0000BA   12....       LCALL     ?DEALLOC_XSTACK8
   1842          
   1843                  nwkFrameCounterChanges = 0;
   \   0000BD   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   0000C0   E4           CLR       A
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   A3           INC       DPTR
   \   0000C3   F0           MOVX      @DPTR,A
   1844                }
   1845          
   1846                ret = TRUE;
   \                     ??ZDApp_RestoreNwkKey_1:
   \   0000C4   7F01         MOV       R7,#0x1
   1847          
   1848                // Clear copy in RAM before return.
   1849                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C6                ; Setup parameters for call to function osal_memset
   \   0000C6   7C15         MOV       R4,#0x15
   \   0000C8   7D00         MOV       R5,#0x0
   \   0000CA   7900         MOV       R1,#0x0
   \   0000CC   AA..         MOV       R2,?XSP + 0
   \   0000CE   AB..         MOV       R3,?XSP + 1
   \   0000D0   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1850              }
   1851            }
   1852          
   1853            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000D3   EF           MOV       A,R7
   \   0000D4   F9           MOV       R1,A
   \   0000D5   7425         MOV       A,#0x25
   \   0000D7   02....       LJMP      ??Subroutine76_0 & 0xFFFF
   1854          }
   1855          
   1856          /*********************************************************************
   1857           * @fn      ZDApp_ResetTimerStart
   1858           *
   1859           * @brief   Start the reset timer.
   1860           *
   1861           * @param   delay - delay time(ms) before reset
   1862           *
   1863           * @return  none
   1864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1865          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   1867            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   90....       MOV       DPTR,#ZDAppTaskID
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   4C           ORL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   701B         JNZ       ??ZDApp_ResetTimerStart_0
   1868            {
   1869              // Start the rest timer
   1870              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR       A
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   F5..         MOV       ?V3,A
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV       R2,#0x4
   \   000027   7B00         MOV       R3,#0x0
   \   000029   90....       MOV       DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F9           MOV       R1,A
   \   00002E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV       A,#0x4
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   1871            }
   1872          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP      ??Subroutine77_0 & 0xFFFF
   1873          
   1874          /*********************************************************************
   1875           * @fn      ZDApp_ResetTimerCancel
   1876           *
   1877           * @brief   Cancel the reset timer.
   1878           *
   1879           * @param   none
   1880           *
   1881           * @return  none
   1882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1883          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1884          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1885            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1886            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV       R2,#0x4
   \   000012   7B00         MOV       R3,#0x0
   \   000014   90....       MOV       DPTR,#ZDAppTaskID
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1887          }
   \   00001C   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   1888          
   1889          /*********************************************************************
   1890           * @fn      ZDApp_LeaveCtrlInit
   1891           *
   1892           * @brief   Initialize the leave control logic.
   1893           *
   1894           * @param   none
   1895           *
   1896           * @return  none
   1897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1898          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1899          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1900            uint8 status;
   1901          
   1902          
   1903            // Initialize control state
   1904            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   1905          
   1906            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1907                                        sizeof(ZDApp_LeaveCtrl),
   1908                                        &ZDApp_LeaveCtrl );
   1909          
   1910            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV       R4,#0x1
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7A85         MOV       R2,#-0x7b
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   E9           MOV       A,R1
   \   000026   7020         JNZ       ??ZDApp_LeaveCtrlInit_0
   1911            {
   1912              // Read saved control
   1913              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1914                            0,
   1915                            sizeof( uint8 ),
   1916                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A85         MOV       R2,#-0x7b
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV       A,#0x4
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   1917            }
   1918          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   1919          
   1920          /*********************************************************************
   1921           * @fn      ZDApp_LeaveCtrlSet
   1922           *
   1923           * @brief   Set the leave control logic.
   1924           *
   1925           * @param   ra - reassociate flag
   1926           *
   1927           * @return  none
   1928           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1929          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1931            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   1932          
   1933            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   1934            {
   1935              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   1936            }
   1937          
   1938            // Write the leave control
   1939            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1940                           0,
   1941                           sizeof( uint8 ),
   1942                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP      ?Subroutine4 & 0xFFFF
   1943          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV       R0,#?V0
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV       ?V0,#0x1
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV       R4,#0x0
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A85         MOV       R2,#-0x7b
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV       A,#0x4
   \   000023                REQUIRE ??Subroutine71_0
   \   000023                ; // Fall through to label ??Subroutine71_0
   1944          
   1945          /*********************************************************************
   1946           * @fn      ZDApp_LeaveCtrlReset
   1947           *
   1948           * @brief   Re-initialize the leave control logic.
   1949           *
   1950           * @param   none
   1951           *
   1952           * @return  none
   1953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1954          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1955          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1956            // Set leave control to initialized state
   1957            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   1958          
   1959            // Write initialized control
   1960            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1961                          0,
   1962                          sizeof( uint8 ),
   1963                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP      ?Subroutine4 & 0xFFFF
   1964          }
   1965          
   1966          /*********************************************************************
   1967           * @fn      ZDApp_LeaveCtrlBypass
   1968           *
   1969           * @brief   Check if NV restore should be skipped during a leave reset.
   1970           *
   1971           * @param   none
   1972           *
   1973           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1974           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1975          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1976          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1977            uint8 bypass;
   1978          
   1979            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1980            {
   1981              bypass = TRUE;
   1982            }
   1983            else
   1984            {
   1985              bypass = FALSE;
   1986            }
   1987          
   1988            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   80..         SJMP      ??Subroutine62_0
   1989          }
   1990          
   1991          /*********************************************************************
   1992           * @fn      ZDApp_LeaveCtrlStartup
   1993           *
   1994           * @brief   Check for startup conditions during a leave reset.
   1995           *
   1996           * @param   state      - devState_t determined by leave control logic
   1997           * @param   startDelay - startup delay
   1998           *
   1999           * @return  none
   2000           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2001          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2002          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2003            *startDelay = 0;
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   2004          
   2005            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5019         JNC       ??ZDApp_LeaveCtrlStartup_0
   2006            {
   2007              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV       C,0xE0 /* A   */.1
   \   000016   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   2008              {
   2009                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   7488         MOV       A,#-0x78
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   7413         MOV       A,#0x13
   \   000022   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   2010              }
   2011              else
   2012              {
   2013                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX      @DPTR,A
   2014              }
   2015          
   2016              // Reset leave control logic
   2017              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2018            }
   2019          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP      ??Subroutine62_0
   2020          
   2021          /*********************************************************************
   2022           * @fn      ZDApp_LeaveReset
   2023           *
   2024           * @brief   Setup a device reset due to a leave indication/confirm.
   2025           *
   2026           * @param   ra - reassociate flag
   2027           *
   2028           * @return  none
   2029           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2030          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2032            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2033          
   2034            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV       R2,#-0x78
   \   00000C   7B13         MOV       R3,#0x13
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2035          
   2036            if ( ZSTACK_ROUTER_BUILD )
   \   000011   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6004         JZ        ??ZDApp_LeaveReset_0
   \   000017   6401         XRL       A,#0x1
   \   000019   7018         JNZ       ??ZDApp_LeaveReset_1
   2037            {
   2038              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \                     ??ZDApp_LeaveReset_0:
   \   00001B                ; Setup parameters for call to function osal_stop_timerEx
   \   00001B   7A00         MOV       R2,#0x0
   \   00001D   7B01         MOV       R3,#0x1
   \   00001F   90....       MOV       DPTR,#NWK_TaskID
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   2039              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   \   000027                ; Setup parameters for call to function osal_clear_event
   \   000027   7A00         MOV       R2,#0x0
   \   000029   7B01         MOV       R3,#0x1
   \   00002B   90....       MOV       DPTR,#NWK_TaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   2040            }
   2041          
   2042            if (ZG_DEVICE_ENDDEVICE_TYPE)
   \                     ??ZDApp_LeaveReset_1:
   \   000033   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000036   E0           MOVX      A,@DPTR
   \   000037   6402         XRL       A,#0x2
   \   000039   7040         JNZ       ??ZDApp_LeaveReset_2
   2043            {
   2044              // Save polling values to be restored after rejoin
   2045              if ( ra == TRUE )
   \   00003B   7401         MOV       A,#0x1
   \   00003D   6E           XRL       A,R6
   \   00003E   7024         JNZ       ??CrossCallReturnLabel_112
   2046              {
   2047                 ZDApp_SavedPollRate = zgPollRate;
   \   000040   90....       MOV       DPTR,#zgPollRate
   \   000043   12....       LCALL     ?XLOAD_R0123
   \   000046   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000049   12....       LCALL     ?XSTORE_R0123
   2048                 savedResponseRate = zgResponsePollRate;
   \   00004C   90....       MOV       DPTR,#zgResponsePollRate
   \   00004F   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000052   90....       MOV       DPTR,#savedResponseRate
   \   000055   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2049                 savedQueuedPollRate = zgQueuedPollRate;
   \                     ??CrossCallReturnLabel_111:
   \   000058   90....       MOV       DPTR,#zgQueuedPollRate
   \   00005B   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   2050              }
   \                     ??CrossCallReturnLabel_101:
   \   00005E   90....       MOV       DPTR,#savedQueuedPollRate
   \   000061   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2051          
   2052              // Disable polling
   2053              NLME_SetPollRate(0);
   \                     ??CrossCallReturnLabel_112:
   \   000064                ; Setup parameters for call to function NLME_SetPollRate
   \   000064   90....       MOV       DPTR,#__Constant_0
   \   000067   12....       LCALL     ?XLOAD_R2345
   \   00006A   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2054              NLME_SetResponseRate(0);
   \   00006D                ; Setup parameters for call to function NLME_SetResponseRate
   \   00006D   7A00         MOV       R2,#0x0
   \   00006F   7B00         MOV       R3,#0x0
   \   000071   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2055              NLME_SetQueuedPollRate(0);
   \   000074                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000074   7A00         MOV       R2,#0x0
   \   000076   7B00         MOV       R3,#0x0
   \   000078   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2056            }
   2057          
   2058            if ( ra == TRUE )
   \                     ??ZDApp_LeaveReset_2:
   \   00007B   7401         MOV       A,#0x1
   \   00007D   6E           XRL       A,R6
   \   00007E   7027         JNZ       ??ZDApp_LeaveReset_3
   2059            {
   2060              devState = DEV_NWK_DISC;
   \   000080   90....       MOV       DPTR,#devState
   \   000083   7402         MOV       A,#0x2
   \   000085   12....       LCALL     ?Subroutine15 & 0xFFFF
   2061              devStartMode = MODE_REJOIN;
   2062              _tmpRejoinState = true;
   \                     ??CrossCallReturnLabel_6:
   \   000088   12....       LCALL     ?Subroutine12 & 0xFFFF
   2063          
   2064              // For rejoin, specify the extended PANID to look for
   2065              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_84:
   \   00008B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2066          
   2067              _NIB.nwkState = NWK_DISC;
   \   00008E   90....       MOV       DPTR,#_NIB + 35
   \   000091   7402         MOV       A,#0x2
   \   000093   F0           MOVX      @DPTR,A
   2068          
   2069              zdoDiscCounter = 3;
   \   000094   90....       MOV       DPTR,#zdoDiscCounter
   \   000097   04           INC       A
   \   000098   F0           MOVX      @DPTR,A
   2070              NLME_NwkDiscTerm();
   \   000099                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000099   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   2071          
   2072              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   \   00009C                ; Setup parameters for call to function osal_rand
   \   00009C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00009F                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00009F   12....       LCALL     ?Subroutine36 & 0xFFFF
   2073            }
   \                     ??CrossCallReturnLabel_35:
   \   0000A2   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0000A5   8007         SJMP      ??ZDApp_LeaveReset_4
   2074            else
   2075            {
   2076              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_3:
   \   0000A7                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   0000A7   7A88         MOV       R2,#-0x78
   \   0000A9   7B13         MOV       R3,#0x13
   \   0000AB   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2077            }
   2078          }
   \                     ??ZDApp_LeaveReset_4:
   \   0000AE   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   2079          
   2080          /*********************************************************************
   2081           * @fn      ZDApp_LeaveUpdate
   2082           *
   2083           * @brief   Update local device data related to leaving device.
   2084           *
   2085           * @param   nwkAddr        - NWK address of leaving device
   2086           * @param   extAddr        - EXT address of leaving device
   2087           * @param   removeChildren - remove children of leaving device
   2088           *
   2089           * @return  none
   2090           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2091          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2092                                  uint8 removeChildren )
   2093          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V2,R1
   2094            // Remove Apps Key for leaving device
   2095            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV       A,R6
   \   000015   FA           MOV       R2,A
   \   000016   EF           MOV       A,R7
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2096          
   2097            // Clear SECURITY bit from Address Manager
   2098            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV       A,R6
   \   00001C   FA           MOV       R2,A
   \   00001D   EF           MOV       A,R7
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2099          
   2100            if ( pbindRemoveDev )
   \   000022   90....       MOV       DPTR,#pbindRemoveDev
   \   000025   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000028   6036         JZ        ??ZDApp_LeaveUpdate_0
   2101            {
   2102              zAddrType_t devAddr;
   2103          
   2104              // Remove bind entry and all related data
   2105              devAddr.addrMode = Addr64Bit;
   \   00002A   7410         MOV       A,#0x10
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   7403         MOV       A,#0x3
   \   000031   F0           MOVX      @DPTR,A
   2106              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV       ?V4,R6
   \   000034   8F..         MOV       ?V5,R7
   \   000036   75..00       MOV       ?V6,#0x0
   \   000039   78..         MOV       R0,#?V4
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV       R4,#0x8
   \   000040   7D00         MOV       R5,#0x0
   \   000042   740B         MOV       A,#0xb
   \   000044   12....       LCALL     ?XSTACK_DISP101_8
   \   000047   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004A   7403         MOV       A,#0x3
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   2107          
   2108              pbindRemoveDev(&devAddr);
   \   00004F                ; Setup parameters for indirect call
   \   00004F   7408         MOV       A,#0x8
   \   000051   12....       LCALL     ?XSTACK_DISP101_8
   \   000054   90....       MOV       DPTR,#pbindRemoveDev
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F8           MOV       R0,A
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2109            }
   \                     ??CrossCallReturnLabel_152:
   \   00005D   12....       LCALL     ?CALL_IND
   2110          
   2111            // Remove if child
   2112            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_LeaveUpdate_0:
   \   000060   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6004         JZ        ??ZDApp_LeaveUpdate_1
   \   000066   6401         XRL       A,#0x1
   \   000068   703F         JNZ       ??ZDApp_LeaveUpdate_2
   2113            {
   2114              // Router shall notify the Trust Center that a child End Device or
   2115              // a neighbor Router (within radius=1) has left the network
   2116              APSME_UpdateDeviceReq_t req;
   2117          
   2118              // forward authorization to the Trust Center
   2119              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \                     ??ZDApp_LeaveUpdate_1:
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   E4           CLR       A
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   F0           MOVX      @DPTR,A
   2120              req.devAddr    = nwkAddr;
   \   000074   7402         MOV       A,#0x2
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E5..         MOV       A,?V0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E5..         MOV       A,?V1
   \   00007F   F0           MOVX      @DPTR,A
   2121              req.devExtAddr = extAddr;
   \   000080   7404         MOV       A,#0x4
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   EE           MOV       A,R6
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   EF           MOV       A,R7
   \   000089   F0           MOVX      @DPTR,A
   2122              req.status = APSME_UD_DEVICE_LEFT;
   \   00008A   7406         MOV       A,#0x6
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   7402         MOV       A,#0x2
   \   000091   F0           MOVX      @DPTR,A
   2123          
   2124              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2125              {
   2126                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2127                // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2128                // with legacy Coordinator devices which can only handle one or the other.
   2129                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   2130                {
   2131                  req.apsSecure = FALSE;
   2132          
   2133                  // send and APSME_UPDATE_DEVICE request to the trust center
   2134                  APSME_UpdateDeviceReq( &req );
   2135                }
   2136          
   2137                // send the message APS encrypted
   2138                req.apsSecure = TRUE;
   2139          
   2140                // send and APSME_UPDATE_DEVICE request to the trust center
   2141                APSME_UpdateDeviceReq( &req );
   2142              }
   2143              else
   2144              {
   2145                req.apsSecure = FALSE;
   \   000092   7407         MOV       A,#0x7
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E4           CLR       A
   \   000098   F0           MOVX      @DPTR,A
   2146          
   2147                // send and APSME_UPDATE_DEVICE request to the trust center
   2148                APSME_UpdateDeviceReq( &req );
   \   000099                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000099   AA..         MOV       R2,?XSP + 0
   \   00009B   AB..         MOV       R3,?XSP + 1
   \   00009D   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2149              }
   2150          
   2151              NLME_RemoveChild( extAddr, removeChildren );
   \   0000A0                ; Setup parameters for call to function NLME_RemoveChild
   \   0000A0   A9..         MOV       R1,?V2
   \   0000A2   EE           MOV       A,R6
   \   0000A3   FA           MOV       R2,A
   \   0000A4   EF           MOV       A,R7
   \   0000A5   FB           MOV       R3,A
   \   0000A6   12....       LCALL     `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2152            }
   2153          
   2154            // Remove Routing table related entry
   2155            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_2:
   \   0000A9                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000A9   7900         MOV       R1,#0x0
   \   0000AB   AA..         MOV       R2,?V0
   \   0000AD   AB..         MOV       R3,?V1
   \   0000AF   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2156          
   2157            // Remove entry from neighborTable
   2158            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000B2                ; Setup parameters for call to function nwkNeighborRemove
   \   0000B2   90....       MOV       DPTR,#_NIB + 33
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FC           MOV       R4,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   FD           MOV       R5,A
   \   0000BA   AA..         MOV       R2,?V0
   \   0000BC   AB..         MOV       R3,?V1
   \   0000BE   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2159          
   2160            // Schedule to save data to NV
   2161            ZDApp_NwkWriteNVRequest();
   \   0000C1                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   0000C1   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2162          }
   \   0000C4   7411         MOV       A,#0x11
   \   0000C6                REQUIRE ?Subroutine6
   \   0000C6                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
   2163          
   2164          /*********************************************************************
   2165           * @fn      ZDApp_NetworkDiscoveryReq
   2166           *
   2167           * @brief   Request a network discovery.
   2168           *
   2169           * @param  scanChannels -
   2170           * @param  scanDuration -
   2171           *
   2172           * @return  ZStatus_t
   2173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2174          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2176            // Setup optional filters - tbd
   2177          
   2178            // Request NLME network discovery
   2179            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP      ??Subroutine77_0 & 0xFFFF
   2180          }
   2181          
   2182          /*********************************************************************
   2183           * @fn      ZDApp_JoinReq
   2184           *
   2185           * @brief   Request the device to join a parent in a network.
   2186           *
   2187           * @param   channel -
   2188           * @param   panID -
   2189           *
   2190           * @return  ZStatus_t
   2191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2192          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2193                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   2195            // Sync up the node with the stack profile (In the case where a pro device
   2196            // joins a non-pro network, or verse versa)
   2197            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV       A,#0xf
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2198          
   2199            // Request NLME Join Request
   2200            return NLME_JoinRequest(extendedPanID, panID,channel,
   2201                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2202                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV       A,#0xe
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V3,A
   \   000021   78..         MOV       R0,#?V3
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V3
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV       R1,?V2
   \   00003B   AC..         MOV       R4,?V0
   \   00003D   AD..         MOV       R5,?V1
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   02....       LJMP      ?Subroutine5 & 0xFFFF
   2203          
   2204          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine76_0
   \   000002                ; // Fall through to label ??Subroutine76_0
   2205          
   2206          /*********************************************************************
   2207           * @fn      ZDApp_DeviceConfigured
   2208           *
   2209           * @brief   Check to see if the local device is configured (i.e., part
   2210           *          of a network).
   2211           *
   2212           * @param   none
   2213           *
   2214           * @return  TRUE if configured. FALSE, otherwise.
   2215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2216          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2217          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2218            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   74FE         MOV       A,#-0x2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   04           INC       A
   \   000015   F0           MOVX      @DPTR,A
   2219          
   2220            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2221                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV       ?V0,#0x2
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV       R4,#0x14
   \   000030   7D00         MOV       R5,#0x0
   \   000032   7A21         MOV       R2,#0x21
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   2222          
   2223            // Does the NIB have anything more than default?
   2224            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV       DPL,?XSP + 0
   \   000041   85..83       MOV       DPH,?XSP + 1
   \   000044   E0           MOVX      A,@DPTR
   \   000045   64FE         XRL       A,#0xfe
   \   000047   7003         JNZ       ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F4           CPL       A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ       ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV       R1,#0x0
   \   000050   8002         SJMP      ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV       R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054                REQUIRE ?Subroutine9
   \   000054                ; // Fall through to label ?Subroutine9
   2225          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   2226          
   2227          /*********************************************************************
   2228           * CALLBACK FUNCTIONS
   2229           */
   2230          
   2231          
   2232          /*********************************************************************
   2233           * @fn      ZDApp_SendEventMsg()
   2234           *
   2235           * @brief
   2236           *
   2237           *   Sends a Network Join message
   2238           *
   2239           * @param  cmd - command ID
   2240           * @param  len - length (in bytes) of the buf field
   2241           * @param  buf - buffer for the rest of the message.
   2242           *
   2243           * @return  none
   2244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2245          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2246          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   2247            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV       R3,A
   \   000009   EE           MOV       A,R6
   \   00000A   FA           MOV       R2,A
   \   00000B   90....       MOV       DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F9           MOV       R1,A
   \   000010   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2248          }
   \   000013   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   2249          
   2250          /*********************************************************************
   2251           * @fn      ZDApp_SendMsg()
   2252           *
   2253           * @brief   Sends a OSAL message
   2254           *
   2255           * @param  taskID - Where to send the message
   2256           * @param  cmd - command ID
   2257           * @param  len - length (in bytes) of the buf field
   2258           * @param  buf - buffer for the rest of the message.
   2259           *
   2260           * @return  none
   2261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2262          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V5,R2
   \   000009   8B..         MOV       ?V4,R3
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   2264            osal_event_hdr_t *msgPtr;
   2265          
   2266            // Send the address to the task
   2267            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV       R2,?V4
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV       ?V6,R2
   \   000018   8B..         MOV       ?V7,R3
   \   00001A   AE..         MOV       R6,?V6
   \   00001C   AF..         MOV       R7,?V7
   2268            if ( msgPtr )
   \   00001E   EE           MOV       A,R6
   \   00001F   4F           ORL       A,R7
   \   000020   602E         JZ        ??ZDApp_SendMsg_0
   2269            {
   2270              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV       A,?V4
   \   000024   601A         JZ        ??ZDApp_SendMsg_1
   \   000026   E5..         MOV       A,?V0
   \   000028   45..         ORL       A,?V1
   \   00002A   6014         JZ        ??ZDApp_SendMsg_1
   2271                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   75..00       MOV       ?V2,#0x0
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000034   AC..         MOV       R4,?V4
   \   000036   7D00         MOV       R5,#0x0
   \   000038   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   2272          
   2273              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   E5..         MOV       A,?V5
   \   000046   F0           MOVX      @DPTR,A
   2274              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000047                ; Setup parameters for call to function osal_msg_send
   \   000047   EE           MOV       A,R6
   \   000048   FA           MOV       R2,A
   \   000049   EF           MOV       A,R7
   \   00004A   FB           MOV       R3,A
   \   00004B   A9..         MOV       R1,?V3
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2275            }
   2276          }
   \                     ??ZDApp_SendMsg_0:
   \   000050                REQUIRE ?Subroutine2
   \   000050                ; // Fall through to label ?Subroutine2
   2277          
   2278          /*********************************************************************
   2279           * Call Back Functions from NWK  - API
   2280           */
   2281          
   2282          /*********************************************************************
   2283           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2284           *
   2285           * @brief       This function returns a choice of PAN to join.
   2286           *
   2287           * @param       status - return status of the nwk discovery confirm
   2288           *
   2289           * @return      ZStatus_t
   2290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine62_0
   \   000003                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2291          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2292          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2293            osal_event_hdr_t msg;
   2294          
   2295            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2296            // Send ZDO_MGMT_NWK_DISC_RSP back
   2297          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2298            if ( zdappMgmtNwkDiscReqInProgress )
   \   000011   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6007         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   2299            {
   2300              zdappMgmtNwkDiscReqInProgress = false;
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   2301              ZDO_FinishProcessingMgmtNwkDiscReq();
   \   000019                ; Setup parameters for call to function ZDO_FinishProcessingMgmtNwkDiscReq
   \   000019   12....       LCALL     `??ZDO_FinishProcessingMgmtNwkDiscReq::?relay`; Banked call to: ZDO_FinishProcessingMgmtNwkDiscReq
   \   00001C   8027         SJMP      ??ZDO_NetworkDiscoveryConfirmCB_1
   2302            }
   2303            else
   2304          #endif
   2305            {
   2306              // Pass the confirm to another task if it registers the callback
   2307              // Otherwise, pass the confirm to ZDApp.
   2308              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000021   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000024   6008         JZ        ??ZDO_NetworkDiscoveryConfirmCB_2
   2309              {
   2310                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL     ?Subroutine21 & 0xFFFF
   2311              }
   \                     ??CrossCallReturnLabel_158:
   \   000029   12....       LCALL     ?CALL_IND
   \   00002C   8017         SJMP      ??ZDO_NetworkDiscoveryConfirmCB_1
   2312              else
   2313              {
   2314                // Otherwise, send scan confirm to ZDApp task to proceed
   2315                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
   2316                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000035                ; Setup parameters for call to function ZDApp_SendMsg
   \   000035   04           INC       A
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   7B02         MOV       R3,#0x2
   \   00003B   7A01         MOV       R2,#0x1
   \   00003D   90....       MOV       DPTR,#ZDAppTaskID
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2317              }
   2318            }
   2319            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000045   7900         MOV       R1,#0x0
   \   000047   7403         MOV       A,#0x3
   \   000049   02....       LJMP      ?Subroutine3 & 0xFFFF
   2320          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   AA..         MOV       R2,?XSP + 0
   \   000002   AB..         MOV       R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine70_0
   \   000004                ; // Fall through to label ??Subroutine70_0
   2321          
   2322          /*********************************************************************
   2323           * @fn          ZDApp_NwkDescListProcessing
   2324           *
   2325           * @brief       This function process the network discovery result and select
   2326           *              a parent device to join itself.
   2327           *
   2328           * @param       none
   2329           *
   2330           * @return      ZStatus_t
   2331           */
   2332          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2333          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2334          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2335            networkDesc_t *pNwkDesc;
   2336            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   2337            uint8 stackProfile;
   2338            uint8 stackProfilePro;
   2339            uint8 selected;
   2340          
   2341            // Count the number of nwk descriptors in the list
   2342            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V2,R2
   \   00000D   8B..         MOV       ?V3,R3
   \   00000F   AE..         MOV       R6,?V2
   \   000011   AF..         MOV       R7,?V3
   \   000013   8005         SJMP      ??CrossCallReturnLabel_147
   2343            while (pNwkDesc)
   2344            {
   2345              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC       ?V1
   2346              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL     ?Subroutine27 & 0xFFFF
   2347            }
   \                     ??CrossCallReturnLabel_147:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   70F7         JNZ       ??ZDApp_NwkDescListProcessing_0
   2348          
   2349            // process discovery results
   2350            stackProfilePro = FALSE;
   \   00001E   75..00       MOV       ?V0,#0x0
   2351            selected = FALSE;
   2352          
   2353          
   2354            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV       ?V2,#0x0
   2355            {
   2356              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
   2357              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV       ?V3,#0x0
   \   000032   8023         SJMP      ??CrossCallReturnLabel_148
   2358              {
   2359                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2360                {
   2361                  // If the extended Pan ID is commissioned to a non zero value
   2362                  // Only join the Pan that has match EPID
   2363                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2364                    continue;
   2365          
   2366                }
   2367                else if ( zgConfigPANID != 0xFFFF )
   2368                {
   2369                  // PAN Id is preconfigured. check if it matches
   2370                  if ( pNwkDesc->panId != zgConfigPANID )
   2371                    continue;
   2372                }
   2373          
   2374                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2375                {
   2376                  // check that network is allowing joining
   2377                  if ( ZSTACK_ROUTER_BUILD )
   2378                  {
   2379                    if ( stackProfilePro == FALSE )
   2380                    {
   2381                      if ( !pNwkDesc->routerCapacity )
   2382                      {
   2383                        continue;
   2384                      }
   2385                    }
   2386                    else
   2387                    {
   2388                      if ( !pNwkDesc->deviceCapacity )
   2389                      {
   2390                        continue;
   2391                      }
   2392                    }
   2393                  }
   2394                  else if ( ZSTACK_END_DEVICE_BUILD )
   2395                  {
   2396                    if ( !pNwkDesc->deviceCapacity )
   2397                    {
   2398                      continue;
   2399                    }
   2400                  }
   2401                }
   2402          
   2403                // check version of zigbee protocol
   2404                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2405                  continue;
   2406          
   2407                // check version of stack profile
   2408                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2409                {
   2410                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2411                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6402         XRL       A,#0x2
   \   000037   7012         JNZ       ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6401         XRL       A,#0x1
   \   000046   7003         JNZ       ??ZDApp_NwkDescListProcessing_3
   2412                  {
   2413                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV       ?V0,#0x1
   2414                  }
   2415          
   2416                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV       A,?V2
   \   00004D   6003         JZ        $+5
   \   00004F   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC       ?V3
   \   000054   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000057   E5..         MOV       A,?V3
   \   000059   C3           CLR       C
   \   00005A   95..         SUBB      A,?V1
   \   00005C   4003         JC        $+5
   \   00005E   02....       LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000061   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000063   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000065   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000068   E9           MOV       A,R1
   \   000069   6401         XRL       A,#0x1
   \   00006B   7013         JNZ       ??ZDApp_NwkDescListProcessing_8
   \   00006D                ; Setup parameters for call to function sAddrExtCmp
   \   00006D   EE           MOV       A,R6
   \   00006E   240B         ADD       A,#0xb
   \   000070   FC           MOV       R4,A
   \   000071   E4           CLR       A
   \   000072   3F           ADDC      A,R7
   \   000073   FD           MOV       R5,A
   \   000074   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000076   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000078   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00007B   E9           MOV       A,R1
   \   00007C   701D         JNZ       ??ZDApp_NwkDescListProcessing_9
   \   00007E   80D2         SJMP      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000080   90....       MOV       DPTR,#zgConfigPANID
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F4           CPL       A
   \   000085   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00008A   600F         JZ        ??ZDApp_NwkDescListProcessing_9
   \   00008C   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00008F   90....       MOV       DPTR,#zgConfigPANID
   \   000092   E0           MOVX      A,@DPTR
   \   000093   68           XRL       A,R0
   \   000094   7003         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   000096   A3           INC       DPTR
   \   000097   E0           MOVX      A,@DPTR
   \   000098   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000099   70B7         JNZ       ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00009B   8E82         MOV       DPL,R6
   \   00009D   8F83         MOV       DPH,R7
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000A9   7003         JNZ       ??ZDApp_NwkDescListProcessing_12
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000AE   700D         JNZ       ??ZDApp_NwkDescListProcessing_13
   \   0000B0   90....       MOV       DPTR,#_NIB + 23
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   64FE         XRL       A,#0xfe
   \   0000B6   7003         JNZ       ??ZDApp_NwkDescListProcessing_14
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000BB   702E         JNZ       ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000BD   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   6004         JZ        ??ZDApp_NwkDescListProcessing_16
   \   0000C3   6401         XRL       A,#0x1
   \   0000C5   7011         JNZ       ??ZDApp_NwkDescListProcessing_17
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000C7   E5..         MOV       A,?V0
   \   0000C9   7012         JNZ       ??ZDApp_NwkDescListProcessing_18
   \   0000CB   8E82         MOV       DPL,R6
   \   0000CD   8F83         MOV       DPH,R7
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   7016         JNZ       ??ZDApp_NwkDescListProcessing_15
   \   0000D5   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   6402         XRL       A,#0x2
   \   0000DB   700E         JNZ       ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_18:
   \   0000DD   8E82         MOV       DPL,R6
   \   0000DF   8F83         MOV       DPH,R7
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   A3           INC       DPTR
   \   0000E4   A3           INC       DPTR
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   7003         JNZ       $+5
   \   0000E8   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000EB   8E82         MOV       DPL,R6
   \   0000ED   8F83         MOV       DPH,R7
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   F8           MOV       R0,A
   \   0000F6   90....       MOV       DPTR,#_NIB + 17
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   68           XRL       A,R0
   \   0000FB   6003         JZ        $+5
   \   0000FD   02....       LJMP      ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \   000100   8E82         MOV       DPL,R6
   \   000102   8F83         MOV       DPH,R7
   \   000104   A3           INC       DPTR
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   F8           MOV       R0,A
   \   00010C   90....       MOV       DPTR,#zgStackProfile
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   68           XRL       A,R0
   \   000111   603C         JZ        ??ZDApp_NwkDescListProcessing_5
   \   000113   E0           MOVX      A,@DPTR
   \   000114   6401         XRL       A,#0x1
   \   000116   6003         JZ        $+5
   \   000118   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   00011B   8E82         MOV       DPL,R6
   \   00011D   8F83         MOV       DPH,R7
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   E0           MOVX      A,@DPTR
   \   000126   6402         XRL       A,#0x2
   \   000128   6003         JZ        $+5
   \   00012A   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   00012D   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2417                  {
   2418                    continue;
   2419                  }
   2420                }
   2421          
   2422                break;
   2423              }
   2424          
   2425              if (i < ResultCount)
   2426              {
   2427               selected = TRUE;
   2428                break;
   2429              }
   2430          
   2431              // break if selected or stack profile pro wasn't found
   2432              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   000130   E5..         MOV       A,?V0
   \   000132   600C         JZ        ??ZDApp_NwkDescListProcessing_19
   2433              {
   2434                break;
   2435              }
   2436            }
   \   000134   05..         INC       ?V2
   \   000136   E5..         MOV       A,?V2
   \   000138   C3           CLR       C
   \   000139   9402         SUBB      A,#0x2
   \   00013B   5003         JNC       $+5
   \   00013D   02....       LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2437          
   2438            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_19:
   \   000140   E5..         MOV       A,?V1
   \   000142   65..         XRL       A,?V3
   \   000144   7009         JNZ       ??ZDApp_NwkDescListProcessing_5
   2439            {
   2440              nwk_desc_list_free();
   \   000146                ; Setup parameters for call to function nwk_desc_list_free
   \   000146   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2441              return (NULL);   // couldn't find appropriate PAN to join !
   \   000149   7A00         MOV       R2,#0x0
   \   00014B   7B00         MOV       R3,#0x0
   \   00014D   8004         SJMP      ??ZDApp_NwkDescListProcessing_20
   2442            }
   2443            else
   2444            {
   2445              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00014F   EE           MOV       A,R6
   \   000150   FA           MOV       R2,A
   \   000151   EF           MOV       A,R7
   \   000152   FB           MOV       R3,A
   2446            }
   \                     ??ZDApp_NwkDescListProcessing_20:
   \   000153   02....       LJMP      ?Subroutine1 & 0xFFFF
   2447          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   90....       MOV       DPTR,#_NIB + 23
   \   000006   E0           MOVX      A,@DPTR
   \   000007   68           XRL       A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   2448          
   2449          /*********************************************************************
   2450           * @fn          ZDO_NetworkFormationConfirmCB
   2451           *
   2452           * @brief       This function reports the results of the request to
   2453           *              initialize a coordinator in a network.
   2454           *
   2455           * @param       Status - Result of NLME_NetworkFormationRequest()
   2456           *
   2457           * @return      none
   2458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2459          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2460          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2461            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2462          
   2463            if ( Status == ZSUCCESS )
   \   00000A   701B         JNZ       ??ZDO_NetworkFormationConfirmCB_0
   2464            {
   2465              // LED on shows Coordinator started
   2466              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2467          
   2468              // LED off forgets HOLD_AUTO_START
   2469              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7908         MOV       R1,#0x8
   \   000017   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2470          
   2471          #if defined ( ZBIT )
   2472              SIM_SetColor(0xd0ffd0);
   2473          #endif
   2474          
   2475              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV       DPTR,#devState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   700E         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2476              {
   2477                // Began with HOLD_AUTO_START
   2478                ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000020                ; Setup parameters for call to function ZDApp_ChangeState
   \   000020   7908         MOV       R1,#0x8
   \   000022   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000025   8007         SJMP      ??ZDO_NetworkFormationConfirmCB_1
   2479              }
   2480            }
   2481          #if defined(BLINK_LEDS)
   2482            else
   2483            {
   2484              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000027                ; Setup parameters for call to function HalLedSet
   \   000027   7A04         MOV       R2,#0x4
   \   000029   7904         MOV       R1,#0x4
   \   00002B   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2485            }
   2486          #endif
   2487          
   2488            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002E                ; Setup parameters for call to function osal_set_event
   \   00002E   7A02         MOV       R2,#0x2
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   2489          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#ZDAppTaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine69_0
   \   00000A                ; // Fall through to label ??Subroutine69_0
   2490          
   2491          /****************************************************************************
   2492           * @fn          ZDApp_beaconIndProcessing
   2493           *
   2494           * @brief       This function processes the incoming beacon indication.
   2495           *
   2496           *              When another task (MT or App) is registered to process
   2497           *              beacon indication themselves, this function will parse the
   2498           *              beacon payload and pass the beacon descriptor to that task
   2499           *              If no other tasks registered, this function will process
   2500           *              the beacon payload and generate the network descriptor link
   2501           *              list.
   2502           *
   2503           * @param
   2504           *
   2505           * @return      none
   2506           *
   2507           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2508          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2509          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2510            // Pass the beacon Indication to another task if it registers the callback
   2511            // Otherwise, process the beacon notification here.
   2512            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00000F   6009         JZ        ??ZDO_beaconNotifyIndCB_0
   2513            {
   2514              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2515            }
   \                     ??CrossCallReturnLabel_153:
   \   000014   12....       LCALL     ?CALL_IND
   \   000017   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2516            else
   2517            {
   2518              networkDesc_t *pNwkDesc;
   2519              networkDesc_t *pLastNwkDesc;
   2520              uint8 found = false;
   2521          
   2522              // Add the network to the Network Descriptor List
   2523              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV       DPTR,#NwkDescList
   \   00001D   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   2524              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_145:
   \   000020   90....       MOV       DPTR,#NwkDescList
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
   \   00002A   802D         SJMP      ??CrossCallReturnLabel_149
   2525              while (pNwkDesc)
   2526              {
   2527                if ((pNwkDesc->panId == pBeacon->panID) &&
   2528                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   68           XRL       A,R0
   \   000037   7003         JNZ       ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   8A82         MOV       DPL,R2
   \   000048   8B83         MOV       DPH,R3
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   68           XRL       A,R0
   \   000050   6063         JZ        ??ZDO_beaconNotifyIndCB_5
   2529                {
   2530                  found = true;
   2531                  break;
   2532                }
   2533                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV       ?V2,R6
   \   000054   8F..         MOV       ?V3,R7
   2534                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL     ?Subroutine27 & 0xFFFF
   2535              }
   \                     ??CrossCallReturnLabel_149:
   \   000059   EE           MOV       A,R6
   \   00005A   4F           ORL       A,R7
   \   00005B   70CF         JNZ       ??ZDO_beaconNotifyIndCB_2
   2536          
   2537              // If no existing descriptor found, make a new one and add to the list
   2538              if (found == false)
   2539              {
   2540                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV       R2,#0x16
   \   00005F   7B00         MOV       R3,#0x0
   \   000061   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV       ?V4,R2
   \   000066   8B..         MOV       ?V5,R3
   \   000068   AE..         MOV       R6,?V4
   \   00006A   AF..         MOV       R7,?V5
   2541                if ( !pNwkDesc )
   \   00006C   EE           MOV       A,R6
   \   00006D   4F           ORL       A,R7
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2542                {
   2543                  // Memory alloc failed, discard this beacon
   2544                  return;
   2545                }
   2546          
   2547                // Clear the network descriptor
   2548                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV       R4,#0x16
   \   000075   7D00         MOV       R5,#0x0
   \   000077   7900         MOV       R1,#0x0
   \   000079   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2549          
   2550                // Initialize the descriptor
   2551                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   74FE         MOV       A,#-0x2
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   A3           INC       DPTR
   \   00008B   04           INC       A
   \   00008C   12....       LCALL     ?Subroutine14 & 0xFFFF
   2552                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_2:
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   F0           MOVX      @DPTR,A
   2553          
   2554                // Save new entry into the descriptor list
   2555                if ( !NwkDescList )
   \   000098   90....       MOV       DPTR,#NwkDescList
   \   00009B   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00009E   7005         JNZ       ??ZDO_beaconNotifyIndCB_6
   2556                {
   2557                  NwkDescList = pNwkDesc;
   \   0000A0   90....       MOV       DPTR,#NwkDescList
   \   0000A3   800B         SJMP      ??ZDO_beaconNotifyIndCB_7
   2558                }
   2559                else
   2560                {
   2561                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A5   E5..         MOV       A,?V2
   \   0000A7   2414         ADD       A,#0x14
   \   0000A9   F582         MOV       DPL,A
   \   0000AB   E4           CLR       A
   \   0000AC   35..         ADDC      A,?V3
   \   0000AE   F583         MOV       DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000B0   EE           MOV       A,R6
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   EF           MOV       A,R7
   \   0000B4   F0           MOVX      @DPTR,A
   2562                }
   2563              }
   2564          
   2565              // Update the descriptor with the incoming beacon
   2566              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B5   85..82       MOV       DPL,?V0
   \   0000B8   85..83       MOV       DPH,?V1
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   F0           MOVX      @DPTR,A
   2567              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000CB   E5..         MOV       A,?V0
   \   0000CD   2408         ADD       A,#0x8
   \   0000CF   F8           MOV       R0,A
   \   0000D0   E4           CLR       A
   \   0000D1   35..         ADDC      A,?V1
   \   0000D3   F9           MOV       R1,A
   \   0000D4   8882         MOV       DPL,R0
   \   0000D6   8983         MOV       DPH,R1
   \   0000D8   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000DB   12....       LCALL     ?Subroutine16 & 0xFFFF
   2568              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_7:
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   8E82         MOV       DPL,R6
   \   0000E3   8F83         MOV       DPH,R7
   \   0000E5   12....       LCALL     ?Subroutine16 & 0xFFFF
   2569              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_8:
   \   0000E8   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000EB   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2570              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_163:
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   240C         ADD       A,#0xc
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   35..         ADDC      A,?V1
   \   0000F7   F583         MOV       DPH,A
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   C0E0         PUSH      A
   \   0000FC   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000FF   D0E0         POP       A
   \   000101   F0           MOVX      @DPTR,A
   2571          
   2572              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2573              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000102   8882         MOV       DPL,R0
   \   000104   8983         MOV       DPH,R1
   \   000106   E0           MOVX      A,@DPTR
   \   000107   6401         XRL       A,#0x1
   \   000109   6010         JZ        ??ZDO_beaconNotifyIndCB_8
   2574              {
   2575                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   00010B                ; Setup parameters for call to function sAddrExtCpy
   \   00010B   E5..         MOV       A,?V0
   \   00010D   240D         ADD       A,#0xd
   \   00010F   FC           MOV       R4,A
   \   000110   E4           CLR       A
   \   000111   35..         ADDC      A,?V1
   \   000113   12....       LCALL     ?Subroutine39 & 0xFFFF
   2576              }
   \                     ??CrossCallReturnLabel_88:
   \   000116   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000119   800C         SJMP      ??ZDO_beaconNotifyIndCB_9
   2577              else
   2578              {
   2579                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   00011B                ; Setup parameters for call to function osal_memset
   \   00011B   7C08         MOV       R4,#0x8
   \   00011D   7D00         MOV       R5,#0x0
   \   00011F   79FF         MOV       R1,#-0x1
   \   000121   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   2580              }
   \                     ??CrossCallReturnLabel_86:
   \   000124   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2581          
   2582              // check if this device is a better choice to join...
   2583              // ...dont bother checking assocPermit flag is doing a rejoin
   2584              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2585                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   000127   85..82       MOV       DPL,?V0
   \   00012A   85..83       MOV       DPH,?V1
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   A3           INC       DPTR
   \   000130   A3           INC       DPTR
   \   000131   A3           INC       DPTR
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   A3           INC       DPTR
   \   000135   A3           INC       DPTR
   \   000136   A3           INC       DPTR
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F8           MOV       R0,A
   \   000139   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   C3           CLR       C
   \   00013E   98           SUBB      A,R0
   \   00013F   4003         JC        $+5
   \   000141   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000144   85..82       MOV       DPL,?V0
   \   000147   85..83       MOV       DPH,?V1
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   A3           INC       DPTR
   \   00014D   A3           INC       DPTR
   \   00014E   A3           INC       DPTR
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   6401         XRL       A,#0x1
   \   000152   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   000154   90....       MOV       DPTR,#_tmpRejoinState
   \   000157   E0           MOVX      A,@DPTR
   \   000158   7003         JNZ       $+5
   \   00015A   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2586              {
   2587                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   00015D   C2F0         CLR       B.0
   2588                uint8 capacity = FALSE;
   2589          
   2590          #if defined ( ZIGBEEPRO )
   2591                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2592                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2593                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2594                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   00015F   8E82         MOV       DPL,R6
   \   000161   8F83         MOV       DPH,R7
   \   000163   A3           INC       DPTR
   \   000164   A3           INC       DPTR
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   A3           INC       DPTR
   \   00016C   E0           MOVX      A,@DPTR
   \   00016D   C3           CLR       C
   \   00016E   98           SUBB      A,R0
   \   00016F   5009         JNC       ??ZDO_beaconNotifyIndCB_11
   \   000171   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000174   9414         SUBB      A,#0x14
   \   000176   4029         JC        ??ZDO_beaconNotifyIndCB_12
   \   000178   8029         SJMP      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00017A   8E82         MOV       DPL,R6
   \   00017C   8F83         MOV       DPH,R7
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   A3           INC       DPTR
   \   000184   A3           INC       DPTR
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   E0           MOVX      A,@DPTR
   \   000188   68           XRL       A,R0
   \   000189   7018         JNZ       ??ZDO_beaconNotifyIndCB_13
   \   00018B   8E82         MOV       DPL,R6
   \   00018D   8F83         MOV       DPH,R7
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   A3           INC       DPTR
   \   000194   A3           INC       DPTR
   \   000195   A3           INC       DPTR
   \   000196   A3           INC       DPTR
   \   000197   A3           INC       DPTR
   \   000198   A3           INC       DPTR
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   F8           MOV       R0,A
   \   00019B   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00019E   98           SUBB      A,R0
   \   00019F   5002         JNC       ??ZDO_beaconNotifyIndCB_13
   2595                {
   2596                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001A1   D2F0         SETB      B.0
   2597                }
   2598          #else
   2599                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2600                {
   2601                  selected = TRUE;
   2602                }
   2603          #endif
   2604          
   2605                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001A3   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001A6   E0           MOVX      A,@DPTR
   \   0001A7   6004         JZ        ??ZDO_beaconNotifyIndCB_14
   \   0001A9   6401         XRL       A,#0x1
   \   0001AB   7008         JNZ       ??ZDO_beaconNotifyIndCB_15
   2606                {
   2607                  capacity = pBeacon->routerCapacity;
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001AD   85..82       MOV       DPL,?V0
   \   0001B0   85..83       MOV       DPH,?V1
   \   0001B3   800C         SJMP      ??ZDO_beaconNotifyIndCB_16
   2608                }
   2609                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001B5   E0           MOVX      A,@DPTR
   \   0001B6   6402         XRL       A,#0x2
   \   0001B8   7010         JNZ       ??ZDO_beaconNotifyIndCB_17
   2610                {
   2611                  capacity = pBeacon->deviceCapacity;
   \   0001BA   85..82       MOV       DPL,?V0
   \   0001BD   85..83       MOV       DPH,?V1
   \   0001C0   A3           INC       DPTR
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   0001C1   A3           INC       DPTR
   \   0001C2   A3           INC       DPTR
   \   0001C3   A3           INC       DPTR
   \   0001C4   A3           INC       DPTR
   \   0001C5   A3           INC       DPTR
   \   0001C6   A3           INC       DPTR
   \   0001C7   E0           MOVX      A,@DPTR
   2612                }
   2613          
   2614                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \   0001C8   7010         JNZ       ??ZDO_beaconNotifyIndCB_18
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   0001CA   85..82       MOV       DPL,?V0
   \   0001CD   85..83       MOV       DPH,?V1
   \   0001D0   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001D3   7003         JNZ       ??ZDO_beaconNotifyIndCB_19
   \   0001D5   A3           INC       DPTR
   \   0001D6   E0           MOVX      A,@DPTR
   \   0001D7   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_19:
   \   0001D8   702C         JNZ       ??ZDO_beaconNotifyIndCB_20
   \                     ??ZDO_beaconNotifyIndCB_18:
   \   0001DA   A2F0         MOV       C,B.0
   \   0001DC   5028         JNC       ??ZDO_beaconNotifyIndCB_20
   2615                {
   2616                  // this is the new chosen router for joining...
   2617                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001DE   85..82       MOV       DPL,?V0
   \   0001E1   85..83       MOV       DPH,?V1
   \   0001E4   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001E7   12....       LCALL     ?Subroutine13 & 0xFFFF
   2618                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_117:
   \   0001EA   85..82       MOV       DPL,?V0
   \   0001ED   85..83       MOV       DPH,?V1
   \   0001F0   A3           INC       DPTR
   \   0001F1   A3           INC       DPTR
   \   0001F2   A3           INC       DPTR
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001FD   F0           MOVX      @DPTR,A
   2619                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   0001FE   12....       LCALL     ?Subroutine53 & 0xFFFF
   2620                }
   \                     ??CrossCallReturnLabel_70:
   \   000201   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000204   A3           INC       DPTR
   \   000205   F0           MOVX      @DPTR,A
   2621          
   2622                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_20:
   \   000206   85..82       MOV       DPL,?V0
   \   000209   85..83       MOV       DPH,?V1
   \   00020C   A3           INC       DPTR
   \   00020D   A3           INC       DPTR
   \   00020E   A3           INC       DPTR
   \   00020F   A3           INC       DPTR
   \   000210   A3           INC       DPTR
   \   000211   A3           INC       DPTR
   \   000212   A3           INC       DPTR
   \   000213   E0           MOVX      A,@DPTR
   \   000214   600B         JZ        ??ZDO_beaconNotifyIndCB_21
   2623                  pNwkDesc->deviceCapacity = 1;
   \   000216   8E82         MOV       DPL,R6
   \   000218   8F83         MOV       DPH,R7
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   7401         MOV       A,#0x1
   \   000220   F0           MOVX      @DPTR,A
   2624          
   2625                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_21:
   \   000221   85..82       MOV       DPL,?V0
   \   000224   85..83       MOV       DPH,?V1
   \   000227   A3           INC       DPTR
   \   000228   A3           INC       DPTR
   \   000229   A3           INC       DPTR
   \   00022A   A3           INC       DPTR
   \   00022B   A3           INC       DPTR
   \   00022C   A3           INC       DPTR
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2626                  pNwkDesc->routerCapacity = 1;
   \   000230   8E82         MOV       DPL,R6
   \   000232   8F83         MOV       DPH,R7
   \   000234   A3           INC       DPTR
   \   000235   A3           INC       DPTR
   \   000236   A3           INC       DPTR
   \   000237   7401         MOV       A,#0x1
   \   000239   F0           MOVX      @DPTR,A
   2627              }
   2628            }
   2629          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00023A   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C3           CLR       C
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E5..         MOV       A,?V0
   \   000002   240B         ADD       A,#0xb
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine65_0
   \   000004                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   22           RET
   2630          
   2631          /*********************************************************************
   2632           * @fn          ZDO_StartRouterConfirmCB
   2633           *
   2634           * @brief       This function reports the results of the request to
   2635           *              start functioning as a router in a network.
   2636           *
   2637           * @param       Status - Result of NLME_StartRouterRequest()
   2638           *
   2639           * @return      none
   2640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2641          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2642          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2643            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2644          
   2645            if ( Status == ZSUCCESS )
   \   00000A   701B         JNZ       ??ZDO_StartRouterConfirmCB_0
   2646            {
   2647              // LED on shows Router started
   2648              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV       R2,#0x1
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2649              // LED off forgets HOLD_AUTO_START
   2650              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7908         MOV       R1,#0x8
   \   000017   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2651              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV       DPTR,#devState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   700E         JNZ       ??ZDO_StartRouterConfirmCB_1
   2652              {
   2653                // Began with HOLD_AUTO_START
   2654                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000020                ; Setup parameters for call to function ZDApp_ChangeState
   \   000020   7906         MOV       R1,#0x6
   \   000022   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   000025   8007         SJMP      ??ZDO_StartRouterConfirmCB_1
   2655              }
   2656            }
   2657          #if defined(BLINK_LEDS)
   2658            else
   2659            {
   2660              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000027                ; Setup parameters for call to function HalLedSet
   \   000027   7A04         MOV       R2,#0x4
   \   000029   7904         MOV       R1,#0x4
   \   00002B   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2661            }
   2662          #endif
   2663          
   2664            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_1:
   \   00002E                ; Setup parameters for call to function osal_set_event
   \   00002E   7A20         MOV       R2,#0x20
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   2665          }
   2666          
   2667          /*********************************************************************
   2668           * @fn          ZDO_JoinConfirmCB
   2669           *
   2670           * @brief       This function allows the next higher layer to be notified
   2671           *              of the results of its request to join itself or another
   2672           *              device to a network.
   2673           *
   2674           * @param       Status - Result of NLME_JoinRequest()
   2675           *
   2676           * @return      none
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2679          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   2680            (void)PanId;  // remove if this parameter is used.
   2681          
   2682            nwkStatus = (byte)Status;
   \   00000C   E9           MOV       A,R1
   \   00000D   90....       MOV       DPTR,#nwkStatus
   \   000010   F0           MOVX      @DPTR,A
   2683          
   2684            if ( Status == ZSUCCESS )
   \   000011   6003         JZ        $+5
   \   000013   02....       LJMP      ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2685            {
   2686              if ( ZSTACK_END_DEVICE_BUILD
   2687                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000016   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6402         XRL       A,#0x2
   \   00001C   7065         JNZ       ??ZDO_JoinConfirmCB_1
   2688              {
   2689                neighborEntry_t *pItem;
   2690          
   2691                // We don't need the neighbor table entries.
   2692                // Clear the neighbor Table to remove beacon information
   2693                nwkNeighborInitTable();
   \   00001E                ; Setup parameters for call to function nwkNeighborInitTable
   \   00001E   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2694          
   2695                // Force a neighbor table entry for the parent
   2696                pItem = nwkNeighborFindEmptySlot();
   \   000021                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000021   12....       LCALL     `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000024   8A..         MOV       ?V2,R2
   \   000026   8B..         MOV       ?V3,R3
   \   000028   AE..         MOV       R6,?V2
   \   00002A   AF..         MOV       R7,?V3
   2697                if ( pItem != NULL )
   \   00002C   EE           MOV       A,R6
   \   00002D   4F           ORL       A,R7
   \   00002E   6053         JZ        ??ZDO_JoinConfirmCB_1
   2698                {
   2699                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000030                ; Setup parameters for call to function osal_memset
   \   000030   7C17         MOV       R4,#0x17
   \   000032   7D00         MOV       R5,#0x0
   \   000034   7900         MOV       R1,#0x0
   \   000036   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2700                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000039   90....       MOV       DPTR,#_NIB + 23
   \   00003C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00003F   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2701                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \                     ??CrossCallReturnLabel_113:
   \   000042                ; Setup parameters for call to function sAddrExtCpy
   \   000042   7C..         MOV       R4,#(_NIB + 25) & 0xff
   \   000044   7D..         MOV       R5,#((_NIB + 25) >> 8) & 0xff
   \   000046   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000049   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2702                  pItem->panId = _NIB. nwkPanId;
   \   00004C   90....       MOV       DPTR,#_NIB + 33
   \   00004F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   12....       LCALL     ?Subroutine13 & 0xFFFF
   2703                  pItem->linkInfo.rxLqi = DEF_LQI;
   \                     ??CrossCallReturnLabel_118:
   \   000058   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00005B   74AA         MOV       A,#-0x56
   \   00005D   F0           MOVX      @DPTR,A
   2704                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   00005E   90....       MOV       DPTR,#gLINK_DOWN_TRIGGER
   \   000061   E4           CLR       A
   \   000062   93           MOVC      A,@A+DPTR
   \   000063   7900         MOV       R1,#0x0
   \   000065   2401         ADD       A,#0x1
   \   000067   F8           MOV       R0,A
   \   000068   5001         JNC       ??ZDO_JoinConfirmCB_2
   \   00006A   09           INC       R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   00006B   7A02         MOV       R2,#0x2
   \   00006D   7B00         MOV       R3,#0x0
   \   00006F   12....       LCALL     ?S_DIV_MOD
   \   000072   EE           MOV       A,R6
   \   000073   240D         ADD       A,#0xd
   \   000075   F582         MOV       DPL,A
   \   000077   E4           CLR       A
   \   000078   3F           ADDC      A,R7
   \   000079   F583         MOV       DPH,A
   \   00007B   E8           MOV       A,R0
   \   00007C   F0           MOVX      @DPTR,A
   2705                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   00007D   12....       LCALL     ?Subroutine46 & 0xFFFF
   2706                }
   2707              }
   \                     ??CrossCallReturnLabel_58:
   \   000080   7401         MOV       A,#0x1
   \   000082   F0           MOVX      @DPTR,A
   2708          
   2709              // LED on shows device joined
   2710              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_1:
   \   000083                ; Setup parameters for call to function HalLedSet
   \   000083   7A01         MOV       R2,#0x1
   \   000085   7904         MOV       R1,#0x4
   \   000087   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2711              // LED off forgets HOLD_AUTO_START
   2712              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   00008A                ; Setup parameters for call to function HalLedSet
   \   00008A   7A00         MOV       R2,#0x0
   \   00008C   7908         MOV       R1,#0x8
   \   00008E   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2713              if ( (devState == DEV_HOLD) )
   \   000091   90....       MOV       DPTR,#devState
   \   000094   E0           MOVX      A,@DPTR
   \   000095   700E         JNZ       ??ZDO_JoinConfirmCB_3
   2714              {
   2715                // Began with HOLD_AUTO_START
   2716                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000097                ; Setup parameters for call to function ZDApp_ChangeState
   \   000097   7903         MOV       R1,#0x3
   \   000099   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   \   00009C   8007         SJMP      ??ZDO_JoinConfirmCB_3
   2717              }
   2718          
   2719              if ( !ZG_SECURE_ENABLED )
   2720              {
   2721                // Notify to save info into NV
   2722                ZDApp_NVUpdate();
   2723              }
   2724            }
   2725            else
   2726            {
   2727          #if defined(BLINK_LEDS)
   2728              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   \                     ??ZDO_JoinConfirmCB_0:
   \   00009E                ; Setup parameters for call to function HalLedSet
   \   00009E   7A04         MOV       R2,#0x4
   \   0000A0   7904         MOV       R1,#0x4
   \   0000A2   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
   2729          #endif
   2730            }
   2731          
   2732            // Pass the join confirm to higher layer if callback registered
   2733            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000A5   90....       MOV       DPTR,#zdoCBFunc + 8
   \   0000A8   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000AB   6035         JZ        ??ZDO_JoinConfirmCB_4
   2734            {
   2735              zdoJoinCnf_t joinCnf;
   2736          
   2737              joinCnf.status = Status;
   \   0000AD   85..82       MOV       DPL,?XSP + 0
   \   0000B0   85..83       MOV       DPH,?XSP + 1
   \   0000B3   E5..         MOV       A,?V0
   \   0000B5   F0           MOVX      @DPTR,A
   2738              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000B6   90....       MOV       DPTR,#_NIB + 20
   \   0000B9   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2739              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_114:
   \   0000C4   90....       MOV       DPTR,#_NIB + 23
   \   0000C7   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0000CA   7403         MOV       A,#0x3
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2740          
   2741              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_115:
   \   0000D2                ; Setup parameters for indirect call
   \   0000D2   AA..         MOV       R2,?XSP + 0
   \   0000D4   AB..         MOV       R3,?XSP + 1
   \   0000D6   90....       MOV       DPTR,#zdoCBFunc + 8
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F8           MOV       R0,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2742            }
   \                     ??CrossCallReturnLabel_154:
   \   0000DF   12....       LCALL     ?CALL_IND
   2743          
   2744            // Notify ZDApp
   2745            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_4:
   \   0000E2                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000E2   7C00         MOV       R4,#0x0
   \   0000E4   7D00         MOV       R5,#0x0
   \   0000E6   7B02         MOV       R3,#0x2
   \   0000E8   7A02         MOV       R2,#0x2
   \   0000EA   90....       MOV       DPTR,#ZDAppTaskID
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F9           MOV       R1,A
   \   0000EF   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2746          
   2747          }
   \   0000F2   7405         MOV       A,#0x5
   \   0000F4   02....       LJMP      ??Subroutine76_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   2748          
   2749          /*********************************************************************
   2750           * @fn          ZDO_PermitJoinCB
   2751           *
   2752           * @brief      This function is called when there is a change in the
   2753           *             device's permit join status.
   2754           *
   2755           * @param       duration - the new duration
   2756           *
   2757           * @return      none
   2758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2759          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2760          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2761            // Pass the Permit Join status to higher layer if callback registered
   2762            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000017   6006         JZ        ??ZDO_PermitJoinCB_0
   2763            {
   2764              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   12....       LCALL     ?Subroutine21 & 0xFFFF
   2765            }
   \                     ??CrossCallReturnLabel_159:
   \   00001C   12....       LCALL     ?CALL_IND
   2766          }
   \                     ??ZDO_PermitJoinCB_0:
   \   00001F   7401         MOV       A,#0x1
   \   000021   02....       LJMP      ?Subroutine3 & 0xFFFF
   2767          
   2768          /*********************************************************************
   2769           * @fn          ZDO_AddrChangeIndicationCB
   2770           *
   2771           * @brief       This function notifies the application that this
   2772           *              device's address has changed.  Could happen in
   2773           *              a network with stochastic addressing (PRO).
   2774           *
   2775           * @param       newAddr - the new address
   2776           *
   2777           * @return      none
   2778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2779          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2781            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2782            epList_t *pItem = epList;
   \   000009   90....       MOV       DPTR,#epList
   \   00000C   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   2783          
   2784            // Notify to save info into NV
   2785            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_146:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2786          
   2787            // Notify the applications
   2788            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A10         MOV       R2,#0x10
   \   000014   7B00         MOV       R3,#0x0
   \   000016   90....       MOV       DPTR,#ZDAppTaskID
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001E   803D         SJMP      ??ZDO_AddrChangeIndicationCB_0
   2789          
   2790            while (pItem != NULL)
   2791            {
   2792              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000020   8E82         MOV       DPL,R6
   \   000022   8F83         MOV       DPH,R7
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000029   602B         JZ        ??ZDO_AddrChangeIndicationCB_2
   2793              {
   2794                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00002B                ; Setup parameters for call to function osal_msg_allocate
   \   00002B   7A04         MOV       R2,#0x4
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2795                if (pZDOAddrChangeMsg != NULL)
   \   000032   EA           MOV       A,R2
   \   000033   4B           ORL       A,R3
   \   000034   6020         JZ        ??ZDO_AddrChangeIndicationCB_2
   2796                {
   2797                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   74D6         MOV       A,#-0x2a
   \   00003C   F0           MOVX      @DPTR,A
   2798                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   E5..         MOV       A,?V0
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E5..         MOV       A,?V1
   \   000045   12....       LCALL     ?Subroutine14 & 0xFFFF
   2799                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2800                }
   2801              }
   \                     ??CrossCallReturnLabel_3:
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F8           MOV       R0,A
   \   00004A   A3           INC       DPTR
   \   00004B   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00004E   A3           INC       DPTR
   \   00004F   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000052   F9           MOV       R1,A
   \   000053   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2802              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000056   12....       LCALL     ?Subroutine29 & 0xFFFF
   2803            }
   \                     ??CrossCallReturnLabel_107:
   \   000059   E8           MOV       A,R0
   \   00005A   FE           MOV       R6,A
   \   00005B   E9           MOV       A,R1
   \   00005C   FF           MOV       R7,A
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   00005D   EE           MOV       A,R6
   \   00005E   4F           ORL       A,R7
   \   00005F   70BF         JNZ       ??ZDO_AddrChangeIndicationCB_1
   2804          
   2805            // Send out a device announce
   2806            ZDApp_AnnounceNewAddress();
   \   000061                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000061   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2807          }
   \   000064   02....       LJMP      ??Subroutine77_0 & 0xFFFF
   2808          
   2809          /*********************************************************************
   2810           * @fn          ZDO_JoinIndicationCB
   2811           *
   2812           * @brief       This function allows the next higher layer of a
   2813           *              coordinator to be notified of a remote join request.
   2814           *
   2815           * @param       ShortAddress - 16-bit address
   2816           * @param       ExtendedAddress - IEEE (64-bit) address
   2817           * @param       CapabilityFlags - Association Capability Flags
   2818           * @param       type - of joining -
   2819           *                          NWK_ASSOC_JOIN
   2820           *                          NWK_ASSOC_REJOIN_UNSECURE
   2821           *                          NWK_ASSOC_REJOIN_SECURE
   2822           *
   2823           * @return      ZStatus_t
   2824           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2825          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2826                                          uint8 CapabilityFlags, uint8 type)
   2827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2828            (void)ExtendedAddress;
   2829            //check if the device is leaving before responding to rejoin request
   2830            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   90....       MOV       DPTR,#ZDAppTaskID
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   4C           ORL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   6005         JZ        ??ZDO_JoinIndicationCB_0
   2831            {
   2832              return ZFailure; // device leaving , hence do not allow rejoin
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2833            }
   2834          
   2835          #if ZDO_NV_SAVE_RFDs
   2836              (void)CapabilityFlags;
   2837          
   2838          #else  // if !ZDO_NV_SAVE_RFDs
   2839              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2840          #endif
   2841              {
   2842                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   000020                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000020   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000023   7410         MOV       A,#0x10
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   2843              }
   2844          
   2845              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2846              {
   2847                if ( type == NWK_ASSOC_JOIN ||
   2848                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   2849                      type == NWK_ASSOC_REJOIN_SECURE )
   \   00002A   600D         JZ        ??ZDO_JoinIndicationCB_2
   \   00002C   7401         MOV       A,#0x1
   \   00002E   68           XRL       A,R0
   \   00002F   6008         JZ        ??ZDO_JoinIndicationCB_2
   \   000031   7402         MOV       A,#0x2
   \   000033   68           XRL       A,R0
   \   000034   6003         JZ        $+5
   \   000036   02....       LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2850                {
   2851                  uint16 timeToFire;
   2852                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2853          
   2854                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000039                ; Setup parameters for call to function osal_mem_alloc
   \   000039   7A06         MOV       R2,#0x6
   \   00003B   7B00         MOV       R3,#0x0
   \   00003D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000040   8A..         MOV       ?V2,R2
   \   000042   8B..         MOV       ?V3,R3
   \   000044   AE..         MOV       R6,?V2
   \   000046   AF..         MOV       R7,?V3
   2855          
   2856                  if ( pNewDevice == NULL )
   \   000048   EE           MOV       A,R6
   \   000049   4F           ORL       A,R7
   \   00004A   7005         JNZ       ??ZDO_JoinIndicationCB_4
   2857                  {
   2858                    // Memory alloc failed
   2859                    return ZMemError;
   \   00004C   7910         MOV       R1,#0x10
   \   00004E   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2860                  }
   2861          
   2862                  // Add the new device to the New Device List
   2863                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000051   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000054   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000057   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00005A   7006         JNZ       ??ZDO_JoinIndicationCB_5
   2864                  {
   2865                    // The list is empty, add the first element
   2866                    ZDApp_NewDeviceList = pNewDevice;
   \   00005C   EE           MOV       A,R6
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   EF           MOV       A,R7
   \   000060   801F         SJMP      ??ZDO_JoinIndicationCB_6
   2867                  }
   2868                  else
   2869                  {
   2870                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FA           MOV       R2,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   8003         SJMP      ??ZDO_JoinIndicationCB_7
   2871          
   2872                    // Walk the list to last element
   2873                    while ( pDeviceList->next )
   2874                    {
   2875                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000068   E8           MOV       A,R0
   \   000069   FA           MOV       R2,A
   \   00006A   E9           MOV       A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   00006B   FB           MOV       R3,A
   2876                    }
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000073   70F3         JNZ       ??ZDO_JoinIndicationCB_8
   2877          
   2878                    // Add new device at the end
   2879                    pDeviceList->next = pNewDevice;
   \   000075   EE           MOV       A,R6
   \   000076   F8           MOV       R0,A
   \   000077   EF           MOV       A,R7
   \   000078   F9           MOV       R1,A
   \   000079   8A82         MOV       DPL,R2
   \   00007B   8B83         MOV       DPH,R3
   \   00007D   E8           MOV       A,R0
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   E9           MOV       A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000081   F0           MOVX      @DPTR,A
   2880                  }
   2881          
   2882                  // get the remaining time of the timer
   2883                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   000082                ; Setup parameters for call to function osal_get_timeoutEx
   \   000082   7A40         MOV       R2,#0x40
   \   000084   7B00         MOV       R3,#0x0
   \   000086   90....       MOV       DPTR,#ZDAppTaskID
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   F9           MOV       R1,A
   \   00008B   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00008E   8A..         MOV       ?V4,R2
   \   000090   8B..         MOV       ?V5,R3
   2884          
   2885                  pNewDevice->next = NULL;
   \   000092   8E82         MOV       DPL,R6
   \   000094   8F83         MOV       DPH,R7
   \   000096   E4           CLR       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098   A3           INC       DPTR
   \   000099   12....       LCALL     ?Subroutine14 & 0xFFFF
   2886                  pNewDevice->shortAddr = ShortAddress;
   \                     ??CrossCallReturnLabel_4:
   \   00009C   E5..         MOV       A,?V0
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E5..         MOV       A,?V1
   \   0000A2   F0           MOVX      @DPTR,A
   2887                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   0000A3   7458         MOV       A,#0x58
   \   0000A5   C3           CLR       C
   \   0000A6   95..         SUBB      A,?V4
   \   0000A8   F8           MOV       R0,A
   \   0000A9   7402         MOV       A,#0x2
   \   0000AB   95..         SUBB      A,?V5
   \   0000AD   F9           MOV       R1,A
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   2888          
   2889                  // Start the timer only if there is no pending timer
   2890                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_116:
   \   0000B5   7458         MOV       A,#0x58
   \   0000B7   68           XRL       A,R0
   \   0000B8   7003         JNZ       ??ZDO_JoinIndicationCB_9
   \   0000BA   7402         MOV       A,#0x2
   \   0000BC   69           XRL       A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000BD   7017         JNZ       ??ZDO_JoinIndicationCB_3
   2891                  {
   2892                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000BF                ; Setup parameters for call to function osal_start_timerEx
   \   0000BF   90....       MOV       DPTR,#__Constant_258
   \   0000C2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000C5   7A40         MOV       R2,#0x40
   \   0000C7   7B00         MOV       R3,#0x0
   \   0000C9   90....       MOV       DPTR,#ZDAppTaskID
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000D1   7404         MOV       A,#0x4
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   2893                  }
   2894                }
   2895              }
   2896          
   2897              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000D6   7900         MOV       R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000D8   02....       LJMP      ?Subroutine2 & 0xFFFF
   2898          
   2899          }
   2900          
   2901          /*********************************************************************
   2902           * @fn          ZDO_ConcentratorIndicationCB
   2903           *
   2904           * @brief       This function allows the next higher layer of a
   2905           *              device to be notified of existence of the concentrator.
   2906           *
   2907           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2908           * @param       extAddr - pointer to extended Address
   2909           *                        NULL if not available
   2910           * @param       pktCost - PktCost from RREQ
   2911           *
   2912           * @return      void
   2913           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2914          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2915          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2916            zdoConcentratorInd_t conInd;
   2917          
   2918            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine17 & 0xFFFF
   2919            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_166:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   2920            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   2921          
   2922            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000024   6006         JZ        ??ZDO_ConcentratorIndicationCB_0
   2923            {
   2924              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL     ?Subroutine21 & 0xFFFF
   2925            }
   \                     ??CrossCallReturnLabel_160:
   \   000029   12....       LCALL     ?CALL_IND
   2926          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002C                REQUIRE ?Subroutine7
   \   00002C                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV       A,#0x5
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine73_0
   \   000006                ; // Fall through to label ??Subroutine73_0
   2927          
   2928          /*********************************************************************
   2929           * @fn          ZDO_LeaveCnf
   2930           *
   2931           * @brief       This function allows the next higher layer to be
   2932           *              notified of the results of its request for this or
   2933           *              a child device to leave the network.
   2934           *
   2935           * @param       cnf - NLME_LeaveCnf_t
   2936           *
   2937           * @return      none
   2938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2939          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2940          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2941            // Check for this device
   2942            if ( osal_ExtAddrEqual( cnf->extAddr,
   2943                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000017   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV       A,R1
   \   00001B   6401         XRL       A,#0x1
   \   00001D   7022         JNZ       ??ZDO_LeaveCnf_0
   2944            {
   2945              // Pass the leave confirm to higher layer if callback registered
   2946              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2947                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000025   6011         JZ        ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00002E   12....       LCALL     ?CALL_IND
   \   000031   8B..         MOV       ?V1,R3
   \   000033   EA           MOV       A,R2
   \   000034   45..         ORL       A,?V1
   \   000036   7027         JNZ       ??ZDO_LeaveCnf_2
   2948              {
   2949                // Prepare to leave with reset
   2950                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000038                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000038   12....       LCALL     ?Subroutine37 & 0xFFFF
   2951              }
   2952            }
   \                     ??CrossCallReturnLabel_36:
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   00003F   801E         SJMP      ??ZDO_LeaveCnf_2
   2953            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_LeaveCnf_0:
   \   000041   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000044   E0           MOVX      A,@DPTR
   \   000045   6004         JZ        ??ZDO_LeaveCnf_3
   \   000047   6401         XRL       A,#0x1
   \   000049   7014         JNZ       ??ZDO_LeaveCnf_2
   2954            {
   2955              // Remove device address(optionally descendents) from data
   2956              ZDApp_LeaveUpdate( cnf->dstAddr,
   2957                                 cnf->extAddr,
   2958                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_3:
   \   00004B                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ?Subroutine22 & 0xFFFF
   2959            }
   \                     ??CrossCallReturnLabel_9:
   \   00005C   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2960          }
   \                     ??ZDO_LeaveCnf_2:
   \   00005F   02....       LJMP      ??Subroutine72_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   EE           MOV       A,R6
   \   000003   2402         ADD       A,#0x2
   \   000005   FC           MOV       R4,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   FD           MOV       R5,A
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   FB           MOV       R3,A
   \   000012   22           RET
   2961          
   2962          /*********************************************************************
   2963           * @fn          ZDO_LeaveInd
   2964           *
   2965           * @brief       This function allows the next higher layer of a
   2966           *              device to be notified of a remote leave request or
   2967           *              indication.
   2968           *
   2969           * @param       ind - NLME_LeaveInd_t
   2970           *
   2971           * @return      none
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2974          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2975            uint8 leave;
   2976          
   2977          
   2978            // Parent is requesting the leave - NWK layer filters out illegal
   2979            // requests
   2980            if ( ind->request == TRUE )
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   7056         JNZ       ??ZDO_LeaveInd_0
   2981            {
   2982              // Only respond if we are not rejoining the network
   2983              if ( ind->rejoin == FALSE )
   \   000021   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000024   703E         JNZ       ??ZDO_LeaveInd_1
   2984              {
   2985                // Notify network of leave
   2986                NLME_LeaveRsp_t rsp;
   2987                rsp.rejoin = ind->rejoin;
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E4           CLR       A
   \   00002C   F0           MOVX      @DPTR,A
   2988          
   2989                if ( ZSTACK_ROUTER_BUILD )
   \   00002D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6004         JZ        ??ZDO_LeaveInd_2
   \   000033   6401         XRL       A,#0x1
   \   000035   700B         JNZ       ??ZDO_LeaveInd_3
   2990                {
   2991                  rsp.removeChildren = ind->removeChildren;
   \                     ??ZDO_LeaveInd_2:
   \   000037   12....       LCALL     ?Subroutine37 & 0xFFFF
   2992                }
   \                     ??CrossCallReturnLabel_37:
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   801A         SJMP      ??ZDO_LeaveInd_4
   2993                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_3:
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6402         XRL       A,#0x2
   \   000045   7016         JNZ       ??ZDO_LeaveInd_5
   2994                {
   2995                  NLME_SetResponseRate(0);
   \   000047                ; Setup parameters for call to function NLME_SetResponseRate
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   2996                  NLME_SetQueuedPollRate(0);
   \   00004E                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00004E   7A00         MOV       R2,#0x0
   \   000050   7B00         MOV       R3,#0x0
   \   000052   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   2997                  rsp.removeChildren = 0;
   \   000055   85..82       MOV       DPL,?XSP + 0
   \   000058   85..83       MOV       DPH,?XSP + 1
   \   00005B   E4           CLR       A
   \                     ??ZDO_LeaveInd_4:
   \   00005C   F0           MOVX      @DPTR,A
   2998                }
   2999          
   3000                NLME_LeaveRsp( &rsp );
   \                     ??ZDO_LeaveInd_5:
   \   00005D                ; Setup parameters for call to function NLME_LeaveRsp
   \   00005D   AA..         MOV       R2,?XSP + 0
   \   00005F   AB..         MOV       R3,?XSP + 1
   \   000061   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   3001              }
   3002          
   3003              if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_1:
   \   000064   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6402         XRL       A,#0x2
   \   00006A   7035         JNZ       ??ZDO_LeaveInd_6
   3004              {
   3005                // Stop polling and get ready to reset
   3006                NLME_SetPollRate( 0 );
   \   00006C                ; Setup parameters for call to function NLME_SetPollRate
   \   00006C   90....       MOV       DPTR,#__Constant_0
   \   00006F   12....       LCALL     ?XLOAD_R2345
   \   000072   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000075   802A         SJMP      ??ZDO_LeaveInd_6
   3007              }
   3008          
   3009              // Prepare to leave with reset
   3010              ZDApp_LeaveReset( ind->rejoin );
   3011            }
   3012            else
   3013            {
   3014              leave = FALSE;
   3015          
   3016              // Check if this device needs to leave as a child or descendent
   3017              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000077                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000077   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00007A   8A..         MOV       ?V0,R2
   \   00007C   8B..         MOV       ?V1,R3
   \   00007E   A8..         MOV       R0,?V0
   \   000080   A9..         MOV       R1,?V1
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   E0           MOVX      A,@DPTR
   \   000087   68           XRL       A,R0
   \   000088   7003         JNZ       ??ZDO_LeaveInd_7
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   69           XRL       A,R1
   \                     ??ZDO_LeaveInd_7:
   \   00008D   701B         JNZ       ??ZDO_LeaveInd_8
   3018              {
   3019                if ( ( ind->removeChildren == TRUE )   )
   \   00008F   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000092   6401         XRL       A,#0x1
   \   000094   600B         JZ        ??ZDO_LeaveInd_6
   3020                {
   3021                  leave = TRUE;
   3022                }
   3023                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   000096   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000099   700F         JNZ       ??ZDO_LeaveInd_8
   3024                {
   3025                  // old parents is leaving the network, child needs to search for a new parent
   3026                  ind->rejoin = TRUE;
   \   00009B   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00009E   7401         MOV       A,#0x1
   \   0000A0   F0           MOVX      @DPTR,A
   3027                  leave = TRUE;
   3028                }
   3029          
   3030              }
   3031              else if ( ind->removeChildren == TRUE )
   3032              {
   3033                // Check NWK address allocation algorithm
   3034                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3035              }
   3036          
   3037              if ( leave == TRUE )
   3038              {
   3039                // Prepare to leave with reset
   3040                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_6:
   \   0000A1                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000A1   12....       LCALL     ?Subroutine40 & 0xFFFF
   3041              }
   \                     ??CrossCallReturnLabel_45:
   \   0000A4   F9           MOV       R1,A
   \   0000A5   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   0000A8   8009         SJMP      ??ZDO_LeaveInd_9
   3042              else
   3043              {
   3044                // Remove device address(optionally descendents) from data
   3045                ZDApp_LeaveUpdate( ind->srcAddr,
   3046                                   ind->extAddr,
   3047                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_8:
   \   0000AA                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000AA   12....       LCALL     ?Subroutine54 & 0xFFFF
   3048              }
   3049            }
   \                     ??CrossCallReturnLabel_72:
   \   0000AD   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000B0   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   3050          
   3051            // Pass the leave indication to higher layer if callback registered.
   3052            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_9:
   \   0000B3   90....       MOV       DPTR,#zdoCBFunc + 12
   \   0000B6   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000B9   600A         JZ        ??ZDO_LeaveInd_10
   3053            {
   3054              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000BB                ; Setup parameters for indirect call
   \   0000BB   EE           MOV       A,R6
   \   0000BC   FA           MOV       R2,A
   \   0000BD   EF           MOV       A,R7
   \   0000BE   FB           MOV       R3,A
   \   0000BF   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   3055            }
   \                     ??CrossCallReturnLabel_157:
   \   0000C2   12....       LCALL     ?CALL_IND
   3056          }
   \                     ??ZDO_LeaveInd_10:
   \   0000C5   02....       LJMP      ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   22           RET
   3057          
   3058          /*********************************************************************
   3059           * @fn          ZDO_SyncIndicationCB
   3060           *
   3061           * @brief       This function allows the next higher layer of a
   3062           *              coordinator to be notified of a loss of synchronization
   3063           *                          with the parent/child device.
   3064           *
   3065           * @param       type: 0 - child; 1 - parent
   3066           *
   3067           *
   3068           * @return      none
   3069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3070          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3071          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3072            (void)shortAddr;  // Remove this line if this parameter is used.
   3073          
   3074            if ( ZSTACK_END_DEVICE_BUILD
   3075              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000007   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6402         XRL       A,#0x2
   \   00000D   703B         JNZ       ??ZDO_SyncIndicationCB_0
   3076            {
   3077              if ( type == 1 && retryCnt == 0 )
   \   00000F   7401         MOV       A,#0x1
   \   000011   6E           XRL       A,R6
   \   000012   7036         JNZ       ??ZDO_SyncIndicationCB_0
   \   000014   90....       MOV       DPTR,#retryCnt
   \   000017   E0           MOVX      A,@DPTR
   \   000018   7030         JNZ       ??ZDO_SyncIndicationCB_0
   3078              {
   3079                // We lost contact with our parent.  Clear the neighbor Table.
   3080                nwkNeighborInitTable();
   \   00001A                ; Setup parameters for call to function nwkNeighborInitTable
   \   00001A   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3081          
   3082                runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   00001D   75..01       MOV       ?V0,#0x1
   \   000020   75..00       MOV       ?V1,#0x0
   \   000023   75..00       MOV       ?V2,#0x0
   \   000026   75..00       MOV       ?V3,#0x0
   \   000029   90....       MOV       DPTR,#_NIB + 22
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?L_SHL
   \   000032   90....       MOV       DPTR,#runtimeChannel
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?L_MOV_TO_X
   3083          
   3084                // Start the rejoin process.
   3085                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   00003A                ; Setup parameters for call to function ZDApp_SendMsg
   \   00003A   7C00         MOV       R4,#0x0
   \   00003C   7D00         MOV       R5,#0x0
   \   00003E   7B02         MOV       R3,#0x2
   \   000040   7A03         MOV       R2,#0x3
   \   000042   90....       MOV       DPTR,#ZDAppTaskID
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   3086              }
   3087            }
   3088          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   00004A   02....       LJMP      ??Subroutine77_0 & 0xFFFF
   3089          
   3090          /*********************************************************************
   3091           * @fn          ZDO_ManytoOneFailureIndicationCB
   3092           *
   3093           * @brief       This function allows the next higher layer of a
   3094           *              concentrator to be notified of a many-to-one route
   3095           *              failure.
   3096           *
   3097           * @param       none
   3098           *
   3099           *
   3100           * @return      none
   3101           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3102          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3103          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3104            // By default, the concentrator automatically redo many-to-one route
   3105            // discovery to update all many-to-one routes in the network
   3106            // If you want anything processing other than the default,
   3107            // please replace the following code.
   3108          
   3109            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3110          }
   \   000007   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3111          
   3112          /*********************************************************************
   3113           * @fn          ZDO_PollConfirmCB
   3114           *
   3115           * @brief       This function allows the next higher layer to be
   3116           *              notified of a Poll Confirm.
   3117           *
   3118           * @param       none
   3119           *
   3120           * @return      none
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3123          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3124            (void)status;  // Remove this line if this parameter is used.
   3125            return;
   \   000000   02....       LJMP      ?BRET
   3126          }
   3127          
   3128          /*********************************************************************
   3129           * @fn          ZDO_NetworkStatusCB
   3130           *
   3131           * @brief       Network Status Callback function
   3132           *
   3133           * @param       nwkDstAddr - message's destination address- used to determine
   3134           *                           if the message was intended for this device or
   3135           *                           a sleeping end device.
   3136           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3137           * @param       dstAddr - the destination address related to the status code
   3138           *
   3139           * @return      none
   3140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3141          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3142          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3143            (void)dstAddr;     // Remove this line if this parameter is used.
   3144          
   3145            if ( (nwkDstAddr == NLME_GetShortAddr())
   3146                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3147            {
   3148              // Routing error for dstAddr, this is informational and a Route
   3149              // Request should happen automatically.
   3150            }
   3151          }
   \   000007   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3152          
   3153          /******************************************************************************
   3154           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3155           *
   3156           * @brief       Stub routine implemented by NHLE. NHLE should call
   3157           *              <AddrMgrWriteNV> when appropriate.
   3158           *
   3159           * @param       none
   3160           *
   3161           * @return      none
   3162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3163          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3164          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3165          #if defined ( NV_RESTORE )
   3166            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   4C           ORL       A,R4
   \   000013   4D           ORL       A,R5
   \   000014   7003         JNZ       ??AddrMgrWriteNVRequest_0
   3167            {
   3168              // Trigger to save info into NV
   3169              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3170            }
   3171          #endif
   3172          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3173          
   3174          /*********************************************************************
   3175           * Call Back Functions from Security  - API
   3176           */
   3177          
   3178           /*********************************************************************
   3179           * @fn          ZDO_UpdateDeviceIndication
   3180           *
   3181           * @brief       This function notifies the "Trust Center" of a
   3182           *              network when a device joins or leaves the network.
   3183           *
   3184           * @param       extAddr - pointer to 64 bit address of new device
   3185           * @param       status  - 0 if a new device joined securely
   3186           *                      - 1 if a new device joined un-securely
   3187           *                      - 2 if a device left the network
   3188           *
   3189           * @return      true if newly joined device should be allowed to
   3190           *                                              remain on network
   3191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3192          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3193          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3194            // can implement a network access policy based on the
   3195            // IEEE address of newly joining devices...
   3196            (void)extAddr;
   3197            (void)status;
   3198          
   3199            return ZSuccess;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   3200          }
   3201          
   3202          /*********************************************************************
   3203           * @fn          ZDApp_InMsgCB
   3204           *
   3205           * @brief       This function is called to pass up any message that is
   3206           *              not yet supported.  This allows for the developer to
   3207           *              support features themselves..
   3208           *
   3209           * @return      none
   3210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3211          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3213            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   5480         ANL       A,#0x80
   \   000010   703C         JNZ       ??ZDApp_InMsgCB_0
   3214            {
   3215              // Handle the response message
   3216            }
   3217            else
   3218            {
   3219              // Handle the request message by sending a generic "not supported".
   3220              // Device Announce doesn't have a response.
   3221              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000012   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000015   7037         JNZ       ??ZDApp_InMsgCB_0
   \   000017   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00001A   6413         XRL       A,#0x13
   \   00001C   7002         JNZ       ??ZDApp_InMsgCB_1
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   000020   602C         JZ        ??ZDApp_InMsgCB_0
   3222              {
   3223                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3224                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000022                ; Setup parameters for call to function ZDP_GenericRsp
   \   000022   12....       LCALL     ?Subroutine33 & 0xFFFF
   3225              }
   3226            }
   \                     ??CrossCallReturnLabel_92:
   \   000025   4480         ORL       A,#0x80
   \   000027   F5..         MOV       ?V1,A
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   E4           CLR       A
   \   00002F   F5..         MOV       ?V0,A
   \   000031   F5..         MOV       ?V1,A
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FD           MOV       R5,A
   \   00003D   7C84         MOV       R4,#-0x7c
   \   00003F   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000042   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000045   F9           MOV       R1,A
   \   000046   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000049   7404         MOV       A,#0x4
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   3227          }
   \                     ??ZDApp_InMsgCB_0:
   \   00004E   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   3228          
   3229          
   3230          /*********************************************************************
   3231           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3232           *
   3233           * @brief   Changes the Match Descriptor Response permission.
   3234           *
   3235           * @param   endpoint - endpoint to allow responses
   3236           * @param   action - true to allow responses, false to not
   3237           *
   3238           * @return  none
   3239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3240          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3241          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3242            // Store the action
   3243            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   3244          }
   \   000008   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   3245          
   3246          /*********************************************************************
   3247           * @fn      ZDApp_NetworkInit()
   3248           *
   3249           * @brief   Used to start the network joining process
   3250           *
   3251           * @param   delay - mSec delay to wait before starting
   3252           *
   3253           * @return  none
   3254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3255          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3256          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3257            if ( delay )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6021         JZ        ??ZDApp_NetworkInit_0
   3258            {
   3259              // Wait awhile before starting the device
   3260              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV       ?V0,R2
   \   00000B   8B..         MOV       ?V1,R3
   \   00000D   E4           CLR       A
   \   00000E   F5..         MOV       ?V2,A
   \   000010   F5..         MOV       ?V3,A
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV       R2,#0x1
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   90....       MOV       DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV       A,#0x4
   \   000025   12....       LCALL     ?DEALLOC_XSTACK8
   \   000028   800C         SJMP      ??ZDApp_NetworkInit_1
   3261            }
   3262            else
   3263            {
   3264              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV       R2,#0x1
   \   00002C   7B00         MOV       R3,#0x0
   \   00002E   90....       MOV       DPTR,#ZDAppTaskID
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F9           MOV       R1,A
   \   000033   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   3265            }
   3266          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP      ??Subroutine77_0 & 0xFFFF
   3267          
   3268          /*********************************************************************
   3269           * @fn      ZDApp_NwkStateUpdateCB()
   3270           *
   3271           * @brief   This function notifies that this device's network
   3272           *          state info has been changed.
   3273           *
   3274           * @param   none
   3275           *
   3276           * @return  none
   3277           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3278          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3279          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3280            // Notify to save info into NV
   3281            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   90....       MOV       DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   4C           ORL       A,R4
   \   000013   4D           ORL       A,R5
   \   000014   7003         JNZ       ??ZDApp_NwkStateUpdateCB_0
   3282            {
   3283              // Trigger to save info into NV
   3284              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3285            }
   3286          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3287          
   3288          /*********************************************************************
   3289           * @fn      ZDApp_NodeProfileSync()
   3290           *
   3291           * @brief   Sync node with stack profile.
   3292           *
   3293           * @param   stackProfile - stack profile of the network to join
   3294           *
   3295           * @return  none
   3296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3297          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3298          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3299            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   501A         JNC       ??ZDApp_NodeProfileSync_0
   3300            {
   3301              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   6013         JZ        ??ZDApp_NodeProfileSync_0
   3302              {
   3303                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   3304                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV       A,#0xc
   \   000024   F0           MOVX      @DPTR,A
   3305                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3306              }
   3307            }
   3308          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   3309          
   3310          /*********************************************************************
   3311           * @fn      ZDApp_StartJoiningCycle()
   3312           *
   3313           * @brief   Starts the joining cycle of a device.  This will only
   3314           *          continue an already started (or stopped) joining cycle.
   3315           *
   3316           * @param   none
   3317           *
   3318           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3320          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3321          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3322            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   3323            {
   3324              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   3325              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3326          
   3327              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   3328            }
   3329            else
   3330              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3331          }
   3332          
   3333          /*********************************************************************
   3334           * @fn      ZDApp_StopJoiningCycle()
   3335           *
   3336           * @brief   Stops the joining or rejoining process of a device.
   3337           *
   3338           * @param   none
   3339           *
   3340           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3342          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3343          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3344            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   600A         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX      A,@DPTR
   \   000012   640C         XRL       A,#0xc
   \   000014   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   3345            {
   3346              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV       DPTR,#continueJoining
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
   3347              return ( TRUE );
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   3348            }
   3349            else
   3350              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3351          }
   3352          
   3353          /*********************************************************************
   3354           * @fn      ZDApp_AnnounceNewAddress()
   3355           *
   3356           * @brief   Send Device Announce and hold all transmissions for
   3357           *          new address timeout.
   3358           *
   3359           * @param   none
   3360           *
   3361           * @return  none
   3362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3363          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3364          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3365          #if defined ( ZIGBEEPRO )
   3366            // Turn off data request hold
   3367            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV       R2,#0x0
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3368          #endif
   3369          
   3370            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3371                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   AE..         MOV       R6,?V0
   \   00001A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001A   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00001D   75..00       MOV       ?V0,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000025   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   EE           MOV       A,R6
   \   00002B   FC           MOV       R4,A
   \   00002C   AD..         MOV       R5,?V1
   \   00002E   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   3372          
   3373          #if defined ( ZIGBEEPRO )
   3374            // Setup the timeout
   3375            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000036                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3376          #endif
   3377          
   3378            if ( ZSTACK_END_DEVICE_BUILD )
   \   00003D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6402         XRL       A,#0x2
   \   000043   702F         JNZ       ??ZDApp_AnnounceNewAddress_0
   3379            {
   3380              if ( zgChildAgingEnable == TRUE )
   \   000045   90....       MOV       DPTR,#zgChildAgingEnable
   \   000048   E0           MOVX      A,@DPTR
   \   000049   6401         XRL       A,#0x1
   \   00004B   7027         JNZ       ??ZDApp_AnnounceNewAddress_0
   3381              {
   3382                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3383          
   3384                // Send the message to parent
   3385                NLME_GetCoordExtAddr( coordExtAddr );
   \   00004D                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00004D   AA..         MOV       R2,?XSP + 0
   \   00004F   AB..         MOV       R3,?XSP + 1
   \   000051   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   3386                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3387                                           zgEndDeviceTimeoutValue,
   3388                                           zgEndDeviceConfiguration );
   \   000054                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000054   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000057                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   000057   90....       MOV       DPTR,#zgEndDeviceConfiguration
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000062   90....       MOV       DPTR,#zgEndDeviceTimeoutValue
   \   000065   E0           MOVX      A,@DPTR
   \   000066   F9           MOV       R1,A
   \   000067   7401         MOV       A,#0x1
   \   000069   12....       LCALL     ?XSTACK_DISP102_8
   \   00006C   12....       LCALL     `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
   \   00006F   7401         MOV       A,#0x1
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   3389              }
   3390            }
   3391          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   000074   7408         MOV       A,#0x8
   \   000076   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   3392          
   3393          /*********************************************************************
   3394           * @fn      ZDApp_SendParentAnnce()
   3395           *
   3396           * @brief   Send Parent Announce message.
   3397           *
   3398           * @param   none
   3399           *
   3400           * @return  none
   3401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3402          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3403          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3404            uint8 count;
   3405            uint8 *childInfo;
   3406          
   3407            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   3408          
   3409            if ( childInfo != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   45..         ORL       A,?V1
   \   000018   6054         JZ        ??ZDApp_SendParentAnnce_0
   3410            {
   3411              if ( count > 0 )
   \   00001A   85..82       MOV       DPL,?XSP + 0
   \   00001D   85..83       MOV       DPH,?XSP + 1
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6044         JZ        ??ZDApp_SendParentAnnce_1
   3412              {
   3413                zAddrType_t dstAddr;
   3414          
   3415                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000023   7409         MOV       A,#0x9
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   740F         MOV       A,#0xf
   \   00002A   F0           MOVX      @DPTR,A
   3416                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   74FC         MOV       A,#-0x4
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   74FF         MOV       A,#-0x1
   \   000036   F0           MOVX      @DPTR,A
   3417          
   3418                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000037                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000037   75..00       MOV       ?V2,#0x0
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   75..1F       MOV       ?V2,#0x1f
   \   000042   75..00       MOV       ?V3,#0x0
   \   000045   78..         MOV       R0,#?V2
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7405         MOV       A,#0x5
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   7406         MOV       A,#0x6
   \   000058   12....       LCALL     ?XSTACK_DISP102_8
   \   00005B   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00005D   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00005F   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000062   7405         MOV       A,#0x5
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   3419              }
   3420          
   3421              // Free the list after the message has been sent
   3422              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000067                ; Setup parameters for call to function osal_mem_free
   \   000067   AA..         MOV       R2,?V0
   \   000069   AB..         MOV       R3,?V1
   \   00006B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3423            }
   3424          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006E   740A         MOV       A,#0xa
   \   000070   02....       LJMP      ??Subroutine76_0 & 0xFFFF
   3425          
   3426          /*********************************************************************
   3427           * @fn          ZDApp_NVUpdate
   3428           *
   3429           * @brief       Set the NV Update Timer.
   3430           *
   3431           * @param       none
   3432           *
   3433           * @return      none
   3434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3435          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3436          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3437          #if defined ( NV_RESTORE )
   3438            if ( (ZSTACK_END_DEVICE_BUILD)
   3439                 || (ZSTACK_ROUTER_BUILD
   3440                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6402         XRL       A,#0x2
   \   00000A   600F         JZ        ??ZDApp_NVUpdate_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6004         JZ        ??ZDApp_NVUpdate_1
   \   00000F   6401         XRL       A,#0x1
   \   000011   7016         JNZ       ??ZDApp_NVUpdate_2
   \                     ??ZDApp_NVUpdate_1:
   \   000013   90....       MOV       DPTR,#_NIB + 14
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E1         MOV       C,0xE0 /* A   */.1
   \   000019   400E         JC        ??ZDApp_NVUpdate_2
   3441            {
   3442              // No need to wait, set the event to save the state
   3443              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_NVUpdate_0:
   \   00001B                ; Setup parameters for call to function osal_set_event
   \   00001B   7A00         MOV       R2,#0x0
   \   00001D   7B01         MOV       R3,#0x1
   \   00001F   90....       MOV       DPTR,#ZDAppTaskID
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F9           MOV       R1,A
   \   000024   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000027   8017         SJMP      ??ZDApp_NVUpdate_3
   3444            }
   3445            else
   3446            {
   3447              // To allow for more changes to the network state before saving
   3448              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \                     ??ZDApp_NVUpdate_2:
   \   000029                ; Setup parameters for call to function osal_start_timerEx
   \   000029   90....       MOV       DPTR,#__Constant_2bc
   \   00002C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00002F   7A00         MOV       R2,#0x0
   \   000031   7B01         MOV       R3,#0x1
   \   000033   90....       MOV       DPTR,#ZDAppTaskID
   \   000036   E0           MOVX      A,@DPTR
   \   000037   F9           MOV       R1,A
   \   000038   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00003B   7404         MOV       A,#0x4
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   3449            }
   3450          #endif
   3451          }
   \                     ??ZDApp_NVUpdate_3:
   \   000040   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3452          
   3453          /*********************************************************************
   3454           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3455           *
   3456           * @brief   Returns a PAN ID for the network layer to use during
   3457           *          a coordinator start and there is another network with
   3458           *          the intended PANID.
   3459           *
   3460           * @param   panid - the intended PAN ID
   3461           *
   3462           * @return  PANID to try
   3463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3464          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3465          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3466            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   3467          }
   3468          
   3469          /*********************************************************************
   3470           * @fn          ZDO_SrcRtgIndCB
   3471           *
   3472           * @brief       This function notifies the ZDO available src route record received.
   3473           *
   3474           * @param       srcAddr - source address of the source route
   3475           * @param       relayCnt - number of devices in the relay list
   3476           * @param       relayList - relay list of the source route
   3477           *
   3478           * @return      none
   3479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3480          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3481          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3482            zdoSrcRtg_t srcRtg;
   3483          
   3484            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine17 & 0xFFFF
   3485            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_167:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   3486            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   3487          
   3488            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000024   6006         JZ        ??ZDO_SrcRtgIndCB_0
   3489            {
   3490              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL     ?Subroutine21 & 0xFFFF
   3491            }
   \                     ??CrossCallReturnLabel_161:
   \   000029   12....       LCALL     ?CALL_IND
   3492          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   00002C   02....       LJMP      ?Subroutine7 & 0xFFFF
   3493          
   3494          /*********************************************************************
   3495           * @fn          ZDApp_InitZdoCBFunc
   3496           *
   3497           * @brief       Call this function to initialize zdoCBFunc[]
   3498           *
   3499           * @param       none
   3500           *
   3501           * @return      none
   3502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3503          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3504          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3505            uint8 i;
   3506          
   3507            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   3508            {
   3509              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   12....       LCALL     ?Subroutine35 & 0xFFFF
   3510            }
   \                     ??CrossCallReturnLabel_31:
   \   00000C   0A           INC       R2
   \   00000D   EA           MOV       A,R2
   \   00000E   C3           CLR       C
   \   00000F   9409         SUBB      A,#0x9
   \   000011   40F3         JC        ??ZDApp_InitZdoCBFunc_0
   3511          }
   \   000013   02....       LJMP      ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#zdoCBFunc & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
   3512          
   3513          /*********************************************************************
   3514           * @fn          ZDO_RegisterForZdoCB
   3515           *
   3516           * @brief       Call this function to register the higher layer (for
   3517           *              example, the Application layer or MT layer) with ZDO
   3518           *              callbacks to get notified of some ZDO indication like
   3519           *              existence of a concentrator or receipt of a source
   3520           *              route record.
   3521           *
   3522           * @param       indID - ZDO Indication ID
   3523           * @param       pFn   - Callback function pointer
   3524           *
   3525           * @return      ZSuccess - successful, ZInvalidParameter if not
   3526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3527          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3528          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
   3529            // Check the range of the indication ID
   3530            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR       C
   \   000007   9409         SUBB      A,#0x9
   \   000009   500C         JNC       ??ZDO_RegisterForZdoCB_0
   3531            {
   3532              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV       A,R4
   \   00000C   29           ADD       A,R1
   \   00000D   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000010   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   3533              return ZSuccess;
   \                     ??CrossCallReturnLabel_164:
   \   000013   7900         MOV       R1,#0x0
   \   000015   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   3534            }
   3535          
   3536            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000017   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000019   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3537          }
   3538          
   3539          /*********************************************************************
   3540           * @fn          ZDO_DeregisterForZdoCB
   3541           *
   3542           * @brief       Call this function to de-register the higher layer (for
   3543           *              example, the Application layer or MT layer) with ZDO
   3544           *              callbacks to get notified of some ZDO indication like
   3545           *              existence of a concentrator or receipt of a source
   3546           *              route record.
   3547           *
   3548           * @param       indID - ZDO Indication ID
   3549           *
   3550           * @return      ZSuccess - successful, ZInvalidParameter if not
   3551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3552          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3553          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FA           MOV       R2,A
   3554            // Check the range of the indication ID
   3555            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR       C
   \   000007   9409         SUBB      A,#0x9
   \   000009   5008         JNC       ??ZDO_DeregisterForZdoCB_0
   3556            {
   3557              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV       A,R2
   \   00000C   29           ADD       A,R1
   \   00000D   12....       LCALL     ?Subroutine35 & 0xFFFF
   3558              return ZSuccess;
   \                     ??CrossCallReturnLabel_32:
   \   000010   F9           MOV       R1,A
   \   000011   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   3559            }
   3560          
   3561            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000013   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000015   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3562          }
   3563          
   3564          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3565          #if defined ( REFLECTOR )
   3566          /*********************************************************************
   3567           * @fn          ZDApp_SetPendingBindDefault
   3568           *
   3569           * @brief       This function initializes a specific entry of pending
   3570           *              Bind Request.
   3571           *
   3572           * @param       pendBindReq - pointer to the entry in the table
   3573           *
   3574           * @return      none
   3575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3576          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3577          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3578            // Set it to an initial value
   3579            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV       R4,#0x21
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   79FF         MOV       R1,#-0x1
   \   00000F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3580          
   3581            // We are checking for age 0 for aged-out records
   3582            pendBindReq->age = 0;
   \   000012   EE           MOV       A,R6
   \   000013   2420         ADD       A,#0x20
   \   000015   F582         MOV       DPL,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   F583         MOV       DPH,A
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   3583          }
   \   00001D   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   3584          
   3585          /*********************************************************************
   3586           * @fn          ZDApp_InitPendingBind
   3587           *
   3588           * @brief       This function initializes the buffer that holds
   3589           *              pending Bind Request messages if no valid NWK address
   3590           *              exists in Address Manager and a Network Address Req
   3591           *              has been sent out.
   3592           *
   3593           * @param       none
   3594           *
   3595           * @return      none
   3596           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3597          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3598          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3599            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000008   7030         JNZ       ??ZDApp_InitPendingBind_0
   3600            {
   3601              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV       R2,#0x63
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000017   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00001A   601E         JZ        ??ZDApp_InitPendingBind_0
   3602              {
   3603                uint8 i;
   3604          
   3605                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV       R6,#0x0
   3606                {
   3607                  // Set to default values
   3608                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV       A,R6
   \   00001F   75F021       MOV       B,#0x21
   \   000022   A4           MUL       AB
   \   000023   F8           MOV       R0,A
   \   000024   A9F0         MOV       R1,B
   \   000026   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   28           ADD       A,R0
   \   00002B   FA           MOV       R2,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   39           ADDC      A,R1
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3609                }
   \   000033   0E           INC       R6
   \   000034   EE           MOV       A,R6
   \   000035   C3           CLR       C
   \   000036   9403         SUBB      A,#0x3
   \   000038   40E4         JC        ??ZDApp_InitPendingBind_1
   3610              }
   3611            }
   3612          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   3613          
   3614          /*********************************************************************
   3615           * @fn          ZDApp_GetEmptyPendingBindReq
   3616           *
   3617           * @brief       This function looks for an empty entry.
   3618           *
   3619           * @param       none
   3620           *
   3621           * @return      Pointer to entry
   3622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3623          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3624          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3625            uint8 i;
   3626          
   3627            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000007   602B         JZ        ??ZDApp_GetEmptyPendingBindReq_0
   3628            {
   3629              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7A00         MOV       R2,#0x0
   3630              {
   3631                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EA           MOV       A,R2
   \   00000C   75F021       MOV       B,#0x21
   \   00000F   A4           MUL       AB
   \   000010   F8           MOV       R0,A
   \   000011   ABF0         MOV       R3,B
   \   000013   EB           MOV       A,R3
   \   000014   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000017   7014         JNZ       ??ZDApp_GetEmptyPendingBindReq_2
   3632                {
   3633                  return ( &ZDAppPendingBindReq[i] );
   \   000019   EA           MOV       A,R2
   \   00001A   75F021       MOV       B,#0x21
   \   00001D   A4           MUL       AB
   \   00001E   F8           MOV       R0,A
   \   00001F   EB           MOV       A,R3
   \   000020   F9           MOV       R1,A
   \   000021   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000024   E0           MOVX      A,@DPTR
   \   000025   28           ADD       A,R0
   \   000026   FA           MOV       R2,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   39           ADDC      A,R1
   \   00002A   FB           MOV       R3,A
   \   00002B   800B         SJMP      ??ZDApp_GetEmptyPendingBindReq_3
   3634                }
   3635              }
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   00002D   0A           INC       R2
   \   00002E   EA           MOV       A,R2
   \   00002F   C3           CLR       C
   \   000030   9403         SUBB      A,#0x3
   \   000032   40D7         JC        ??ZDApp_GetEmptyPendingBindReq_1
   3636            }
   3637          
   3638            // No empty entry was found
   3639            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000034   7A00         MOV       R2,#0x0
   \   000036   7B00         MOV       R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_3:
   \   000038   02....       LJMP      ??Subroutine62_0 & 0xFFFF
   3640          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   F9           MOV       R1,A
   \   000001   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000004   2420         ADD       A,#0x20
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   39           ADDC      A,R1
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   28           ADD       A,R0
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   39           ADDC      A,R1
   \   000009   F9           MOV       R1,A
   \   00000A   E8           MOV       A,R0
   \   00000B   22           RET
   3641          
   3642          /*********************************************************************
   3643           * @fn          ZDApp_ProcessPendingBindReq
   3644           *
   3645           * @brief       Process pending entry based on EXT address.
   3646           *
   3647           * @param       extAddr - of device to look up
   3648           *
   3649           * @return      none
   3650           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3651          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3652          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   3653            uint8 i;
   3654          
   3655            // Loop through all the pending entries for that Ext Address
   3656            // to create Bind Entries and send Bind Rsp
   3657            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000011   7003         JNZ       $+5
   \   000013   02....       LJMP      ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3658            {
   3659              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV       ?V0,#0x0
   3660              {
   3661                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3662                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019                ; Setup parameters for call to function osal_memcmp
   \   000019   85....       MOV       ?V4,?V2
   \   00001C   85....       MOV       ?V5,?V3
   \   00001F   75..00       MOV       ?V6,#0x0
   \   000022   78..         MOV       R0,#?V4
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000027   7C08         MOV       R4,#0x8
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   E5..         MOV       A,?V0
   \   00002D   75F021       MOV       B,#0x21
   \   000030   A4           MUL       AB
   \   000031   F8           MOV       R0,A
   \   000032   A9F0         MOV       R1,B
   \   000034   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000037   F5..         MOV       ?V4,A
   \   000039   E4           CLR       A
   \   00003A   39           ADDC      A,R1
   \   00003B   A9..         MOV       R1,?V4
   \   00003D   FA           MOV       R2,A
   \   00003E   7B00         MOV       R3,#0x0
   \   000040   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   \   000048   E9           MOV       A,R1
   \   000049   6401         XRL       A,#0x1
   \   00004B   6003         JZ        $+5
   \   00004D   02....       LJMP      ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3663                {
   3664                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   748C         MOV       A,#-0x74
   \   000058   F0           MOVX      @DPTR,A
   3665          
   3666                  // Add Bind entry
   3667                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3668                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3669                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3670                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   000059   E5..         MOV       A,?V0
   \   00005B   75F021       MOV       B,#0x21
   \   00005E   A4           MUL       AB
   \   00005F   FE           MOV       R6,A
   \   000060   AFF0         MOV       R7,B
   \   000062   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000065   E0           MOVX      A,@DPTR
   \   000066   2E           ADD       A,R6
   \   000067   FE           MOV       R6,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   3F           ADDC      A,R7
   \   00006B   FF           MOV       R7,A
   \   00006C                ; Setup parameters for call to function APSME_BindRequest
   \   00006C   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F5..         MOV       ?V1,A
   \   000072   78..         MOV       R0,#?V1
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000077   EE           MOV       A,R6
   \   000078   240B         ADD       A,#0xb
   \   00007A   FC           MOV       R4,A
   \   00007B   E4           CLR       A
   \   00007C   3F           ADDC      A,R7
   \   00007D   FD           MOV       R5,A
   \   00007E   8E82         MOV       DPL,R6
   \   000080   8F83         MOV       DPH,R7
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F9           MOV       R1,A
   \   000098   12....       LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00009B   7401         MOV       A,#0x1
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   \   0000A1   700B         JNZ       ??ZDApp_ProcessPendingBindReq_3
   3671                  {
   3672                    // valid entry
   3673                    bindStat = ZDP_SUCCESS;
   \   0000A3   85..82       MOV       DPL,?XSP + 0
   \   0000A6   85..83       MOV       DPH,?XSP + 1
   \   0000A9   E4           CLR       A
   \   0000AA   F0           MOVX      @DPTR,A
   3674          
   3675                    // Notify to save info into NV
   3676                    ZDApp_NVUpdate();
   \   0000AB                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000AB   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3677                  }
   3678          
   3679                  // Send back a response message
   3680                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3681                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000AE   E5..         MOV       A,?V0
   \   0000B0   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000B3   F5..         MOV       ?V1,A
   \   0000B5   78..         MOV       R0,#?V1
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BA   7401         MOV       A,#0x1
   \   0000BC   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BF   88..         MOV       ?V4,R0
   \   0000C1   89..         MOV       ?V5,R1
   \   0000C3   78..         MOV       R0,#?V4
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   75..21       MOV       ?V4,#0x21
   \   0000CB   75..80       MOV       ?V5,#-0x80
   \   0000CE   78..         MOV       R0,#?V4
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D3   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000D6   5001         JNC       ??ZDApp_ProcessPendingBindReq_4
   \   0000D8   0B           INC       R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000D9   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000DC   7405         MOV       A,#0x5
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   3682          
   3683                  // Set the pending request entry to default values
   3684                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000E1                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000E1   12....       LCALL     ?Subroutine47 & 0xFFFF
   3685                }
   3686              }
   \                     ??CrossCallReturnLabel_60:
   \   0000E4   12....       LCALL     `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000E7   05..         INC       ?V0
   \   0000E9   E5..         MOV       A,?V0
   \   0000EB   C3           CLR       C
   \   0000EC   9403         SUBB      A,#0x3
   \   0000EE   5003         JNC       $+5
   \   0000F0   02....       LJMP      ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3687            }
   3688          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000F3   7401         MOV       A,#0x1
   \   0000F5   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   90....       MOV       DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   FB           MOV       R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   7901         MOV       R1,#0x1
   \   000002   EA           MOV       A,R2
   \   000003   2415         ADD       A,#0x15
   \   000005   FC           MOV       R4,A
   \   000006   E4           CLR       A
   \   000007   3B           ADDC      A,R3
   \   000008   FD           MOV       R5,A
   \   000009   EA           MOV       A,R2
   \   00000A   241F         ADD       A,#0x1f
   \   00000C   FA           MOV       R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   240B         ADD       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   75F021       MOV       B,#0x21
   \   000003   A4           MUL       AB
   \   000004   FE           MOV       R6,A
   \   000005   AFF0         MOV       R7,B
   \   000007   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A   EA           MOV       A,R2
   \   00000B   241E         ADD       A,#0x1e
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   3B           ADDC      A,R3
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
   3689          
   3690          /*********************************************************************
   3691           * @fn          ZDApp_AgeOutPendingBindEntry
   3692           *
   3693           * @brief       Age out pending Bind Req entries.
   3694           *
   3695           * @param       none
   3696           *
   3697           * @return      none
   3698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3699          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3701            uint8 i;
   3702            bool entryFound = FALSE;
   \   00000A   75..00       MOV       ?V0,#0x0
   3703          
   3704            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3705            {
   3706              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV       ?V1,#0x0
   3707              {
   3708                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV       A,?V1
   \   00001A   75F021       MOV       B,#0x21
   \   00001D   A4           MUL       AB
   \   00001E   F8           MOV       R0,A
   \   00001F   AAF0         MOV       R2,B
   \   000021   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000024   C3           CLR       C
   \   000025   9402         SUBB      A,#0x2
   \   000027   E5..         MOV       A,?V1
   \   000029   75F021       MOV       B,#0x21
   \   00002C   400B         JC        ??ZDApp_AgeOutPendingBindEntry_2
   3709                {
   3710                  ZDAppPendingBindReq[i].age--;
   \   00002E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000031   14           DEC       A
   \   000032   F0           MOVX      @DPTR,A
   3711          
   3712                  entryFound = TRUE;
   \   000033   75..01       MOV       ?V0,#0x1
   \   000036   02....       LJMP      ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3713                }
   3714                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   000039   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00003C   6401         XRL       A,#0x1
   \   00003E   6003         JZ        $+5
   \   000040   02....       LJMP      ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3715                {
   3716                  // The record has aged out and has valid data
   3717                  AddrMgrEntry_t entry;
   3718                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000043   85..82       MOV       DPL,?XSP + 0
   \   000046   85..83       MOV       DPH,?XSP + 1
   \   000049   748C         MOV       A,#-0x74
   \   00004B   F0           MOVX      @DPTR,A
   3719          
   3720                  entry.user = ADDRMGR_USER_BINDING;
   \   00004C   7401         MOV       A,#0x1
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   7404         MOV       A,#0x4
   \   000053   F0           MOVX      @DPTR,A
   3721          
   3722                  // Remove the entry in address manager so we do not keep entries
   3723                  // with invalid addresses
   3724                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000054                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000054   E5..         MOV       A,?V1
   \   000056   75F021       MOV       B,#0x21
   \   000059   A4           MUL       AB
   \   00005A   F8           MOV       R0,A
   \   00005B   EA           MOV       A,R2
   \   00005C   F9           MOV       R1,A
   \   00005D   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000060   FC           MOV       R4,A
   \   000061   E4           CLR       A
   \   000062   39           ADDC      A,R1
   \   000063   FD           MOV       R5,A
   \   000064   7404         MOV       A,#0x4
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   AA82         MOV       R2,DPL
   \   00006B   AB83         MOV       R3,DPH
   \   00006D   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3725          
   3726                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000070                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000070   7401         MOV       A,#0x1
   \   000072   12....       LCALL     ?XSTACK_DISP101_8
   \   000075   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000078   E9           MOV       A,R1
   \   000079   6401         XRL       A,#0x1
   \   00007B   7017         JNZ       ??ZDApp_AgeOutPendingBindEntry_4
   3727                  {
   3728                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   E0           MOVX      A,@DPTR
   \   000083   64FE         XRL       A,#0xfe
   \   000085   7003         JNZ       ??ZDApp_AgeOutPendingBindEntry_5
   \   000087   A3           INC       DPTR
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F4           CPL       A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00008A   7008         JNZ       ??ZDApp_AgeOutPendingBindEntry_4
   3729                    {
   3730                      // Release the entry that contains an invalid NWK address
   3731                      AddrMgrEntryRelease( &entry );
   \   00008C                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00008C   7401         MOV       A,#0x1
   \   00008E   12....       LCALL     ?XSTACK_DISP101_8
   \   000091   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3732                    }
   3733                  }
   3734          
   3735                  // Send the Bind Response with failure status
   3736                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3737                               &(ZDAppPendingBindReq[i].srcAddr),
   3738                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000094   E5..         MOV       A,?V1
   \   000096   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000099   F5..         MOV       ?V2,A
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   7401         MOV       A,#0x1
   \   0000A2   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A5   88..         MOV       ?V2,R0
   \   0000A7   89..         MOV       ?V3,R1
   \   0000A9   78..         MOV       R0,#?V2
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   75..21       MOV       ?V2,#0x21
   \   0000B1   75..80       MOV       ?V3,#-0x80
   \   0000B4   78..         MOV       R0,#?V2
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000BC   5001         JNC       ??ZDApp_AgeOutPendingBindEntry_6
   \   0000BE   0B           INC       R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000BF   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000C2   7405         MOV       A,#0x5
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   3739          
   3740                  // Clear the record and set to default values
   3741                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000C7                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000C7   12....       LCALL     ?Subroutine47 & 0xFFFF
   3742                }
   3743              }
   \                     ??CrossCallReturnLabel_61:
   \   0000CA   12....       LCALL     `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000CD   05..         INC       ?V1
   \   0000CF   E5..         MOV       A,?V1
   \   0000D1   C3           CLR       C
   \   0000D2   9403         SUBB      A,#0x3
   \   0000D4   5003         JNC       $+5
   \   0000D6   02....       LJMP      ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3744            }
   3745          
   3746            if ( entryFound == FALSE )
   \   0000D9   E5..         MOV       A,?V0
   \   0000DB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000DD   400E         JC        ??ZDApp_AgeOutPendingBindEntry_7
   3747            {
   3748              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000DF                ; Setup parameters for call to function osal_stop_timerEx
   \   0000DF   7A00         MOV       R2,#0x0
   \   0000E1   7B10         MOV       R3,#0x10
   \   0000E3   90....       MOV       DPTR,#ZDAppTaskID
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   F9           MOV       R1,A
   \   0000E8   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000EB   8017         SJMP      ??ZDApp_AgeOutPendingBindEntry_8
   3749            }
   3750            else
   3751            {
   3752              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3753                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000ED                ; Setup parameters for call to function osal_start_timerEx
   \   0000ED   90....       MOV       DPTR,#__Constant_3e8
   \   0000F0   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F3   7A00         MOV       R2,#0x0
   \   0000F5   7B10         MOV       R3,#0x10
   \   0000F7   90....       MOV       DPTR,#ZDAppTaskID
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   F9           MOV       R1,A
   \   0000FC   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000FF   7404         MOV       A,#0x4
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
   3754            }
   3755          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   000104   740E         MOV       A,#0xe
   \   000106   80..         SJMP      ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A4           MUL       AB
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine74_0
   \   000002                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine75_0
   \   000001                ; // Fall through to label ??Subroutine75_0
   3756          #endif
   3757          #endif
   3758          
   3759          /*********************************************************************
   3760           * @fn          ZDO_ChangeState
   3761           *
   3762           * @brief       Chance the device state
   3763           *
   3764           * @param       state - new state
   3765           *
   3766           * @return      none
   3767           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3768          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3769          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3770            if ( devState != state )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   600E         JZ        ??ZDApp_ChangeState_0
   3771            {
   3772              devState = state;
   \   00000E   EE           MOV       A,R6
   \   00000F   F0           MOVX      @DPTR,A
   3773              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   7A10         MOV       R2,#0x10
   \   000012   7B00         MOV       R3,#0x0
   \   000014   90....       MOV       DPTR,#ZDAppTaskID
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   3774            }
   3775          }
   \                     ??ZDApp_ChangeState_0:
   \   00001C   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   3776          
   3777          /*********************************************************************
   3778           * @fn      ZDApp_SetRejoinScanDuration()
   3779           *
   3780           * @brief   Sets scan duration for rejoin for an end device
   3781           *
   3782           * @param   rejoinScanDuration - milliseconds
   3783           *
   3784           * @return  none
   3785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3786          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3787          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3788            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine10
   \   000010                ; // Fall through to label ?Subroutine10
   3789          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?L_MOV_TO_X
   \   000005   80..         SJMP      ??Subroutine77_0
   3790          
   3791          /*********************************************************************
   3792           * @fn      ZDApp_SetRejoinBackoffDuration()
   3793           *
   3794           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3795           *
   3796           * @param   rejoinBackoffDuration - milliseconds
   3797           *
   3798           * @return  none
   3799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3800          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   3801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3802            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP      ?Subroutine10
   3803          }
   3804          
   3805          /*********************************************************************
   3806           * @fn          ZDApp_SetParentAnnceTimer
   3807           *
   3808           * @brief       This function sets up the link status timer.
   3809           *
   3810           * @param       none
   3811           *
   3812           * @return      none
   3813           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3814          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   3815          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3816            // Parent Announce shall be sent no earlier than 10 seconds
   3817            uint32 timeout = 10000;
   3818          
   3819            // Add with jitter of up to 10 seconds
   3820            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   3821          
   3822            // Set timer to send the message
   3823            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   5410         ANL       A,#0x10
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   EB           MOV       A,R3
   \   00000E   5427         ANL       A,#0x27
   \   000010   F5..         MOV       ?V1,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   90....       MOV       DPTR,#__Constant_2710
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_ADD_X
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B40         MOV       R3,#0x40
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP      ?Subroutine5 & 0xFFFF
   3824          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinScanDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinScanDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetRejoinBackoffDuration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetRejoinBackoffDuration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetParentAnnceTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetParentAnnceTimer
   3825          
   3826          /*********************************************************************
   3827          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     32   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      2      9   ZDAppCheckForHoldKey
        2      0   -> HalKeyRead
      2     16   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     26   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     16   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_pwrmgr_device
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDAppCheckForHoldKey
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     30   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     22   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_clear_event
        0     10   -> osal_rand
        0     10   -> osal_stop_timerEx
        0     10   -> sAddrExtCpy
      0     47   ZDApp_LeaveUpdate
        0     32   -> APSME_UpdateDeviceReq
        0     32   -> AddrMgrWriteNVRequest
        0     32   -> NLME_RemoveChild
        0     32   -> RTG_RemoveRtgEntry
        0     32   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrDeviceRemoveByExtAddr
        0     32   -> nwkNeighborRemove
        0     35   -> osal_memcpy
      2     20   ZDApp_NVUpdate
        2      0   -> osal_set_event
        2      4   -> osal_start_timerEx
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     32   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     22   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     27   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     69   ZDApp_ProcessMsgCBs
        0     56   -> ZDApp_ProcessPendingBindReq
        0     56   -> ZDMatchSendState
        0     56   -> ZDO_MatchEndDeviceBind
        0     56   -> ZDO_ParseAddrRsp
        0     56   -> ZDO_ParseBindUnbindReq
        0     56   -> ZDO_ParseEndDeviceBindReq
        0     56   -> ZDO_ProcessBindUnbindReq
        0     56   -> ZDO_UpdateAddrManager
        0     56   -> osal_mem_free
      0     27   ZDApp_ProcessNetworkJoin
        0     14   -> NLME_GetShortAddr
        0     14   -> NLME_NwkDiscTerm
        0     14   -> NLME_SetPollRate
        0     14   -> NLME_SetQueuedPollRate
        0     14   -> NLME_SetResponseRate
        0     14   -> NLME_StartRouterRequest
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkInit
        0     14   -> ZDApp_ResetNwkKey
        0     14   -> ZDApp_ResetTimerStart
        0     14   -> ZDApp_RestoreNwkKey
        0     14   -> ZMacSetReq
        0     14   -> nwkNeighborInitTable
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_rand
        0     14   -> osal_set_event
        0     14   -> osal_stop_timerEx
      0     31   ZDApp_ProcessOSALMsg
        0     17   -> NLME_JoinRequest
        0     13   -> NLME_ReJoinRequest
        0     13   -> NLME_ReJoinRequestUnsecure
        0     13   -> NLME_SetPollRate
        0     13   -> NLME_SetQueuedPollRate
        0     13   -> NLME_SetResponseRate
        0     13   -> ZDApp_ChangeState
        0     13   -> ZDApp_NetworkInit
        0     13   -> ZDApp_NodeProfileSync
        0     13   -> ZDApp_NwkDescListProcessing
        0     13   -> ZDApp_ProcessMsgCBs
        0     13   -> ZDApp_ProcessNetworkJoin
        0     13   -> ZDApp_ProcessSecMsg
        0     13   -> ZDApp_RestoreNwkKey
        0     13   -> ZDP_IncomingData
        0     13   -> ZMacSetReq
        0     17   -> osal_nv_read
        0     13   -> osal_rand
        0     13   -> sAddrExtCpy
      0     77   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_NVUpdate
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     34   ZDApp_ProcessSecEvent
        0     16   -> ZDApp_DeviceAuthEvt
        0     16   -> ZDApp_SaveNwkKey
        0     16   -> ZDSecMgrNewDeviceEvent
        0     16   -> ZDSecMgrSaveApsLinkKey
        0     16   -> ZDSecMgrSaveTCLinkKey
        0     16   -> osal_mem_free
        0     20   -> osal_start_timerEx
      2     13   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
        2      0   -> ZDSecMgrUpdateDeviceInd
      0     25   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     49   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     30   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     25   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> ZDApp_RestoreNwkKey
        0      9   -> sAddrExtCpy
      0     67   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     51   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     41   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     36   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     41   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     30   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_SendParentAnnce
        0     14   -> ZDApp_SetParentAnnceTimer
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     25   ZDOInitDevice
        0     16   -> NLME_InitNV
        0     16   -> NLME_SetBroadcastFilter
        0     16   -> NLME_SetDefaultNV
        0     16   -> ZDAppDetermineDeviceType
        0     16   -> ZDApp_LeaveCtrlInit
        0     16   -> ZDApp_NetworkInit
        0     16   -> ZDApp_ReadNetworkRestoreState
        0     16   -> ZDApp_RestoreNetworkState
        0     16   -> ZDApp_SecInit
        0     16   -> ZDConfig_InitDescriptors
        0     16   -> ZDSecMgrClearNVKeyValues
        0     16   -> osal_rand
        0     16   -> zgInitItems
      0     12   ZDO_AddrChangeIndicationCB
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NVUpdate
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> ZDApp_ChangeState
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     12   ZDO_LeaveInd
        0     12   -> NLME_GetCoordShortAddr
        0     12   -> NLME_LeaveRsp
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZDApp_LeaveReset
        0     12   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
        2      3   -> ZDO_FinishProcessingMgmtNwkDiscReq
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0     12   ZDO_SyncIndicationCB
        0     12   -> ZDApp_SendMsg
        0     12   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     14   ZDO_beaconNotifyIndCB
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for prevDevState>
       1  ?<Initializer for zdoDiscCounter>
      10  ??Subroutine57_0
      10  ??Subroutine58_0
       8  ??Subroutine59_0
       6  ??Subroutine60_0
       6  ??Subroutine61_0
       7  ??Subroutine62_0
       4  ??Subroutine63_0
       4  ??Subroutine64_0
       6  ??Subroutine65_0
       6  ??Subroutine66_0
       6  ??Subroutine67_0
       5  ??Subroutine68_0
       5  ??Subroutine69_0
       6  ??Subroutine70_0
       3  ??Subroutine71_0
       5  ??Subroutine72_0
       6  ??Subroutine73_0
       1  ??Subroutine74_0
      14  ??Subroutine75_0
       3  ??Subroutine76_0
       5  ??Subroutine77_0
      10  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine10
      21  ?Subroutine11
       2  ?Subroutine12
       3  ?Subroutine13
       8  ?Subroutine14
      10  ?Subroutine15
      12  ?Subroutine16
       6  ?Subroutine17
       3  ?Subroutine18
       2  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
       4  ?Subroutine21
      19  ?Subroutine22
      21  ?Subroutine23
       8  ?Subroutine24
      10  ?Subroutine25
       9  ?Subroutine26
       3  ?Subroutine27
       9  ?Subroutine28
       4  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
      10  ?Subroutine31
       3  ?Subroutine32
       3  ?Subroutine33
       4  ?Subroutine34
       8  ?Subroutine35
       9  ?Subroutine36
       5  ?Subroutine37
       6  ?Subroutine38
       1  ?Subroutine39
      35  ?Subroutine4
       5  ?Subroutine40
       5  ?Subroutine41
       4  ?Subroutine42
      10  ?Subroutine43
      14  ?Subroutine44
       8  ?Subroutine45
      10  ?Subroutine46
      11  ?Subroutine47
       6  ?Subroutine48
       9  ?Subroutine49
       2  ?Subroutine5
      12  ?Subroutine50
      15  ?Subroutine51
      10  ?Subroutine52
      12  ?Subroutine53
      10  ?Subroutine54
      10  ?Subroutine55
      10  ?Subroutine56
       8  ?Subroutine6
       2  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
      28  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
      24  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      79  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     264  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
     121  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      31  ZDApp_ChangeState
       6  ZDApp_ChangeState::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      91  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      84  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     129  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      59  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
      81  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      91  ZDApp_Init
       6  ZDApp_Init::?relay
      61  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      22  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      73  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      75  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
     177  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     198  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
      67  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
     116  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     342  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      28  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     252  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     655  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     678  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     248  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
     236  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      70  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      91  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      88  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     218  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
      19  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      75  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       4  ZDApp_SavedPollRate
     147  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      22  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      80  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
     115  ZDApp_SendParentAnnce
       6  ZDApp_SendParentAnnce::?relay
      51  ZDApp_SetParentAnnceTimer
       6  ZDApp_SetParentAnnceTimer::?relay
      32  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      18  ZDApp_SetRejoinBackoffDuration
       6  ZDApp_SetRejoinBackoffDuration::?relay
      16  ZDApp_SetRejoinScanDuration
       6  ZDApp_SetRejoinScanDuration::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      36  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     376  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     189  ZDOInitDevice
       6  ZDOInitDevice::?relay
     103  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      44  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      24  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     247  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     219  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      98  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     200  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      76  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      51  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      36  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      28  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      47  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      51  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      77  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     573  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_2bc
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 8 998 bytes in segment BANKED_CODE
   468 bytes in segment BANK_RELAYS
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
    28 bytes in segment XDATA_ROM_C
    66 bytes in segment XDATA_Z
 
   481 bytes of CODE     memory
     0 bytes of CONST    memory (+ 28 bytes shared)
 8 998 bytes of HUGECODE memory
    79 bytes of XDATA    memory

Errors: none
Warnings: none
