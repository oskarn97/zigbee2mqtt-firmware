///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              16/Feb/2018  21:40:06
// Copyright 2004-2017 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Components\stack\zcl\zcl.c
//    Command line       =  
//        -f C:\Users\Oskar\AppData\Local\Temp\EWA90.tmp ("C:\Texas
//        Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl.c" -D
//        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  German_Germany.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\zcl.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_CODE
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_SHR
        EXTERN ?VB
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclBuildHdr::?relay`,0203H
        PUBLIC `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,0203H
        FUNCTION `??zclFindAttrRecsList::?relay`,0203H
        FUNCTION `??zclFindClusterOption::?relay`,0203H
        PUBLIC `??zclGetAttrDataLength::?relay`
        FUNCTION `??zclGetAttrDataLength::?relay`,0203H
        FUNCTION `??zclGetClusterOption::?relay`,0203H
        PUBLIC `??zclGetDataTypeLength::?relay`
        FUNCTION `??zclGetDataTypeLength::?relay`,0203H
        PUBLIC `??zclParseHdr::?relay`
        FUNCTION `??zclParseHdr::?relay`,0203H
        FUNCTION `??zclParseInDefaultRspCmd::?relay`,0203H
        PUBLIC `??zclSerializeData::?relay`
        FUNCTION `??zclSerializeData::?relay`,0203H
        FUNCTION `??zclSetSecurityOption::?relay`,0203H
        FUNCTION `??zcl_DeviceOperational::?relay`,0203H
        PUBLIC `??zcl_HandleExternal::?relay`
        FUNCTION `??zcl_HandleExternal::?relay`,0203H
        PUBLIC `??zcl_Init::?relay`
        FUNCTION `??zcl_Init::?relay`,0203H
        PUBLIC `??zcl_ProcessMessageMSG::?relay`
        FUNCTION `??zcl_ProcessMessageMSG::?relay`,0203H
        PUBLIC `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,0203H
        PUBLIC `??zcl_SendDefaultRspCmd::?relay`
        FUNCTION `??zcl_SendDefaultRspCmd::?relay`,0203H
        FUNCTION `??zcl_addExternalFoundationHandler::?relay`,0203H
        PUBLIC `??zcl_event_loop::?relay`
        FUNCTION `??zcl_event_loop::?relay`,0203H
        FUNCTION `??zcl_getExternalFoundationHandler::?relay`,0203H
        PUBLIC `??zcl_getParsedTransSeqNum::?relay`
        FUNCTION `??zcl_getParsedTransSeqNum::?relay`,0203H
        PUBLIC `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,0203H
        PUBLIC `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,0203H
        PUBLIC `??zcl_registerClusterOptionList::?relay`
        FUNCTION `??zcl_registerClusterOptionList::?relay`,0203H
        PUBLIC `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,0203H
        PUBLIC `??zcl_registerForMsgExt::?relay`
        FUNCTION `??zcl_registerForMsgExt::?relay`,0203H
        PUBLIC `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,0203H
        PUBLIC `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,0203H
        PUBLIC `??zcl_registerValidateAttrData::?relay`
        FUNCTION `??zcl_registerValidateAttrData::?relay`,0203H
        FUNCTION zclBuildHdr,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclFindAttrRec
        FUNCTION zclFindAttrRec,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclFindAttrRecsList,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclFindClusterOption,080203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclGetAttrDataLength
        FUNCTION zclGetAttrDataLength,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclGetClusterOption,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclGetDataTypeLength
        FUNCTION zclGetDataTypeLength,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC zclParseHdr
        FUNCTION zclParseHdr,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclParseInDefaultRspCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclSerializeData
        FUNCTION zclSerializeData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSetSecurityOption,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zcl_DeviceOperational,0a1203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC zcl_HandleExternal
        FUNCTION zcl_HandleExternal,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_Init
        FUNCTION zcl_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC zcl_SendCommand
        FUNCTION zcl_SendCommand,0a1203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,0a1203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zcl_SeqNum
        PUBLIC zcl_TaskID
        PUBLIC zcl_TransID
        PUBLIC zcl_ValidateAttrDataCB
        FUNCTION zcl_addExternalFoundationHandler,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zcl_event_loop
        FUNCTION zcl_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zcl_getExternalFoundationHandler,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_getParsedTransSeqNum
        FUNCTION zcl_getParsedTransSeqNum,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerClusterOptionList
        FUNCTION zcl_registerClusterOptionList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerForMsg
        FUNCTION zcl_registerForMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zcl_registerForMsgExt
        FUNCTION zcl_registerForMsgExt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zcl_registerValidateAttrData
        FUNCTION zcl_registerValidateAttrData,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
StubAPS_InterPan    SYMBOL "StubAPS_InterPan"
`??StubAPS_InterPan::?relay` SYMBOL "?relay", StubAPS_InterPan
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zclGetAttrDataLength SYMBOL "zclGetAttrDataLength"
`??zclGetAttrDataLength::?relay` SYMBOL "?relay", zclGetAttrDataLength
zclGetDataTypeLength SYMBOL "zclGetDataTypeLength"
`??zclGetDataTypeLength::?relay` SYMBOL "?relay", zclGetDataTypeLength
zclParseHdr         SYMBOL "zclParseHdr"
`??zclParseHdr::?relay` SYMBOL "?relay", zclParseHdr
zclSerializeData    SYMBOL "zclSerializeData"
`??zclSerializeData::?relay` SYMBOL "?relay", zclSerializeData
zcl_HandleExternal  SYMBOL "zcl_HandleExternal"
`??zcl_HandleExternal::?relay` SYMBOL "?relay", zcl_HandleExternal
zcl_Init            SYMBOL "zcl_Init"
`??zcl_Init::?relay` SYMBOL "?relay", zcl_Init
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
`??zcl_ProcessMessageMSG::?relay` SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
`??zcl_SendDefaultRspCmd::?relay` SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_event_loop      SYMBOL "zcl_event_loop"
`??zcl_event_loop::?relay` SYMBOL "?relay", zcl_event_loop
zcl_getParsedTransSeqNum SYMBOL "zcl_getParsedTransSeqNum"
`??zcl_getParsedTransSeqNum::?relay` SYMBOL "?relay", zcl_getParsedTransSeqNum
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerClusterOptionList SYMBOL "zcl_registerClusterOptionList"
`??zcl_registerClusterOptionList::?relay` SYMBOL "?relay", zcl_registerClusterOptionList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerForMsgExt SYMBOL "zcl_registerForMsgExt"
`??zcl_registerForMsgExt::?relay` SYMBOL "?relay", zcl_registerForMsgExt
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zcl_registerValidateAttrData SYMBOL "zcl_registerValidateAttrData"
`??zcl_registerValidateAttrData::?relay` SYMBOL "?relay", zcl_registerValidateAttrData

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??StubAPS_InterPan::?relay`
        FUNCTION `??StubAPS_InterPan::?relay`,00H
        EXTERN `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN StubAPS_InterPan
        FUNCTION StubAPS_InterPan,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl.c
//    3   Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
//    4   Revision:       $Revision: 44489 $
//    5 
//    6   Description:    This file contains the Zigbee Cluster Library Foundation functions.
//    7 
//    8 
//    9   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "AF.h"
//   45 
//   46 #include "zcl.h"
//   47 #include "zcl_general.h"
//   48 
//   49 #if defined ( INTER_PAN )
//   50   #include "stub_aps.h"
//   51 #endif
//   52 
//   53 /*********************************************************************
//   54  * MACROS
//   55  */
//   56 /*** Frame Control ***/
//   57 #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
//   58 #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
//   59 #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
//   60 #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
//   61 
//   62 /*** Attribute Access Control ***/
//   63 #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
//   64 #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
//   65 #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
//   66 #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
//   67 #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
//   68 
//   69 #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
//   70 #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
//   71 
//   72 #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \ 
//   73                                         (zclHdr).fc.manuSpecific == 0          && \ 
//   74                                         (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
//   75 
//   76 // Commands that have corresponding responses
//   77 #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \ 
//   78                                         (cmd) == ZCL_CMD_WRITE                  || \ 
//   79                                         (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \ 
//   80                                         (cmd) == ZCL_CMD_CONFIG_REPORT          || \ 
//   81                                         (cmd) == ZCL_CMD_READ_REPORT_CFG        || \ 
//   82                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \ 
//   83                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \ 
//   84                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \ 
//   85                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \ 
//   86                                         (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
//   87 #define  ZCL_VALID_MIN_HEADER_LEN  3
//   88 
//   89 /*********************************************************************
//   90  * CONSTANTS
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * TYPEDEFS
//   95  */
//   96 typedef struct zclLibPlugin
//   97 {
//   98   struct zclLibPlugin *next;
//   99   uint16              startClusterID;    // starting cluster ID
//  100   uint16              endClusterID;      // ending cluster ID
//  101   zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
//  102 } zclLibPlugin_t;
//  103 
//  104 // Command record list
//  105 typedef struct zclCmdRecsList
//  106 {
//  107   struct zclCmdRecsList *pNext;
//  108   uint8                 endpoint;
//  109   uint8                 numCommands;
//  110   CONST zclCommandRec_t *pCmdRecs;
//  111 } zclCmdRecsList_t;
//  112 
//  113 // Attribute record list item
//  114 typedef struct zclAttrRecsList
//  115 {
//  116   struct zclAttrRecsList *next;
//  117   uint8                  endpoint;      // Used to link it into the endpoint descriptor
//  118   zclReadWriteCB_t       pfnReadWriteCB;// Read or Write attribute value callback function
//  119   zclAuthorizeCB_t       pfnAuthorizeCB;// Authorize Read or Write operation
//  120   uint8                  numAttributes; // Number of the following records
//  121   CONST zclAttrRec_t     *attrs;        // attribute records
//  122 } zclAttrRecsList;
//  123 
//  124 // Cluster option list item
//  125 typedef struct zclClusterOptionList
//  126 {
//  127   struct zclClusterOptionList *next;
//  128   uint8                       endpoint;   // Used to link it into the endpoint descriptor
//  129   uint8                       numOptions; // Number of the following records
//  130   zclOptionRec_t              *options;   // option records
//  131 } zclClusterOptionList;
//  132 
//  133 typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
//  134 typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
//  135 
//  136 typedef struct
//  137 {
//  138   zclParseInProfileCmd_t   pfnParseInProfile;
//  139   zclProcessInProfileCmd_t pfnProcessInProfile;
//  140 } zclCmdItems_t;
//  141 
//  142 
//  143 // List record for external handler for unhandled ZCL Foundation commands/rsps
//  144 typedef struct zclExternalFoundationHandlerList
//  145 {
//  146     struct zclExternalFoundationHandlerList *next;
//  147     uint8 zcl_ExternalTaskID;
//  148     uint8 zcl_ExternalEndPoint;
//  149 } zclExternalFoundationHandlerList;
//  150 
//  151 
//  152 /*********************************************************************
//  153  * GLOBAL VARIABLES
//  154  */
//  155 
//  156 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157   uint8 zcl_TaskID;
zcl_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  158 #endif
//  159 
//  160 // The Application should register its attribute data validation function

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  161 zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
zcl_ValidateAttrDataCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  162 
//  163 // ZCL Sequence number

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 uint8 zcl_SeqNum = 0x00;
zcl_SeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  165 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
zcl_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  167 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  168 static uint8 savedZCLTransSeqNum = 0;
savedZCLTransSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  169 
//  170 /*********************************************************************
//  171  * EXTERNAL VARIABLES
//  172  */
//  173 
//  174 /*********************************************************************
//  175  * EXTERNAL FUNCTIONS
//  176  */
//  177 
//  178 /*********************************************************************
//  179  * LOCAL VARIABLES
//  180  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  181 static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
plugins:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  182 
//  183 #if defined ( ZCL_DISCOVER )
//  184   static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
//  185 #endif
//  186 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  187 static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
attrList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  188 static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
clusterOptionList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  189 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  190 static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
rawAFMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  191 
//  192 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  193 static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
externalEndPointHandlerList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  194 #endif
//  195 
//  196 /*********************************************************************
//  197  * LOCAL FUNCTIONS
//  198  */
//  199 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
//  200 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
//  201 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
//  202 
//  203 #if !defined ( ZCL_STANDALONE )
//  204 static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
//  205 static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
//  206 #endif // !defined ( ZCL_STANDALONE )
//  207 
//  208 #if defined ( ZCL_DISCOVER )
//  209   static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
//  210 #endif
//  211 
//  212 static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
//  213 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
//  214 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
//  215 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
//  216 
//  217 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
//  218 
//  219 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
//  220 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
//  221 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
//  222 #endif // ZCL_READ || ZCL_WRITE
//  223 
//  224 #ifdef ZCL_READ
//  225 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
//  226 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
//  227 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
//  228                                          uint8 *pAttrData, uint16 *pDataLen );
//  229 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  230 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
//  231 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
//  232 #endif // ZCL_READ
//  233 
//  234 #ifdef ZCL_WRITE
//  235 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
//  236                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
//  237 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
//  238                                           zclAttrRec_t *pAttr, uint8 *pAttrData );
//  239 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  240 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
//  241 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
//  242 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
//  243 #endif // ZCL_WRITE
//  244 
//  245 #ifdef ZCL_REPORT
//  246 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
//  247 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
//  248 #endif // ZCL_REPORT
//  249 
//  250 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
//  251 
//  252 #ifdef ZCL_DISCOVER
//  253 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
//  254 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
//  255 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
//  256 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
//  257 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
//  258 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
//  259 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
//  260 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  261 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  262 #endif // ZCL_DISCOVER
//  263 
//  264 /*********************************************************************
//  265  * Parse Profile Command Function Table
//  266  */
//  267 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  268 static CONST zclCmdItems_t zclCmdTable[] =
zclCmdTable:
        DATA16
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW `??zclParseInDefaultRspCmd::?relay`
        DW `??zcl_HandleExternal::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
//  269 {
//  270 #ifdef ZCL_READ
//  271   /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
//  272   /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
//  273 #else
//  274   /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  275   /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  276 #endif // ZCL_READ
//  277 
//  278 #ifdef ZCL_WRITE
//  279   /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  280   /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
//  281   /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
//  282   /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  283 #else
//  284   /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  285   /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  286   /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  287   /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  288 #endif // ZCL_WRITE
//  289 
//  290 #ifdef ZCL_REPORT
//  291   /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
//  292   /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
//  293   /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
//  294   /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
//  295   /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
//  296 #else
//  297   /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  298   /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  299   /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  300   /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  301   /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  302 #endif // ZCL_REPORT
//  303 
//  304   /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
//  305 
//  306 #ifdef ZCL_DISCOVER
//  307   /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  308   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
//  309   /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  310   /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  311   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  312   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  313   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  314   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  315   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  316   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  317   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
//  318 #else
//  319   /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
//  320   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  321   /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  322   /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  323   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  324   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  325   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  326   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  327   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  328   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  329   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  330 #endif // ZCL_DISCOVER
//  331 };
//  332 
//  333 /*********************************************************************
//  334  * PUBLIC FUNCTIONS
//  335  *********************************************************************/
//  336 
//  337 #if !defined ( ZCL_STANDALONE )
//  338 /*********************************************************************
//  339  * @fn          zcl_Init
//  340  *
//  341  * @brief       Initialization function for the zcl layer.
//  342  *
//  343  * @param       task_id - ZCL task id
//  344  *
//  345  * @return      none
//  346  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  347 void zcl_Init( uint8 task_id )
zcl_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zcl_Init
        CODE
//  348 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  349   zcl_TaskID = task_id;
        MOV       A,R1
        MOV       DPTR,#zcl_TaskID
        MOVX      @DPTR,A
//  350 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  351 #endif
//  352 
//  353 #if !defined ( ZCL_STANDALONE )
//  354 /*********************************************************************
//  355  * @fn          zcl_event_loop
//  356  *
//  357  * @brief       Event Loop Processor for zcl.
//  358  *
//  359  * @param       task_id - task id
//  360  * @param       events - event bitmap
//  361  *
//  362  * @return      unprocessed events
//  363  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  364 uint16 zcl_event_loop( uint8 task_id, uint16 events )
zcl_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zcl_event_loop
        CODE
//  365 {
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_getExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
//  366   uint8 *msgPtr;
//  367 
//  368   (void)task_id;  // Intentionally unreferenced parameter
//  369 
//  370   if ( events & SYS_EVENT_MSG )
        MOV       A,R3
        ANL       A,#0x80
        JZ        ??zcl_event_loop_0
//  371   {
//  372     msgPtr = osal_msg_receive( zcl_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??zcl_event_loop_1
//  373     while ( msgPtr != NULL )
//  374     {
//  375       uint8 dealloc = TRUE;
//  376 
//  377       if ( *msgPtr == AF_INCOMING_MSG_CMD )
//  378       {
//  379         zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
??zcl_event_loop_2:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
//  380       }
//  381       else
//  382       {
//  383         uint8 taskID;
//  384         taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
//  385 
//  386         if ( taskID != TASK_NO_TASK )
//  387         {
//  388           // send it to another task to process.
//  389           osal_msg_send( taskID, msgPtr );
//  390           dealloc = FALSE;
//  391         }
//  392       }
//  393 
//  394       // Release the memory
//  395       if ( dealloc )
//  396       {
//  397         osal_msg_deallocate( msgPtr );
??zcl_event_loop_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  398       }
//  399 
//  400       // Next
//  401       msgPtr = osal_msg_receive( zcl_TaskID );
??zcl_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV       DPTR,#zcl_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
        MOV       A,R6
        ORL       A,R7
        JZ        ??zcl_event_loop_4
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,#0x1a
        JZ        ??zcl_event_loop_2
        ; Setup parameters for call to function zcl_getExternalFoundationHandler
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
        MOV       A,R1
        MOV       R1,A
        MOV       A,#-0x1
        XRL       A,R1
        JZ        ??zcl_event_loop_3
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        SJMP      ??zcl_event_loop_1
//  402     }
//  403 
//  404     // return unprocessed events
//  405     return (events ^ SYS_EVENT_MSG);
??zcl_event_loop_4:
        MOV       R2,?V0
        MOV       A,?V1
        XRL       A,#0x80
        MOV       R3,A
        SJMP      ??zcl_event_loop_5
//  406   }
//  407 
//  408   // Discard unknown events
//  409   return 0;
??zcl_event_loop_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zcl_event_loop_5:
        LJMP      ??Subroutine52_0 & 0xFFFF
//  410 }
          CFI EndBlock cfiBlock1
//  411 #endif
//  412 
//  413 #if !defined ( ZCL_STANDALONE )
//  414 /*********************************************************************
//  415  * @fn      zcl_registerForMsg
//  416  *
//  417  * @brief   The ZCL is setup to send all incoming Foundation Command/Response
//  418  *          messages that aren't processed to one task (if a task is
//  419  *          registered).
//  420  *
//  421  * @param   taskId - task Id of the Application where commands will be sent to
//  422  *
//  423  * @return  TRUE if task registeration successful, FALSE otherwise
//  424  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  425 uint8 zcl_registerForMsg( uint8 taskId )
zcl_registerForMsg:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zcl_registerForMsg
        CODE
//  426 {
        FUNCALL zcl_registerForMsg, zcl_addExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  427   return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
        ; Setup parameters for call to function zcl_addExternalFoundationHandler
        MOV       R2,#-0x1
        LJMP      ?Subroutine2 & 0xFFFF
//  428 }
          CFI EndBlock cfiBlock2
//  429 
//  430 /*********************************************************************
//  431  * @fn      zcl_registerForMsgExt
//  432  *
//  433  * @brief   This function enables a Task to register to recieve all
//  434  *          incoming Foundation Command/Response messages, for a particular
//  435  *          End Point, that aren't processed by ZCL.
//  436  *
//  437  *          NOTE: Any Task registered for a unique end point will take
//  438  *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
//  439  *          value.  ie. If task A registers for End Point 1, task B registers
//  440  *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
//  441  *          sent to Task A and NOT Task B.
//  442  *
//  443  * @param   taskId - task Id of the Application where commands will be sent to
//  444  * @param   endPointId - end point Id of interest
//  445  *
//  446  * @return  TRUE if task registeration successful, FALSE otherwise
//  447  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  448 uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
zcl_registerForMsgExt:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zcl_registerForMsgExt
        CODE
//  449 {
        FUNCALL zcl_registerForMsgExt, zcl_addExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  450   return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
        ; Setup parameters for call to function zcl_addExternalFoundationHandler
        LJMP      ?Subroutine2 & 0xFFFF
//  451 }
          CFI EndBlock cfiBlock3
//  452 
//  453 /*********************************************************************
//  454  * @fn      zcl_addExternalFoundationHandler
//  455  *
//  456  * @brief   This function adds a record to the internal list of external
//  457  *          handlers of unhandled incoming Foundation Command/Response messages.
//  458  *
//  459  * @param   taskId - task Id of the Application where commands will be sent to
//  460  * @param   endPointId - end point Id of interest
//  461  *
//  462  * @return  TRUE if task registeration successful, FALSE otherwise
//  463  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  464 uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
zcl_addExternalFoundationHandler:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
        CODE
//  465 {
        FUNCALL zcl_addExternalFoundationHandler, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
//  466   zclExternalFoundationHandlerList *pNewItem;
//  467   zclExternalFoundationHandlerList *pLoop;
//  468   zclExternalFoundationHandlerList *pLoopPrev;
//  469 
//  470   // Fill in the new endpoint registrant list
//  471   pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
//  472   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JZ        ??zcl_addExternalFoundationHandler_0
//  473   {
//  474     return ( false );
//  475   }
//  476 
//  477   pNewItem->zcl_ExternalEndPoint = endPointId;
        MOV       A,R7
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  478   pNewItem->zcl_ExternalTaskID = taskId;
        MOV       A,R6
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine10 & 0xFFFF
//  479   pNewItem->next = NULL;
//  480 
//  481   // Add to the list
//  482   if ( externalEndPointHandlerList == NULL )
??CrossCallReturnLabel_10:
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_31:
        JNZ       ??zcl_addExternalFoundationHandler_1
//  483   {
//  484     externalEndPointHandlerList = pNewItem;
        MOV       DPTR,#externalEndPointHandlerList
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        SJMP      ??zcl_addExternalFoundationHandler_2
//  485   }
//  486   else
//  487   {
//  488     // make sure no one else tried to register for this endpoint
//  489     pLoop = externalEndPointHandlerList;
??zcl_addExternalFoundationHandler_1:
        MOVX      A,@DPTR
        MOV       R3,A
//  490     pLoopPrev = externalEndPointHandlerList;
//  491 
//  492     while ( pLoop != NULL )
//  493     {
//  494       if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
??zcl_addExternalFoundationHandler_3:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??zcl_addExternalFoundationHandler_4
//  495       {
//  496         return ( false );
??zcl_addExternalFoundationHandler_0:
        MOV       R1,#0x0
        SJMP      ??zcl_addExternalFoundationHandler_5
//  497       }
//  498       pLoopPrev = pLoop;
??zcl_addExternalFoundationHandler_4:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
//  499       pLoop = pLoop->next;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine20 & 0xFFFF
//  500     }
??CrossCallReturnLabel_29:
        JNZ       ??zcl_addExternalFoundationHandler_3
//  501 
//  502     if ( endPointId == AF_BROADCAST_ENDPOINT )
        MOV       A,#-0x1
        XRL       A,R7
        JNZ       ??zcl_addExternalFoundationHandler_6
//  503     {
//  504       // put new registration at the end of the list
//  505       pLoopPrev->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine16 & 0xFFFF
//  506       pNewItem->next = NULL;
//  507     }
??CrossCallReturnLabel_24:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??zcl_addExternalFoundationHandler_2
//  508     else
//  509     {
//  510       // put new registration at the front of the list
//  511       zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
??zcl_addExternalFoundationHandler_6:
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ??Subroutine51_0 & 0xFFFF
//  512       externalEndPointHandlerList = pNewItem;
??CrossCallReturnLabel_101:
        MOV       DPTR,#externalEndPointHandlerList
        LCALL     ?Subroutine16 & 0xFFFF
//  513       pNewItem->next = temp;
//  514     }
//  515   }
??CrossCallReturnLabel_25:
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
??zcl_addExternalFoundationHandler_2:
        MOVX      @DPTR,A
//  516 
//  517   return ( true );
        MOV       R1,#0x1
??zcl_addExternalFoundationHandler_5:
        LJMP      ?Subroutine3 & 0xFFFF
//  518 
//  519 }
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zcl_addExternalFoundationHandler
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_85:
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zcl_addExternalFoundationHandler
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_25
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-4
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zcl_addExternalFoundationHandler
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_10
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zcl_HandleExternal
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_11
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zcl_registerAttrList
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_0
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-4
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zcl_registerClusterOptionList
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_1
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-4
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function zcl_registerPlugin
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_15
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-4
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zcl_SendDefaultRspCmd
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_16
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-4
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclBuildHdr
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_17
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-4
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
//  520 
//  521 /*********************************************************************
//  522  * @fn      zcl_getExternalFoundationHandler
//  523  *
//  524  * @brief   This function retrieves the Task ID of the task registered
//  525  *          to received unhandled incoming Foundation Command/Response messages
//  526  *          for a particular End Point ID.
//  527  *
//  528  * @param   pInMsg - recevied ZCL command
//  529  *
//  530  * @return  TASK ID of registered task.  If no task is reigistered, it returns
//  531  *          TASK_NO_TASK.
//  532  *********************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  533 static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
zcl_getExternalFoundationHandler:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function zcl_getExternalFoundationHandler
        CODE
//  534 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  535   zclExternalFoundationHandlerList *pLoop;
//  536   uint8 addressedEndPointId = pInMsg->endPoint;
        MOV       A,R2
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R2,A
//  537 
//  538   // make sure no one else tried to register for this endpoint
//  539   pLoop = externalEndPointHandlerList;
        MOV       DPTR,#externalEndPointHandlerList
        SJMP      ??zcl_getExternalFoundationHandler_0
//  540 
//  541   while ( pLoop != NULL )
//  542   {
//  543     if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
//  544          ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
//  545     {
//  546       return ( pLoop->zcl_ExternalTaskID );
//  547     }
//  548     pLoop = pLoop->next;
??zcl_getExternalFoundationHandler_1:
        MOV       DPL,R0
        MOV       DPH,R1
??zcl_getExternalFoundationHandler_0:
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_125:
        JZ        ??zcl_getExternalFoundationHandler_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R2
        JZ        ??zcl_getExternalFoundationHandler_3
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??zcl_getExternalFoundationHandler_1
??zcl_getExternalFoundationHandler_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??zcl_getExternalFoundationHandler_4
//  549   }
//  550 
//  551   return ( TASK_NO_TASK );
??zcl_getExternalFoundationHandler_2:
        MOV       R1,#-0x1
??zcl_getExternalFoundationHandler_4:
        LJMP      ?Subroutine0 & 0xFFFF
//  552 }
          CFI EndBlock cfiBlock18
//  553 #endif
//  554 
//  555 #if !defined ( ZCL_STANDALONE )
//  556 /*********************************************************************
//  557  * @fn      zcl_HandleExternal
//  558  *
//  559  * @brief
//  560  *
//  561  * @param   pInMsg - incoming message to process
//  562  *
//  563  * @return  TRUE
//  564  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  565 uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
zcl_HandleExternal:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zcl_HandleExternal
        CODE
//  566 {
        FUNCALL zcl_HandleExternal, zcl_getExternalFoundationHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  567   zclIncomingMsg_t *pCmd;
//  568   uint8 taskID;
//  569 
//  570   taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
        ; Setup parameters for call to function zcl_getExternalFoundationHandler
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
        MOV       A,R1
        MOV       ?V0,A
//  571 
//  572   if ( taskID == TASK_NO_TASK )
        MOV       A,#-0x1
        XRL       A,?V0
        JNZ       $+5
        LJMP      ??zcl_HandleExternal_0 & 0xFFFF
//  573   {
//  574     return ( TRUE );
//  575   }
//  576 
//  577   pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x19
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  578   if ( pCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??zcl_HandleExternal_0
//  579   {
//  580     // fill in the message
//  581     pCmd->hdr.event = ZCL_INCOMING_MSG;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#0x34
        LCALL     ?Subroutine13 & 0xFFFF
//  582     pCmd->zclHdr    = pInMsg->hdr;
??CrossCallReturnLabel_18:
        INC       DPTR
        MOV       A,R2
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  583     pCmd->clusterId = pInMsg->msg->clusterId;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_123:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        LCALL     ?Subroutine9 & 0xFFFF
//  584     pCmd->srcAddr   = pInMsg->msg->srcAddr;
??CrossCallReturnLabel_8:
        INC       DPTR
        MOV       A,R2
        ADD       A,#0xa
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       A,#0xc
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  585     pCmd->endPoint  = pInMsg->msg->endPoint;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_92:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  586     pCmd->attrCmd   = pInMsg->attrCmd;
        MOV       A,R6
        ADD       A,#0xc
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_120:
        MOV       A,R2
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        LCALL     ?Subroutine10 & 0xFFFF
//  587 
//  588     // Application will free the attrCmd buffer
//  589     pInMsg->attrCmd = NULL;
//  590 
//  591     /* send message through task message */
//  592     osal_msg_send( taskID, (uint8 *)pCmd );
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function osal_msg_send
        MOV       R1,?V0
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  593   }
//  594 
//  595   return ( TRUE );
??zcl_HandleExternal_0:
        MOV       R1,#0x1
        LJMP      ??Subroutine52_0 & 0xFFFF
//  596 }
          CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zcl_HandleExternal
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_86:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  597 #endif
//  598 
//  599 
//  600 /*********************************************************************
//  601  * @fn          zcl_getRawAFMsg
//  602  *
//  603  * @brief       Call to get original unprocessed AF message
//  604  *              (not parsed by ZCL).
//  605  *
//  606  *   NOTE:  This function can only be called during a ZCL callback function
//  607  *          and the calling function must NOT change any data in the message.
//  608  *
//  609  * @param       none
//  610  *
//  611  * @return      pointer to original AF message, NULL if not processing
//  612  *              AF message.
//  613  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  614 afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
zcl_getRawAFMsg:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
        CODE
//  615 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  616   return ( rawAFMsg );
        MOV       DPTR,#rawAFMsg
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_103:
        SJMP      ?Subroutine0
//  617 }
          CFI EndBlock cfiBlock23
//  618 
//  619 /*********************************************************************
//  620  * @fn          zcl_getParsedTransSeqNum
//  621  *
//  622  * @brief       Call to the get the transaction sequence number from
//  623  *              the incoming message.
//  624  *
//  625  *   NOTE:  This function can only be called during a ZCL callback function
//  626  *          and the calling function must NOT change any data in the message.
//  627  *
//  628  * @param       none
//  629  *
//  630  * @return      transaction sequence number.
//  631  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  632 uint8 zcl_getParsedTransSeqNum( void )
zcl_getParsedTransSeqNum:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function zcl_getParsedTransSeqNum
        CODE
//  633 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  634   return ( savedZCLTransSeqNum );
        MOV       DPTR,#savedZCLTransSeqNum
        MOVX      A,@DPTR
        MOV       R1,A
          CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  635 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock25
//  636 
//  637 /*********************************************************************
//  638  * @fn          zcl_registerPlugin
//  639  *
//  640  * @brief       Add a Cluster Library handler
//  641  *
//  642  * @param       startClusterID - starting cluster ID
//  643  * @param       endClusterID - ending cluster ID
//  644  * @param       pfnHdlr - function pointer to incoming message handler
//  645  *
//  646  * @return      ZSuccess if OK
//  647  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  648 ZStatus_t zcl_registerPlugin( uint16 startClusterID,
zcl_registerPlugin:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function zcl_registerPlugin
        CODE
//  649           uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
//  650 {
        FUNCALL zcl_registerPlugin, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  651   zclLibPlugin_t *pNewItem;
//  652   zclLibPlugin_t *pLoop;
//  653 
//  654   // Fill in the new profile list
//  655   pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x8
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  656   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zcl_registerPlugin_0
//  657   {
//  658     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_12
//  659   }
//  660 
//  661   // Fill in the plugin record.
//  662   pNewItem->next = (zclLibPlugin_t *)NULL;
??zcl_registerPlugin_0:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine12 & 0xFFFF
//  663   pNewItem->startClusterID = startClusterID;
??CrossCallReturnLabel_15:
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine6 & 0xFFFF
//  664   pNewItem->endClusterID = endClusterID;
//  665   pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
??CrossCallReturnLabel_2:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_104:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  666 
//  667   // Find spot in list
//  668   if (  plugins == NULL )
        MOV       DPTR,#plugins
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ       ??zcl_registerPlugin_1
//  669   {
//  670     plugins = pNewItem;
        MOV       DPTR,#plugins
        SJMP      ??zcl_registerPlugin_2
//  671   }
//  672   else
//  673   {
//  674     // Look for end of list
//  675     pLoop = plugins;
//  676     while ( pLoop->next != NULL )
//  677     {
//  678       pLoop = pLoop->next;
??zcl_registerPlugin_3:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
//  679     }
??zcl_registerPlugin_1:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        JNZ       ??zcl_registerPlugin_3
//  680 
//  681     // Put new item at end of list
//  682     pLoop->next = pNewItem;
//  683   }
??zcl_registerPlugin_2:
        LCALL     ?Subroutine11 & 0xFFFF
//  684 
//  685   return ( ZSuccess );
??CrossCallReturnLabel_12:
        SJMP      ??Subroutine52_0
//  686 }
          CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zcl_ProcessMessageMSG
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zcl_HandleExternal
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zcl_getRawAFMsg
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond32) CFA_SP SP+-7
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function zcl_registerPlugin
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function zcl_SendCommand
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zcl_ProcessMessageMSG
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zcl_ProcessMessageMSG
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zcl_ProcessMessageMSG
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_112:
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zcl_ProcessMessageMSG
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_108
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zcl_addExternalFoundationHandler
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_101
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zcl_HandleExternal
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_102
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-4
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zcl_getRawAFMsg
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_103
          CFI (cfiCond43) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond43) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond43) CFA_SP SP+-9
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zcl_registerPlugin
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_104
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zcl_SendCommand
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_105
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-4
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zcl_ProcessMessageMSG
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_106
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-4
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zcl_addExternalFoundationHandler
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_31
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function zcl_addExternalFoundationHandler
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_29
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zcl_registerPlugin
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_32
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zcl_registerAttrList
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_33
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-4
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zcl_registerClusterOptionList
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_34
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zcl_ProcessMessageMSG
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_35
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zclFindAttrRecsList
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_30
          CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond53) CFA_SP SP+-9
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zcl_ProcessMessageMSG
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_54
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-4
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zcl_ProcessMessageMSG
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_55
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-4
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zcl_ProcessMessageMSG
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_42
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zcl_ProcessMessageMSG
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_43
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock59
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock60
//  687 
//  688 #ifdef ZCL_DISCOVER
//  689 /*********************************************************************
//  690  * @fn          zcl_registerCmdList
//  691  *
//  692  * @brief       Register a Command List with ZCL Foundation
//  693  *
//  694  * @param       endpoint - endpoint the attribute list belongs to
//  695  * @param       newCmdList - array of command records
//  696  *
//  697  * @return      ZSuccess if OK
//  698  */
//  699 ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
//  700 {
//  701   zclCmdRecsList_t *pNewItem;
//  702   zclCmdRecsList_t *pLoop;
//  703 
//  704   // Fill in the new profile list
//  705   pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
//  706   if ( pNewItem == NULL )
//  707   {
//  708     return (ZMemError);
//  709   }
//  710 
//  711   pNewItem->pNext = (zclCmdRecsList_t *)NULL;
//  712   pNewItem->endpoint = endpoint;
//  713   pNewItem->numCommands = cmdListSize;
//  714   pNewItem->pCmdRecs = newCmdList;
//  715 
//  716   // Find spot in list
//  717   if ( gpCmdList == NULL )
//  718   {
//  719     gpCmdList = pNewItem;
//  720   }
//  721   else
//  722   {
//  723     // Look for end of list
//  724     pLoop = gpCmdList;
//  725     while ( pLoop->pNext != NULL )
//  726     {
//  727       pLoop = pLoop->pNext;
//  728     }
//  729 
//  730     // Put new item at end of list
//  731     pLoop->pNext = pNewItem;
//  732   }
//  733 
//  734   return ( ZSuccess );
//  735 }
//  736 #endif  // ZCL_DISCOVER
//  737 
//  738 /*********************************************************************
//  739  * @fn          zcl_registerAttrList
//  740  *
//  741  * @brief       Register an Attribute List with ZCL Foundation
//  742  *
//  743  * @param       endpoint - endpoint the attribute list belongs to
//  744  * @param       numAttr - number of attributes in list
//  745  * @param       newAttrList - array of Attribute records.
//  746  *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
//  747  *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
//  748  *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
//  749  *
//  750  * @return      ZSuccess if OK
//  751  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  752 ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
zcl_registerAttrList:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function zcl_registerAttrList
        CODE
//  753 {
        FUNCALL zcl_registerAttrList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  754   zclAttrRecsList *pNewItem;
//  755   zclAttrRecsList *pLoop;
//  756 
//  757   // Fill in the new profile list
//  758   pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xa
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  759   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zcl_registerAttrList_0
//  760   {
//  761     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_13
//  762   }
//  763 
//  764   pNewItem->next = (zclAttrRecsList *)NULL;
??zcl_registerAttrList_0:
        LCALL     ?Subroutine5 & 0xFFFF
//  765   pNewItem->endpoint = endpoint;
//  766   pNewItem->pfnReadWriteCB = NULL;
??CrossCallReturnLabel_0:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine8 & 0xFFFF
//  767   pNewItem->numAttributes = numAttr;
??CrossCallReturnLabel_6:
        MOV       A,?V1
        LCALL     ?Subroutine8 & 0xFFFF
//  768   pNewItem->attrs = newAttrList;
??CrossCallReturnLabel_7:
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  769 
//  770   // Find spot in list
//  771   if ( attrList == NULL )
        MOV       DPTR,#attrList
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ       ??zcl_registerAttrList_1
//  772   {
//  773     attrList = pNewItem;
        MOV       DPTR,#attrList
        SJMP      ??zcl_registerAttrList_2
//  774   }
//  775   else
//  776   {
//  777     // Look for end of list
//  778     pLoop = attrList;
//  779     while ( pLoop->next != NULL )
//  780     {
//  781       pLoop = pLoop->next;
??zcl_registerAttrList_3:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
//  782     }
??zcl_registerAttrList_1:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_27:
        JNZ       ??zcl_registerAttrList_3
//  783 
//  784     // Put new item at end of list
//  785     pLoop->next = pNewItem;
//  786   }
??zcl_registerAttrList_2:
        LCALL     ?Subroutine11 & 0xFFFF
//  787 
//  788   return ( ZSuccess );
??CrossCallReturnLabel_13:
        SJMP      ??Subroutine52_0
//  789 }
          CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zcl_registerAttrList
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zcl_registerClusterOptionList
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zcl_registerAttrList
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zcl_registerClusterOptionList
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond70 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zcl_registerAttrList
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker72 Using cfiCommon1
          CFI (cfiPicker72) NoFunction
          CFI (cfiPicker72) Picker
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_81:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiPicker72
//  790 
//  791 /*********************************************************************
//  792  * @fn          zcl_registerClusterOptionList
//  793  *
//  794  * @brief       Register a Cluster Option List with ZCL Foundation
//  795  *
//  796  * @param       endpoint - endpoint the option list belongs to
//  797  * @param       numOption - number of options in list
//  798  * @param       optionList - array of cluster option records.
//  799  *
//  800  *              NOTE: This API should be called to enable 'Application
//  801  *                    Link Key' security and/or 'APS ACK' for a specific
//  802  *                    Cluster. The 'Application Link Key' is discarded
//  803  *                    if security isn't enabled on the device.
//  804  *                    The default behavior is 'Network Key' when security
//  805  *                    is enabled and no 'APS ACK' for the ZCL messages.
//  806  *
//  807  * @return      ZSuccess if OK
//  808  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  809 ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
zcl_registerClusterOptionList:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function zcl_registerClusterOptionList
        CODE
//  810 {
        FUNCALL zcl_registerClusterOptionList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  811   zclClusterOptionList *pNewItem;
//  812   zclClusterOptionList *pLoop;
//  813 
//  814   // Fill in the new profile list
//  815   pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x6
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  816   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zcl_registerClusterOptionList_0
//  817   {
//  818     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??CrossCallReturnLabel_14
//  819   }
//  820 
//  821   pNewItem->next = (zclClusterOptionList *)NULL;
??zcl_registerClusterOptionList_0:
        LCALL     ?Subroutine5 & 0xFFFF
//  822   pNewItem->endpoint = endpoint;
//  823   pNewItem->numOptions = numOption;
??CrossCallReturnLabel_1:
        LCALL     ?Subroutine6 & 0xFFFF
//  824   pNewItem->options = optionList;
//  825 
//  826   // Find spot in list
//  827   if ( clusterOptionList == NULL )
??CrossCallReturnLabel_3:
        MOV       DPTR,#clusterOptionList
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ       ??zcl_registerClusterOptionList_1
//  828   {
//  829     clusterOptionList = pNewItem;
        MOV       DPTR,#clusterOptionList
        SJMP      ??zcl_registerClusterOptionList_2
//  830   }
//  831   else
//  832   {
//  833     // Look for end of list
//  834     pLoop = clusterOptionList;
//  835     while ( pLoop->next != NULL )
//  836     {
//  837       pLoop = pLoop->next;
??zcl_registerClusterOptionList_3:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
//  838     }
??zcl_registerClusterOptionList_1:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_28:
        JNZ       ??zcl_registerClusterOptionList_3
//  839 
//  840     // Put new item at end of list
//  841     pLoop->next = pNewItem;
//  842   }
??zcl_registerClusterOptionList_2:
        LCALL     ?Subroutine11 & 0xFFFF
//  843 
//  844   return ( ZSuccess );
??CrossCallReturnLabel_14:
        LJMP      ??Subroutine52_0 & 0xFFFF
//  845 }
          CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function zcl_addExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zcl_addExternalFoundationHandler
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zcl_registerPlugin
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zcl_registerAttrList
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zcl_registerClusterOptionList
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zcl_ProcessMessageMSG
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zclFindAttrRecsList
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond80) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond80) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond80) CFA_SP SP+-7
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zcl_registerClusterOptionList
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker84 Using cfiCommon1
          CFI (cfiPicker84) NoFunction
          CFI (cfiPicker84) Picker
        MOV       A,?V1
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_83:
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zcl_registerClusterOptionList
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_87:
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_84:
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zcl_registerClusterOptionList
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_3
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-4
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zcl_registerAttrList
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_0
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-4
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zcl_registerClusterOptionList
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_1
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-4
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_99:
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zcl_registerClusterOptionList
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_3
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-6
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function zcl_registerAttrList
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_0
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-6
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zcl_registerClusterOptionList
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_99, ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_1
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-6
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zcl_registerAttrList
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_6
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-6
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zcl_registerAttrList
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_7
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-6
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zcl_HandleExternal
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_8
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-6
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zcl_registerReadWriteCB
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_9
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-6
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
//  846 
//  847 /*********************************************************************
//  848  * @fn          zcl_registerValidateAttrData
//  849  *
//  850  * @brief       Add a validation function for attribute data
//  851  *
//  852  * @param       pfnValidateAttrData - function pointer to validate routine
//  853  *
//  854  * @return      ZSuccess if OK
//  855  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  856 ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
zcl_registerValidateAttrData:
          CFI Block cfiBlock102 Using cfiCommon0
          CFI Function zcl_registerValidateAttrData
        CODE
//  857 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  858   zcl_ValidateAttrDataCB = pfnValidateAttrData;
        MOV       DPTR,#zcl_ValidateAttrDataCB
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  859 
//  860   return ( ZSuccess );
        MOV       R1,#0x0
        LJMP      ?Subroutine0 & 0xFFFF
//  861 }
          CFI EndBlock cfiBlock102
//  862 
//  863 /*********************************************************************
//  864  * @fn          zcl_registerReadWriteCB
//  865  *
//  866  * @brief       Register the application's callback function to read/write
//  867  *              attribute data, and authorize read/write operation.
//  868  *
//  869  *              Note: The pfnReadWriteCB callback function is only required
//  870  *                    when the attribute data format is unknown to ZCL. The
//  871  *                    callback function gets called when the pointer 'dataPtr'
//  872  *                    to the attribute value is NULL in the attribute database
//  873  *                    registered with the ZCL.
//  874  *
//  875  *              Note: The pfnAuthorizeCB callback function is only required
//  876  *                    when the Read/Write operation on an attribute requires
//  877  *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
//  878  *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
//  879  *
//  880  * @param       endpoint - application's endpoint
//  881  * @param       pfnReadWriteCB - function pointer to read/write routine
//  882  * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
//  883  *
//  884  * @return      ZSuccess if successful. ZFailure, otherwise.
//  885  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  886 ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
zcl_registerReadWriteCB:
          CFI Block cfiBlock103 Using cfiCommon0
          CFI Function zcl_registerReadWriteCB
        CODE
//  887                                    zclAuthorizeCB_t pfnAuthorizeCB )
//  888 {
        FUNCALL zcl_registerReadWriteCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
//  889   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
//  890 
//  891   if ( pRec != NULL )
        MOV       A,R0
        ORL       A,R1
        JZ        ??zcl_registerReadWriteCB_0
//  892   {
//  893     pRec->pfnReadWriteCB = pfnReadWriteCB;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine9 & 0xFFFF
//  894     pRec->pfnAuthorizeCB = pfnAuthorizeCB;
??CrossCallReturnLabel_9:
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  895 
//  896     return ( ZSuccess );
        MOV       R1,#0x0
        SJMP      ??zcl_registerReadWriteCB_1
//  897   }
//  898 
//  899   return ( ZFailure );
??zcl_registerReadWriteCB_0:
        MOV       R1,#0x1
??zcl_registerReadWriteCB_1:
          CFI EndBlock cfiBlock103
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  900 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock104

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zcl_registerReadWriteCB
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_82:
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zcl_registerAttrList
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_7
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zcl_HandleExternal
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_8
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zcl_registerReadWriteCB
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_9
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_100:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112
//  901 
//  902 /*********************************************************************
//  903  * @fn      zcl_DeviceOperational
//  904  *
//  905  * @brief   Used to see whether or not the device can send or respond
//  906  *          to application level commands.
//  907  *
//  908  * @param   srcEP - source endpoint
//  909  * @param   clusterID - cluster ID
//  910  * @param   frameType - command type
//  911  * @param   cmd - command ID
//  912  *
//  913  * @return  TRUE if device is operational, FALSE otherwise
//  914  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  915 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
zcl_DeviceOperational:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI Function zcl_DeviceOperational
        CODE
//  916                                     uint8 frameType, uint8 cmd, uint16 profileID )
//  917 {
        FUNCALL zcl_DeviceOperational, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  918   zclAttrRec_t attrRec;
//  919   uint8 deviceEnabled = DEVICE_ENABLED; // default value
//  920 
//  921   (void)profileID;  // Intentionally unreferenced parameter
//  922 
//  923   // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
//  924   // cannot send or respond to application level commands, other than commands
//  925   // to read or write attributes. Note that the Identify cluster cannot be
//  926   // disabled, and remains functional regardless of this setting.
//  927   if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
        JNZ       ??zcl_DeviceOperational_0
        MOV       A,R5
        CLR       C
        SUBB      A,#0x6
        JC        ??zcl_DeviceOperational_1
//  928   {
//  929     return ( TRUE );
//  930   }
//  931 
//  932   if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
??zcl_DeviceOperational_0:
        MOV       A,#0x3
        XRL       A,R2
        ORL       A,R3
        JNZ       ??zcl_DeviceOperational_2
//  933   {
//  934     return ( TRUE );
??zcl_DeviceOperational_1:
        MOV       R1,#0x1
        MOV       A,#0x8
        LJMP      ?Subroutine1 & 0xFFFF
//  935   }
//  936 
//  937   // Is device enabled?
//  938   if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
//  939                        ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
??zcl_DeviceOperational_2:
        ; Setup parameters for call to function zclFindAttrRec
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x12
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP      ??zcl_DeviceOperational_1
//  940   {
//  941 #ifdef ZCL_READ
//  942     zclReadAttrData( &deviceEnabled, &attrRec, NULL );
//  943 #endif
//  944   }
//  945 
//  946   return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
//  947 }
          CFI EndBlock cfiBlock113
//  948 
//  949 /*********************************************************************
//  950  * @fn      zcl_SendCommand
//  951  *
//  952  * @brief   Used to send Profile and Cluster Specific Command messages.
//  953  *
//  954  *          NOTE: The calling application is responsible for incrementing
//  955  *                the Sequence Number.
//  956  *
//  957  * @param   srcEp - source endpoint
//  958  * @param   destAddr - destination address
//  959  * @param   clusterID - cluster ID
//  960  * @param   cmd - command ID
//  961  * @param   specific - whether the command is Cluster Specific
//  962  * @param   direction - client/server direction of the command
//  963  * @param   disableDefaultRsp - disable Default Response command
//  964  * @param   manuCode - manufacturer code for proprietary extensions to a profile
//  965  * @param   seqNumber - identification number for the transaction
//  966  * @param   cmdFormatLen - length of the command to be sent
//  967  * @param   cmdFormat - command to be sent
//  968  *
//  969  * @return  ZSuccess if OK
//  970  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  971 ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
zcl_SendCommand:
          CFI Block cfiBlock114 Using cfiCommon0
          CFI Function zcl_SendCommand
        CODE
//  972                            uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
//  973                            uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
//  974                            uint16 cmdFormatLen, uint8 *cmdFormat )
//  975 {
        FUNCALL zcl_SendCommand, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclBuildHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       ?V3,R1
        MOV       ?V14,R2
        MOV       ?V15,R3
        MOV       ?V0,R4
        MOV       ?V1,R5
//  976   endPointDesc_t *epDesc;
//  977   zclFrameHdr_t hdr;
//  978   uint8 *msgBuf;
//  979   uint16 msgLen;
//  980   uint8 *pBuf;
//  981   uint8 options;
//  982   ZStatus_t status;
//  983 
//  984   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V12,R2
        MOV       ?V13,R3
//  985   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,?V13
        JNZ       ??zcl_SendCommand_0
//  986   {
//  987     return ( ZInvalidParameter ); // EMBEDDED RETURN
        MOV       R1,#0x2
        LJMP      ??zcl_SendCommand_1 & 0xFFFF
//  988   }
//  989 
//  990 #if defined ( INTER_PAN )
//  991   if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
??zcl_SendCommand_0:
        ; Setup parameters for call to function StubAPS_InterPan
        MOV       DPL,?V14
        MOV       DPH,?V15
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,?V14
        MOV       DPH,?V15
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
        MOV       A,R1
        JZ        ??zcl_SendCommand_2
//  992   {
//  993     options = AF_TX_OPTIONS_NONE;
        MOV       ?V2,#0x0
        SJMP      ??zcl_SendCommand_3
//  994   }
//  995   else
//  996 #endif
//  997   {
//  998     options = zclGetClusterOption( srcEP, clusterID );
??zcl_SendCommand_2:
        ; Setup parameters for call to function zclGetClusterOption
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V3
        LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV       A,R1
        MOV       ?V2,A
//  999 
// 1000     // The cluster might not have been defined to use security but if this message
// 1001     // is in response to another message that was using APS security this message
// 1002     // will be sent with APS security
// 1003     if ( !( options & AF_EN_SECURITY ) )
        MOV       C,0xE0 /* A   */.6
        JC        ??zcl_SendCommand_3
// 1004     {
// 1005       afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
        MOV       DPTR,#rawAFMsg
        LCALL     ??Subroutine56_0 & 0xFFFF
// 1006 
// 1007       if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
// 1008       {
// 1009         options |= AF_EN_SECURITY;
// 1010       }
// 1011     }
// 1012   }
??CrossCallReturnLabel_126:
        JZ        ??zcl_SendCommand_3
        MOV       A,R0
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??zcl_SendCommand_3
        MOV       A,?V2
        SETB      0xE0 /* A   */.6
        MOV       ?V2,A
// 1013 
// 1014   zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
??zcl_SendCommand_3:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1015 
// 1016   // Not Profile wide command (like READ, WRITE)
// 1017   if ( specific )
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        JZ        ??zcl_SendCommand_4
// 1018   {
// 1019     hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
        MOVX      A,@DPTR
        ANL       A,#0xfc
        MOVX      @DPTR,A
        MOVX      A,@DPTR
        ORL       A,#0x1
        SJMP      ??zcl_SendCommand_5
// 1020   }
// 1021   else
// 1022   {
// 1023     hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
??zcl_SendCommand_4:
        MOVX      A,@DPTR
        ANL       A,#0xfc
??zcl_SendCommand_5:
        MOVX      @DPTR,A
// 1024   }
// 1025 
// 1026   if ( ( epDesc->simpleDesc == NULL ) ||
// 1027        ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
// 1028                                 cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        LCALL     ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_131:
        JZ        ??zcl_SendCommand_6
        MOV       A,#0x1e
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV       DPL,?V12
        MOV       DPH,?V13
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R6
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R4,A
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,?V3
        LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JNZ       ??zcl_SendCommand_7
// 1029   {
// 1030     return ( ZFailure ); // EMBEDDED RETURN
??zcl_SendCommand_6:
        MOV       R1,#0x1
        LJMP      ??zcl_SendCommand_1 & 0xFFFF
// 1031   }
??zcl_SendCommand_7:
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine56_0 & 0xFFFF
// 1032 
// 1033   // Fill in the Maufacturer Code
// 1034   if ( manuCode != 0 )
??CrossCallReturnLabel_127:
        JZ        ??CrossCallReturnLabel_114
// 1035   {
// 1036     hdr.fc.manuSpecific = 1;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ORL       A,#0x4
        MOVX      @DPTR,A
// 1037     hdr.manuCode = manuCode;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
// 1038   }
// 1039 
// 1040   // Set the Command Direction
// 1041   if ( direction )
??CrossCallReturnLabel_114:
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_45:
        JZ        ??zcl_SendCommand_8
// 1042   {
// 1043     hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        MOVX      A,@DPTR
        ORL       A,#0x8
        SJMP      ??zcl_SendCommand_9
// 1044   }
// 1045   else
// 1046   {
// 1047     hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zcl_SendCommand_8:
        MOVX      A,@DPTR
        ANL       A,#0xf7
??zcl_SendCommand_9:
        MOVX      @DPTR,A
// 1048   }
// 1049 
// 1050   // Set the Disable Default Response field
// 1051   if ( disableDefaultRsp )
        MOV       A,#0x21
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_46:
        JZ        ??zcl_SendCommand_10
// 1052   {
// 1053     hdr.fc.disableDefaultRsp = 1;
        MOVX      A,@DPTR
        ORL       A,#0x10
        SJMP      ??zcl_SendCommand_11
// 1054   }
// 1055   else
// 1056   {
// 1057     hdr.fc.disableDefaultRsp = 0;
??zcl_SendCommand_10:
        MOVX      A,@DPTR
        ANL       A,#0xef
??zcl_SendCommand_11:
        MOVX      @DPTR,A
// 1058   }
// 1059 
// 1060   // Fill in the Transaction Sequence Number
// 1061   hdr.transSeqNum = seqNum;
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1062 
// 1063   // Fill in the command
// 1064   hdr.commandID = cmd;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
// 1065 
// 1066   // calculate the needed buffer size
// 1067   msgLen = zclCalcHdrSize( &hdr );
        MOV       R0,#0x3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_SendCommand_12
        MOV       R0,#0x5
??zcl_SendCommand_12:
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
// 1068   msgLen += cmdFormatLen;
        MOV       A,R0
        ADD       A,?V10
        MOV       R6,A
        CLR       A
        ADDC      A,?V11
        MOV       R7,A
// 1069 
// 1070   // Allocate the buffer needed
// 1071   msgBuf = zcl_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V8,R2
        MOV       ?V9,R3
// 1072   if ( msgBuf != NULL )
        MOV       A,R2
        ORL       A,?V9
        JZ        ??zcl_SendCommand_13
// 1073   {
// 1074     // Fill in the ZCL Header
// 1075     pBuf = zclBuildHdr( &hdr, msgBuf );
        ; Setup parameters for call to function zclBuildHdr
        MOV       R4,?V8
        MOV       R5,?V9
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
// 1076 
// 1077     // Fill in the command frame
// 1078     zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x27
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,?V10
        MOV       R5,?V11
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1079 
// 1080     status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
// 1081                              &zcl_TransID, options, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V4,#0x1e
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       ?V4,#zcl_TransID & 0xff
        MOV       ?V5,#(zcl_TransID >> 8) & 0xff
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R1,?V2
        MOV       R4,?V12
        MOV       R5,?V13
        MOV       R2,?V14
        MOV       R3,?V15
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       R6,A
// 1082     zcl_mem_free ( msgBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zcl_SendCommand_14
// 1083   }
// 1084   else
// 1085   {
// 1086     status = ZMemError;
??zcl_SendCommand_13:
        MOV       R6,#0x10
// 1087   }
// 1088 
// 1089   return ( status );
??zcl_SendCommand_14:
        MOV       A,R6
        MOV       R1,A
??zcl_SendCommand_1:
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
// 1090 }
          CFI EndBlock cfiBlock114

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_114
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zcl_ProcessMessageMSG
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zcl_ProcessMessageMSG
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zcl_ProcessMessageMSG
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zcl_ProcessMessageMSG
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zcl_ProcessMessageMSG
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker121 Using cfiCommon1
          CFI (cfiPicker121) NoFunction
          CFI (cfiPicker121) Picker
        MOV       A,R0
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiPicker121
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_113
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zcl_SendCommand
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zcl_ProcessMessageMSG
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zcl_ProcessMessageMSG
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zcl_ProcessMessageMSG
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zcl_ProcessMessageMSG
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function zcl_ProcessMessageMSG
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker129 Using cfiCommon1
          CFI (cfiPicker129) NoFunction
          CFI (cfiPicker129) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiPicker129
// 1091 
// 1092 #ifdef ZCL_READ
// 1093 /*********************************************************************
// 1094  * @fn      zcl_SendRead
// 1095  *
// 1096  * @brief   Send a Read command
// 1097  *
// 1098  * @param   srcEP - Application's endpoint
// 1099  * @param   dstAddr - destination address
// 1100  * @param   clusterID - cluster ID
// 1101  * @param   readCmd - read command to be sent
// 1102  * @param   direction - direction of the command
// 1103  * @param   seqNum - transaction sequence number
// 1104  *
// 1105  * @return  ZSuccess if OK
// 1106  */
// 1107 ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
// 1108                         uint16 clusterID, zclReadCmd_t *readCmd,
// 1109                         uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
// 1110 {
// 1111   uint16 dataLen;
// 1112   uint8 *buf;
// 1113   uint8 *pBuf;
// 1114   ZStatus_t status;
// 1115 
// 1116   dataLen = readCmd->numAttr * 2; // Attribute ID
// 1117 
// 1118   buf = zcl_mem_alloc( dataLen );
// 1119   if ( buf != NULL )
// 1120   {
// 1121     uint8 i;
// 1122 
// 1123     // Load the buffer - serially
// 1124     pBuf = buf;
// 1125     for (i = 0; i < readCmd->numAttr; i++)
// 1126     {
// 1127       *pBuf++ = LO_UINT16( readCmd->attrID[i] );
// 1128       *pBuf++ = HI_UINT16( readCmd->attrID[i] );
// 1129     }
// 1130 
// 1131     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
// 1132                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1133     zcl_mem_free( buf );
// 1134   }
// 1135   else
// 1136   {
// 1137     status = ZMemError;
// 1138   }
// 1139 
// 1140   return ( status );
// 1141 }
// 1142 
// 1143 /*********************************************************************
// 1144  * @fn      zcl_SendReadRsp
// 1145  *
// 1146  * @brief   Send a Read Response command.
// 1147  *
// 1148  * @param   srcEP - Application's endpoint
// 1149  * @param   dstAddr - destination address
// 1150  * @param   clusterID - cluster ID
// 1151  * @param   readRspCmd - read response command to be sent
// 1152  * @param   direction - direction of the command
// 1153  * @param   seqNum - transaction sequence number
// 1154  *
// 1155  * @return  ZSuccess if OK
// 1156  */
// 1157 ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1158                            uint16 clusterID, zclReadRspCmd_t *readRspCmd,
// 1159                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1160 {
// 1161   uint8 *buf;
// 1162   uint16 len = 0;
// 1163   ZStatus_t status;
// 1164   uint8 i;
// 1165 
// 1166   // calculate the size of the command
// 1167   for ( i = 0; i < readRspCmd->numAttr; i++ )
// 1168   {
// 1169     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1170 
// 1171     len += 2 + 1; // Attribute ID + Status
// 1172 
// 1173     if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1174     {
// 1175       len++; // Attribute Data Type length
// 1176 
// 1177       // Attribute Data length
// 1178       if ( statusRec->data != NULL )
// 1179       {
// 1180         len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
// 1181       }
// 1182       else
// 1183       {
// 1184         len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
// 1185       }
// 1186     }
// 1187   }
// 1188 
// 1189   buf = zcl_mem_alloc( len );
// 1190   if ( buf != NULL )
// 1191   {
// 1192     // Load the buffer - serially
// 1193     uint8 *pBuf = buf;
// 1194 
// 1195     for ( i = 0; i < readRspCmd->numAttr; i++ )
// 1196     {
// 1197       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1198 
// 1199       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1200       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1201       *pBuf++ = statusRec->status;
// 1202 
// 1203       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1204       {
// 1205         *pBuf++ = statusRec->dataType;
// 1206 
// 1207         if ( statusRec->data != NULL )
// 1208         {
// 1209           // Copy attribute data to the buffer to be sent out
// 1210           pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
// 1211         }
// 1212         else
// 1213         {
// 1214           uint16 dataLen;
// 1215 
// 1216           // Read attribute data directly into the buffer to be sent out
// 1217           zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
// 1218           pBuf += dataLen;
// 1219         }
// 1220       }
// 1221     } // for loop
// 1222 
// 1223     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
// 1224                               direction, disableDefaultRsp, 0, seqNum, len, buf );
// 1225     zcl_mem_free( buf );
// 1226   }
// 1227   else
// 1228   {
// 1229     status = ZMemError;
// 1230   }
// 1231 
// 1232   return ( status );
// 1233 }
// 1234 #endif // ZCL_READ
// 1235 
// 1236 #ifdef ZCL_WRITE
// 1237 /*********************************************************************
// 1238  * @fn      sendWriteRequest
// 1239  *
// 1240  * @brief   Send a Write command
// 1241  *
// 1242  * @param   dstAddr - destination address
// 1243  * @param   clusterID - cluster ID
// 1244  * @param   writeCmd - write command to be sent
// 1245  * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
// 1246  * @param   direction - direction of the command
// 1247  * @param   seqNum - transaction sequence number
// 1248  *
// 1249  * @return  ZSuccess if OK
// 1250  */
// 1251 ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1252                                 zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
// 1253                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1254 {
// 1255   uint8 *buf;
// 1256   uint16 dataLen = 0;
// 1257   ZStatus_t status;
// 1258   uint8 i;
// 1259 
// 1260   for ( i = 0; i < writeCmd->numAttr; i++ )
// 1261   {
// 1262     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 1263 
// 1264     dataLen += 2 + 1; // Attribute ID + Attribute Type
// 1265 
// 1266     // Attribute Data
// 1267     dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
// 1268   }
// 1269 
// 1270   buf = zcl_mem_alloc( dataLen );
// 1271   if ( buf != NULL )
// 1272   {
// 1273     // Load the buffer - serially
// 1274     uint8 *pBuf = buf;
// 1275     for ( i = 0; i < writeCmd->numAttr; i++ )
// 1276     {
// 1277       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 1278 
// 1279       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1280       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1281       *pBuf++ = statusRec->dataType;
// 1282 
// 1283       pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
// 1284     }
// 1285 
// 1286     status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
// 1287                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1288     zcl_mem_free( buf );
// 1289   }
// 1290   else
// 1291   {
// 1292     status = ZMemError;
// 1293   }
// 1294 
// 1295   return ( status);
// 1296 }
// 1297 
// 1298 /*********************************************************************
// 1299  * @fn      zcl_SendWriteRsp
// 1300  *
// 1301  * @brief   Send a Write Response command
// 1302  *
// 1303  * @param   dstAddr - destination address
// 1304  * @param   clusterID - cluster ID
// 1305  * @param   wrtieRspCmd - write response command to be sent
// 1306  * @param   direction - direction of the command
// 1307  * @param   seqNum - transaction sequence number
// 1308  *
// 1309  * @return  ZSuccess if OK
// 1310  */
// 1311 ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1312                             uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
// 1313                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1314 {
// 1315   uint16 dataLen;
// 1316   uint8 *buf;
// 1317   ZStatus_t status;
// 1318 
// 1319   dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
// 1320 
// 1321   buf = zcl_mem_alloc( dataLen );
// 1322   if ( buf != NULL )
// 1323   {
// 1324     // Load the buffer - serially
// 1325     uint8 i;
// 1326     uint8 *pBuf = buf;
// 1327     for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1328     {
// 1329       *pBuf++ = writeRspCmd->attrList[i].status;
// 1330       *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
// 1331       *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
// 1332     }
// 1333 
// 1334     // If there's only a single status record and its status field is set to
// 1335     // SUCCESS then omit the attribute ID field.
// 1336     if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1337     {
// 1338       dataLen = 1;
// 1339     }
// 1340 
// 1341     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
// 1342                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1343     zcl_mem_free( buf );
// 1344   }
// 1345   else
// 1346   {
// 1347     status = ZMemError;
// 1348   }
// 1349 
// 1350   return ( status );
// 1351 }
// 1352 #endif // ZCL_WRITE
// 1353 
// 1354 #ifdef ZCL_REPORT
// 1355 /*********************************************************************
// 1356  * @fn      zcl_SendConfigReportCmd
// 1357  *
// 1358  * @brief   Send a Configure Reporting command
// 1359  *
// 1360  * @param   dstAddr - destination address
// 1361  * @param   clusterID - cluster ID
// 1362  * @param   cfgReportCmd - configure reporting command to be sent
// 1363  * @param   direction - direction of the command
// 1364  * @param   seqNum - transaction sequence number
// 1365  *
// 1366  * @return  ZSuccess if OK
// 1367  */
// 1368 ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1369                           uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
// 1370                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1371 {
// 1372   uint8 *buf;
// 1373   uint16 dataLen = 0;
// 1374   ZStatus_t status;
// 1375   uint8 i;
// 1376 
// 1377   // Find out the data length
// 1378   for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1379   {
// 1380     zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1381 
// 1382     dataLen += 1 + 2; // Direction + Attribute ID
// 1383 
// 1384     if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1385     {
// 1386       dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1387 
// 1388       // Find out the size of the Reportable Change field (for Analog data types)
// 1389       if ( zclAnalogDataType( reportRec->dataType ) )
// 1390       {
// 1391         dataLen += zclGetDataTypeLength( reportRec->dataType );
// 1392       }
// 1393     }
// 1394     else
// 1395     {
// 1396       dataLen += 2; // Timeout Period
// 1397     }
// 1398   }
// 1399 
// 1400   buf = zcl_mem_alloc( dataLen );
// 1401   if ( buf != NULL )
// 1402   {
// 1403     // Load the buffer - serially
// 1404     uint8 *pBuf = buf;
// 1405 
// 1406     for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1407     {
// 1408       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1409 
// 1410       *pBuf++ = reportRec->direction;
// 1411       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1412       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1413 
// 1414       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1415       {
// 1416         *pBuf++ = reportRec->dataType;
// 1417         *pBuf++ = LO_UINT16( reportRec->minReportInt );
// 1418         *pBuf++ = HI_UINT16( reportRec->minReportInt );
// 1419         *pBuf++ = LO_UINT16( reportRec->maxReportInt );
// 1420         *pBuf++ = HI_UINT16( reportRec->maxReportInt );
// 1421 
// 1422         if ( zclAnalogDataType( reportRec->dataType ) )
// 1423         {
// 1424           pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
// 1425         }
// 1426       }
// 1427       else
// 1428       {
// 1429         *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
// 1430         *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
// 1431       }
// 1432     } // for loop
// 1433 
// 1434     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
// 1435                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1436     zcl_mem_free( buf );
// 1437   }
// 1438   else
// 1439   {
// 1440     status = ZMemError;
// 1441   }
// 1442 
// 1443   return ( status );
// 1444 }
// 1445 
// 1446 /*********************************************************************
// 1447  * @fn      zcl_SendConfigReportRspCmd
// 1448  *
// 1449  * @brief   Send a Configure Reporting Response command
// 1450  *
// 1451  * @param   dstAddr - destination address
// 1452  * @param   clusterID - cluster ID
// 1453  * @param   cfgReportRspCmd - configure reporting response command to be sent
// 1454  * @param   direction - direction of the command
// 1455  * @param   seqNum - transaction sequence number
// 1456  *
// 1457  * @return  ZSuccess if OK
// 1458  */
// 1459 ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1460                     uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
// 1461                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1462 {
// 1463   uint16 dataLen;
// 1464   uint8 *buf;
// 1465   ZStatus_t status;
// 1466 
// 1467   // Atrribute list (Status, Direction and Attribute ID)
// 1468   dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
// 1469 
// 1470   buf = zcl_mem_alloc( dataLen );
// 1471   if ( buf != NULL )
// 1472   {
// 1473     // Load the buffer - serially
// 1474     uint8 *pBuf = buf;
// 1475     uint8 i;
// 1476 
// 1477     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 1478     {
// 1479       *pBuf++ = cfgReportRspCmd->attrList[i].status;
// 1480       *pBuf++ = cfgReportRspCmd->attrList[i].direction;
// 1481       *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1482       *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1483     }
// 1484 
// 1485     // If there's only a single status record and its status field is set to
// 1486     // SUCCESS then omit the attribute ID field.
// 1487     if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1488     {
// 1489       dataLen = 1;
// 1490     }
// 1491 
// 1492     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1493                               ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
// 1494                               disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1495     zcl_mem_free( buf );
// 1496   }
// 1497   else
// 1498   {
// 1499     status = ZMemError;
// 1500   }
// 1501 
// 1502   return ( status );
// 1503 }
// 1504 
// 1505 /*********************************************************************
// 1506  * @fn      zcl_SendReadReportCfgCmd
// 1507  *
// 1508  * @brief   Send a Read Reporting Configuration command
// 1509  *
// 1510  * @param   dstAddr - destination address
// 1511  * @param   clusterID - cluster ID
// 1512  * @param   readReportCfgCmd - read reporting configuration command to be sent
// 1513  * @param   direction - direction of the command
// 1514  * @param   seqNum - transaction sequence number
// 1515  *
// 1516  * @return  ZSuccess if OK
// 1517  */
// 1518 ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1519                   uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
// 1520                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1521 {
// 1522   uint16 dataLen;
// 1523   uint8 *buf;
// 1524   ZStatus_t status;
// 1525 
// 1526   dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
// 1527 
// 1528   buf = zcl_mem_alloc( dataLen );
// 1529   if ( buf != NULL )
// 1530   {
// 1531     // Load the buffer - serially
// 1532     uint8 *pBuf = buf;
// 1533     uint8 i;
// 1534 
// 1535     for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
// 1536     {
// 1537       *pBuf++ = readReportCfgCmd->attrList[i].direction;
// 1538       *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1539       *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1540     }
// 1541 
// 1542     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
// 1543                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1544     zcl_mem_free( buf );
// 1545   }
// 1546   else
// 1547   {
// 1548     status = ZMemError;
// 1549   }
// 1550 
// 1551   return ( status );
// 1552 }
// 1553 
// 1554 /*********************************************************************
// 1555  * @fn      zcl_SendReadReportCfgRspCmd
// 1556  *
// 1557  * @brief   Send a Read Reporting Configuration Response command
// 1558  *
// 1559  * @param   dstAddr - destination address
// 1560  * @param   clusterID - cluster ID
// 1561  * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
// 1562  * @param   direction - direction of the command
// 1563  * @param   seqNum - transaction sequence number
// 1564  *
// 1565  * @return  ZSuccess if OK
// 1566  */
// 1567 ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1568              uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
// 1569              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1570 {
// 1571   uint8 *buf;
// 1572   uint16 dataLen = 0;
// 1573   ZStatus_t status;
// 1574   uint8 i;
// 1575 
// 1576   // Find out the data length
// 1577   for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1578   {
// 1579     zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1580 
// 1581     dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
// 1582 
// 1583     if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1584     {
// 1585       if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1586       {
// 1587         dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1588 
// 1589         // Find out the size of the Reportable Change field (for Analog data types)
// 1590         if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1591         {
// 1592           dataLen += zclGetDataTypeLength( reportRspRec->dataType );
// 1593         }
// 1594       }
// 1595       else
// 1596       {
// 1597         dataLen += 2; // Timeout Period
// 1598       }
// 1599     }
// 1600   }
// 1601 
// 1602   buf = zcl_mem_alloc( dataLen );
// 1603   if ( buf != NULL )
// 1604   {
// 1605     // Load the buffer - serially
// 1606     uint8 *pBuf = buf;
// 1607 
// 1608     for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1609     {
// 1610       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1611 
// 1612       *pBuf++ = reportRspRec->status;
// 1613       *pBuf++ = reportRspRec->direction;
// 1614       *pBuf++ = LO_UINT16( reportRspRec->attrID );
// 1615       *pBuf++ = HI_UINT16( reportRspRec->attrID );
// 1616 
// 1617       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1618       {
// 1619         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1620         {
// 1621           *pBuf++ = reportRspRec->dataType;
// 1622           *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
// 1623           *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
// 1624           *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
// 1625           *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
// 1626 
// 1627           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1628           {
// 1629             pBuf = zclSerializeData( reportRspRec->dataType,
// 1630                                      reportRspRec->reportableChange, pBuf );
// 1631           }
// 1632         }
// 1633         else
// 1634         {
// 1635           *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
// 1636           *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
// 1637         }
// 1638       }
// 1639     }
// 1640 
// 1641     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1642                               ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
// 1643                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1644     zcl_mem_free( buf );
// 1645   }
// 1646   else
// 1647   {
// 1648     status = ZMemError;
// 1649   }
// 1650 
// 1651   return ( status );
// 1652 }
// 1653 
// 1654 /*********************************************************************
// 1655  * @fn      zcl_SendReportCmd
// 1656  *
// 1657  * @brief   Send a Report command
// 1658  *
// 1659  * @param   dstAddr - destination address
// 1660  * @param   clusterID - cluster ID
// 1661  * @param   reportCmd - report command to be sent
// 1662  * @param   direction - direction of the command
// 1663  * @param   seqNum - transaction sequence number
// 1664  *
// 1665  * @return  ZSuccess if OK
// 1666  */
// 1667 ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1668                              uint16 clusterID, zclReportCmd_t *reportCmd,
// 1669                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1670 {
// 1671   uint16 dataLen = 0;
// 1672   uint8 *buf;
// 1673   ZStatus_t status;
// 1674   uint8 i;
// 1675 
// 1676   // calculate the size of the command
// 1677   for ( i = 0; i < reportCmd->numAttr; i++ )
// 1678   {
// 1679     zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1680 
// 1681     dataLen += 2 + 1; // Attribute ID + data type
// 1682 
// 1683     // Attribute Data
// 1684     dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
// 1685   }
// 1686 
// 1687   buf = zcl_mem_alloc( dataLen );
// 1688   if ( buf != NULL )
// 1689   {
// 1690     // Load the buffer - serially
// 1691     uint8 *pBuf = buf;
// 1692 
// 1693     for ( i = 0; i < reportCmd->numAttr; i++ )
// 1694     {
// 1695       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1696 
// 1697       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1698       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1699       *pBuf++ = reportRec->dataType;
// 1700 
// 1701       pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
// 1702     }
// 1703 
// 1704     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
// 1705                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1706     zcl_mem_free( buf );
// 1707   }
// 1708   else
// 1709   {
// 1710     status = ZMemError;
// 1711   }
// 1712 
// 1713   return ( status );
// 1714 }
// 1715 #endif // ZCL_REPORT
// 1716 
// 1717 /*********************************************************************
// 1718  * @fn      zcl_SendDefaultRspCmd
// 1719  *
// 1720  * @brief   Send a Default Response command
// 1721  *
// 1722  *          Note: The manufacturer code field should be set if this
// 1723  *          command is being sent in response to a manufacturer specific
// 1724  *          command.
// 1725  *
// 1726  * @param   dstAddr - destination address
// 1727  * @param   clusterID - cluster ID
// 1728  * @param   defaultRspCmd - default response command to be sent
// 1729  * @param   direction - direction of the command
// 1730  * @param   manuCode - manufacturer code for proprietary extensions to a profile
// 1731  * @param   seqNum - transaction sequence number
// 1732  *
// 1733  * @return  ZSuccess if OK
// 1734  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1735 ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
zcl_SendDefaultRspCmd:
          CFI Block cfiBlock130 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
        CODE
// 1736                                  zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
// 1737                                  uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
// 1738 {
        FUNCALL zcl_SendDefaultRspCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine35 & 0xFFFF
// 1739   uint8 buf[2]; // Command ID and Status;
// 1740 
// 1741   // Load the buffer - serially
// 1742   buf[0] = defaultRspCmd->commandID;
??CrossCallReturnLabel_64:
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     ?Subroutine12 & 0xFFFF
// 1743   buf[1] = defaultRspCmd->statusCode;
??CrossCallReturnLabel_16:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1744 
// 1745   return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
// 1746                             direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0xb
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP      ?Subroutine3 & 0xFFFF
// 1747 }
          CFI EndBlock cfiBlock130

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zcl_SendDefaultRspCmd
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_138:
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zcl_SendCommand
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zcl_SendCommand
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zcl_SendDefaultRspCmd
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zcl_SendDefaultRspCmd
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zclBuildHdr
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_88:
        INC       DPTR
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142
// 1748 
// 1749 #ifdef ZCL_DISCOVER
// 1750 /*********************************************************************
// 1751  * @fn      zcl_SendDiscoverCmdsCmd
// 1752  *
// 1753  * @brief   Send a Discover Commands command
// 1754  *
// 1755  * @param   dstAddr - destination address
// 1756  * @param   clusterID - cluster ID
// 1757  * @param   cmdType - requesting command ID
// 1758  * @param   pDiscoverCmd - discover command to be sent
// 1759  * @param   direction - direction of the command
// 1760  * @param   seqNum - transaction sequence number
// 1761  *
// 1762  * @return  ZSuccess if OK
// 1763  */
// 1764 ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1765                                   uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
// 1766                                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1767 {
// 1768   uint8 payload[2]; // size of startCmdID and maxCmdID
// 1769   ZStatus_t status;
// 1770 
// 1771   payload[0] = pDiscoverCmd->startCmdID;
// 1772   payload[1] = pDiscoverCmd->maxCmdID;
// 1773 
// 1774   // Send message for either commands received or generated
// 1775   if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1776   {
// 1777     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
// 1778                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1779   }
// 1780   else  // generated
// 1781   {
// 1782     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
// 1783                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1784   }
// 1785 
// 1786   return ( status );
// 1787 }
// 1788 
// 1789 /*********************************************************************
// 1790  * @fn      zcl_SendDiscoverCmdsRspCmd
// 1791  *
// 1792  * @brief   Send a Discover Commands Response command
// 1793  *
// 1794  * @param   dstAddr - destination address
// 1795  * @param   clusterID - cluster ID
// 1796  * @param   pDiscoverRspCmd - response command to be sent
// 1797  * @param   direction - direction of the command
// 1798  * @param   seqNum - transaction sequence number
// 1799  *
// 1800  * @return  ZSuccess if OK
// 1801  */
// 1802 ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1803                                       uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
// 1804                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1805 {
// 1806   uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
// 1807   uint8 *pCmdBuf;
// 1808   uint8 i;
// 1809   ZStatus_t status = ZSuccess;
// 1810 
// 1811   // allocate memory
// 1812   pCmdBuf = zcl_mem_alloc( payloadSize );
// 1813   if ( pCmdBuf != NULL )
// 1814   {
// 1815     uint8 *pBuf = pCmdBuf;
// 1816 
// 1817     // Load the buffer - serially
// 1818     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1819     for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
// 1820     {
// 1821       *pBuf++ = pDiscoverRspCmd->pCmdID[i];
// 1822     }
// 1823 
// 1824     // Send response message for either commands received or generated
// 1825     if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1826     {
// 1827       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
// 1828                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1829     }
// 1830     else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
// 1831     {
// 1832       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
// 1833                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1834     }
// 1835 
// 1836     zcl_mem_free( pCmdBuf );
// 1837   }
// 1838   else
// 1839   {
// 1840     status = ZMemError;
// 1841   }
// 1842 
// 1843   return ( status );
// 1844 }
// 1845 
// 1846 /*********************************************************************
// 1847  * @fn      zcl_SendDiscoverAttrsCmd
// 1848  *
// 1849  * @brief   Send a Discover Attributes command
// 1850  *
// 1851  * @param   dstAddr - destination address
// 1852  * @param   clusterID - cluster ID
// 1853  * @param   pDiscoverCmd - discover command to be sent
// 1854  * @param   direction - direction of the command
// 1855  * @param   seqNum - transaction sequence number
// 1856  *
// 1857  * @return  ZSuccess if OK
// 1858  */
// 1859 ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1860                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
// 1861                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1862 {
// 1863   uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
// 1864   uint8 *buf;
// 1865   ZStatus_t status;
// 1866 
// 1867   buf = zcl_mem_alloc( dataLen );
// 1868   if ( buf != NULL )
// 1869   {
// 1870     // Load the buffer - serially
// 1871     uint8 *pBuf = buf;
// 1872     *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
// 1873     *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
// 1874     *pBuf++ = pDiscoverCmd->maxAttrIDs;
// 1875 
// 1876     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
// 1877                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1878     zcl_mem_free( buf );
// 1879   }
// 1880   else
// 1881   {
// 1882     status = ZMemError;
// 1883   }
// 1884 
// 1885   return ( status );
// 1886 }
// 1887 
// 1888 /*********************************************************************
// 1889  * @fn      zcl_SendDiscoverAttrsRspCmd
// 1890  *
// 1891  * @brief   Send a Discover Attributes Response command
// 1892  *
// 1893  * @param   dstAddr - destination address
// 1894  * @param   clusterID - cluster ID
// 1895  * @param   reportRspCmd - report response command to be sent
// 1896  * @param   direction - direction of the command
// 1897  * @param   seqNum - transaction sequence number
// 1898  *
// 1899  * @return  ZSuccess if OK
// 1900  */
// 1901 ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1902                           uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
// 1903                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1904 {
// 1905   uint16 dataLen = 1; // Discovery complete
// 1906   uint8 *buf;
// 1907   ZStatus_t status;
// 1908 
// 1909   // calculate the size of the command
// 1910   dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
// 1911 
// 1912   buf = zcl_mem_alloc( dataLen );
// 1913   if ( buf != NULL )
// 1914   {
// 1915     // Load the buffer - serially
// 1916     uint8 i;
// 1917     uint8 *pBuf = buf;
// 1918 
// 1919     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1920 
// 1921     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 1922     {
// 1923       *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 1924       *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 1925       *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
// 1926     }
// 1927 
// 1928     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
// 1929                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1930     zcl_mem_free( buf );
// 1931   }
// 1932   else
// 1933   {
// 1934     status = ZMemError;
// 1935   }
// 1936 
// 1937   return ( status );
// 1938 }
// 1939 
// 1940 /*********************************************************************
// 1941  * @fn      zcl_SendDiscoverAttrsExt
// 1942  *
// 1943  * @brief   Send a Discover Attributes Extended command
// 1944  *
// 1945  * @param   dstAddr - destination address
// 1946  * @param   clusterID - cluster ID
// 1947  * @param   pDiscoverAttrsExt:
// 1948  *            - startAttrID: the first attribute to be selected
// 1949  *            - maxAttrIDs: maximum number of returned attributes
// 1950  * @param   direction - direction of the command
// 1951  * @param   seqNum - transaction sequence number
// 1952  *
// 1953  * @return  ZSuccess if OK
// 1954  */
// 1955 ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
// 1956                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
// 1957                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1958 {
// 1959   uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
// 1960   ZStatus_t status;
// 1961 
// 1962   // Load the buffer - serially
// 1963   buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
// 1964   buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
// 1965   buf[2] = pDiscoverAttrsExt->maxAttrIDs;
// 1966 
// 1967   status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
// 1968                             direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
// 1969 
// 1970   return ( status );
// 1971 }
// 1972 
// 1973 /*********************************************************************
// 1974  * @fn      zcl_SendDiscoverAttrsExtRsp
// 1975  *
// 1976  * @brief   Send a Discover Attributes Extended Response command
// 1977  *
// 1978  * @param   dstAddr - destination address
// 1979  * @param   clusterID - cluster ID
// 1980  * @param   pDiscoverRspCmd:
// 1981  *            - discComplete: indicates whether all requested attributes returned
// 1982  *            - attrID: attribute ID
// 1983  *            - attrDataType: data type of the given attribute
// 1984  *            - attrAccessControl: access control of the given attribute
// 1985  * @param   direction - direction of the command
// 1986  * @param   seqNum - transaction sequence number
// 1987  *
// 1988  * @return  ZSuccess if OK
// 1989  */
// 1990 ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1991                                       uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
// 1992                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1993 {
// 1994   uint8 *buf;
// 1995   uint8 i;
// 1996   uint16 dataLen = 1; // Discovery complete
// 1997   ZStatus_t status;
// 1998 
// 1999   // calculate the size of the command
// 2000   dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
// 2001 
// 2002   buf = zcl_mem_alloc( dataLen );
// 2003   if ( buf != NULL )
// 2004   {
// 2005     // Load the buffer - serially
// 2006     uint8 *pBuf = buf;
// 2007     *pBuf++ = pDiscoverRspCmd->discComplete;
// 2008     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 2009     {
// 2010       *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 2011       *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 2012       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
// 2013       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
// 2014     }
// 2015 
// 2016     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
// 2017                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 2018     zcl_mem_free( buf );
// 2019   }
// 2020   else
// 2021   {
// 2022     status = ZMemError;
// 2023   }
// 2024 
// 2025   return ( status );
// 2026 }
// 2027 #endif // ZCL_DISCOVER
// 2028 
// 2029 /*********************************************************************
// 2030  * @fn      zcl_ProcessMessageMSG
// 2031  *
// 2032  * @brief   Data message processor callback.  This function processes
// 2033  *          any incoming data - probably from other devices.  So, based
// 2034  *          on cluster ID, perform the intended action.
// 2035  *
// 2036  * @param   pkt - incoming message
// 2037  *
// 2038  * @return  zclProcMsgStatus_t
// 2039  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2040 zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
zcl_ProcessMessageMSG:
          CFI Block cfiBlock143 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
        CODE
// 2041 {
        FUNCALL zcl_ProcessMessageMSG, zclParseHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2042   endPointDesc_t *epDesc;
// 2043   zclIncoming_t inMsg;
// 2044   zclLibPlugin_t *pInPlugin;
// 2045   zclDefaultRspCmd_t defautlRspCmd;
// 2046   uint8 options;
// 2047   uint8 securityEnable;
// 2048   uint8 interPanMsg;
// 2049   ZStatus_t status = ZFailure;
// 2050   uint8 defaultResponseSent = FALSE;
        CLR       ?VB.0
// 2051 
// 2052   if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
        MOV       A,R6
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#0x3
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??zcl_ProcessMessageMSG_0
// 2053   {
// 2054     return ( ZCL_PROC_INVALID );   // Error, ignore the message
        MOV       R1,#0x1
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2055   }
// 2056 
// 2057   // Initialize
// 2058   rawAFMsg = (afIncomingMSGPacket_t *)pkt;
??zcl_ProcessMessageMSG_0:
        MOV       DPTR,#rawAFMsg
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2059   inMsg.msg = pkt;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2060   inMsg.attrCmd = NULL;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2061   inMsg.pData = NULL;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2062   inMsg.pDataLen = 0;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2063 
// 2064   inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
        MOV       A,R6
        ADD       A,#0x22
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       ?V0,R0
        MOV       ?V1,R1
        ; Setup parameters for call to function zclParseHdr
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_121:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
// 2065   inMsg.pDataLen = pkt->cmd.DataLength;
// 2066   inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
??CrossCallReturnLabel_115:
        MOV       A,R6
        ADD       A,#0x20
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        MOV       R0,A
        MOV       A,R3
        SUBB      A,R1
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R1,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
// 2067 
// 2068   // Temporary workaround to allow callback functions access to the
// 2069   // transaction sequence number.  Callback functions will call
// 2070   // zcl_getParsedTransSeqNum() to retrieve this number.
// 2071   savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
??CrossCallReturnLabel_116:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPTR,#savedZCLTransSeqNum
        MOVX      @DPTR,A
// 2072 
// 2073   // Find the wanted endpoint
// 2074   epDesc = afFindEndPointDesc( pkt->endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV       R1,A
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
// 2075   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,R3
        JNZ       ??zcl_ProcessMessageMSG_2
// 2076   {
// 2077     rawAFMsg = NULL;
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2078     return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
        MOV       R1,#0x2
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2079   }
// 2080 
// 2081   if ( ( epDesc->simpleDesc == NULL ) ||
// 2082        ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
// 2083                                 inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
??zcl_ProcessMessageMSG_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ??Subroutine55_0 & 0xFFFF
??CrossCallReturnLabel_132:
        JZ        ??zcl_ProcessMessageMSG_3
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        INC       DPTR
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R4,A
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,R1
        JNZ       ??zcl_ProcessMessageMSG_4
// 2084   {
// 2085     rawAFMsg = NULL;
??zcl_ProcessMessageMSG_3:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2086     return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
        MOV       R1,#0x3
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2087   }
// 2088 
// 2089 #if defined ( INTER_PAN )
// 2090   if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
??zcl_ProcessMessageMSG_4:
        ; Setup parameters for call to function StubAPS_InterPan
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        ADD       A,#0x10
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
        MOV       A,R1
        JZ        ??zcl_ProcessMessageMSG_5
// 2091   {
// 2092     // No foundation command is supported thru Inter-PAN communication.
// 2093     // But the Light Link cluster uses a different Frame Control format
// 2094     // for it's Inter-PAN messages, where the messages could be confused
// 2095     // with the foundation commands.
// 2096     if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        JNZ       ??zcl_ProcessMessageMSG_6
// 2097     {
// 2098       rawAFMsg = NULL;
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2099       return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
        MOV       R1,#0x4
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2100     }
// 2101 
// 2102     interPanMsg = TRUE;
??zcl_ProcessMessageMSG_6:
        SETB      ?VB.1
// 2103     options = AF_TX_OPTIONS_NONE;
        MOV       R2,#0x0
        SJMP      ??zcl_ProcessMessageMSG_7
// 2104   }
// 2105   else
// 2106 #endif
// 2107   {
// 2108     interPanMsg = FALSE;
??zcl_ProcessMessageMSG_5:
        CLR       ?VB.1
// 2109     options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
        ; Setup parameters for call to function zclGetClusterOption
        LCALL     ?Subroutine23 & 0xFFFF
// 2110   }
??CrossCallReturnLabel_43:
        LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV       A,R1
        ANL       A,#0x40
        MOV       R2,A
// 2111 
// 2112   // Find the appropriate plugin
// 2113   pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
??zcl_ProcessMessageMSG_7:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_124:
        MOV       DPTR,#plugins
        SJMP      ??zcl_ProcessMessageMSG_8
??zcl_ProcessMessageMSG_9:
        MOV       DPL,R0
        MOV       DPH,R1
??zcl_ProcessMessageMSG_8:
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_129:
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        CLR       C
        MOV       A,R4
        SUBB      A,?V0
        MOV       A,R5
        SUBB      A,?V1
        JC        ??zcl_ProcessMessageMSG_9
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,R4
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R5
        JC        ??zcl_ProcessMessageMSG_9
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x7
        JNZ       ??zcl_ProcessMessageMSG_11
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xb
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
// 2114 
// 2115   // Local and remote Security options must match except for Default Response command
// 2116   if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
// 2117   {
// 2118     securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
??zcl_ProcessMessageMSG_11:
        MOV       A,R2
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
        MOV       A,R6
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
// 2119 
// 2120     // Make sure that Clusters specifically defined to use security are received secure,
// 2121     // any other cluster that wants to use APS security will be allowed
// 2122     if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
// 2123     {
// 2124       if ( UNICAST_MSG( inMsg.msg ) )
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_48:
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_133:
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
// 2125       {
// 2126         // Send a Default Response command back with no Application Link Key security
// 2127         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
        MOV       A,R6
        ADD       A,#0x4
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       A,R6
        ADD       A,#0x14
        MOV       R6,A
        JNC       ??zcl_ProcessMessageMSG_14
        INC       R7
??zcl_ProcessMessageMSG_14:
        ; Setup parameters for call to function zclSetSecurityOption
        MOV       R4,#0x0
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
// 2128 
// 2129         defautlRspCmd.statusCode = status;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2130         defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2131         zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2132                                inMsg.msg->clusterId, &defautlRspCmd,
// 2133                                !inMsg.hdr.fc.direction, true,
// 2134                                inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V2,#0x1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
// 2135 
// 2136         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
        ; Setup parameters for call to function zclSetSecurityOption
        MOV       R4,#0x1
        LCALL     ?Subroutine28 & 0xFFFF
// 2137       }
??CrossCallReturnLabel_55:
        LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
// 2138 
// 2139       rawAFMsg = NULL;
??zcl_ProcessMessageMSG_13:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2140       return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
        MOV       R1,#0x5
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2141     }
// 2142   }
??zcl_ProcessMessageMSG_10:
        MOV       R0,#0x0
        MOV       R1,#0x0
// 2143 
// 2144   // Is this a foundation type message
// 2145   if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
??zcl_ProcessMessageMSG_12:
        MOV       C,?VB.1
        JNC       $+5
        LJMP      ??zcl_ProcessMessageMSG_15 & 0xFFFF
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x3
        JZ        $+5
        LJMP      ??zcl_ProcessMessageMSG_15 & 0xFFFF
// 2146   {
// 2147     if ( inMsg.hdr.fc.manuSpecific )
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_ProcessMessageMSG_16
// 2148     {
// 2149       // We don't support any manufacturer specific command
// 2150       status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
        MOV       R6,#-0x7c
        LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
// 2151     }
// 2152     else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
// 2153               ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
??zcl_ProcessMessageMSG_16:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,#0x17
        JC        $+5
        LJMP      ??zcl_ProcessMessageMSG_18 & 0xFFFF
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?S_SHL
        MOV       A,#zclCmdTable & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#(zclCmdTable >> 8) & 0xff
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_74:
        JNZ       $+5
        LJMP      ??zcl_ProcessMessageMSG_18 & 0xFFFF
// 2154     {
// 2155       zclParseCmd_t parseCmd;
// 2156 
// 2157       parseCmd.endpoint = pkt->endPoint;
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_73:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2158       parseCmd.dataLen = inMsg.pDataLen;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
// 2159       parseCmd.pData = inMsg.pData;
??CrossCallReturnLabel_117:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_118:
        ; Setup parameters for indirect call
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL     ?S_SHL
        MOV       A,#zclCmdTable & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#(zclCmdTable >> 8) & 0xff
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_96:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
// 2160 
// 2161       // Parse the command, remember that the return value is a pointer to allocated memory
// 2162       inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
        LCALL     ?CALL_IND
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine17 & 0xFFFF
// 2163       if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
??CrossCallReturnLabel_119:
        MOV       A,R0
        ORL       A,R1
        JZ        ??zcl_ProcessMessageMSG_19
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?S_SHL
        MOV       A,#(zclCmdTable + 2) & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_75:
        JZ        ??zcl_ProcessMessageMSG_20
// 2164       {
// 2165         // Process the command
// 2166         if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
// 2167         {
// 2168           // Couldn't find attribute in the table.
// 2169         }
// 2170       }
??CrossCallReturnLabel_39:
        LCALL     ?S_SHL
        MOV       A,#(zclCmdTable + 2) & 0xff
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_97:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
        LCALL     ?CALL_IND
// 2171 
// 2172       // Free the buffer
// 2173       if ( inMsg.attrCmd )
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_130:
        JZ        ??zcl_ProcessMessageMSG_19
// 2174       {
// 2175         zcl_mem_free( inMsg.attrCmd );
??zcl_ProcessMessageMSG_20:
        ; Setup parameters for call to function osal_mem_free
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine51_0 & 0xFFFF
// 2176       }
??CrossCallReturnLabel_106:
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2177 
// 2178       if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
??zcl_ProcessMessageMSG_19:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??zcl_ProcessMessageMSG_21
        XRL       A,#0x2
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0x3
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0x6
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0x8
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0xc
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0x11
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0x13
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0x15
        JZ        ??zcl_ProcessMessageMSG_21
        MOVX      A,@DPTR
        XRL       A,#0xb
        JZ        ??zcl_ProcessMessageMSG_21
// 2179       {
// 2180         rawAFMsg = NULL;
// 2181         return ( ZCL_PROC_SUCCESS ); // We're done
// 2182       }
// 2183 
// 2184       status = ZSuccess;
        MOV       R6,#0x0
        SJMP      ??zcl_ProcessMessageMSG_17
// 2185     }
// 2186     else
// 2187     {
// 2188       // Unsupported message
// 2189       status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
??zcl_ProcessMessageMSG_18:
        MOV       R6,#-0x7e
        SJMP      ??zcl_ProcessMessageMSG_17
// 2190     }
// 2191   }
// 2192   else  // Not a foundation type message, so it must be specific to the cluster ID.
// 2193   {
// 2194     if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
??zcl_ProcessMessageMSG_15:
        MOV       A,R0
        ORL       A,R1
        JZ        ??zcl_ProcessMessageMSG_22
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_35:
        JZ        ??zcl_ProcessMessageMSG_22
// 2195     {
// 2196       // The return value of the plugin function will be
// 2197       //  ZSuccess - Supported and need default response
// 2198       //  ZFailure - Unsupported
// 2199       //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
// 2200       //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
// 2201       //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
// 2202       //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
// 2203       status = pInPlugin->pfnIncomingHdlr( &inMsg );
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL     ?CALL_IND
        MOV       A,R1
        MOV       R6,A
// 2204       if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
        MOV       A,#-0x1
        XRL       A,R6
        JZ        ??zcl_ProcessMessageMSG_21
        MOV       C,?VB.1
        JNC       ??zcl_ProcessMessageMSG_23
        MOV       A,R6
        JNZ       ??zcl_ProcessMessageMSG_23
// 2205       {
// 2206         rawAFMsg = NULL;
??zcl_ProcessMessageMSG_21:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2207         return ( ZCL_PROC_SUCCESS ); // We're done
        MOV       R1,A
        LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2208       }
// 2209     }
// 2210 
// 2211     if ( status == ZFailure )
??zcl_ProcessMessageMSG_23:
        MOV       A,#0x1
        XRL       A,R6
        JNZ       ??zcl_ProcessMessageMSG_17
// 2212     {
// 2213       // Unsupported message
// 2214       if ( inMsg.hdr.fc.manuSpecific )
??zcl_ProcessMessageMSG_22:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zcl_ProcessMessageMSG_24
// 2215       {
// 2216         status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
        MOV       R6,#-0x7d
        SJMP      ??zcl_ProcessMessageMSG_17
// 2217       }
// 2218       else
// 2219       {
// 2220         status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
??zcl_ProcessMessageMSG_24:
        MOV       R6,#-0x7f
// 2221       }
// 2222     }
// 2223   }
// 2224 
// 2225   if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
??zcl_ProcessMessageMSG_17:
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_49:
        JNZ       ??zcl_ProcessMessageMSG_25
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_134:
        JNZ       ??zcl_ProcessMessageMSG_25
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ANL       A,#0x10
        JNZ       ??zcl_ProcessMessageMSG_25
// 2226   {
// 2227     // Send a Default Response command back
// 2228     defautlRspCmd.statusCode = status;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
// 2229     defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2230     zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2231                            inMsg.msg->clusterId, &defautlRspCmd,
// 2232                            !inMsg.hdr.fc.direction, true,
// 2233                            inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV       A,#0x7
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
// 2234     defaultResponseSent = TRUE;
        SETB      ?VB.0
// 2235   }
// 2236 
// 2237   rawAFMsg = NULL;
??zcl_ProcessMessageMSG_25:
        MOV       DPTR,#rawAFMsg
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2238   if ( status == ZSuccess )
        MOV       A,R6
        JNZ       ??zcl_ProcessMessageMSG_26
// 2239   {
// 2240     return ( ZCL_PROC_SUCCESS );
        MOV       R1,#0x0
        SJMP      ??zcl_ProcessMessageMSG_1
// 2241   }
// 2242   else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
??zcl_ProcessMessageMSG_26:
        MOV       A,#-0x7c
        XRL       A,R6
        MOV       C,?VB.0
        JNZ       ??zcl_ProcessMessageMSG_27
// 2243   {
// 2244     if ( defaultResponseSent )
        JNC       ??zcl_ProcessMessageMSG_28
// 2245     {
// 2246       return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
        MOV       R1,#0x7
        SJMP      ??zcl_ProcessMessageMSG_1
// 2247     }
// 2248     else
// 2249     {
// 2250       return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
??zcl_ProcessMessageMSG_28:
        MOV       R1,#0x6
        SJMP      ??zcl_ProcessMessageMSG_1
// 2251     }
// 2252   }
// 2253   else
// 2254   {
// 2255     if ( defaultResponseSent )
??zcl_ProcessMessageMSG_27:
        JNC       ??zcl_ProcessMessageMSG_29
// 2256     {
// 2257       return ( ZCL_PROC_NOT_HANDLED_DR );
        MOV       R1,#0x9
        SJMP      ??zcl_ProcessMessageMSG_1
// 2258     }
// 2259     else
// 2260     {
// 2261       return ( ZCL_PROC_NOT_HANDLED );
??zcl_ProcessMessageMSG_29:
        MOV       R1,#0x8
??zcl_ProcessMessageMSG_1:
        MOV       A,#0x15
// 2262     }
// 2263   }
        LJMP      ?Subroutine1 & 0xFFFF
// 2264 }
          CFI EndBlock cfiBlock143

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zcl_ProcessMessageMSG
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zcl_ProcessMessageMSG
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zcl_ProcessMessageMSG
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_74
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-4
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zcl_ProcessMessageMSG
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_75
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        ADDC      A,?V1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        RET
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function zcl_ProcessMessageMSG
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker154 Using cfiCommon1
          CFI (cfiPicker154) NoFunction
          CFI (cfiPicker154) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_95:
        RET
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiPicker154

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond155 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function zcl_ProcessMessageMSG
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_73
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-4
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zcl_ProcessMessageMSG
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_42
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-4
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function zcl_ProcessMessageMSG
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_43
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-4
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker159 Using cfiCommon1
          CFI (cfiPicker159) NoFunction
          CFI (cfiPicker159) Picker
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiPicker159

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond160 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zcl_SendDefaultRspCmd
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zcl_SendDefaultRspCmd
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zcl_ProcessMessageMSG
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zcl_ProcessMessageMSG
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        MOVX      A,@DPTR
        RRC       A
        RRC       A
        RRC       A
        ANL       A,#0x1f
        XRL       A,#0x1
        ANL       A,#0x1
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond168 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zcl_ProcessMessageMSG
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        MOVX      A,@DPTR
        ADD       A,#0x6
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R3,A
        MOV       A,#0x7
        RET
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_123
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zcl_ProcessMessageMSG
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_120
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zcl_ProcessMessageMSG
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zclFindAttrRec
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zcl_HandleExternal
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zcl_ProcessMessageMSG
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker179 Using cfiCommon1
          CFI (cfiPicker179) NoFunction
          CFI (cfiPicker179) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiPicker179

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond180 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zcl_ProcessMessageMSG
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function zcl_ProcessMessageMSG
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker185 Using cfiCommon1
          CFI (cfiPicker185) NoFunction
          CFI (cfiPicker185) Picker
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiPicker185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function zcl_ProcessMessageMSG
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_50
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-4
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function zcl_ProcessMessageMSG
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_51
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker189 Using cfiCommon1
          CFI (cfiPicker189) NoFunction
          CFI (cfiPicker189) Picker
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiPicker189

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond190 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zcl_ProcessMessageMSG
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker192 Using cfiCommon1
          CFI (cfiPicker192) NoFunction
          CFI (cfiPicker192) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        XCH       A,R0
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond193 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zcl_ProcessMessageMSG
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker195 Using cfiCommon1
          CFI (cfiPicker195) NoFunction
          CFI (cfiPicker195) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond196 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zcl_ProcessMessageMSG
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker198 Using cfiCommon1
          CFI (cfiPicker198) NoFunction
          CFI (cfiPicker198) Picker
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_91:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x7
        RET
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiPicker198

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond199 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond200 Using cfiCommon0
          CFI (cfiCond200) Function zcl_ProcessMessageMSG
          CFI (cfiCond200) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_40
          CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond200) CFA_SP SP+-4
          CFI (cfiCond200) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function zcl_ProcessMessageMSG
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_41
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-4
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function zcl_ProcessMessageMSG
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_133
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-4
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function zcl_ProcessMessageMSG
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_134
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker204 Using cfiCommon1
          CFI (cfiPicker204) NoFunction
          CFI (cfiPicker204) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond199
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiPicker204

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond205 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function zcl_ProcessMessageMSG
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zcl_ProcessMessageMSG
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function zcl_ProcessMessageMSG
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x2
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_133
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function zcl_ProcessMessageMSG
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_90:
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiCond213 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_131
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zcl_ProcessMessageMSG
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zcl_ProcessMessageMSG
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zcl_ProcessMessageMSG
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function zcl_getExternalFoundationHandler
          CFI Conditional ??CrossCallReturnLabel_125
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function zcl_SendCommand
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function zcl_SendCommand
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function zcl_ProcessMessageMSG
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function zcl_ProcessMessageMSG
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function zclFindClusterOption
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function zcl_SendCommand
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function zcl_ProcessMessageMSG
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function zcl_ProcessMessageMSG
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function zcl_ProcessMessageMSG
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker228 Using cfiCommon1
          CFI (cfiPicker228) NoFunction
          CFI (cfiPicker228) Picker
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_139:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiPicker228

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function zcl_SendDefaultRspCmd
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_64
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-4
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function zcl_ProcessMessageMSG
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function zcl_ProcessMessageMSG
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function zcl_ProcessMessageMSG
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_133
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-4
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function zcl_ProcessMessageMSG
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_134
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-4
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function zcl_SendCommand
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_131
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-4
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function zcl_ProcessMessageMSG
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_132
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-4
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function zcl_getExternalFoundationHandler
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_125
          CFI (cfiCond237) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond237) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond237) CFA_SP SP+-9
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function zcl_SendCommand
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_126
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-4
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function zcl_SendCommand
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_127
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond239) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond239) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond239) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-4
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function zcl_ProcessMessageMSG
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_129
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-4
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function zcl_ProcessMessageMSG
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_130
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-4
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zclFindClusterOption
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_128
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-4
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function zclParseInDefaultRspCmd
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker244 Using cfiCommon1
          CFI (cfiPicker244) NoFunction
          CFI (cfiPicker244) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiPicker244
// 2265 
// 2266 /*********************************************************************
// 2267  * PRIVATE FUNCTIONS
// 2268  *********************************************************************/
// 2269 
// 2270 /*********************************************************************
// 2271  * @fn      zclParseHdr
// 2272  *
// 2273  * @brief   Parse header of the ZCL format
// 2274  *
// 2275  * @param   hdr - place to put the frame control information
// 2276  * @param   pData - incoming buffer to parse
// 2277  *
// 2278  * @return  pointer past the header
// 2279  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2280 uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclParseHdr:
          CFI Block cfiBlock245 Using cfiCommon0
          CFI Function zclParseHdr
        CODE
// 2281 {
        FUNCALL zclParseHdr, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2282   // Clear the header
// 2283   zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x6
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2284 
// 2285   // Parse the Frame Control
// 2286   hdr->fc.type = zcl_FCType( *pData );
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xfc
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       R2,A
        MOV       A,R0
        ORL       A,R2
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ?Subroutine14 & 0xFFFF
// 2287   hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
??CrossCallReturnLabel_21:
        MOV       C,0xE0 /* A   */.2
        JNC       ??zclParseHdr_0
        SETB      B.0
        SJMP      ??zclParseHdr_1
??zclParseHdr_0:
        CLR       B.0
??zclParseHdr_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xfb
        MOVX      @DPTR,A
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       ?V2,A
        MOV       ?V3,#0x0
        MOV       A,#0x2
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOVX      A,@DPTR
        ORL       A,?V2
        LCALL     ?Subroutine14 & 0xFFFF
// 2288   if ( zcl_FCDirection( *pData ) )
??CrossCallReturnLabel_22:
        MOV       C,0xE0 /* A   */.3
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JNC       ??zclParseHdr_2
// 2289   {
// 2290     hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        ORL       A,#0x8
        SJMP      ??zclParseHdr_3
// 2291   }
// 2292   else
// 2293   {
// 2294     hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zclParseHdr_2:
        ANL       A,#0xf7
// 2295   }
??zclParseHdr_3:
        LCALL     ?Subroutine14 & 0xFFFF
// 2296 
// 2297   hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
??CrossCallReturnLabel_23:
        MOV       C,0xE0 /* A   */.4
        JNC       ??zclParseHdr_4
        SETB      B.0
        SJMP      ??zclParseHdr_5
??zclParseHdr_4:
        CLR       B.0
??zclParseHdr_5:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0xef
        MOVX      @DPTR,A
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       ?V2,A
        MOV       A,#0x4
        MOV       R0,#?V2
        LCALL     ?S_SHL
        MOVX      A,@DPTR
        ORL       A,?V2
        LCALL     ?Subroutine13 & 0xFFFF
// 2298   pData++;  // move past the frame control field
??CrossCallReturnLabel_19:
        MOV       R6,DPL
        MOV       R7,DPH
// 2299 
// 2300   // parse the manfacturer code
// 2301   if ( hdr->fc.manuSpecific )
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclParseHdr_6
// 2302   {
// 2303     hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine53_0 & 0xFFFF
// 2304     pData += 2;
??CrossCallReturnLabel_113:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclParseHdr_6
        INC       R7
// 2305   }
// 2306 
// 2307   // parse the Transaction Sequence Number
// 2308   hdr->transSeqNum = *pData++;
??zclParseHdr_6:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?Subroutine13 & 0xFFFF
// 2309 
// 2310   // parse the Cluster's command ID
// 2311   hdr->commandID = *pData++;
??CrossCallReturnLabel_20:
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_59:
        INC       DPTR
        MOVX      @DPTR,A
// 2312 
// 2313   // Should point to the frame payload
// 2314   return ( pData );
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LJMP      ??Subroutine52_0 & 0xFFFF
// 2315 }
          CFI EndBlock cfiBlock245

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond246 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function zclParseHdr
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker248 Using cfiCommon1
          CFI (cfiPicker248) NoFunction
          CFI (cfiPicker248) Picker
        MOVX      A,@DPTR
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiPicker248

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond249 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function zclParseHdr
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function zclParseHdr
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker252 Using cfiCommon1
          CFI (cfiPicker252) NoFunction
          CFI (cfiPicker252) Picker
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_76:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiPicker252

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function zclParseHdr
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function zclParseHdr
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_77:
        INC       DPTR
        RET
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256
// 2316 
// 2317 /*********************************************************************
// 2318  * @fn      zclBuildHdr
// 2319  *
// 2320  * @brief   Build header of the ZCL format
// 2321  *
// 2322  * @param   hdr - outgoing header information
// 2323  * @param   pData - outgoing header space
// 2324  *
// 2325  * @return  pointer past the header
// 2326  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2327 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclBuildHdr:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function zclBuildHdr
        CODE
// 2328 {
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2329   // Build the Frame Control byte
// 2330   *pData = hdr->fc.type;
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x3
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine57_0 & 0xFFFF
// 2331   *pData |= hdr->fc.manuSpecific << 2;
??CrossCallReturnLabel_142:
        ANL       A,#0x4
        LCALL     ?Subroutine15 & 0xFFFF
// 2332   *pData |= hdr->fc.direction << 3;
??CrossCallReturnLabel_140:
        ANL       A,#0x8
        LCALL     ?Subroutine15 & 0xFFFF
// 2333   *pData |= hdr->fc.disableDefaultRsp << 4;
??CrossCallReturnLabel_141:
        ANL       A,#0x10
        MOV       R0,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ORL       A,R0
        MOVX      @DPTR,A
// 2334   pData++;  // move past the frame control field
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
// 2335 
// 2336   // Add the manfacturer code
// 2337   if ( hdr->fc.manuSpecific )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0x4
        JZ        ??zclBuildHdr_0
// 2338   {
// 2339     *pData++ = LO_UINT16( hdr->manuCode );
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine12 & 0xFFFF
// 2340     *pData++ = HI_UINT16( hdr->manuCode );
// 2341   }
??CrossCallReturnLabel_17:
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       R4,A
        JNC       ??zclBuildHdr_0
        INC       R5
// 2342 
// 2343   // Add the Transaction Sequence Number
// 2344   *pData++ = hdr->transSeqNum;
??zclBuildHdr_0:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      @DPTR,A
// 2345 
// 2346   // Add the Cluster's command ID
// 2347   *pData++ = hdr->commandID;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine34 & 0xFFFF
// 2348 
// 2349   // Should point to the frame payload
// 2350   return ( pData );
??CrossCallReturnLabel_62:
        MOV       R2,A
        CLR       A
        ADDC      A,R5
        MOV       R3,A
        SJMP      ??Subroutine58_0
// 2351 }
          CFI EndBlock cfiBlock257

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond258 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function zclBuildHdr
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-2
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker260 Using cfiCommon1
          CFI (cfiPicker260) NoFunction
          CFI (cfiPicker260) Picker
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R4
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiPicker260

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond261 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function zclBuildHdr
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-2
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        MOV       R0,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ORL       A,R0
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_142
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function zclBuildHdr
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function zclBuildHdr
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker267 Using cfiCommon1
          CFI (cfiPicker267) NoFunction
          CFI (cfiPicker267) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiPicker267

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock268 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
          CFI EndBlock cfiBlock268
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiBlock269 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock269
// 2352 
// 2353 /*********************************************************************
// 2354  * @fn      zclCalcHdrSize
// 2355  *
// 2356  * @brief   Calculate the number of bytes needed for an outgoing
// 2357  *          ZCL header.
// 2358  *
// 2359  * @param   hdr - outgoing header information
// 2360  *
// 2361  * @return  returns the number of bytes needed
// 2362  */
// 2363 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
// 2364 {
// 2365   uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
// 2366 
// 2367   // Add the manfacturer code
// 2368   if ( hdr->fc.manuSpecific )
// 2369   {
// 2370     needed += 2;
// 2371   }
// 2372 
// 2373   return ( needed );
// 2374 }
// 2375 
// 2376 /*********************************************************************
// 2377  * @fn      zclFindPlugin
// 2378  *
// 2379  * @brief   Find the right plugin for a cluster ID
// 2380  *
// 2381  * @param   clusterID - cluster ID to look for
// 2382  * @param   profileID - profile ID
// 2383  *
// 2384  * @return  pointer to plugin, NULL if not found
// 2385  */
// 2386 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
// 2387 {
// 2388   zclLibPlugin_t *pLoop = plugins;
// 2389 
// 2390   (void)profileID;  // Intentionally unreferenced parameter
// 2391 
// 2392   while ( pLoop != NULL )
// 2393   {
// 2394     if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
// 2395     {
// 2396       return ( pLoop );
// 2397     }
// 2398 
// 2399     pLoop = pLoop->next;
// 2400   }
// 2401 
// 2402   return ( (zclLibPlugin_t *)NULL );
// 2403 }
// 2404 
// 2405 #ifdef ZCL_DISCOVER
// 2406 /*********************************************************************
// 2407  * @fn      zclFindCmdRecsList
// 2408  *
// 2409  * @brief   Find the right command record list for an endpoint
// 2410  *
// 2411  * @param   endpoint - endpoint to look for
// 2412  *
// 2413  * @return  pointer to record list, NULL if not found
// 2414  */
// 2415 static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
// 2416 {
// 2417   zclCmdRecsList_t *pLoop = gpCmdList;
// 2418 
// 2419   while ( pLoop != NULL )
// 2420   {
// 2421     if ( pLoop->endpoint == endpoint )
// 2422     {
// 2423       return ( pLoop );
// 2424     }
// 2425 
// 2426     pLoop = pLoop->pNext;
// 2427   }
// 2428 
// 2429   return ( NULL );
// 2430 }
// 2431 
// 2432 /*********************************************************************
// 2433  * @fn      zclFindCmdRec
// 2434  *
// 2435  * @brief   Find the command record that matchs the parameters
// 2436  *
// 2437  * @param   endpoint - Application's endpoint
// 2438  * @param   clusterID - cluster ID
// 2439  * @param   attrId - attribute looking for
// 2440  * @param   pAttr - attribute record to be returned
// 2441  *
// 2442  * @return  TRUE if record found. FALSE, otherwise.
// 2443  */
// 2444 uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
// 2445 {
// 2446   uint8 i;
// 2447   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2448 
// 2449   if ( pRec != NULL )
// 2450   {
// 2451     for ( i = 0; i < pRec->numCommands; i++ )
// 2452     {
// 2453       if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
// 2454       {
// 2455         *pCmd = pRec->pCmdRecs[i];
// 2456 
// 2457         return ( TRUE ); // EMBEDDED RETURN
// 2458       }
// 2459     }
// 2460   }
// 2461 
// 2462   return ( FALSE );
// 2463 }
// 2464 #endif // ZCL_DISCOVER
// 2465 
// 2466 /*********************************************************************
// 2467  * @fn      zclFindAttrRecsList
// 2468  *
// 2469  * @brief   Find the right attribute record list for an endpoint
// 2470  *
// 2471  * @param   clusterID - endpointto look for
// 2472  *
// 2473  * @return  pointer to record list, NULL if not found
// 2474  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2475 static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
zclFindAttrRecsList:
          CFI Block cfiBlock270 Using cfiCommon0
          CFI Function zclFindAttrRecsList
        CODE
// 2476 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2477   zclAttrRecsList *pLoop = attrList;
        MOV       DPTR,#attrList
        SJMP      ??zclFindAttrRecsList_0
// 2478 
// 2479   while ( pLoop != NULL )
// 2480   {
// 2481     if ( pLoop->endpoint == endpoint )
// 2482     {
// 2483       return ( pLoop );
// 2484     }
// 2485 
// 2486     pLoop = pLoop->next;
??zclFindAttrRecsList_1:
        MOV       DPL,R2
        MOV       DPH,R3
??zclFindAttrRecsList_0:
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_30:
        JZ        ??zclFindAttrRecsList_2
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??zclFindAttrRecsList_1
        SJMP      ??zclFindAttrRecsList_3
// 2487   }
// 2488 
// 2489   return ( NULL );
??zclFindAttrRecsList_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclFindAttrRecsList_3:
        LJMP      ?Subroutine0 & 0xFFFF
// 2490 }
          CFI EndBlock cfiBlock270
// 2491 
// 2492 /*********************************************************************
// 2493  * @fn      zclFindAttrRec
// 2494  *
// 2495  * @brief   Find the attribute record that matchs the parameters
// 2496  *
// 2497  * @param   endpoint - Application's endpoint
// 2498  * @param   clusterID - cluster ID
// 2499  * @param   attrId - attribute looking for
// 2500  * @param   pAttr - attribute record to be returned
// 2501  *
// 2502  * @return  TRUE if record found. FALSE, otherwise.
// 2503  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2504 uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
zclFindAttrRec:
          CFI Block cfiBlock271 Using cfiCommon0
          CFI Function zclFindAttrRec
        CODE
// 2505 {
        FUNCALL zclFindAttrRec, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2506   uint8 x;
// 2507   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R4,?V4
        MOV       R5,?V5
// 2508 
// 2509   if ( pRec != NULL )
        MOV       A,R4
        ORL       A,R5
        JNZ       $+5
        LJMP      ??zclFindAttrRec_0 & 0xFFFF
// 2510   {
// 2511     for ( x = 0; x < pRec->numAttributes; x++ )
        MOV       R2,#0x0
        SJMP      ??zclFindAttrRec_1
??zclFindAttrRec_2:
        INC       R2
??zclFindAttrRec_1:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,R2
        CLR       C
        SUBB      A,R0
        JC        $+5
        LJMP      ??zclFindAttrRec_0 & 0xFFFF
// 2512     {
// 2513       if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
        MOV       A,R2
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#0x3
        MOV       R0,#?V4
        LCALL     ?S_SHL
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_52:
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,?V0
        XRL       A,R0
        JNZ       ??zclFindAttrRec_3
        MOV       A,?V1
        XRL       A,R1
??zclFindAttrRec_3:
        JNZ       ??zclFindAttrRec_2
        MOV       A,R2
        MOV       ?V4,A
        MOV       ?V5,#0x0
        MOV       A,#0x3
        MOV       R0,#?V4
        LCALL     ?S_SHL
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_53:
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,R6
        XRL       A,R0
        JNZ       ??zclFindAttrRec_4
        MOV       A,R7
        XRL       A,R1
??zclFindAttrRec_4:
        JNZ       ??zclFindAttrRec_2
// 2514       {
// 2515         *pAttr = pRec->attrs[x];
        MOV       A,R2
        MOV       ?V0,A
        MOV       ?V1,#0x0
        MOV       A,#0x3
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,?V0
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V1
        MOV       DPL,R0
        MOV       DPH,A
        PUSH      DPL
          CFI CFA_SP SP+-1
        PUSH      DPH
          CFI CFA_SP SP+-2
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine54_0 & 0xFFFF
??CrossCallReturnLabel_122:
        POP       DPH
          CFI CFA_SP SP+-1
        POP       DPL
          CFI CFA_SP SP+0
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_CODE
// 2516 
// 2517         return ( TRUE ); // EMBEDDED RETURN
        MOV       R1,#0x1
        SJMP      ??zclFindAttrRec_5
// 2518       }
// 2519     }
// 2520   }
// 2521 
// 2522   return ( FALSE );
??zclFindAttrRec_0:
        MOV       R1,#0x0
??zclFindAttrRec_5:
        LJMP      ?Subroutine4 & 0xFFFF
// 2523 }
          CFI EndBlock cfiBlock271

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond272 Using cfiCommon0
          CFI Function zclFindAttrRec
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function zclFindAttrRec
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-2
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker274 Using cfiCommon1
          CFI (cfiPicker274) NoFunction
          CFI (cfiPicker274) Picker
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,?V4
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,?V5
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiPicker274
// 2524 
// 2525 #if defined ( ZCL_STANDALONE )
// 2526 /*********************************************************************
// 2527  * @fn      zclSetAttrRecList
// 2528  *
// 2529  * @brief   Set attribute record list for end point
// 2530  *
// 2531  * @param   endpoint - endpoint the attribute list belongs to
// 2532  * @param   numAttr - number of attributes in list
// 2533  * @param   attrList - array of attribute records.
// 2534  *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
// 2535  *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
// 2536  *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
// 2537  *                     ATTRIBUTE INFO
// 2538  *
// 2539  * @return  TRUE if successful, FALSE otherwise.
// 2540  */
// 2541 uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
// 2542 {
// 2543   zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
// 2544 
// 2545   if ( pRecsList != NULL )
// 2546   {
// 2547     pRecsList->numAttributes = numAttr;
// 2548     pRecsList->attrs = attrList;
// 2549     return ( TRUE );
// 2550   }
// 2551 
// 2552   return ( FALSE );
// 2553 }
// 2554 
// 2555 #endif // ZCL_STANDALONE
// 2556 
// 2557 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
// 2558 /*********************************************************************
// 2559  * @fn      zclGetReadWriteCB
// 2560  *
// 2561  * @brief   Get the Read/Write callback function pointer for a given endpoint.
// 2562  *
// 2563  * @param   endpoint - Application's endpoint
// 2564  *
// 2565  * @return  Read/Write CB, NULL if not found
// 2566  */
// 2567 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
// 2568 {
// 2569   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2570 
// 2571   if ( pRec != NULL )
// 2572   {
// 2573     return ( pRec->pfnReadWriteCB );
// 2574   }
// 2575 
// 2576   return ( NULL );
// 2577 }
// 2578 
// 2579 /*********************************************************************
// 2580  * @fn      zclGetAuthorizeCB
// 2581  *
// 2582  * @brief   Get the Read/Write Authorization callback function pointer
// 2583  *          for a given endpoint.
// 2584  *
// 2585  * @param   endpoint - Application's endpoint
// 2586  *
// 2587  * @return  Authorization CB, NULL if not found
// 2588  */
// 2589 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
// 2590 {
// 2591   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2592 
// 2593   if ( pRec != NULL )
// 2594   {
// 2595     return ( pRec->pfnAuthorizeCB );
// 2596   }
// 2597 
// 2598   return ( NULL );
// 2599 }
// 2600 #endif // ZCL_READ || ZCL_WRITE
// 2601 
// 2602 /*********************************************************************
// 2603  * @fn      zclFindClusterOption
// 2604  *
// 2605  * @brief   Find the option record that matchs the cluster id
// 2606  *
// 2607  * @param   endpoint - Application's endpoint
// 2608  * @param   clusterID - cluster ID looking for
// 2609  *
// 2610  * @return  pointer to clutser option, NULL if not found
// 2611  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2612 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
zclFindClusterOption:
          CFI Block cfiBlock275 Using cfiCommon0
          CFI Function zclFindClusterOption
        CODE
// 2613 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R7,A
// 2614   zclClusterOptionList *pLoop;
// 2615 
// 2616   pLoop = clusterOptionList;
        MOV       DPTR,#clusterOptionList
        SJMP      ??zclFindClusterOption_0
// 2617   while ( pLoop != NULL )
// 2618   {
// 2619     if ( pLoop->endpoint == endpoint )
// 2620     {
// 2621       uint8 x;
// 2622       for ( x = 0; x < pLoop->numOptions; x++ )
// 2623       {
// 2624         if ( pLoop->options[x].clusterID == clusterID )
// 2625         {
// 2626           return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
// 2627         }
// 2628       }
// 2629     }
// 2630 
// 2631     pLoop = pLoop->next;
??zclFindClusterOption_1:
        MOV       DPL,R0
        MOV       DPH,R1
??zclFindClusterOption_0:
        LCALL     ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_128:
        JZ        ??zclFindClusterOption_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
        JNZ       ??zclFindClusterOption_1
        MOV       R6,#0x0
        SJMP      ??zclFindClusterOption_3
??zclFindClusterOption_4:
        INC       R6
??zclFindClusterOption_3:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,R6
        CLR       C
        SUBB      A,R4
        JNC       ??zclFindClusterOption_1
        MOV       A,R6
        MOV       B,#0x3
        MUL       AB
        MOV       R4,A
        MOV       ?V0,B
        MOV       R5,?V0
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R5
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??zclFindClusterOption_5
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??zclFindClusterOption_5:
        JNZ       ??zclFindClusterOption_4
        MOV       A,R5
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,R4
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       R3,A
        SJMP      ??zclFindClusterOption_6
// 2632   }
// 2633 
// 2634   return ( NULL );
??zclFindClusterOption_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
??zclFindClusterOption_6:
        LJMP      ??Subroutine58_0 & 0xFFFF
// 2635 }
          CFI EndBlock cfiBlock275
// 2636 
// 2637 /*********************************************************************
// 2638  * @fn      zclGetClusterOption
// 2639  *
// 2640  * @brief   Get the option record that matchs the cluster id
// 2641  *
// 2642  * @param   endpoint - Application's endpoint
// 2643  * @param   clusterID - cluster ID looking for
// 2644  *
// 2645  * @return  clutser option, AF_TX_OPTIONS_NONE if not found
// 2646  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2647 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
zclGetClusterOption:
          CFI Block cfiBlock276 Using cfiCommon0
          CFI Function zclGetClusterOption
        CODE
// 2648 {
        FUNCALL zclGetClusterOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2649   uint8 option;
// 2650   zclOptionRec_t *pOption;
// 2651 
// 2652   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
        MOV       DPL,R2
        MOV       DPH,R3
// 2653   if ( pOption != NULL )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclGetClusterOption_0
// 2654   {
// 2655     option = pOption->option;
// 2656     if ( !ZG_SECURE_ENABLED )
// 2657     {
// 2658       option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
// 2659     }
// 2660 
// 2661     return ( option ); // EMBEDDED RETURN
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        SJMP      ??zclGetClusterOption_1
// 2662   }
// 2663 
// 2664   return ( AF_TX_OPTIONS_NONE );
??zclGetClusterOption_0:
        MOV       R1,#0x0
??zclGetClusterOption_1:
          CFI EndBlock cfiBlock276
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 2665 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock277 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock277
// 2666 
// 2667 /*********************************************************************
// 2668  * @fn      zclSetSecurityOption
// 2669  *
// 2670  * @brief   Set the security option for the cluster id
// 2671  *
// 2672  * @param   endpoint - Application's endpoint
// 2673  * @param   clusterID - cluster ID looking for
// 2674  * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
// 2675  *
// 2676  * @return  none
// 2677  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2678 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
zclSetSecurityOption:
          CFI Block cfiBlock278 Using cfiCommon0
          CFI Function zclSetSecurityOption
        CODE
// 2679 {
        FUNCALL zclSetSecurityOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R4
        MOV       R7,A
// 2680   zclOptionRec_t *pOption;
// 2681 
// 2682   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
        MOV       DPL,R2
        MOV       DPH,R3
// 2683   if ( pOption != NULL )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??zclSetSecurityOption_0
// 2684   {
// 2685     if ( enable )
        MOV       A,R7
        INC       DPTR
        INC       DPTR
        JZ        ??zclSetSecurityOption_1
// 2686     {
// 2687       pOption->option |= AF_EN_SECURITY;
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.6
        SJMP      ??zclSetSecurityOption_2
// 2688     }
// 2689     else
// 2690     {
// 2691       pOption->option &= (AF_EN_SECURITY ^ 0xFF);
??zclSetSecurityOption_1:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.6
??zclSetSecurityOption_2:
        MOVX      @DPTR,A
// 2692     }
// 2693   }
// 2694 }
??zclSetSecurityOption_0:
        SJMP      ?Subroutine3
          CFI EndBlock cfiBlock278
// 2695 
// 2696 #ifdef ZCL_DISCOVER
// 2697 /*********************************************************************
// 2698  * @fn      zclFindNextCmdRec
// 2699  *
// 2700  * @brief   Find the command (or next) record that matchs the parameters
// 2701  *
// 2702  * @param   endpoint - Application's endpoint
// 2703  * @param   clusterID - cluster ID
// 2704  * @param   commandID - command ID from requesting command
// 2705  * @param   direction- direction of received command
// 2706  * @param   pCmdID - command looking for
// 2707  * @param   pCmd - command information within command record list
// 2708  *
// 2709  * @return  pointer to command record, NULL no more records of this cluster
// 2710  */
// 2711 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
// 2712                                 uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
// 2713 {
// 2714   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2715   uint8 i;
// 2716 
// 2717   if ( pRec != NULL )
// 2718   {
// 2719     for ( i = 0; i < pRec->numCommands; i++ )
// 2720     {
// 2721       if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
// 2722           ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
// 2723       {
// 2724         if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 2725         {
// 2726           if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
// 2727           {
// 2728             *pCmd = pRec->pCmdRecs[i];
// 2729 
// 2730             // Update command ID
// 2731             *pCmdID = pCmd->cmdID;
// 2732 
// 2733             return ( TRUE ); // EMBEDDED RETURN
// 2734           }
// 2735           else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
// 2736           {
// 2737             *pCmd = pRec->pCmdRecs[i];
// 2738 
// 2739             // Update command ID
// 2740             *pCmdID = pCmd->cmdID;
// 2741 
// 2742             return ( TRUE ); // EMBEDDED RETURN
// 2743           }
// 2744         }
// 2745         else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
// 2746         {
// 2747           if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
// 2748           {
// 2749             *pCmd = pRec->pCmdRecs[i];
// 2750 
// 2751             // Update command ID
// 2752             *pCmdID = pCmd->cmdID;
// 2753 
// 2754             return ( TRUE ); // EMBEDDED RETURN
// 2755           }
// 2756           else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
// 2757           {
// 2758             *pCmd = pRec->pCmdRecs[i];
// 2759 
// 2760             // Update command ID
// 2761             *pCmdID = pCmd->cmdID;
// 2762 
// 2763             return ( TRUE ); // EMBEDDED RETURN
// 2764           }
// 2765         }
// 2766         else
// 2767         {
// 2768           return ( FALSE ); // Incorrect Command ID
// 2769         }
// 2770       }
// 2771     }
// 2772   }
// 2773 
// 2774   return ( FALSE );
// 2775 }
// 2776 
// 2777 /*********************************************************************
// 2778  * @fn      zclFindNextAttrRec
// 2779  *
// 2780  * @brief   Find the attribute (or next) record that matchs the parameters
// 2781  *
// 2782  * @param   endpoint - Application's endpoint
// 2783  * @param   clusterID - cluster ID
// 2784  * @param   attr - attribute looking for
// 2785  *
// 2786  * @return  pointer to attribute record, NULL if not found
// 2787  */
// 2788 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
// 2789                                  uint16 *attrId, zclAttrRec_t *pAttr )
// 2790 {
// 2791   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2792   uint8 attrDir;
// 2793 
// 2794   if ( pRec != NULL )
// 2795   {
// 2796     uint16 x;
// 2797 
// 2798     for ( x = 0; x < pRec->numAttributes; x++ )
// 2799     {
// 2800       if ( ( pRec->attrs[x].clusterID == clusterID ) &&
// 2801            ( pRec->attrs[x].attr.attrId >= *attrId ) )
// 2802       {
// 2803         // also make sure direction is right
// 2804         attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
// 2805         if ( attrDir == direction )
// 2806         {
// 2807           // return attribute and found attribute ID
// 2808           *pAttr = pRec->attrs[x];
// 2809           *attrId = pAttr->attr.attrId;
// 2810 
// 2811           return ( TRUE ); // EMBEDDED RETURN
// 2812         }
// 2813       }
// 2814     }
// 2815   }
// 2816 
// 2817   return ( FALSE );
// 2818 }
// 2819 #endif // ZCL_DISCOVER
// 2820 
// 2821 /*********************************************************************
// 2822  * @fn      zclSerializeData
// 2823  *
// 2824  * @brief   Builds a buffer from the attribute data to sent out over
// 2825  *          the air.
// 2826  *          NOTE - Not compatible with application's attributes callbacks.
// 2827  *
// 2828  * @param   dataType - data types defined in zcl.h
// 2829  * @param   attrData - pointer to the attribute data
// 2830  * @param   buf - where to put the serialized data
// 2831  *
// 2832  * @return  pointer to end of destination buffer
// 2833  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2834 uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
zclSerializeData:
          CFI Block cfiBlock279 Using cfiCommon0
          CFI Function zclSerializeData
        CODE
// 2835 {
        FUNCALL zclSerializeData, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
// 2836   uint8 *pStr;
// 2837   uint16 len;
// 2838 
// 2839   if ( attrData == NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2840   {
// 2841     return ( buf );
// 2842   }
// 2843 
// 2844   switch ( dataType )
        MOV       A,R1
        LCALL     ?UC_SWITCH_SPARSE
`?<Jumptable for zclSerializeData>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        65
        DATA
        DATA8
        DATA
        DATA8
        DB        66
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        67
        DATA
        DATA8
        DATA
        DATA8
        DB        68
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        224
        DATA
        DATA8
        DATA
        DATA8
        DB        226
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        232
        DATA
        DATA8
        DATA
        DATA8
        DB        233
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        33
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        26
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        27
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        33
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        35
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        36
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        37
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        38
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        39
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        40
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        41
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        42
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        43
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        44
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        45
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        46
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        47
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        48
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        49
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        56
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        57
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        58
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        234
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        240
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        241
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_0
        CODE
// 2845   {
// 2846     case ZCL_DATATYPE_DATA8:
// 2847     case ZCL_DATATYPE_BOOLEAN:
// 2848     case ZCL_DATATYPE_BITMAP8:
// 2849     case ZCL_DATATYPE_INT8:
// 2850     case ZCL_DATATYPE_UINT8:
// 2851     case ZCL_DATATYPE_ENUM8:
// 2852       *buf++ = *((uint8 *)attrData);
??zclSerializeData_5:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
// 2853        break;
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2854 
// 2855     case ZCL_DATATYPE_DATA16:
// 2856     case ZCL_DATATYPE_BITMAP16:
// 2857     case ZCL_DATATYPE_UINT16:
// 2858     case ZCL_DATATYPE_INT16:
// 2859     case ZCL_DATATYPE_ENUM16:
// 2860     case ZCL_DATATYPE_SEMI_PREC:
// 2861     case ZCL_DATATYPE_CLUSTER_ID:
// 2862     case ZCL_DATATYPE_ATTR_ID:
// 2863       *buf++ = LO_UINT16( *((uint16*)attrData) );
??zclSerializeData_4:
        LCALL     ?Subroutine7 & 0xFFFF
// 2864       *buf++ = HI_UINT16( *((uint16*)attrData) );
??CrossCallReturnLabel_4:
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        JNC       ??zclSerializeData_12
        INC       R3
// 2865       break;
??zclSerializeData_12:
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2866 
// 2867     case ZCL_DATATYPE_DATA24:
// 2868     case ZCL_DATATYPE_BITMAP24:
// 2869     case ZCL_DATATYPE_UINT24:
// 2870     case ZCL_DATATYPE_INT24:
// 2871       *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
??zclSerializeData_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V4
        LCALL     ?Subroutine40 & 0xFFFF
// 2872       *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
??CrossCallReturnLabel_78:
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,?V5
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ?Subroutine40 & 0xFFFF
// 2873       *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
??CrossCallReturnLabel_79:
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??zclSerializeData_13
        INC       R3
// 2874       break;
??zclSerializeData_13:
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2875 
// 2876     case ZCL_DATATYPE_DATA32:
// 2877     case ZCL_DATATYPE_BITMAP32:
// 2878     case ZCL_DATATYPE_UINT32:
// 2879     case ZCL_DATATYPE_INT32:
// 2880     case ZCL_DATATYPE_SINGLE_PREC:
// 2881     case ZCL_DATATYPE_TOD:
// 2882     case ZCL_DATATYPE_DATE:
// 2883     case ZCL_DATATYPE_UTC:
// 2884     case ZCL_DATATYPE_BAC_OID:
// 2885       buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
??zclSerializeData_3:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2886       break;
        LJMP      ??zclSerializeData_0 & 0xFFFF
// 2887 
// 2888     case ZCL_DATATYPE_UINT40:
// 2889     case ZCL_DATATYPE_INT40:
// 2890       pStr = (uint8*)attrData;
// 2891       buf = zcl_memcpy( buf, pStr, 5 );
??zclSerializeData_7:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x5
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 2892       break;
// 2893 
// 2894     case ZCL_DATATYPE_UINT48:
// 2895     case ZCL_DATATYPE_INT48:
// 2896       pStr = (uint8*)attrData;
// 2897       buf = zcl_memcpy( buf, pStr, 6 );
??zclSerializeData_8:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x6
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 2898       break;
// 2899 
// 2900     case ZCL_DATATYPE_UINT56:
// 2901     case ZCL_DATATYPE_INT56:
// 2902       pStr = (uint8*)attrData;
// 2903       buf = zcl_memcpy( buf, pStr, 7 );
??zclSerializeData_9:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x7
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 2904       break;
// 2905 
// 2906     case ZCL_DATATYPE_DOUBLE_PREC:
// 2907     case ZCL_DATATYPE_IEEE_ADDR:
// 2908     case ZCL_DATATYPE_UINT64:
// 2909     case ZCL_DATATYPE_INT64:
// 2910       pStr = (uint8*)attrData;
// 2911       buf = zcl_memcpy( buf, pStr, 8 );
??zclSerializeData_10:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x8
        SJMP      ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 2912       break;
// 2913 
// 2914     case ZCL_DATATYPE_CHAR_STR:
// 2915     case ZCL_DATATYPE_OCTET_STR:
// 2916       pStr = (uint8*)attrData;
// 2917       len = *pStr;
// 2918       buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
??zclSerializeData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R4,A
        CLR       A
        ADDC      A,#0x0
        SJMP      ??zclSerializeData_15
          CFI CFA_XSP16 add(XSP16, 16)
// 2919       break;
// 2920 
// 2921     case ZCL_DATATYPE_LONG_CHAR_STR:
// 2922     case ZCL_DATATYPE_LONG_OCTET_STR:
// 2923       pStr = (uint8*)attrData;
// 2924       len = BUILD_UINT16( pStr[0], pStr[1] );
// 2925       buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
??zclSerializeData_2:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       R4,A
        CLR       A
        ADDC      A,R1
??zclSerializeData_15:
        MOV       R5,A
        SJMP      ??zclSerializeData_16
          CFI CFA_XSP16 add(XSP16, 16)
// 2926       break;
// 2927 
// 2928     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 2929       pStr = (uint8*)attrData;
// 2930       buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
??zclSerializeData_11:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,R6
        MOV       ?V5,R7
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x10
??zclSerializeData_14:
        MOV       R5,#0x0
??zclSerializeData_16:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2931       break;
// 2932 
// 2933     case ZCL_DATATYPE_NO_DATA:
// 2934     case ZCL_DATATYPE_UNKNOWN:
// 2935       // Fall through
// 2936 
// 2937     default:
// 2938       break;
// 2939   }
// 2940 
// 2941   return ( buf );
??zclSerializeData_0:
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
// 2942 }
          CFI EndBlock cfiBlock279

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond280 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function zclParseHdr
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_22
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-4
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function zclParseHdr
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_23
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-4
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function zcl_HandleExternal
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_18
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-4
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function zclParseHdr
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_19
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-4
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function zclParseHdr
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_20
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-4
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function zclSerializeData
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-2
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function zclSerializeData
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond287) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond287) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-2
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function zclSerializeData
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_4
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-4
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function zclParseInDefaultRspCmd
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_5
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-4
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker290 Using cfiCommon1
          CFI (cfiPicker290) NoFunction
          CFI (cfiPicker290) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiPicker290
// 2943 
// 2944 #ifdef ZCL_REPORT
// 2945 /*********************************************************************
// 2946  * @fn      zclAnalogDataType
// 2947  *
// 2948  * @brief   Checks to see if Data Type is Analog
// 2949  *
// 2950  * @param   dataType - data type
// 2951  *
// 2952  * @return  TRUE if data type is analog
// 2953  */
// 2954 uint8 zclAnalogDataType( uint8 dataType )
// 2955 {
// 2956   uint8 analog;
// 2957 
// 2958   switch ( dataType )
// 2959   {
// 2960     case ZCL_DATATYPE_UINT8:
// 2961     case ZCL_DATATYPE_UINT16:
// 2962     case ZCL_DATATYPE_UINT24:
// 2963     case ZCL_DATATYPE_UINT32:
// 2964     case ZCL_DATATYPE_UINT40:
// 2965     case ZCL_DATATYPE_UINT48:
// 2966     case ZCL_DATATYPE_UINT56:
// 2967     case ZCL_DATATYPE_UINT64:
// 2968     case ZCL_DATATYPE_INT8:
// 2969     case ZCL_DATATYPE_INT16:
// 2970     case ZCL_DATATYPE_INT24:
// 2971     case ZCL_DATATYPE_INT32:
// 2972     case ZCL_DATATYPE_INT40:
// 2973     case ZCL_DATATYPE_INT48:
// 2974     case ZCL_DATATYPE_INT56:
// 2975     case ZCL_DATATYPE_INT64:
// 2976     case ZCL_DATATYPE_SEMI_PREC:
// 2977     case ZCL_DATATYPE_SINGLE_PREC:
// 2978     case ZCL_DATATYPE_DOUBLE_PREC:
// 2979     case ZCL_DATATYPE_TOD:
// 2980     case ZCL_DATATYPE_DATE:
// 2981     case ZCL_DATATYPE_UTC:
// 2982       analog = TRUE;
// 2983       break;
// 2984 
// 2985     default:
// 2986       analog = FALSE;
// 2987       break;
// 2988   }
// 2989 
// 2990   return ( analog );
// 2991 }
// 2992 
// 2993 /*********************************************************************
// 2994  * @fn      zclIsLittleEndianMachine
// 2995  *
// 2996  * @brief   Verifies endianness in system.
// 2997  *
// 2998  * @param   none
// 2999  *
// 3000  * @return  MSB-00 or LSB-01 depending on endianness in the system
// 3001  */
// 3002 static int zclIsLittleEndianMachine(void)
// 3003 {
// 3004   uint16 test = 0x0001;
// 3005 
// 3006   return (*((uint8 *)(&test)));
// 3007 }
// 3008 
// 3009 /*********************************************************************
// 3010  * @fn      zcl_BuildAnalogData
// 3011  *
// 3012  * @brief   Build an analog arribute out of sequential bytes.
// 3013  *
// 3014  * @param   dataType - type of data
// 3015  * @param   pData - pointer to data
// 3016  * @param   pBuf - where to put the data
// 3017  *
// 3018  * @return  none
// 3019  */
// 3020 static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
// 3021 {
// 3022   int current_byte_index;
// 3023   int remaining_bytes;
// 3024   int step;
// 3025 
// 3026   remaining_bytes = zclGetAttrDataLength(dataType, pData);
// 3027 
// 3028   // decide if move forward or backwards to copy data
// 3029   if ( zclIsLittleEndianMachine() )
// 3030   {
// 3031     step = 1;
// 3032     current_byte_index = 0;
// 3033   }
// 3034   else
// 3035   {
// 3036     step = -1;
// 3037     current_byte_index = remaining_bytes - 1;
// 3038   }
// 3039 
// 3040   while ( remaining_bytes-- )
// 3041   {
// 3042     pData[current_byte_index] = *(pBuf++);
// 3043     current_byte_index += step;
// 3044   }
// 3045 }
// 3046 #endif // ZCL_REPORT
// 3047 
// 3048 /*********************************************************************
// 3049  * @fn      zclGetDataTypeLength
// 3050  *
// 3051  * @brief   Return the length of the datatype in octet.
// 3052  *
// 3053  *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
// 3054  *                ZCL_DATATYPE_CHAR_STR data types.
// 3055  *
// 3056  * @param   dataType - data type
// 3057  *
// 3058  * @return  length of data
// 3059  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3060 uint8 zclGetDataTypeLength( uint8 dataType )
zclGetDataTypeLength:
          CFI Block cfiBlock291 Using cfiCommon0
          CFI Function zclGetDataTypeLength
        CODE
// 3061 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV       A,R1
// 3062   uint8 len;
// 3063 
// 3064   switch ( dataType )
        ADD       A,#-0x8
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x5
        JZ        ??zclGetDataTypeLength_0
        ADD       A,#-0x8
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x5
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_4
        DEC       A
        JZ        ??zclGetDataTypeLength_5
        DEC       A
        JZ        ??zclGetDataTypeLength_6
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_2
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_4
        DEC       A
        JZ        ??zclGetDataTypeLength_5
        DEC       A
        JZ        ??zclGetDataTypeLength_6
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_0
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        ADD       A,#-0x7
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_7
        ADD       A,#0x5a
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x6
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_1
        DEC       A
        JZ        ??zclGetDataTypeLength_3
        ADD       A,#-0x6
        JZ        ??zclGetDataTypeLength_7
        DEC       A
        JZ        ??zclGetDataTypeLength_8
        SJMP      ??zclGetDataTypeLength_9
// 3065   {
// 3066     case ZCL_DATATYPE_DATA8:
// 3067     case ZCL_DATATYPE_BOOLEAN:
// 3068     case ZCL_DATATYPE_BITMAP8:
// 3069     case ZCL_DATATYPE_INT8:
// 3070     case ZCL_DATATYPE_UINT8:
// 3071     case ZCL_DATATYPE_ENUM8:
// 3072       len = 1;
??zclGetDataTypeLength_0:
        MOV       R1,#0x1
// 3073       break;
        SJMP      ??zclGetDataTypeLength_10
// 3074 
// 3075     case ZCL_DATATYPE_DATA16:
// 3076     case ZCL_DATATYPE_BITMAP16:
// 3077     case ZCL_DATATYPE_UINT16:
// 3078     case ZCL_DATATYPE_INT16:
// 3079     case ZCL_DATATYPE_ENUM16:
// 3080     case ZCL_DATATYPE_SEMI_PREC:
// 3081     case ZCL_DATATYPE_CLUSTER_ID:
// 3082     case ZCL_DATATYPE_ATTR_ID:
// 3083       len = 2;
??zclGetDataTypeLength_1:
        MOV       R1,#0x2
// 3084       break;
        SJMP      ??zclGetDataTypeLength_10
// 3085 
// 3086     case ZCL_DATATYPE_DATA24:
// 3087     case ZCL_DATATYPE_BITMAP24:
// 3088     case ZCL_DATATYPE_UINT24:
// 3089     case ZCL_DATATYPE_INT24:
// 3090       len = 3;
??zclGetDataTypeLength_2:
        MOV       R1,#0x3
// 3091       break;
        SJMP      ??zclGetDataTypeLength_10
// 3092 
// 3093     case ZCL_DATATYPE_DATA32:
// 3094     case ZCL_DATATYPE_BITMAP32:
// 3095     case ZCL_DATATYPE_UINT32:
// 3096     case ZCL_DATATYPE_INT32:
// 3097     case ZCL_DATATYPE_SINGLE_PREC:
// 3098     case ZCL_DATATYPE_TOD:
// 3099     case ZCL_DATATYPE_DATE:
// 3100     case ZCL_DATATYPE_UTC:
// 3101     case ZCL_DATATYPE_BAC_OID:
// 3102       len = 4;
??zclGetDataTypeLength_3:
        MOV       R1,#0x4
// 3103       break;
        SJMP      ??zclGetDataTypeLength_10
// 3104 
// 3105    case ZCL_DATATYPE_UINT40:
// 3106    case ZCL_DATATYPE_INT40:
// 3107        len = 5;
??zclGetDataTypeLength_4:
        MOV       R1,#0x5
// 3108        break;
        SJMP      ??zclGetDataTypeLength_10
// 3109 
// 3110    case ZCL_DATATYPE_UINT48:
// 3111    case ZCL_DATATYPE_INT48:
// 3112        len = 6;
??zclGetDataTypeLength_5:
        MOV       R1,#0x6
// 3113        break;
        SJMP      ??zclGetDataTypeLength_10
// 3114 
// 3115    case ZCL_DATATYPE_UINT56:
// 3116    case ZCL_DATATYPE_INT56:
// 3117        len = 7;
??zclGetDataTypeLength_6:
        MOV       R1,#0x7
// 3118        break;
        SJMP      ??zclGetDataTypeLength_10
// 3119 
// 3120    case ZCL_DATATYPE_DOUBLE_PREC:
// 3121    case ZCL_DATATYPE_IEEE_ADDR:
// 3122    case ZCL_DATATYPE_UINT64:
// 3123    case ZCL_DATATYPE_INT64:
// 3124      len = 8;
??zclGetDataTypeLength_7:
        MOV       R1,#0x8
// 3125      break;
        SJMP      ??zclGetDataTypeLength_10
// 3126 
// 3127     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 3128      len = SEC_KEY_LEN;
??zclGetDataTypeLength_8:
        MOV       R1,#0x10
// 3129      break;
        SJMP      ??zclGetDataTypeLength_10
// 3130 
// 3131     case ZCL_DATATYPE_NO_DATA:
// 3132     case ZCL_DATATYPE_UNKNOWN:
// 3133       // Fall through
// 3134 
// 3135     default:
// 3136       len = 0;
??zclGetDataTypeLength_9:
        MOV       R1,#0x0
// 3137       break;
// 3138   }
// 3139 
// 3140   return ( len );
??zclGetDataTypeLength_10:
        LJMP      ?BRET
// 3141 }
          CFI EndBlock cfiBlock291
// 3142 
// 3143 /*********************************************************************
// 3144  * @fn      zclGetAttrDataLength
// 3145  *
// 3146  * @brief   Return the length of the attribute.
// 3147  *
// 3148  * @param   dataType - data type
// 3149  * @param   pData - pointer to data
// 3150  *
// 3151  * @return  returns atrribute length
// 3152  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3153 uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
zclGetAttrDataLength:
          CFI Block cfiBlock292 Using cfiCommon0
          CFI Function zclGetAttrDataLength
        CODE
// 3154 {
        FUNCALL zclGetAttrDataLength, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3155   uint16 dataLen = 0;
// 3156 
// 3157   if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
        MOV       A,#0x44
        XRL       A,R6
        JZ        ??zclGetAttrDataLength_0
        MOV       A,#0x43
        XRL       A,R6
        JNZ       ??zclGetAttrDataLength_1
// 3158   {
// 3159     dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
??zclGetAttrDataLength_0:
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine37 & 0xFFFF
// 3160   }
??CrossCallReturnLabel_71:
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        SJMP      ??zclGetAttrDataLength_2
// 3161   else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
??zclGetAttrDataLength_1:
        MOV       A,#0x42
        XRL       A,R6
        JZ        ??zclGetAttrDataLength_3
        MOV       A,#0x41
        XRL       A,R6
        JNZ       ??zclGetAttrDataLength_4
// 3162   {
// 3163     dataLen = *pData + 1; // string length + 1 for length field
??zclGetAttrDataLength_3:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,#0x0
??zclGetAttrDataLength_2:
        MOV       R3,A
        SJMP      ??zclGetAttrDataLength_5
// 3164   }
// 3165   else
// 3166   {
// 3167     dataLen = zclGetDataTypeLength( dataType );
??zclGetAttrDataLength_4:
        ; Setup parameters for call to function zclGetDataTypeLength
        LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV       A,R1
        MOV       R2,A
        MOV       R3,#0x0
// 3168   }
// 3169 
// 3170   return ( dataLen );
??zclGetAttrDataLength_5:
        LJMP      ??Subroutine58_0 & 0xFFFF
// 3171 }
          CFI EndBlock cfiBlock292

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond293 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function zclGetAttrDataLength
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-2
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker295 Using cfiCommon1
          CFI (cfiPicker295) NoFunction
          CFI (cfiPicker295) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R4
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiPicker295
// 3172 
// 3173 #ifdef ZCL_READ
// 3174 /*********************************************************************
// 3175  * @fn      zclReadAttrData
// 3176  *
// 3177  * @brief   Read the attribute's current value into pAttrData.
// 3178  *          NOTE - Not compatible with application's attributes callbacks.
// 3179  *
// 3180  * @param   pAttrData - where to put attribute data
// 3181  * @param   pAttr - pointer to attribute
// 3182  * @param   pDataLen - where to put attribute data length
// 3183  *
// 3184  * @return Success
// 3185  */
// 3186 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
// 3187 {
// 3188   uint16 dataLen;
// 3189 
// 3190   if ( pAttr->attr.dataPtr == NULL )
// 3191   {
// 3192     return ( ZCL_STATUS_FAILURE );
// 3193   }
// 3194 
// 3195   dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
// 3196   zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
// 3197 
// 3198   if ( pDataLen != NULL )
// 3199   {
// 3200     *pDataLen = dataLen;
// 3201   }
// 3202 
// 3203   return ( ZCL_STATUS_SUCCESS );
// 3204 }
// 3205 
// 3206 /*********************************************************************
// 3207  * @fn      zcl_ReadAttrData
// 3208  *
// 3209  * @brief   Read the attribute's current value into pAttrData.
// 3210  *          Use application's callback function if assigned to this attribute.
// 3211  *
// 3212  * @param   endpoint - application's endpoint
// 3213  * @param   clusterId - cluster that attribute belongs to
// 3214  * @param   attrId - attribute id
// 3215  * @param   pAttrData - where to put attribute data
// 3216  * @param   pDataLen - where to put attribute data length
// 3217  *
// 3218  * @return  Successful if data was read
// 3219  */
// 3220 ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
// 3221                                          uint8 *pAttrData, uint16 *pDataLen )
// 3222 {
// 3223   zclAttrRec_t attrRec;
// 3224 
// 3225   if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
// 3226   {
// 3227     return ( ZCL_STATUS_FAILURE );
// 3228   }
// 3229 
// 3230   if ( attrRec.attr.dataPtr != NULL )
// 3231   {
// 3232     return zclReadAttrData( pAttrData, &attrRec, pDataLen );
// 3233   }
// 3234   else
// 3235   {
// 3236     return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
// 3237   }
// 3238 }
// 3239 
// 3240 /*********************************************************************
// 3241  * @fn      zclGetAttrDataLengthUsingCB
// 3242  *
// 3243  * @brief   Use application's callback to get the length of the attribute's
// 3244  *          current value stored in the database.
// 3245  *
// 3246  * @param   endpoint - application's endpoint
// 3247  * @param   clusterId - cluster that attribute belongs to
// 3248  * @param   attrId - attribute id
// 3249  *
// 3250  * @return  returns attribute length
// 3251  */
// 3252 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
// 3253 {
// 3254   uint16 dataLen = 0;
// 3255   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3256 
// 3257   if ( pfnReadWriteCB != NULL )
// 3258   {
// 3259     // Only get the attribute length
// 3260     (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
// 3261   }
// 3262 
// 3263   return ( dataLen );
// 3264 }
// 3265 
// 3266 /*********************************************************************
// 3267  * @fn      zclReadAttrDataUsingCB
// 3268  *
// 3269  * @brief   Use application's callback to read the attribute's current
// 3270  *          value stored in the database.
// 3271  *
// 3272  * @param   endpoint - application's endpoint
// 3273  * @param   clusterId - cluster that attribute belongs to
// 3274  * @param   attrId - attribute id
// 3275  * @param   pAttrData - where to put attribute data
// 3276  * @param   pDataLen - where to put attribute data length
// 3277  *
// 3278  * @return  Successful if data was read
// 3279  */
// 3280 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
// 3281                                          uint8 *pAttrData, uint16 *pDataLen )
// 3282 {
// 3283   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3284 
// 3285   if ( pDataLen != NULL )
// 3286   {
// 3287     *pDataLen = 0; // Always initialize it to 0
// 3288   }
// 3289 
// 3290   if ( pfnReadWriteCB != NULL )
// 3291   {
// 3292     // Read the attribute value and its length
// 3293     return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
// 3294   }
// 3295 
// 3296   return ( ZCL_STATUS_SOFTWARE_FAILURE );
// 3297 }
// 3298 
// 3299 /*********************************************************************
// 3300  * @fn      zclAuthorizeRead
// 3301  *
// 3302  * @brief   Use application's callback to authorize a Read operation
// 3303  *          on a given attribute.
// 3304  *
// 3305  * @param   endpoint - application's endpoint
// 3306  * @param   srcAddr - source Address
// 3307  * @param   pAttr - pointer to attribute
// 3308  *
// 3309  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3310  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3311  */
// 3312 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3313 {
// 3314   if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
// 3315   {
// 3316     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3317 
// 3318     if ( pfnAuthorizeCB != NULL )
// 3319     {
// 3320       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
// 3321     }
// 3322   }
// 3323 
// 3324   return ( ZCL_STATUS_SUCCESS );
// 3325 }
// 3326 #endif // ZCL_READ
// 3327 
// 3328 #ifdef ZCL_WRITE
// 3329 /*********************************************************************
// 3330  * @fn      zclWriteAttrData
// 3331  *
// 3332  * @brief   Write the received data.
// 3333  *
// 3334  * @param   endpoint - application's endpoint
// 3335  * @param   pAttr - where to write data to
// 3336  * @param   pWriteRec - data to be written
// 3337  *
// 3338  * @return  Successful if data was written
// 3339  */
// 3340 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
// 3341                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
// 3342 {
// 3343   uint8 status;
// 3344 
// 3345   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
// 3346   {
// 3347     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
// 3348     if ( status == ZCL_STATUS_SUCCESS )
// 3349     {
// 3350       if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
// 3351       {
// 3352         // Write the attribute value
// 3353         uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
// 3354         zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
// 3355 
// 3356         status = ZCL_STATUS_SUCCESS;
// 3357       }
// 3358       else
// 3359       {
// 3360         status = ZCL_STATUS_INVALID_VALUE;
// 3361       }
// 3362     }
// 3363   }
// 3364   else
// 3365   {
// 3366     status = ZCL_STATUS_READ_ONLY;
// 3367   }
// 3368 
// 3369   return ( status );
// 3370 }
// 3371 
// 3372 /*********************************************************************
// 3373  * @fn      zclWriteAttrDataUsingCB
// 3374  *
// 3375  * @brief   Use application's callback to write the attribute's current
// 3376  *          value stored in the database.
// 3377  *
// 3378  * @param   endpoint - application's endpoint
// 3379  * @param   pAttr - where to write data to
// 3380  * @param   pAttrData - data to be written
// 3381  *
// 3382  * @return  Successful if data was written
// 3383  */
// 3384 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
// 3385                                           zclAttrRec_t *pAttr, uint8 *pAttrData )
// 3386 {
// 3387   uint8 status;
// 3388 
// 3389   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
// 3390   {
// 3391     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
// 3392     if ( status == ZCL_STATUS_SUCCESS )
// 3393     {
// 3394       zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3395       if ( pfnReadWriteCB != NULL )
// 3396       {
// 3397         // Write the attribute value
// 3398         status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
// 3399                                     ZCL_OPER_WRITE, pAttrData, NULL );
// 3400       }
// 3401       else
// 3402       {
// 3403         status = ZCL_STATUS_SOFTWARE_FAILURE;
// 3404       }
// 3405     }
// 3406   }
// 3407   else
// 3408   {
// 3409     status = ZCL_STATUS_READ_ONLY;
// 3410   }
// 3411 
// 3412   return ( status );
// 3413 }
// 3414 
// 3415 /*********************************************************************
// 3416  * @fn      zclAuthorizeWrite
// 3417  *
// 3418  * @brief   Use application's callback to authorize a Write operation
// 3419  *          on a given attribute.
// 3420  *
// 3421  * @param   endpoint - application's endpoint
// 3422  * @param   srcAddr - source Address
// 3423  * @param   pAttr - pointer to attribute
// 3424  *
// 3425  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3426  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3427  */
// 3428 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3429 {
// 3430   if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
// 3431   {
// 3432     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3433 
// 3434     if ( pfnAuthorizeCB != NULL )
// 3435     {
// 3436       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
// 3437     }
// 3438   }
// 3439 
// 3440   return ( ZCL_STATUS_SUCCESS );
// 3441 }
// 3442 #endif // ZCL_WRITE
// 3443 
// 3444 #ifdef ZCL_READ
// 3445 /*********************************************************************
// 3446  * @fn      zclParseInReadCmd
// 3447  *
// 3448  * @brief   Parse the "Profile" Read Commands
// 3449  *
// 3450  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3451  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3452  *
// 3453  * @param   pCmd - pointer to incoming data to parse
// 3454  *
// 3455  * @return  pointer to the parsed command structure
// 3456  */
// 3457 void *zclParseInReadCmd( zclParseCmd_t *pCmd )
// 3458 {
// 3459   zclReadCmd_t *readCmd;
// 3460   uint8 *pBuf = pCmd->pData;
// 3461 
// 3462   readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
// 3463   if ( readCmd != NULL )
// 3464   {
// 3465     uint8 i;
// 3466     readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
// 3467     for ( i = 0; i < readCmd->numAttr; i++ )
// 3468     {
// 3469       readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3470       pBuf += 2;
// 3471     }
// 3472   }
// 3473 
// 3474   return ( (void *)readCmd );
// 3475 }
// 3476 
// 3477 /*********************************************************************
// 3478  * @fn      zclParseInReadRspCmd
// 3479  *
// 3480  * @brief   Parse the "Profile" Read Response Commands
// 3481  *
// 3482  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3483  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3484  *
// 3485  * @param   pCmd - pointer to incoming data to parse
// 3486  *
// 3487  * @return  pointer to the parsed command structure
// 3488  */
// 3489 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
// 3490 {
// 3491   zclReadRspCmd_t *readRspCmd;
// 3492   uint8 *pBuf = pCmd->pData;
// 3493   uint8 *dataPtr;
// 3494   uint8 numAttr = 0;
// 3495   uint8 hdrLen;
// 3496   uint16 dataLen = 0;
// 3497   uint16 attrDataLen;
// 3498 
// 3499   // find out the number of attributes and the length of attribute data
// 3500   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3501   {
// 3502     uint8 status;
// 3503 
// 3504     numAttr++;
// 3505     pBuf += 2; // move pass attribute id
// 3506 
// 3507     status = *pBuf++;
// 3508     if ( status == ZCL_STATUS_SUCCESS )
// 3509     {
// 3510       uint8 dataType = *pBuf++;
// 3511 
// 3512       attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3513       pBuf += attrDataLen; // move pass attribute data
// 3514 
// 3515       // add padding if needed
// 3516       if ( PADDING_NEEDED( attrDataLen ) )
// 3517       {
// 3518         attrDataLen++;
// 3519       }
// 3520 
// 3521       dataLen += attrDataLen;
// 3522     }
// 3523   }
// 3524 
// 3525   // calculate the length of the response header
// 3526   hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
// 3527 
// 3528   readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3529   if ( readRspCmd != NULL )
// 3530   {
// 3531     uint8 i;
// 3532     pBuf = pCmd->pData;
// 3533     dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
// 3534 
// 3535     readRspCmd->numAttr = numAttr;
// 3536     for ( i = 0; i < numAttr; i++ )
// 3537     {
// 3538       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 3539 
// 3540       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3541       pBuf += 2;
// 3542 
// 3543       statusRec->status = *pBuf++;
// 3544       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 3545       {
// 3546         statusRec->dataType = *pBuf++;
// 3547 
// 3548         attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
// 3549         zcl_memcpy( dataPtr, pBuf, attrDataLen);
// 3550         statusRec->data = dataPtr;
// 3551 
// 3552         pBuf += attrDataLen; // move pass attribute data
// 3553 
// 3554         // advance attribute data pointer
// 3555         if ( PADDING_NEEDED( attrDataLen ) )
// 3556         {
// 3557           attrDataLen++;
// 3558         }
// 3559 
// 3560         dataPtr += attrDataLen;
// 3561       }
// 3562     }
// 3563   }
// 3564 
// 3565   return ( (void *)readRspCmd );
// 3566 }
// 3567 #endif // ZCL_READ
// 3568 
// 3569 #ifdef ZCL_WRITE
// 3570 /*********************************************************************
// 3571  * @fn      zclParseInWriteCmd
// 3572  *
// 3573  * @brief   Parse the "Profile" Write, Write Undivided and Write No
// 3574  *          Response Commands
// 3575  *
// 3576  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3577  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3578  *
// 3579  * @param   pCmd - pointer to incoming data to parse
// 3580  *
// 3581  * @return  pointer to the parsed command structure
// 3582  */
// 3583 void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
// 3584 {
// 3585   zclWriteCmd_t *writeCmd;
// 3586   uint8 *pBuf = pCmd->pData;
// 3587   uint16 attrDataLen;
// 3588   uint8 *dataPtr;
// 3589   uint8 numAttr = 0;
// 3590   uint8 hdrLen;
// 3591   uint16 dataLen = 0;
// 3592 
// 3593   // find out the number of attributes and the length of attribute data
// 3594   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3595   {
// 3596     uint8 dataType;
// 3597 
// 3598     numAttr++;
// 3599     pBuf += 2; // move pass attribute id
// 3600 
// 3601     dataType = *pBuf++;
// 3602 
// 3603     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3604     pBuf += attrDataLen; // move pass attribute data
// 3605 
// 3606     // add padding if needed
// 3607     if ( PADDING_NEEDED( attrDataLen ) )
// 3608     {
// 3609       attrDataLen++;
// 3610     }
// 3611 
// 3612     dataLen += attrDataLen;
// 3613   }
// 3614 
// 3615   // calculate the length of the response header
// 3616   hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
// 3617 
// 3618   writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3619   if ( writeCmd != NULL )
// 3620   {
// 3621     uint8 i;
// 3622     pBuf = pCmd->pData;
// 3623     dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
// 3624 
// 3625     writeCmd->numAttr = numAttr;
// 3626     for ( i = 0; i < numAttr; i++ )
// 3627     {
// 3628       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 3629 
// 3630       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3631       pBuf += 2;
// 3632       statusRec->dataType = *pBuf++;
// 3633 
// 3634       attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
// 3635       zcl_memcpy( dataPtr, pBuf, attrDataLen);
// 3636       statusRec->attrData = dataPtr;
// 3637 
// 3638       pBuf += attrDataLen; // move pass attribute data
// 3639 
// 3640       // advance attribute data pointer
// 3641       if ( PADDING_NEEDED( attrDataLen ) )
// 3642       {
// 3643         attrDataLen++;
// 3644       }
// 3645 
// 3646       dataPtr += attrDataLen;
// 3647     }
// 3648   }
// 3649 
// 3650   return ( (void *)writeCmd );
// 3651 }
// 3652 
// 3653 /*********************************************************************
// 3654  * @fn      zclParseInWriteRspCmd
// 3655  *
// 3656  * @brief   Parse the "Profile" Write Response Commands
// 3657  *
// 3658  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3659  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3660  *
// 3661  * @param   pCmd - pointer to incoming data to parse
// 3662  *
// 3663  * @return  pointer to the parsed command structure
// 3664  */
// 3665 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
// 3666 {
// 3667   zclWriteRspCmd_t *writeRspCmd;
// 3668   uint8 *pBuf = pCmd->pData;
// 3669   uint8 i = 0;
// 3670 
// 3671   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
// 3672   if ( writeRspCmd != NULL )
// 3673   {
// 3674     if ( pCmd->dataLen == 1 )
// 3675     {
// 3676       // special case when all writes were successfull
// 3677       writeRspCmd->attrList[i++].status = *pBuf;
// 3678     }
// 3679     else
// 3680     {
// 3681       while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3682       {
// 3683         writeRspCmd->attrList[i].status = *pBuf++;
// 3684         writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3685         pBuf += 2;
// 3686       }
// 3687     }
// 3688 
// 3689     writeRspCmd->numAttr = i;
// 3690   }
// 3691 
// 3692   return ( (void *)writeRspCmd );
// 3693 }
// 3694 #endif // ZCL_WRITE
// 3695 
// 3696 #ifdef ZCL_REPORT
// 3697 /*********************************************************************
// 3698  * @fn      zclParseInConfigReportCmd
// 3699  *
// 3700  * @brief   Parse the "Profile" Configure Reporting Command
// 3701  *
// 3702  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3703  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3704  *
// 3705  * @param   pCmd - pointer to incoming data to parse
// 3706  *
// 3707  * @return  pointer to the parsed command structure
// 3708  */
// 3709 void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
// 3710 {
// 3711   zclCfgReportCmd_t *cfgReportCmd;
// 3712   uint8 *pBuf = pCmd->pData;
// 3713   uint8 *dataPtr;
// 3714   uint8 numAttr = 0;
// 3715   uint8 dataType;
// 3716   uint8 hdrLen;
// 3717   uint16 dataLen = 0;
// 3718   uint8 reportChangeLen; // length of Reportable Change field
// 3719 
// 3720   // Calculate the length of the Request command
// 3721   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3722   {
// 3723     uint8 direction;
// 3724 
// 3725     numAttr++;
// 3726     direction = *pBuf++;
// 3727     pBuf += 2; // move pass the attribute ID
// 3728 
// 3729     // Is there a Reportable Change field?
// 3730     if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3731     {
// 3732       dataType = *pBuf++;
// 3733       pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3734 
// 3735       // For attributes of 'discrete' data types this field is omitted
// 3736       if ( zclAnalogDataType( dataType ) )
// 3737       {
// 3738         reportChangeLen = zclGetDataTypeLength( dataType );
// 3739         pBuf += reportChangeLen;
// 3740 
// 3741         // add padding if needed
// 3742         if ( PADDING_NEEDED( reportChangeLen ) )
// 3743         {
// 3744           reportChangeLen++;
// 3745         }
// 3746 
// 3747         dataLen += reportChangeLen;
// 3748       }
// 3749       else
// 3750       {
// 3751         pBuf++; // move past reportable change field
// 3752       }
// 3753     }
// 3754     else
// 3755     {
// 3756       pBuf += 2; // move pass the Timeout Period
// 3757     }
// 3758   } // while loop
// 3759 
// 3760   hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
// 3761 
// 3762   cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3763   if ( cfgReportCmd != NULL )
// 3764   {
// 3765     uint8 i;
// 3766     pBuf = pCmd->pData;
// 3767     dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
// 3768 
// 3769     cfgReportCmd->numAttr = numAttr;
// 3770     for ( i = 0; i < numAttr; i++ )
// 3771     {
// 3772       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 3773 
// 3774       zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
// 3775 
// 3776       reportRec->direction = *pBuf++;
// 3777       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3778       pBuf += 2;
// 3779       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3780       {
// 3781         // Attribute to be reported
// 3782         reportRec->dataType = *pBuf++;
// 3783         reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3784         pBuf += 2;
// 3785         reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3786         pBuf += 2;
// 3787 
// 3788         // For attributes of 'discrete' data types this field is omitted
// 3789         if ( zclAnalogDataType( reportRec->dataType ) )
// 3790         {
// 3791           zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
// 3792           reportRec->reportableChange = dataPtr;
// 3793 
// 3794           reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
// 3795           pBuf += reportChangeLen;
// 3796 
// 3797           // advance attribute data pointer
// 3798           if ( PADDING_NEEDED( reportChangeLen ) )
// 3799           {
// 3800             reportChangeLen++;
// 3801           }
// 3802 
// 3803           dataPtr += reportChangeLen;
// 3804         }
// 3805       }
// 3806       else
// 3807       {
// 3808         // Attribute reports to be received
// 3809         reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3810         pBuf += 2;
// 3811       }
// 3812     } // while loop
// 3813   }
// 3814 
// 3815   return ( (void *)cfgReportCmd );
// 3816 }
// 3817 
// 3818 /*********************************************************************
// 3819  * @fn      zclParseInConfigReportRspCmd
// 3820  *
// 3821  * @brief   Parse the "Profile" Configure Reporting Response Command
// 3822  *
// 3823  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3824  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3825  *
// 3826  * @param   pCmd - pointer to incoming data to parse
// 3827  *
// 3828  * @return  pointer to the parsed command structure
// 3829  */
// 3830 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
// 3831 {
// 3832   zclCfgReportRspCmd_t *cfgReportRspCmd;
// 3833   uint8 *pBuf = pCmd->pData;
// 3834   uint8 numAttr;
// 3835 
// 3836   numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
// 3837 
// 3838   cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
// 3839                                             + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
// 3840   if ( cfgReportRspCmd != NULL )
// 3841   {
// 3842     uint8 i;
// 3843     cfgReportRspCmd->numAttr = numAttr;
// 3844     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 3845     {
// 3846       cfgReportRspCmd->attrList[i].status = *pBuf++;
// 3847       cfgReportRspCmd->attrList[i].direction = *pBuf++;
// 3848       cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3849       pBuf += 2;
// 3850     }
// 3851   }
// 3852 
// 3853   return ( (void *)cfgReportRspCmd );
// 3854 }
// 3855 
// 3856 /*********************************************************************
// 3857  * @fn      zclParseInReadReportCfgCmd
// 3858  *
// 3859  * @brief   Parse the "Profile" Read Reporting Configuration Command
// 3860  *
// 3861  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3862  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3863  *
// 3864  * @param   pCmd - pointer to incoming data to parse
// 3865  *
// 3866  * @return  pointer to the parsed command structure
// 3867  */
// 3868 void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
// 3869 {
// 3870   zclReadReportCfgCmd_t *readReportCfgCmd;
// 3871   uint8 *pBuf = pCmd->pData;
// 3872   uint8 numAttr;
// 3873 
// 3874   numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
// 3875 
// 3876   readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
// 3877                                                   + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
// 3878   if ( readReportCfgCmd != NULL )
// 3879   {
// 3880     uint8 i;
// 3881     readReportCfgCmd->numAttr = numAttr;
// 3882     for ( i = 0; i < readReportCfgCmd->numAttr; i++)
// 3883     {
// 3884       readReportCfgCmd->attrList[i].direction = *pBuf++;;
// 3885       readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3886       pBuf += 2;
// 3887     }
// 3888   }
// 3889 
// 3890   return ( (void *)readReportCfgCmd );
// 3891 }
// 3892 
// 3893 /*********************************************************************
// 3894  * @fn      zclParseInReadReportCfgRspCmd
// 3895  *
// 3896  * @brief   Parse the "Profile" Read Reporting Configuration Response Command
// 3897  *
// 3898  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3899  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3900  *
// 3901  * @param   pCmd - pointer to incoming data to parse
// 3902  *
// 3903  * @return  pointer to the parsed command structure
// 3904  */
// 3905 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
// 3906 {
// 3907   zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
// 3908   uint8 reportChangeLen;
// 3909   uint8 *pBuf = pCmd->pData;
// 3910   uint8 *dataPtr;
// 3911   uint8 numAttr = 0;
// 3912   uint8 hdrLen;
// 3913   uint16 dataLen = 0;
// 3914 
// 3915   // Calculate the length of the response command
// 3916   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3917   {
// 3918     uint8 status;
// 3919     uint8 direction;
// 3920 
// 3921     numAttr++;
// 3922     status = *pBuf++;
// 3923     direction = *pBuf++;
// 3924     pBuf += 2; // move pass the attribute ID
// 3925 
// 3926     if ( status == ZCL_STATUS_SUCCESS )
// 3927     {
// 3928       if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3929       {
// 3930         uint8 dataType = *pBuf++;
// 3931         pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3932 
// 3933         // For attributes of 'discrete' data types this field is omitted
// 3934         if ( zclAnalogDataType( dataType ) )
// 3935         {
// 3936           reportChangeLen = zclGetDataTypeLength( dataType );
// 3937           pBuf += reportChangeLen;
// 3938 
// 3939           // add padding if needed
// 3940           if ( PADDING_NEEDED( reportChangeLen ) )
// 3941           {
// 3942             reportChangeLen++;
// 3943           }
// 3944 
// 3945           dataLen += reportChangeLen;
// 3946         }
// 3947       }
// 3948       else
// 3949       {
// 3950         pBuf += 2; // move pass the Timeout field
// 3951       }
// 3952     }
// 3953   } // while loop
// 3954 
// 3955   hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
// 3956 
// 3957   readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3958   if ( readReportCfgRspCmd != NULL )
// 3959   {
// 3960     uint8 i;
// 3961     pBuf = pCmd->pData;
// 3962     dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
// 3963 
// 3964     readReportCfgRspCmd->numAttr = numAttr;
// 3965     for ( i = 0; i < numAttr; i++ )
// 3966     {
// 3967       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 3968 
// 3969       reportRspRec->status = *pBuf++;
// 3970       reportRspRec->direction = *pBuf++;
// 3971       reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3972       pBuf += 2;
// 3973 
// 3974       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 3975       {
// 3976         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3977         {
// 3978           reportRspRec->dataType = *pBuf++;
// 3979           reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3980           pBuf += 2;
// 3981           reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3982           pBuf += 2;
// 3983 
// 3984           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 3985           {
// 3986             zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
// 3987             reportRspRec->reportableChange = dataPtr;
// 3988 
// 3989             reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
// 3990             pBuf += reportChangeLen;
// 3991 
// 3992             // advance attribute data pointer
// 3993             if ( PADDING_NEEDED( reportChangeLen ) )
// 3994             {
// 3995               reportChangeLen++;
// 3996             }
// 3997 
// 3998             dataPtr += reportChangeLen;
// 3999           }
// 4000         }
// 4001         else
// 4002         {
// 4003           reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4004           pBuf += 2;
// 4005         }
// 4006       }
// 4007     }
// 4008   }
// 4009 
// 4010   return ( (void *)readReportCfgRspCmd );
// 4011 }
// 4012 
// 4013 /*********************************************************************
// 4014  * @fn      zclParseInReportCmd
// 4015  *
// 4016  * @brief   Parse the "Profile" Report Command
// 4017  *
// 4018  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4019  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4020  *
// 4021  * @param   pCmd - pointer to incoming data to parse
// 4022  *
// 4023  * @return  pointer to the parsed command structure
// 4024  */
// 4025 void *zclParseInReportCmd( zclParseCmd_t *pCmd )
// 4026 {
// 4027   zclReportCmd_t *reportCmd;
// 4028   uint8 *pBuf = pCmd->pData;
// 4029   uint16 attrDataLen;
// 4030   uint8 *dataPtr;
// 4031   uint8 numAttr = 0;
// 4032   uint8 hdrLen;
// 4033   uint16 dataLen = 0;
// 4034 
// 4035   // find out the number of attributes and the length of attribute data
// 4036   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 4037   {
// 4038     uint8 dataType;
// 4039 
// 4040     numAttr++;
// 4041     pBuf += 2; // move pass attribute id
// 4042 
// 4043     dataType = *pBuf++;
// 4044 
// 4045     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 4046     pBuf += attrDataLen; // move pass attribute data
// 4047 
// 4048     // add padding if needed
// 4049     if ( PADDING_NEEDED( attrDataLen ) )
// 4050     {
// 4051       attrDataLen++;
// 4052     }
// 4053 
// 4054     dataLen += attrDataLen;
// 4055   }
// 4056 
// 4057   hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
// 4058 
// 4059   reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 4060   if (reportCmd != NULL )
// 4061   {
// 4062     uint8 i;
// 4063     pBuf = pCmd->pData;
// 4064     dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
// 4065 
// 4066     reportCmd->numAttr = numAttr;
// 4067     for ( i = 0; i < numAttr; i++ )
// 4068     {
// 4069       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 4070 
// 4071       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4072       pBuf += 2;
// 4073       reportRec->dataType = *pBuf++;
// 4074 
// 4075       attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
// 4076       zcl_memcpy( dataPtr, pBuf, attrDataLen );
// 4077       reportRec->attrData = dataPtr;
// 4078 
// 4079       pBuf += attrDataLen; // move pass attribute data
// 4080 
// 4081       // advance attribute data pointer
// 4082       if ( PADDING_NEEDED( attrDataLen ) )
// 4083       {
// 4084         attrDataLen++;
// 4085       }
// 4086 
// 4087       dataPtr += attrDataLen;
// 4088     }
// 4089   }
// 4090 
// 4091   return ( (void *)reportCmd );
// 4092 }
// 4093 #endif // ZCL_REPORT
// 4094 
// 4095 /*********************************************************************
// 4096  * @fn      zclParseInDefaultRspCmd
// 4097  *
// 4098  * @brief   Parse the "Profile" Default Response Command
// 4099  *
// 4100  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4101  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4102  *
// 4103  * @param   pCmd - pointer to incoming data to parse
// 4104  *
// 4105  * @return  pointer to the parsed command structure
// 4106  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4107 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
zclParseInDefaultRspCmd:
          CFI Block cfiBlock296 Using cfiCommon0
          CFI Function zclParseInDefaultRspCmd
        CODE
// 4108 {
        FUNCALL zclParseInDefaultRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 4109   zclDefaultRspCmd_t *defaultRspCmd;
// 4110   uint8 *pBuf = pCmd->pData;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_137:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 4111 
// 4112   defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
// 4113   if ( defaultRspCmd != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??CrossCallReturnLabel_5
// 4114   {
// 4115     defaultRspCmd->commandID = *pBuf++;
        LCALL     ?Subroutine7 & 0xFFFF
// 4116     defaultRspCmd->statusCode = *pBuf;
// 4117   }
// 4118 
// 4119   return ( (void *)defaultRspCmd );
??CrossCallReturnLabel_5:
        LJMP      ?Subroutine3 & 0xFFFF
// 4120 }
          CFI EndBlock cfiBlock296

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond297 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function zclParseInDefaultRspCmd
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-2
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker299 Using cfiCommon1
          CFI (cfiPicker299) NoFunction
          CFI (cfiPicker299) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_80:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiPicker299

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerForMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerForMsgExt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsgExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_addExternalFoundationHandler::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_addExternalFoundationHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getExternalFoundationHandler::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getExternalFoundationHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_HandleExternal::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_HandleExternal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getRawAFMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getRawAFMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getParsedTransSeqNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getParsedTransSeqNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerPlugin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerPlugin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerAttrList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerAttrList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerClusterOptionList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerClusterOptionList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerValidateAttrData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerValidateAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerReadWriteCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerReadWriteCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_DeviceOperational::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_DeviceOperational

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendCommand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_ProcessMessageMSG::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ProcessMessageMSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclBuildHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclBuildHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRecsList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRecsList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRec::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSetSecurityOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSetSecurityOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSerializeData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSerializeData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetDataTypeLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetDataTypeLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetAttrDataLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAttrDataLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInDefaultRspCmd

        END
// 4121 
// 4122 #ifdef ZCL_DISCOVER
// 4123 /*********************************************************************
// 4124  * @fn      zclParseInDiscAttrsCmd
// 4125  *
// 4126  * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
// 4127  *
// 4128  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4129  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4130  *
// 4131  * @param   pCmd - pointer to incoming data to parse
// 4132  *
// 4133  * @return  pointer to the parsed command structure
// 4134  */
// 4135 void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
// 4136 {
// 4137   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4138   uint8 *pBuf = pCmd->pData;
// 4139 
// 4140   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
// 4141   if ( pDiscoverCmd != NULL )
// 4142   {
// 4143     pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4144     pBuf += 2;
// 4145     pDiscoverCmd->maxAttrIDs = *pBuf;
// 4146   }
// 4147 
// 4148   return ( (void *)pDiscoverCmd );
// 4149 }
// 4150 
// 4151 /*********************************************************************
// 4152  * @fn      zclParseInDiscAttrsRspCmd
// 4153  *
// 4154  * @brief   Parse the "Profile" Discovery Response Commands
// 4155  *
// 4156  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4157  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4158  *
// 4159  * @param   pCmd - pointer to incoming data to parse
// 4160  *
// 4161  * @return  pointer to the parsed command structure
// 4162  */
// 4163 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4164 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
// 4165 {
// 4166   zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
// 4167   uint8 *pBuf = pCmd->pData;
// 4168   uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
// 4169 
// 4170   pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
// 4171                     ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
// 4172 
// 4173   if ( pDiscoverRspCmd != NULL )
// 4174   {
// 4175     uint8 i;
// 4176 
// 4177     pDiscoverRspCmd->discComplete = *pBuf++;
// 4178     pDiscoverRspCmd->numAttr = numAttr;
// 4179 
// 4180     for ( i = 0; i < numAttr; i++ )
// 4181     {
// 4182       pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4183       pBuf += 2;
// 4184       pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
// 4185     }
// 4186   }
// 4187 
// 4188   return ( (void *)pDiscoverRspCmd );
// 4189 }
// 4190 
// 4191 /*********************************************************************
// 4192  * @fn      zclParseInDiscCmdsCmd
// 4193  *
// 4194  * @brief   Parse the "Profile" Discovery Commands
// 4195  *
// 4196  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4197  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4198  *
// 4199  * @param   pCmd - pointer to incoming data to parse
// 4200  *
// 4201  * @return  pointer to the parsed command structure
// 4202  */
// 4203 void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
// 4204 {
// 4205   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 4206   uint8 *pBuf = pCmd->pData;
// 4207 
// 4208   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
// 4209   if ( pDiscoverCmd != NULL )
// 4210   {
// 4211     pDiscoverCmd->startCmdID = *pBuf++;
// 4212     pDiscoverCmd->maxCmdID = *pBuf++;
// 4213   }
// 4214 
// 4215   return ( (void *)pDiscoverCmd );
// 4216 }
// 4217 
// 4218 /*********************************************************************
// 4219  * @fn      zclParseInDiscCmdsRspCmd
// 4220  *
// 4221  * @brief   Parse the Discover Commands Response Command
// 4222  *
// 4223  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4224  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4225  *
// 4226  * @param   pCmd - pointer to incoming data to parse
// 4227  *
// 4228  * @return  pointer to the parsed command structure
// 4229  */
// 4230 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4231 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
// 4232 {
// 4233   zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
// 4234   uint8 *pBuf = pCmd->pData;
// 4235   uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
// 4236 
// 4237     // allocate memory for size of structure plus variable array
// 4238   pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
// 4239                     ( numCmds * sizeof(uint8) ) );
// 4240   if ( pDiscoverRspCmd != NULL )
// 4241   {
// 4242     uint8 i;
// 4243     pDiscoverRspCmd->discComplete = *pBuf++;
// 4244     pDiscoverRspCmd->numCmd = numCmds;
// 4245 
// 4246     for ( i = 0; i < numCmds; i++ )
// 4247     {
// 4248       pDiscoverRspCmd->pCmdID[i] = *pBuf++;
// 4249     }
// 4250   }
// 4251 
// 4252   return ( (void *)pDiscoverRspCmd );
// 4253 }
// 4254 
// 4255 /*********************************************************************
// 4256  * @fn      zclParseInDiscAttrsExtRspCmd
// 4257  *
// 4258  * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
// 4259  *
// 4260  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4261  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4262  *
// 4263  * @param   pCmd - pointer to incoming data to parse
// 4264  *
// 4265  * @return  pointer to the parsed command structure
// 4266  */
// 4267 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4268 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
// 4269 {
// 4270   zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
// 4271   uint8 i;
// 4272   uint8 *pBuf = pCmd->pData;
// 4273   uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
// 4274 
// 4275   pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
// 4276                     ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
// 4277 
// 4278   if ( pDiscoverRspCmd != NULL )
// 4279   {
// 4280     pDiscoverRspCmd->discComplete = *pBuf++;
// 4281     pDiscoverRspCmd->numAttr = numAttrs;
// 4282 
// 4283     for ( i = 0; i < numAttrs; i++ )
// 4284     {
// 4285       pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4286       pBuf += 2;
// 4287       pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
// 4288       pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
// 4289     }
// 4290   }
// 4291 
// 4292   return ( (void *)pDiscoverRspCmd );
// 4293 }
// 4294 #endif // ZCL_DISCOVER
// 4295 
// 4296 #ifdef ZCL_READ
// 4297 /*********************************************************************
// 4298  * @fn      zclProcessInReadCmd
// 4299  *
// 4300  * @brief   Process the "Profile" Read Command
// 4301  *
// 4302  * @param   pInMsg - incoming message to process
// 4303  *
// 4304  * @return  TRUE if command processed. FALSE, otherwise.
// 4305  */
// 4306 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
// 4307 {
// 4308   zclReadCmd_t *readCmd;
// 4309   zclReadRspCmd_t *readRspCmd;
// 4310   zclAttrRec_t attrRec;
// 4311   uint16 len;
// 4312   uint8 i;
// 4313 
// 4314   readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
// 4315 
// 4316   // calculate the length of the response status record
// 4317   len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
// 4318 
// 4319   readRspCmd = zcl_mem_alloc( len );
// 4320   if ( readRspCmd == NULL )
// 4321   {
// 4322     return FALSE; // EMBEDDED RETURN
// 4323   }
// 4324 
// 4325   readRspCmd->numAttr = readCmd->numAttr;
// 4326   for ( i = 0; i < readCmd->numAttr; i++ )
// 4327   {
// 4328     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 4329 
// 4330     statusRec->attrID = readCmd->attrID[i];
// 4331 
// 4332     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4333                          readCmd->attrID[i], &attrRec ) )
// 4334     {
// 4335       if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
// 4336       {
// 4337         statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
// 4338                                               &(pInMsg->msg->srcAddr), &attrRec );
// 4339         if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 4340         {
// 4341           statusRec->data = attrRec.attr.dataPtr;
// 4342           statusRec->dataType = attrRec.attr.dataType;
// 4343         }
// 4344       }
// 4345       else
// 4346       {
// 4347         statusRec->status = ZCL_STATUS_WRITE_ONLY;
// 4348       }
// 4349     }
// 4350     else
// 4351     {
// 4352       statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4353     }
// 4354   }
// 4355 
// 4356   // Build and send Read Response command
// 4357   zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
// 4358                    readRspCmd, !pInMsg->hdr.fc.direction,
// 4359                    true, pInMsg->hdr.transSeqNum );
// 4360   zcl_mem_free( readRspCmd );
// 4361 
// 4362   return TRUE;
// 4363 }
// 4364 #endif // ZCL_READ
// 4365 
// 4366 #ifdef ZCL_WRITE
// 4367 /*********************************************************************
// 4368  * @fn      processInWriteCmd
// 4369  *
// 4370  * @brief   Process the "Profile" Write and Write No Response Commands
// 4371  *
// 4372  * @param   pInMsg - incoming message to process
// 4373  *
// 4374  * @return  TRUE if command processed. FALSE, otherwise.
// 4375  */
// 4376 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
// 4377 {
// 4378   zclWriteCmd_t *writeCmd;
// 4379   zclWriteRspCmd_t *writeRspCmd;
// 4380   uint8 sendRsp = FALSE;
// 4381   uint8 j = 0;
// 4382   uint8 i;
// 4383 
// 4384   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
// 4385   if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
// 4386   {
// 4387     // We need to send a response back - allocate space for it
// 4388     writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4389             + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
// 4390     if ( writeRspCmd == NULL )
// 4391     {
// 4392       return FALSE; // EMBEDDED RETURN
// 4393     }
// 4394 
// 4395     sendRsp = TRUE;
// 4396   }
// 4397 
// 4398   for ( i = 0; i < writeCmd->numAttr; i++ )
// 4399   {
// 4400     zclAttrRec_t attrRec;
// 4401     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4402 
// 4403     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4404                          statusRec->attrID, &attrRec ) )
// 4405     {
// 4406       if ( statusRec->dataType == attrRec.attr.dataType )
// 4407       {
// 4408         uint8 status;
// 4409 
// 4410         // Write the new attribute value
// 4411         if ( attrRec.attr.dataPtr != NULL )
// 4412         {
// 4413           status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4414                                      &attrRec, statusRec );
// 4415         }
// 4416         else // Use CB
// 4417         {
// 4418           status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4419                                             &attrRec, statusRec->attrData );
// 4420         }
// 4421 
// 4422         // If successful, a write attribute status record shall NOT be generated
// 4423         if ( sendRsp && status != ZCL_STATUS_SUCCESS )
// 4424         {
// 4425           // Attribute is read only - move on to the next write attribute record
// 4426           writeRspCmd->attrList[j].status = status;
// 4427           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4428         }
// 4429       }
// 4430       else
// 4431       {
// 4432         // Attribute data type is incorrect - move on to the next write attribute record
// 4433         if ( sendRsp )
// 4434         {
// 4435           writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4436           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4437         }
// 4438       }
// 4439     }
// 4440     else
// 4441     {
// 4442       // Attribute is not supported - move on to the next write attribute record
// 4443       if ( sendRsp )
// 4444       {
// 4445         writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4446         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4447       }
// 4448     }
// 4449   } // for loop
// 4450 
// 4451   if ( sendRsp )
// 4452   {
// 4453     writeRspCmd->numAttr = j;
// 4454     if ( writeRspCmd->numAttr == 0 )
// 4455     {
// 4456       // Since all records were written successful, include a single status record
// 4457       // in the resonse command with the status field set to SUCCESS and the
// 4458       // attribute ID field omitted.
// 4459       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
// 4460       writeRspCmd->numAttr = 1;
// 4461     }
// 4462 
// 4463     zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4464                       pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4465                       true, pInMsg->hdr.transSeqNum );
// 4466     zcl_mem_free( writeRspCmd );
// 4467   }
// 4468 
// 4469   return TRUE;
// 4470 }
// 4471 
// 4472 /*********************************************************************
// 4473  * @fn      zclRevertWriteUndividedCmd
// 4474  *
// 4475  * @brief   Revert the "Profile" Write Undevided Command
// 4476  *
// 4477  * @param   pInMsg - incoming message to process
// 4478  * @param   curWriteRec - old data
// 4479  * @param   numAttr - number of attributes to be reverted
// 4480  *
// 4481  * @return  none
// 4482  */
// 4483 static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
// 4484                                     zclWriteRec_t *curWriteRec, uint16 numAttr )
// 4485 {
// 4486   uint8 i;
// 4487 
// 4488   for ( i = 0; i < numAttr; i++ )
// 4489   {
// 4490     zclAttrRec_t attrRec;
// 4491     zclWriteRec_t *statusRec = &(curWriteRec[i]);
// 4492 
// 4493     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4494                           statusRec->attrID, &attrRec ) )
// 4495     {
// 4496       break; // should never happen
// 4497     }
// 4498 
// 4499     if ( attrRec.attr.dataPtr != NULL )
// 4500     {
// 4501       // Just copy the old data back - no need to validate the data
// 4502       uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
// 4503       zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
// 4504     }
// 4505     else // Use CB
// 4506     {
// 4507       // Write the old data back
// 4508       zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4509                                &attrRec, statusRec->attrData );
// 4510     }
// 4511   } // for loop
// 4512 }
// 4513 
// 4514 /*********************************************************************
// 4515  * @fn      zclProcessInWriteUndividedCmd
// 4516  *
// 4517  * @brief   Process the "Profile" Write Undivided Command
// 4518  *
// 4519  * @param   pInMsg - incoming message to process
// 4520  *
// 4521  * @return  TRUE if command processed. FALSE, otherwise.
// 4522  */
// 4523 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
// 4524 {
// 4525   zclWriteCmd_t *writeCmd;
// 4526   zclWriteRspCmd_t *writeRspCmd;
// 4527   zclAttrRec_t attrRec;
// 4528   uint16 dataLen;
// 4529   uint16 curLen = 0;
// 4530   uint8 j = 0;
// 4531   uint8 i;
// 4532 
// 4533   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
// 4534 
// 4535   // Allocate space for Write Response Command
// 4536   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4537                    + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
// 4538   if ( writeRspCmd == NULL )
// 4539   {
// 4540     return FALSE; // EMBEDDED RETURN
// 4541   }
// 4542 
// 4543   // If any attribute cannot be written, no attribute values are changed. Hence,
// 4544   // make sure all the attributes are supported and writable
// 4545   for ( i = 0; i < writeCmd->numAttr; i++ )
// 4546   {
// 4547     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4548 
// 4549     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4550                           statusRec->attrID, &attrRec ) )
// 4551     {
// 4552       // Attribute is not supported - stop here
// 4553       writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4554       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4555       break;
// 4556     }
// 4557 
// 4558     if ( statusRec->dataType != attrRec.attr.dataType )
// 4559     {
// 4560       // Attribute data type is incorrect - stope here
// 4561       writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4562       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4563       break;
// 4564     }
// 4565 
// 4566     if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
// 4567     {
// 4568       // Attribute is not writable - stop here
// 4569       writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
// 4570       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4571       break;
// 4572     }
// 4573 
// 4574     if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
// 4575     {
// 4576       // Not authorized to write - stop here
// 4577       writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
// 4578       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4579       break;
// 4580     }
// 4581 
// 4582     // Attribute Data length
// 4583     if ( attrRec.attr.dataPtr != NULL )
// 4584     {
// 4585       dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
// 4586     }
// 4587     else // Use CB
// 4588     {
// 4589       dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4590                                              statusRec->attrID );
// 4591     }
// 4592 
// 4593     // add padding if needed
// 4594     if ( PADDING_NEEDED( dataLen ) )
// 4595     {
// 4596       dataLen++;
// 4597     }
// 4598 
// 4599     curLen += dataLen;
// 4600   } // for loop
// 4601 
// 4602   writeRspCmd->numAttr = j;
// 4603   if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
// 4604   {
// 4605     uint8 *curDataPtr;
// 4606     zclWriteRec_t *curWriteRec;
// 4607 
// 4608     // calculate the length of the current data header
// 4609     uint8 hdrLen = j * sizeof( zclWriteRec_t );
// 4610 
// 4611     // Allocate space to keep a copy of the current data
// 4612     curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
// 4613     if ( curWriteRec == NULL )
// 4614     {
// 4615       zcl_mem_free(writeRspCmd );
// 4616       return FALSE; // EMBEDDED RETURN
// 4617     }
// 4618 
// 4619     curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
// 4620 
// 4621     // Write the new data over
// 4622     for ( i = 0; i < writeCmd->numAttr; i++ )
// 4623     {
// 4624       uint8 status;
// 4625       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4626       zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
// 4627 
// 4628       if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4629                             statusRec->attrID, &attrRec ) )
// 4630       {
// 4631         break; // should never happen
// 4632       }
// 4633 
// 4634       // Keep a copy of the current data before before writing the new data over
// 4635       curStatusRec->attrID = statusRec->attrID;
// 4636       curStatusRec->attrData = curDataPtr;
// 4637 
// 4638       if ( attrRec.attr.dataPtr != NULL )
// 4639       {
// 4640         // Read the current value
// 4641         zclReadAttrData( curDataPtr, &attrRec, &dataLen );
// 4642 
// 4643         // Write the new attribute value
// 4644         status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4645                                    &attrRec, statusRec );
// 4646       }
// 4647       else // Use CBs
// 4648       {
// 4649         // Read the current value
// 4650         zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4651                                 statusRec->attrID, curDataPtr, &dataLen );
// 4652         // Write the new attribute value
// 4653         status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4654                                           &attrRec, statusRec->attrData );
// 4655       }
// 4656 
// 4657       // If successful, a write attribute status record shall NOT be generated
// 4658       if ( status != ZCL_STATUS_SUCCESS )
// 4659       {
// 4660         writeRspCmd->attrList[j].status = status;
// 4661         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4662 
// 4663         // Since this write failed, we need to revert all the pervious writes
// 4664         zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
// 4665         break;
// 4666       }
// 4667 
// 4668       // add padding if needed
// 4669       if ( PADDING_NEEDED( dataLen ) )
// 4670       {
// 4671         dataLen++;
// 4672       }
// 4673 
// 4674       curDataPtr += dataLen;
// 4675     } // for loop
// 4676 
// 4677     writeRspCmd->numAttr = j;
// 4678     if ( writeRspCmd->numAttr  == 0 )
// 4679     {
// 4680       // Since all records were written successful, include a single status record
// 4681       // in the resonse command with the status field set to SUCCESS and the
// 4682       // attribute ID field omitted.
// 4683       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
// 4684       writeRspCmd->numAttr = 1;
// 4685     }
// 4686 
// 4687     zcl_mem_free( curWriteRec );
// 4688   }
// 4689 
// 4690   zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4691                     pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4692                     true, pInMsg->hdr.transSeqNum );
// 4693   zcl_mem_free( writeRspCmd );
// 4694 
// 4695   return TRUE;
// 4696 }
// 4697 #endif // ZCL_WRITE
// 4698 
// 4699 #ifdef ZCL_DISCOVER
// 4700 /*********************************************************************
// 4701  * @fn      zclProcessInDiscAttrs
// 4702  *
// 4703  * @brief   Process the "Profile" Discover Attributes Commands
// 4704  *
// 4705  * @param   pInMsg - incoming message to process
// 4706  *
// 4707  * @return  TRUE if command processed. FALSE, otherwise.
// 4708  */
// 4709 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
// 4710 {
// 4711   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4712   zclAttrRec_t attrRec;
// 4713   uint16 attrID;
// 4714   uint8 numAttrs;
// 4715   uint8 i;
// 4716 
// 4717   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
// 4718 
// 4719   // Find out the number of attributes supported within the specified range
// 4720   for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
// 4721   {
// 4722     // finds the next attribute on this endpoint/cluster after the range.
// 4723     // attributes must be in numerical order in the list.
// 4724     if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4725     {
// 4726       break;
// 4727     }
// 4728   }
// 4729 
// 4730   numAttrs = i;  // store range of attributes in buffer
// 4731 
// 4732     // Process message for either attributes or extended attributes
// 4733   if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
// 4734   {
// 4735     zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4736   }
// 4737   else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
// 4738   {
// 4739     zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4740   }
// 4741 
// 4742   return TRUE;
// 4743 }
// 4744 
// 4745 /*********************************************************************
// 4746  * @fn      zclProcessInDiscAttrsCmd
// 4747  *
// 4748  * @brief   Process the Discover Attributes Command
// 4749  *
// 4750  * @param   pInMsg - incoming message to process
// 4751  *
// 4752  * @param   pDiscoverCmd - structure from requesting command
// 4753  *
// 4754  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4755  *
// 4756  * @return  none
// 4757  */
// 4758 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4759 {
// 4760   zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
// 4761   uint8 discComplete = TRUE;
// 4762   zclAttrRec_t attrRec;
// 4763   uint16 attrID;
// 4764   uint8 i;
// 4765 
// 4766   // Allocate space for the response command
// 4767   pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
// 4768                                                           + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
// 4769   if ( pDiscoverRsp == NULL )
// 4770   {
// 4771     return; // EMBEDDED RETURN
// 4772   }
// 4773 
// 4774   if ( numAttrs != 0 )
// 4775   {
// 4776     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4777     {
// 4778       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4779       {
// 4780         break; // should not happen, as numAttrs already calculated
// 4781       }
// 4782 
// 4783       pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
// 4784       pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
// 4785     }
// 4786 
// 4787     // Are there more attributes to be discovered?
// 4788     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4789     {
// 4790       discComplete = FALSE;
// 4791     }
// 4792   }
// 4793 
// 4794   pDiscoverRsp->discComplete = discComplete;
// 4795   pDiscoverRsp->numAttr = numAttrs;
// 4796 
// 4797   zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4798                                pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
// 4799                                true, pInMsg->hdr.transSeqNum );
// 4800   zcl_mem_free( pDiscoverRsp );
// 4801 
// 4802   return;
// 4803 }
// 4804 
// 4805 /*********************************************************************
// 4806  * @fn      zclProcessInDiscAttrsExtCmd
// 4807  *
// 4808  * @brief   Process the Discover Attributes Extended Command
// 4809  *
// 4810  * @param   pInMsg - incoming message to process
// 4811  *
// 4812  * @param   pDiscoverCmd - structure from requesting command
// 4813  *
// 4814  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4815  *
// 4816  * @return  none
// 4817  */
// 4818 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4819 {
// 4820   zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
// 4821   uint8 discComplete = TRUE;
// 4822   zclAttrRec_t attrRec;
// 4823   uint16 attrID;
// 4824   uint8 i;
// 4825 
// 4826     // Allocate space for the response command
// 4827   pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
// 4828                                                          + sizeof ( zclExtAttrInfo_t ) * numAttrs );
// 4829   if ( pDiscoverExtRsp == NULL )
// 4830   {
// 4831     return; // EMBEDDED RETURN
// 4832   }
// 4833 
// 4834 
// 4835   if ( numAttrs != 0 )
// 4836   {
// 4837     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4838     {
// 4839       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4840       {
// 4841         break; // Should not happen, as numAttrs already calculated
// 4842       }
// 4843 
// 4844       pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
// 4845       pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
// 4846       pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
// 4847     }
// 4848 
// 4849     // Are there more attributes to be discovered?
// 4850     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4851     {
// 4852       discComplete = FALSE;
// 4853     }
// 4854   }
// 4855 
// 4856   pDiscoverExtRsp->discComplete = discComplete;
// 4857   pDiscoverExtRsp->numAttr = numAttrs;
// 4858 
// 4859   zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4860                                pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
// 4861                                true, pInMsg->hdr.transSeqNum );
// 4862 
// 4863   zcl_mem_free( pDiscoverExtRsp );
// 4864 
// 4865   return;
// 4866 }
// 4867 
// 4868 /*********************************************************************
// 4869  * @fn      zclProcessInDiscCmd
// 4870  *
// 4871  * @brief   Process the "Profile" Discover Command
// 4872  *
// 4873  * @param   pInMsg - incoming message to process
// 4874  *
// 4875  * @return  TRUE if command processed. FALSE, otherwise.
// 4876  */
// 4877 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
// 4878 {
// 4879   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 4880   zclDiscoverCmdsCmdRsp_t cmdRsp;
// 4881   ZStatus_t status;
// 4882   zclCommandRec_t cmdRec;
// 4883   uint8 cmdID;
// 4884   uint8 i;
// 4885   uint8 j;
// 4886 
// 4887   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
// 4888 
// 4889   // Find out the number of commands supported within the specified range
// 4890   for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
// 4891   {
// 4892     if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4893     {
// 4894       break;  // Command not supported
// 4895     }
// 4896   }
// 4897 
// 4898   // Allocate space for the response command
// 4899   cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
// 4900 
// 4901   if ( cmdRsp.pCmdID == NULL )
// 4902   {
// 4903     return FALSE; // EMBEDDED RETURN
// 4904   }
// 4905 
// 4906   if ( i != 0 )
// 4907   {
// 4908     for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
// 4909     {
// 4910       if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4911       {
// 4912         break; // Attribute not supported
// 4913       }
// 4914 
// 4915       cmdRsp.pCmdID[j] = cmdRec.cmdID;
// 4916     }
// 4917   }
// 4918 
// 4919   // Are there more commands to be discovered?
// 4920   if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4921   {
// 4922     cmdRsp.discComplete = FALSE;
// 4923   }
// 4924   else
// 4925   {
// 4926     cmdRsp.discComplete = TRUE;
// 4927   }
// 4928 
// 4929   // pass the command requested
// 4930   cmdRsp.cmdType = pInMsg->hdr.commandID;
// 4931 
// 4932   // store number of commands returned
// 4933   cmdRsp.numCmd = j;
// 4934 
// 4935   status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4936                                       pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
// 4937                                       true, pInMsg->hdr.transSeqNum );
// 4938 
// 4939   zcl_mem_free( cmdRsp.pCmdID );
// 4940 
// 4941   if ( status == ZSuccess )
// 4942   {
// 4943     return TRUE;
// 4944   }
// 4945   else
// 4946   {
// 4947     return FALSE;
// 4948   }
// 4949 }
// 4950 
// 4951 #endif // ZCL_DISCOVER
// 4952 
// 4953 
// 4954 /*********************************************************************
// 4955 *********************************************************************/
// 
// 4 631 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
//    92 bytes in segment CODE_C
//    16 bytes in segment XDATA_Z
// 
//   266 bytes of CODE     memory
// 4 631 bytes of HUGECODE memory
//    16 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
