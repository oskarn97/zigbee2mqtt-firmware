###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:24
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\common\hal_assert.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW525A.tmp ("C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\common\hal_assert.c" -D
#        FEATURE_SYSTEM_STATS -D CC2531ZNP -D POWER_SAVING -D xTC_LINKKEY_JOIN
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\cc2531\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\class_cdc\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List\hal_assert.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj\hal_assert.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\hal\common\hal_assert.c
      1          /**************************************************************************************************
      2            Filename:       hal_assert.c
      3            Revised:        $Date: 2014-07-23 12:14:30 -0700 (Wed, 23 Jul 2014) $
      4            Revision:       $Revision: 39492 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          #include "hal_assert.h"
     46          #include "hal_types.h"
     47          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_defs.h"
     49          #include "hal_mcu.h"
     50          
     51          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
     52              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
     53            /* for access to debug data */
     54          #include "mac_rx.h"
     55          #include "mac_tx.h"
     56          #endif
     57          
     58          /* ------------------------------------------------------------------------------------------------
     59           *                                       Local Prototypes
     60           * ------------------------------------------------------------------------------------------------
     61           */
     62          void halAssertHazardLights(void);
     63          
     64          
     65          /**************************************************************************************************
     66           * @fn          halAssertHandler
     67           *
     68           * @brief       Logic to handle an assert.
     69           *
     70           * @param       none
     71           *
     72           * @return      none
     73           **************************************************************************************************
     74           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     75          void halAssertHandler( void )
   \                     halAssertHandler:
     76          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     77          #if defined( HAL_ASSERT_RESET )
     78            HAL_SYSTEM_RESET();
     79          #elif defined ( HAL_ASSERT_LIGHTS )
     80            halAssertHazardLights();
     81          #elif defined( HAL_ASSERT_SPIN )
     82            volatile uint8 i = 1;
     83            HAL_DISABLE_INTERRUPTS();
     84            while(i);
     85          #endif
     86          
     87            return;
   \   000000   02....       LJMP      ?BRET
     88          }
     89          
     90          #if !defined ASSERT_WHILE
     91          /**************************************************************************************************
     92           * @fn          halAssertHazardLights
     93           *
     94           * @brief       Blink LEDs to indicate an error.
     95           *
     96           * @param       none
     97           *
     98           * @return      none
     99           **************************************************************************************************
    100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    101          void halAssertHazardLights(void)
   \                     halAssertHazardLights:
    102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    103            enum
    104            {
    105              DEBUG_DATA_RSTACK_HIGH_OFS,
    106              DEBUG_DATA_RSTACK_LOW_OFS,
    107              DEBUG_DATA_TX_ACTIVE_OFS,
    108              DEBUG_DATA_RX_ACTIVE_OFS,
    109          
    110          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430)
    111              DEBUG_DATA_INT_MASK_OFS,
    112          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    113              DEBUG_DATA_INT_MASK0_OFS,
    114              DEBUG_DATA_INT_MASK1_OFS,
    115          #endif
    116          
    117              DEBUG_DATA_SIZE
    118            };
    119          
    120            uint8 buttonHeld;
    121            uint8 debugData[DEBUG_DATA_SIZE];
    122          
    123            /* disable all interrupts before anything else */
    124            HAL_DISABLE_INTERRUPTS();
   \   00000A   C2AF         CLR       0xa8.7
    125          
    126            /*-------------------------------------------------------------------------------
    127             *  Initialize LEDs and turn them off.
    128             */
    129            HAL_BOARD_INIT();
   \   00000C   53BEFB       ANL       0xbe,#0xfb
   \                     ??halAssertHazardLights_0:
   \   00000F   E59D         MOV       A,0x9d
   \   000011   A2E6         MOV       C,0xE0 /* A   */.6
   \   000013   50FA         JNC       ??halAssertHazardLights_0
   \   000015   00           NOP
   \   000016   78F8         MOV       R0,#-0x8
   \   000018   7901         MOV       R1,#0x1
   \                     ??halAssertHazardLights_1:
   \   00001A   00           NOP
   \   00001B   E8           MOV       A,R0
   \   00001C   24FF         ADD       A,#-0x1
   \   00001E   18           DEC       R0
   \   00001F   E9           MOV       A,R1
   \   000020   34FF         ADDC      A,#-0x1
   \   000022   F9           MOV       R1,A
   \   000023   E8           MOV       A,R0
   \   000024   49           ORL       A,R1
   \   000025   70F3         JNZ       ??halAssertHazardLights_1
   \   000027   75C680       MOV       0xc6,#-0x80
   \                     ??halAssertHazardLights_2:
   \   00002A   7480         MOV       A,#-0x80
   \   00002C   659E         XRL       A,0x9e
   \   00002E   70FA         JNZ       ??halAssertHazardLights_2
   \   000030   43BE04       ORL       0xbe,#0x4
   \   000033   906270       MOV       DPTR,#0x6270
   \   000036   7408         MOV       A,#0x8
   \   000038   F0           MOVX      @DPTR,A
   \   000039   D280         SETB      0x80.0
   \   00003B   43FD01       ORL       0xfd,#0x1
   \   00003E   C291         CLR       0x90.1
   \   000040   43FE02       ORL       0xfe,#0x2
    130          
    131            HAL_TURN_OFF_LED1();
   \   000043   D280         SETB      0x80.0
    132            HAL_TURN_OFF_LED2();
   \   000045   C291         CLR       0x90.1
    133            HAL_TURN_OFF_LED3();
   \   000047   D280         SETB      0x80.0
    134            HAL_TURN_OFF_LED4();
   \   000049   C291         CLR       0x90.1
   \   00004B   8019         SJMP      ??halAssertHazardLights_3
    135          
    136            /*-------------------------------------------------------------------------------
    137             *  Master infinite loop.
    138             */
    139            for (;;)
    140            {
    141              buttonHeld = 0;
    142          
    143              /*-------------------------------------------------------------------------------
    144               *  "Hazard lights" loop.  A held keypress will exit this loop.
    145               */
    146              do
    147              {
    148                HAL_LED_BLINK_DELAY();
    149          
    150                /* toggle LEDS, the #ifdefs are in case HAL has logically remapped non-existent LEDs */
    151          #if (HAL_NUM_LEDS >= 1)
    152                HAL_TOGGLE_LED1();
    153          #if (HAL_NUM_LEDS >= 2)
    154                HAL_TOGGLE_LED2();
    155          #if (HAL_NUM_LEDS >= 3)
    156                HAL_TOGGLE_LED3();
    157          #if (HAL_NUM_LEDS >= 4)
    158                HAL_TOGGLE_LED4();
    159          #endif
    160          #endif
    161          #endif
    162          #endif
    163          
    164                /* escape hatch to continue execution, set escape to '1' to continue execution */
    165                {
    166                  static uint8 escape = 0;
    167                  if (escape)
    168                  {
    169                    escape = 0;
    170                    return;
    171                  }
    172                }
    173          
    174                /* break out of loop if button is held long enough */
    175                if (HAL_PUSH_BUTTON1())
    176                {
    177                  buttonHeld++;
    178                }
    179                else
    180                {
    181                  buttonHeld = 0;
    182                }
    183              }
    184              while (buttonHeld != 10);  /* loop until button is held specified number of loops */
    185          
    186              /*-------------------------------------------------------------------------------
    187               *  Just exited from "hazard lights" loop.
    188               */
    189          
    190              /* turn off all LEDs */
    191              HAL_TURN_OFF_LED1();
    192              HAL_TURN_OFF_LED2();
    193              HAL_TURN_OFF_LED3();
    194              HAL_TURN_OFF_LED4();
    195          
    196              /* wait for button release */
    197              HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    198          
    199              /*-------------------------------------------------------------------------------
    200               *  Load debug data into memory.
    201               */
    202          #ifdef HAL_MCU_AVR
    203              {
    204                uint8 * pStack;
    205                pStack = (uint8 *) SP;
    206                pStack++; /* point to return address on stack */
    207                debugData[DEBUG_DATA_RSTACK_HIGH_OFS] = *pStack;
    208                pStack++;
    209                debugData[DEBUG_DATA_RSTACK_LOW_OFS] = *pStack;
    210              }
    211              debugData[DEBUG_DATA_INT_MASK_OFS] = EIMSK;
    212          #endif
    213          
    214          #if (defined HAL_MCU_CC2430)
    215              debugData[DEBUG_DATA_INT_MASK_OFS] = RFIM;
    216          #elif (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
    217              debugData[DEBUG_DATA_INT_MASK0_OFS] = RFIRQM0;
    218              debugData[DEBUG_DATA_INT_MASK1_OFS] = RFIRQM1;
    219          #endif
    220          
    221          
    222          #if (defined HAL_MCU_AVR) || (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || \
    223              (defined HAL_MCU_CC2533) || (defined HAL_MCU_MSP430)
    224              debugData[DEBUG_DATA_TX_ACTIVE_OFS] = macTxActive;
    225              debugData[DEBUG_DATA_RX_ACTIVE_OFS] = macRxActive;
    226          #endif
    227          
    228             /* initialize for data dump loop */
    229              {
    230                uint8 iBit;
    231                uint8 iByte;
    232          
    233                iBit  = 0;
    234                iByte = 0;
    235          
    236                /*-------------------------------------------------------------------------------
    237                 *  Data dump loop.  A button press cycles data bits to an LED.
    238                 */
    239                while (iByte < DEBUG_DATA_SIZE)
    240                {
    241                  /* wait for key press */
    242                  while(!HAL_PUSH_BUTTON1());
    243          
    244                  /* turn on all LEDs for first bit of byte, turn on three LEDs if not first bit */
    245                  HAL_TURN_ON_LED1();
    246                  HAL_TURN_ON_LED2();
    247                  HAL_TURN_ON_LED3();
    248                  if (iBit == 0)
    249                  {
    250                    HAL_TURN_ON_LED4();
    251                  }
    252                  else
    253                  {
    254                    HAL_TURN_OFF_LED4();
    255                  }
    256          
    257                  /* wait for debounced key release */
    258                  HAL_DEBOUNCE(!HAL_PUSH_BUTTON1());
    259          
    260                  /* turn off all LEDs */
    261                  HAL_TURN_OFF_LED1();
    262                  HAL_TURN_OFF_LED2();
    263                  HAL_TURN_OFF_LED3();
    264                  HAL_TURN_OFF_LED4();
    265          
    266                  /* output value of data bit to LED1 */
    267                  if (debugData[iByte] & (1 << (7 - iBit)))
    268                  {
    269                    HAL_TURN_ON_LED1();
    270                  }
    271                  else
    272                  {
    273                    HAL_TURN_OFF_LED1();
   \                     ??halAssertHazardLights_4:
   \   00004D   D280         SETB      0x80.0
    274                  }
    275          
    276                  /* advance to next bit */
    277                  iBit++;
   \                     ??halAssertHazardLights_5:
   \   00004F   09           INC       R1
    278                  if (iBit == 8)
   \   000050   7408         MOV       A,#0x8
   \   000052   69           XRL       A,R1
   \   000053   6003         JZ        $+5
   \   000055   02....       LJMP      ??halAssertHazardLights_6 & 0xFFFF
    279                  {
    280                    iBit = 0;
   \   000058   7900         MOV       R1,#0x0
    281                    iByte++;
   \   00005A   0C           INC       R4
    282                  }
   \   00005B   EC           MOV       A,R4
   \   00005C   C3           CLR       C
   \   00005D   9406         SUBB      A,#0x6
   \   00005F   5003         JNC       $+5
   \   000061   02....       LJMP      ??halAssertHazardLights_6 & 0xFFFF
    283                }
    284              }
    285          
    286              /*
    287               *  About to enter "hazard lights" loop again.  Turn off LED1 in case the last bit
    288               *  displayed happened to be one.  This guarantees all LEDs are off at the start of
    289               *  the flashing loop which uses a toggle operation to change LED states.
    290               */
    291              HAL_TURN_OFF_LED1();
   \   000064   D280         SETB      0x80.0
   \                     ??halAssertHazardLights_3:
   \   000066   7900         MOV       R1,#0x0
   \                     ??halAssertHazardLights_7:
   \   000068   7406         MOV       A,#0x6
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   E4           CLR       A
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   \   000075   8012         SJMP      ??halAssertHazardLights_8
   \                     ??halAssertHazardLights_9:
   \   000077   90....       MOV       DPTR,#__Constant_1
   \   00007A   78..         MOV       R0,#?V0
   \   00007C   12....       LCALL     ?L_MOV_X
   \   00007F   7406         MOV       A,#0x6
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?L_ADD_TO_X
   \                     ??halAssertHazardLights_8:
   \   000089   90....       MOV       DPTR,#__Constant_5800
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?L_MOV_X
   \   000091   7406         MOV       A,#0x6
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?UL_GT_X
   \   00009B   40DA         JC        ??halAssertHazardLights_9
   \   00009D   A280         MOV       C,0x80.0
   \   00009F   5004         JNC       ??halAssertHazardLights_10
   \   0000A1   C280         CLR       0x80.0
   \   0000A3   8002         SJMP      ??halAssertHazardLights_11
   \                     ??halAssertHazardLights_10:
   \   0000A5   D280         SETB      0x80.0
   \                     ??halAssertHazardLights_11:
   \   0000A7   A291         MOV       C,0x90.1
   \   0000A9   5004         JNC       ??halAssertHazardLights_12
   \   0000AB   C291         CLR       0x90.1
   \   0000AD   8002         SJMP      ??halAssertHazardLights_13
   \                     ??halAssertHazardLights_12:
   \   0000AF   D291         SETB      0x90.1
   \                     ??halAssertHazardLights_13:
   \   0000B1   90....       MOV       DPTR,#??escape
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   600C         JZ        ??halAssertHazardLights_14
   \   0000B7   E4           CLR       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   740A         MOV       A,#0xa
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BE   7F04         MOV       R7,#0x4
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??halAssertHazardLights_14:
   \   0000C3   A292         MOV       C,0x90.2
   \   0000C5   409F         JC        ??halAssertHazardLights_3
   \   0000C7   09           INC       R1
   \   0000C8   740A         MOV       A,#0xa
   \   0000CA   69           XRL       A,R1
   \   0000CB   709B         JNZ       ??halAssertHazardLights_7
   \   0000CD   D280         SETB      0x80.0
   \   0000CF   C291         CLR       0x90.1
   \   0000D1   D280         SETB      0x80.0
   \   0000D3   C291         CLR       0x90.1
   \   0000D5   7800         MOV       R0,#0x0
   \   0000D7   7900         MOV       R1,#0x0
   \                     ??halAssertHazardLights_15:
   \   0000D9   A292         MOV       C,0x90.2
   \   0000DB   4004         JC        ??halAssertHazardLights_16
   \   0000DD   7800         MOV       R0,#0x0
   \   0000DF   7900         MOV       R1,#0x0
   \                     ??halAssertHazardLights_16:
   \   0000E1   08           INC       R0
   \   0000E2   E8           MOV       A,R0
   \   0000E3   7001         JNZ       ??halAssertHazardLights_17
   \   0000E5   09           INC       R1
   \                     ??halAssertHazardLights_17:
   \   0000E6   C3           CLR       C
   \   0000E7   94F4         SUBB      A,#-0xc
   \   0000E9   E9           MOV       A,R1
   \   0000EA   9401         SUBB      A,#0x1
   \   0000EC   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000EE   65D0         XRL       A,PSW
   \   0000F0   33           RLC       A
   \   0000F1   40E6         JC        ??halAssertHazardLights_15
   \   0000F3   9061A3       MOV       DPTR,#0x61a3
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   C0E0         PUSH      A
   \   0000F9   7404         MOV       A,#0x4
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   D0E0         POP       A
   \   000100   F0           MOVX      @DPTR,A
   \   000101   9061A4       MOV       DPTR,#0x61a4
   \   000104   E0           MOVX      A,@DPTR
   \   000105   C0E0         PUSH      A
   \   000107   7405         MOV       A,#0x5
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   D0E0         POP       A
   \   00010E   F0           MOVX      @DPTR,A
   \   00010F   90....       MOV       DPTR,#macTxActive
   \   000112   E0           MOVX      A,@DPTR
   \   000113   C0E0         PUSH      A
   \   000115   7402         MOV       A,#0x2
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   D0E0         POP       A
   \   00011C   F0           MOVX      @DPTR,A
   \   00011D   90....       MOV       DPTR,#macRxActive
   \   000120   E0           MOVX      A,@DPTR
   \   000121   C0E0         PUSH      A
   \   000123   7403         MOV       A,#0x3
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   D0E0         POP       A
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   7900         MOV       R1,#0x0
   \   00012D   7C00         MOV       R4,#0x0
   \                     ??halAssertHazardLights_6:
   \   00012F   A292         MOV       C,0x90.2
   \   000131   40FC         JC        ??halAssertHazardLights_6
   \   000133   C280         CLR       0x80.0
   \   000135   D291         SETB      0x90.1
   \   000137   C280         CLR       0x80.0
   \   000139   E9           MOV       A,R1
   \   00013A   7004         JNZ       ??halAssertHazardLights_18
   \   00013C   D291         SETB      0x90.1
   \   00013E   8002         SJMP      ??halAssertHazardLights_19
   \                     ??halAssertHazardLights_18:
   \   000140   C291         CLR       0x90.1
   \                     ??halAssertHazardLights_19:
   \   000142   7A00         MOV       R2,#0x0
   \   000144   7B00         MOV       R3,#0x0
   \                     ??halAssertHazardLights_20:
   \   000146   A292         MOV       C,0x90.2
   \   000148   4004         JC        ??halAssertHazardLights_21
   \   00014A   7A00         MOV       R2,#0x0
   \   00014C   7B00         MOV       R3,#0x0
   \                     ??halAssertHazardLights_21:
   \   00014E   0A           INC       R2
   \   00014F   EA           MOV       A,R2
   \   000150   7001         JNZ       ??halAssertHazardLights_22
   \   000152   0B           INC       R3
   \                     ??halAssertHazardLights_22:
   \   000153   C3           CLR       C
   \   000154   94F4         SUBB      A,#-0xc
   \   000156   EB           MOV       A,R3
   \   000157   9401         SUBB      A,#0x1
   \   000159   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00015B   65D0         XRL       A,PSW
   \   00015D   33           RLC       A
   \   00015E   40E6         JC        ??halAssertHazardLights_20
   \   000160   D280         SETB      0x80.0
   \   000162   C291         CLR       0x90.1
   \   000164   D280         SETB      0x80.0
   \   000166   C291         CLR       0x90.1
   \   000168   75..01       MOV       ?V0,#0x1
   \   00016B   75..00       MOV       ?V1,#0x0
   \   00016E   7407         MOV       A,#0x7
   \   000170   C3           CLR       C
   \   000171   99           SUBB      A,R1
   \   000172   78..         MOV       R0,#?V0
   \   000174   12....       LCALL     ?S_SHL
   \   000177   EC           MOV       A,R4
   \   000178   FA           MOV       R2,A
   \   000179   85..82       MOV       DPL,?XSP + 0
   \   00017C   85..83       MOV       DPH,?XSP + 1
   \   00017F   E582         MOV       A,DPL
   \   000181   2A           ADD       A,R2
   \   000182   F582         MOV       DPL,A
   \   000184   E4           CLR       A
   \   000185   3583         ADDC      A,DPH
   \   000187   F583         MOV       DPH,A
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   55..         ANL       A,?V0
   \   00018C   7003         JNZ       $+5
   \   00018E   02....       LJMP      ??halAssertHazardLights_4 & 0xFFFF
   \   000191   C280         CLR       0x80.0
   \   000193   02....       LJMP      ??halAssertHazardLights_5 & 0xFFFF
   \   000196                REQUIRE _A_IEN0
   \   000196                REQUIRE SLEEPCMD
   \   000196                REQUIRE SLEEPSTA
   \   000196                REQUIRE CLKCONCMD
   \   000196                REQUIRE CLKCONSTA
   \   000196                REQUIRE _A_P0
   \   000196                REQUIRE P0DIR
   \   000196                REQUIRE _A_P1
   \   000196                REQUIRE P1DIR
    292            }
    293          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??escape:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5800:
   \   000000   00580000     DD 22528

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halAssertHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??halAssertHazardLights::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    halAssertHazardLights
    294          #endif
    295          
    296          /* ------------------------------------------------------------------------------------------------
    297           *                                    Compile Time Assertions
    298           * ------------------------------------------------------------------------------------------------
    299           */
    300          
    301          /* integrity check of type sizes */
    302          HAL_ASSERT_SIZE(  int8, 1);
    303          HAL_ASSERT_SIZE( uint8, 1);
    304          HAL_ASSERT_SIZE( int16, 2);
    305          HAL_ASSERT_SIZE(uint16, 2);
    306          HAL_ASSERT_SIZE( int32, 4);
    307          HAL_ASSERT_SIZE(uint32, 4);
    308          
    309          
    310          /**************************************************************************************************
    311          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   halAssertHandler
      1     22   halAssertHazardLights


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0DIR
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_IEN0
       1  _A_P0
       1  _A_P1
       4  __Constant_1
       4  __Constant_5800
       1  escape
       3  halAssertHandler
       6  halAssertHandler::?relay
     406  halAssertHazardLights
       6  halAssertHazardLights::?relay

 
 409 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
  12 bytes of CODE     memory
   0 bytes of CONST    memory (+ 8 bytes shared)
   0 bytes of DATA     memory (+ 9 bytes shared)
 409 bytes of HUGECODE memory
   1 byte  of XDATA    memory

Errors: none
Warnings: none
