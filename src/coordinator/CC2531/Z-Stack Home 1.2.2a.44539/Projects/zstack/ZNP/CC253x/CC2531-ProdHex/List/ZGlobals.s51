///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              16/Feb/2018  22:13:39
// Copyright 2004-2017 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Components\stack\sys\ZGlobals.c
//    Command line       =  
//        -f C:\Users\Oskar\AppData\Local\Temp\EWD4D2.tmp ("C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Components\stack\sys\ZGlobals.c" -D FEATURE_SYSTEM_STATS
//        -D CC2531ZNP -D POWER_SAVING -D ASSERT_RESET -D FAKE_CRC_SHDW -D
//        xTC_LINKKEY_JOIN -lC "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List" -lA
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\Obj" -e
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DTC_LINKKEY_JOIN -DMT_UTIL_FUNC -DMT_SYS_FUNC
//        -DMT_AF_FUNC -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC
//        -DMT_ZDO_FUNC -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\cc2531\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\class_cdc\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  German_Germany.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List\ZGlobals.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZGlobals

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??zgInit::?relay`
        FUNCTION `??zgInit::?relay`,0203H
        PUBLIC `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,0203H
        PUBLIC `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,0203H
        PUBLIC `??zgSetItem::?relay`
        FUNCTION `??zgSetItem::?relay`,0203H
        PUBLIC `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,0203H
        PUBLIC zgApsAckWaitMultiplier
        PUBLIC zgApsAllowR19Sec
        PUBLIC zgApsDefaultMaxBindingTime
        PUBLIC zgApsLinkKeyType
        PUBLIC zgApsMinDupRejTableSize
        PUBLIC zgApsNonMemberRadius
        PUBLIC zgApsTrustCenterAddr
        PUBLIC zgApsUseExtendedPANID
        PUBLIC zgApsUseInsecureJoin
        PUBLIC zgApscAckWaitDurationPolled
        PUBLIC zgApscDupRejTimeoutCount
        PUBLIC zgApscDupRejTimeoutInc
        PUBLIC zgApscMaxFrameRetries
        PUBLIC zgBcastDeliveryTime
        PUBLIC zgChildAgingEnable
        PUBLIC zgConcentratorDiscoveryTime
        PUBLIC zgConcentratorEnable
        PUBLIC zgConcentratorRC
        PUBLIC zgConcentratorRadius
        PUBLIC zgConfigPANID
        PUBLIC zgDefaultChannelList
        PUBLIC zgDefaultRejoinBackoff
        PUBLIC zgDefaultRejoinScan
        PUBLIC zgDefaultStartingScanDuration
        PUBLIC zgDeviceLogicalType
        PUBLIC zgEndDeviceConfiguration
        PUBLIC zgEndDeviceKAInterval
        PUBLIC zgEndDeviceTimeoutValue
        PUBLIC zgExtendedPANID
        PUBLIC zgIndirectMsgTimeout
        PUBLIC zgInit
        FUNCTION zgInit,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC zgInitItems
        FUNCTION zgInitItems,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC zgMaxBcastRetires
        PUBLIC zgMaxDataRetries
        PUBLIC zgMaxPollFailureRetries
        PUBLIC zgNwkCommissionedNwkAddr
        PUBLIC zgNwkEndDeviceTimeoutDefault
        PUBLIC zgNwkLeaveRequestAllowed
        PUBLIC zgNwkMgrMinTransmissions
        PUBLIC zgNwkMgrMode
        PUBLIC zgNwkMode
        PUBLIC zgNwkParentInformation
        PUBLIC zgNwkSrcRtgExpiryTime
        PUBLIC zgPassiveAckTimeout
        PUBLIC zgPollRate
        PUBLIC zgPreConfigKeys
        PUBLIC zgQueuedPollRate
        PUBLIC zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zgRejoinPollRate
        PUBLIC zgResponsePollRate
        PUBLIC zgRouteDiscoveryTime
        PUBLIC zgRouteExpiryTime
        PUBLIC zgRouterOffAssocCleanup
        PUBLIC zgSapiEndpoint
        PUBLIC zgSecurePermitJoin
        PUBLIC zgSecurityMode
        PUBLIC zgSetItem
        FUNCTION zgSetItem,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zgStackProfile
        PUBLIC zgStartDelay
        PUBLIC zgUseDefaultTCLK
        PUBLIC zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zgZdoDirectCB
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
ZDSecMgrInitNVKeyTables SYMBOL "ZDSecMgrInitNVKeyTables"
`??ZDSecMgrInitNVKeyTables::?relay` SYMBOL "?relay", ZDSecMgrInitNVKeyTables
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
zgInit              SYMBOL "zgInit"
`??zgInit::?relay`  SYMBOL "?relay", zgInit
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgSetItem           SYMBOL "zgSetItem"
`??zgSetItem::?relay` SYMBOL "?relay", zgSetItem
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions

        EXTERN `??ZDSecMgrInitNVKeyTables::?relay`
        FUNCTION `??ZDSecMgrInitNVKeyTables::?relay`,00H
        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN ZDSecMgrInitNVKeyTables
        FUNCTION ZDSecMgrInitNVKeyTables,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN defaultKey
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\sys\ZGlobals.c
//    1 /**************************************************************************************************
//    2   Filename:       ZGlobals.c
//    3   Revised:        $Date: 2015-10-05 14:56:09 -0700 (Mon, 05 Oct 2015) $
//    4   Revision:       $Revision: 44517 $
//    5 
//    6   Description:    User definable Z-Stack parameters.
//    7 
//    8 
//    9   Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "ZComDef.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "ZDObject.h"
//   47 #include "ZGlobals.h"
//   48 #include "ZDNwkMgr.h"
//   49 #include "OnBoard.h"
//   50 #include "ZDSecMgr.h"
//   51 
//   52 /*********************************************************************
//   53  * MACROS
//   54  */
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * TYPEDEFS
//   62  */
//   63 
//   64 typedef struct zgItem
//   65 {
//   66   uint16 id;
//   67   uint16 len;
//   68   void *buf;
//   69 } zgItem_t;
//   70 
//   71 /*********************************************************************
//   72  * NWK GLOBAL VARIABLES
//   73  */
//   74 
//   75 // Polling values

        RSEG XDATA_I:XDATA:NOROOT(0)
//   76 uint32 zgPollRate = POLL_RATE;
zgPollRate:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zgPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   77 uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
zgQueuedPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgQueuedPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   78 uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
zgResponsePollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgResponsePollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   79 uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
zgRejoinPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgRejoinPollRate>`
        REQUIRE __INIT_XDATA_I
//   80 
//   81 // Rejoin backoff (silent period ) duration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   82 uint32 zgDefaultRejoinBackoff = REJOIN_BACKOFF;
zgDefaultRejoinBackoff:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zgDefaultRejoinBackoff>`
        REQUIRE __INIT_XDATA_I
//   83 
//   84 // Rejoin scan duration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   85 uint32 zgDefaultRejoinScan = REJOIN_SCAN ;
zgDefaultRejoinScan:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zgDefaultRejoinScan>`
        REQUIRE __INIT_XDATA_I
//   86 
//   87 // Transmission retries numbers

        RSEG XDATA_I:XDATA:NOROOT(0)
//   88 uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
zgMaxDataRetries:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgMaxDataRetries>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   89 uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
zgMaxPollFailureRetries:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
        REQUIRE __INIT_XDATA_I
//   90 
//   91 // Default channel list

        RSEG XDATA_I:XDATA:NOROOT(0)
//   92 uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
zgDefaultChannelList:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zgDefaultChannelList>`
        REQUIRE __INIT_XDATA_I
//   93 
//   94 // Default starting scan duration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   95 uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
zgDefaultStartingScanDuration:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
        REQUIRE __INIT_XDATA_I
//   96 
//   97 // Stack profile Id

        RSEG XDATA_I:XDATA:NOROOT(0)
//   98 uint8 zgStackProfile = STACK_PROFILE_ID;
zgStackProfile:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgStackProfile>`
        REQUIRE __INIT_XDATA_I
//   99 
//  100 // Default indirect message holding timeout

        RSEG XDATA_I:XDATA:NOROOT(0)
//  101 uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
zgIndirectMsgTimeout:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
        REQUIRE __INIT_XDATA_I
//  102 
//  103 // Security mode

        RSEG XDATA_I:XDATA:NOROOT(0)
//  104 uint8 zgSecurityMode = ZG_SECURITY_MODE;
zgSecurityMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgSecurityMode>`
        REQUIRE __INIT_XDATA_I
//  105 
//  106 // Secure permit join

        RSEG XDATA_I:XDATA:NOROOT(0)
//  107 uint8 zgSecurePermitJoin = TRUE;
zgSecurePermitJoin:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgSecurePermitJoin>`
        REQUIRE __INIT_XDATA_I
//  108 
//  109 // Trust center address

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  110 uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
zgApsTrustCenterAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  111 
//  112 // Route Discovery Time - amount of time that a route request lasts

        RSEG XDATA_I:XDATA:NOROOT(0)
//  113 uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
zgRouteDiscoveryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
        REQUIRE __INIT_XDATA_I
//  114 
//  115 // Route expiry

        RSEG XDATA_I:XDATA:NOROOT(0)
//  116 uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
zgRouteExpiryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgRouteExpiryTime>`
        REQUIRE __INIT_XDATA_I
//  117 
//  118 // Extended PAN Id

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  119 uint8 zgExtendedPANID[Z_EXTADDR_LEN];
zgExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  120 
//  121 // Broadcast parameters

        RSEG XDATA_I:XDATA:NOROOT(0)
//  122 uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
zgMaxBcastRetires:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgMaxBcastRetires>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  123 uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
zgPassiveAckTimeout:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgPassiveAckTimeout>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  124 uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
zgBcastDeliveryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgBcastDeliveryTime>`
        REQUIRE __INIT_XDATA_I
//  125 
//  126 // Network mode

        RSEG XDATA_I:XDATA:NOROOT(0)
//  127 uint8 zgNwkMode = NWK_MODE;
zgNwkMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkMode>`
        REQUIRE __INIT_XDATA_I
//  128 
//  129 // Many-to-one values

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
zgConcentratorEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
zgConcentratorDiscoveryTime:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  132 uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
zgConcentratorRadius:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgConcentratorRadius>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
zgConcentratorRC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  134 uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
zgNwkSrcRtgExpiryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
        REQUIRE __INIT_XDATA_I
//  135 
//  136 // Cleanup Child Table according to routing traffic

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 uint8 zgRouterOffAssocCleanup = FALSE;
zgRouterOffAssocCleanup:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  138 
//  139 // Determines whether or not a remote NWK leave request command frame received
//  140 // by the local device is accepted .

        RSEG XDATA_I:XDATA:NOROOT(0)
//  141 uint8 zgNwkLeaveRequestAllowed = TRUE;
zgNwkLeaveRequestAllowed:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
        REQUIRE __INIT_XDATA_I
//  142 
//  143 //=======    Child Aging PARENT ROUTER (ZR/ZC) configuration   ========
//  144 // You can setup a router to support Child Table Aging in 1 of 2 modes of
//  145 // operation.  The first mode is NWK_PARENT_INFO_ORPHAN_NOTIFICATION and it
//  146 // expects end devices to use orphan scan periodically as a means of a keep-alive
//  147 // notification to the parent.  The other mode is NWK_PARENT_INFO_MAC_DATA_POLL
//  148 // which uses the end device's MAC POLL request as the keep-alive notification.
//  149 // The first method is preferred for new devices, where the end devices provide
//  150 // support for it (which will be manditory in future Zigbee Home Automation
//  151 // Specifications).
//  152 // The second method is compatible with older end devices without the need for
//  153 // specific child aging support.
//  154 //
//  155 // The method supported by the router (or coordinator) is determined at build time
//  156 // by setting zgNwkParentInformation to either NWK_PARENT_INFO_ORPHAN_NOTIFICATION
//  157 // or NWK_PARENT_INFO_MAC_DATA_POLL.
//  158 //
//  159 // End device built with Child Table Aging support both methods, the method is
//  160 // determined by the parent and communicated at run-time.
//  161 #if ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  162 uint8 zgNwkParentInformation = NWK_PARENT_INFO_UNDEFINED;
zgNwkParentInformation:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  163 #else
//  164 uint8 zgNwkParentInformation = NWK_PARENT_INFO_ORPHAN_NOTIFICATION;
//  165 #endif
//  166 
//  167 // This is an index into table Requested Timeout Enumerated Values.
//  168 // It is used by the parent router, it indicates the default timeout value
//  169 // for any end device that does not negotiate a different timeout value

        RSEG XDATA_I:XDATA:NOROOT(0)
//  170 uint8 zgNwkEndDeviceTimeoutDefault = NWK_END_DEV_TIMEOUT_DEFAULT;
zgNwkEndDeviceTimeoutDefault:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkEndDeviceTimeoutDefault`
        REQUIRE __INIT_XDATA_I
//  171 //=====================================================================
//  172 
//  173 //==========    Child Aging END DEVICE configuration    ===============
//  174 // Values used by End Device when sending End Device Timeout Request

        RSEG XDATA_I:XDATA:NOROOT(0)
//  175 uint8 zgEndDeviceTimeoutValue  = END_DEV_TIMEOUT_VALUE;
zgEndDeviceTimeoutValue:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgEndDeviceTimeoutValue>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  176 uint8 zgEndDeviceConfiguration = END_DEV_CONFIGURATION;
zgEndDeviceConfiguration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  177 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  178 uint32 zgEndDeviceKAInterval = 0;
zgEndDeviceKAInterval:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  179 //=====================================================================
//  180 
//  181 // Determines if the Child Aging Table Management process is active or not.
//  182 // This feature is optional and it is disabled by default.
//  183 //
//  184 // NOTICE:  Before enabling Child Aging make sure to review all the related
//  185 // definitions in this file, especially zgNwkParentInformation.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  186 uint8 zgChildAgingEnable = FALSE;
zgChildAgingEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  187 
//  188 /*********************************************************************
//  189  * APS GLOBAL VARIABLES
//  190  */
//  191 
//  192 // The maximum number of retries allowed after a transmission failure

        RSEG XDATA_I:XDATA:NOROOT(0)
//  193 uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
zgApscMaxFrameRetries:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
        REQUIRE __INIT_XDATA_I
//  194 
//  195 // The maximum number of seconds (milliseconds) to wait for an
//  196 // acknowledgement to a transmitted frame.
//  197 
//  198 // This number is used by polled devices.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  199 uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
zgApscAckWaitDurationPolled:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
        REQUIRE __INIT_XDATA_I
//  200 
//  201 // This number is used by non-polled devices in the following formula:
//  202 //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

        RSEG XDATA_I:XDATA:NOROOT(0)
//  203 uint8 zgApsAckWaitMultiplier = 2;
zgApsAckWaitMultiplier:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
        REQUIRE __INIT_XDATA_I
//  204 
//  205 // The maximum number of milliseconds for the end device binding

        RSEG XDATA_I:XDATA:NOROOT(0)
//  206 uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
zgApsDefaultMaxBindingTime:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
        REQUIRE __INIT_XDATA_I
//  207 
//  208 // The 64-big identifier of the network to join or form.
//  209 // Default set to all zeros

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  210 uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
zgApsUseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  211 
//  212 // A boolean flag that indicates whether it is OK to use insecure join
//  213 // on startup. Default set to TRUE

        RSEG XDATA_I:XDATA:NOROOT(0)
//  214 uint8 zgApsUseInsecureJoin = TRUE;
zgApsUseInsecureJoin:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
        REQUIRE __INIT_XDATA_I
//  215 
//  216 // The radius of broadcast multicast transmissions

        RSEG XDATA_I:XDATA:NOROOT(0)
//  217 uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
zgApsNonMemberRadius:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsNonMemberRadius>`
        REQUIRE __INIT_XDATA_I
//  218 
//  219 // Commissioned Network Address

        RSEG XDATA_I:XDATA:NOROOT(0)
//  220 uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
zgNwkCommissionedNwkAddr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
        REQUIRE __INIT_XDATA_I
//  221 
//  222 // APS Duplication Rejection table variables

        RSEG XDATA_I:XDATA:NOROOT(0)
//  223 uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
zgApscDupRejTimeoutInc:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  224 uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
zgApscDupRejTimeoutCount:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  225 uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
zgApsMinDupRejTableSize:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
        REQUIRE __INIT_XDATA_I
//  226 
//  227 
//  228 
//  229 /*********************************************************************
//  230  * SECURITY GLOBAL VARIABLES
//  231  */
//  232 
//  233 // If TRUE, preConfigKey should be configured on all devices on the network
//  234 // If false, it is configured only on the coordinator and sent to other
//  235 // devices upon joining.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  236 uint8 zgPreConfigKeys = FALSE;
zgPreConfigKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  237 
//  238 // The type of link key in use.  This will determine the security
//  239 // policies associated with sending and receiving APS messages.
//  240 // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
//  241 // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

        RSEG XDATA_I:XDATA:NOROOT(0)
//  242 uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
zgApsLinkKeyType:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsLinkKeyType>`
        REQUIRE __INIT_XDATA_I
//  243 
//  244 // With changes introduced in R20 of the ZigBee specification,
//  245 // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
//  246 //
//  247 // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
//  248 // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
//  249 // different value:
//  250 //      ZC should have             zgUseDefaultTCLK = FALSE
//  251 //      Other devices should have  zgUseDefaultTCLK = TRUE
//  252 // This is initialized in zgInitItems()
//  253 // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
//  254 // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  255 uint8 zgUseDefaultTCLK;
zgUseDefaultTCLK:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  256 
//  257 #if defined ( APP_TP2_TEST_MODE )
//  258 uint8 guTxApsSecON = FALSE;
//  259 uint8 guEnforceRxApsSec = TP_GU_ALL;
//  260 #endif
//  261 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  262 uint8 zgApsAllowR19Sec = FALSE;
zgApsAllowR19Sec:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  263 
//  264 /*********************************************************************
//  265  * ZDO GLOBAL VARIABLES
//  266  */
//  267 
//  268 // Configured PAN ID

        RSEG XDATA_I:XDATA:NOROOT(0)
//  269 uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
zgConfigPANID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgConfigPANID>`
        REQUIRE __INIT_XDATA_I
//  270 
//  271 // Device Logical Type

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  272 uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
zgDeviceLogicalType:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  273 
//  274 // Startup Delay

        RSEG XDATA_I:XDATA:NOROOT(0)
//  275 uint8 zgStartDelay = START_DELAY;
zgStartDelay:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgStartDelay>`
        REQUIRE __INIT_XDATA_I
//  276 
//  277 #if !defined MT_TASK
//  278 // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  279 uint8 zgZdoDirectCB = FALSE;
zgZdoDirectCB:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  280 #endif
//  281 
//  282 // Min number of attempted transmissions for Channel Interference detection

        RSEG XDATA_I:XDATA:NOROOT(0)
//  283 uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
zgNwkMgrMinTransmissions:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
        REQUIRE __INIT_XDATA_I
//  284 
//  285 /*********************************************************************
//  286  * APPLICATION GLOBAL VARIABLES
//  287  */
//  288 
//  289 // Network Manager Mode

        RSEG XDATA_I:XDATA:NOROOT(0)
//  290 uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
zgNwkMgrMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkMgrMode>`
        REQUIRE __INIT_XDATA_I
//  291 
//  292 /*********************************************************************
//  293  * NON-STANDARD GLOBAL VARIABLES
//  294  */
//  295 
//  296 // Simple API Endpoint

        RSEG XDATA_I:XDATA:NOROOT(0)
//  297 uint8 zgSapiEndpoint = SAPI_ENDPOINT;
zgSapiEndpoint:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgSapiEndpoint>`
        REQUIRE __INIT_XDATA_I
//  298 
//  299 /*********************************************************************
//  300  * LOCAL VARIABLES
//  301  */
//  302 
//  303 /*********************************************************************
//  304  * ZGlobal Item Table
//  305  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  306 static CONST zgItem_t zgItemTable[] =
zgItemTable:
        DATA16
        DW 143
        DW 1
        DW zgZdoDirectCB
        DW 135
        DW 1
        DW zgDeviceLogicalType
        DW 53
        DW 4
        DW zgPollRate
        DW 37
        DW 2
        DW zgQueuedPollRate
        DW 38
        DW 2
        DW zgResponsePollRate
        DW 39
        DW 2
        DW zgRejoinPollRate
        DW 40
        DW 1
        DW zgMaxDataRetries
        DW 41
        DW 1
        DW zgMaxPollFailureRetries
        DW 132
        DW 4
        DW zgDefaultChannelList
        DW 134
        DW 1
        DW zgDefaultStartingScanDuration
        DW 42
        DW 1
        DW zgStackProfile
        DW 43
        DW 1
        DW zgIndirectMsgTimeout
        DW 44
        DW 1
        DW zgRouteExpiryTime
        DW 45
        DW 8
        DW zgExtendedPANID
        DW 46
        DW 1
        DW zgMaxBcastRetires
        DW 47
        DW 1
        DW zgPassiveAckTimeout
        DW 48
        DW 1
        DW zgBcastDeliveryTime
        DW 49
        DW 1
        DW zgNwkMode
        DW 50
        DW 1
        DW zgConcentratorEnable
        DW 51
        DW 1
        DW zgConcentratorDiscoveryTime
        DW 52
        DW 1
        DW zgConcentratorRadius
        DW 54
        DW 1
        DW zgConcentratorRC
        DW 56
        DW 1
        DW zgNwkSrcRtgExpiryTime
        DW 57
        DW 1
        DW zgRouteDiscoveryTime
        DW 131
        DW 2
        DW zgConfigPANID
        DW 99
        DW 1
        DW zgPreConfigKeys
        DW 100
        DW 1
        DW zgSecurityMode
        DW 101
        DW 1
        DW zgSecurePermitJoin
        DW 109
        DW 1
        DW zgUseDefaultTCLK
        DW 113
        DW 8
        DW zgApsTrustCenterAddr
        DW 102
        DW 1
        DW zgApsLinkKeyType
        DW 67
        DW 1
        DW zgApscMaxFrameRetries
        DW 68
        DW 2
        DW zgApscAckWaitDurationPolled
        DW 69
        DW 1
        DW zgApsAckWaitMultiplier
        DW 70
        DW 2
        DW zgApsDefaultMaxBindingTime
        DW 71
        DW 8
        DW zgApsUseExtendedPANID
        DW 72
        DW 1
        DW zgApsUseInsecureJoin
        DW 75
        DW 1
        DW zgApsNonMemberRadius
        DW 4
        DW 1
        DW zgStartDelay
        DW 161
        DW 1
        DW zgSapiEndpoint
        DW 55
        DW 1
        DW zgNwkMgrMode
        DW 136
        DW 1
        DW zgNwkMgrMinTransmissions
        DW 60
        DW 1
        DW zgRouterOffAssocCleanup
        DW 61
        DW 1
        DW zgNwkLeaveRequestAllowed
        DW 73
        DW 2
        DW zgNwkCommissionedNwkAddr
        DW 103
        DW 1
        DW zgApsAllowR19Sec
        DW 77
        DW 2
        DW zgApscDupRejTimeoutInc
        DW 78
        DW 1
        DW zgApscDupRejTimeoutCount
        DW 79
        DW 2
        DW zgApsMinDupRejTableSize
        DW 62
        DW 1
        DW zgChildAgingEnable
        DW 81
        DW 1
        DW zgNwkParentInformation
        DW 82
        DW 1
        DW zgNwkEndDeviceTimeoutDefault
        DW 83
        DW 1
        DW zgEndDeviceTimeoutValue
        DW 84
        DW 1
        DW zgEndDeviceConfiguration
        DW 0
        DW 0
        DW 0H
//  307 {
//  308 #if defined ( NV_INIT )
//  309 #if !defined MT_TASK
//  310   {
//  311     ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
//  312   },
//  313 #endif
//  314   {
//  315     ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
//  316   },
//  317   {
//  318     ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
//  319   },
//  320   {
//  321     ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
//  322   },
//  323   {
//  324     ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
//  325   },
//  326   {
//  327     ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
//  328   },
//  329   {
//  330     ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
//  331   },
//  332   {
//  333     ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
//  334   },
//  335   {
//  336     ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
//  337   },
//  338   {
//  339     ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
//  340   },
//  341   {
//  342     ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
//  343   },
//  344   {
//  345     ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
//  346   },
//  347   {
//  348     ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
//  349   },
//  350   {
//  351     ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
//  352   },
//  353   {
//  354     ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
//  355   },
//  356   {
//  357     ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
//  358   },
//  359   {
//  360     ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
//  361   },
//  362   {
//  363     ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
//  364   },
//  365   {
//  366     ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
//  367   },
//  368   {
//  369     ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
//  370   },
//  371   {
//  372     ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
//  373   },
//  374   {
//  375     ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
//  376   },
//  377   {
//  378     ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
//  379   },
//  380   {
//  381     ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
//  382   },
//  383 #ifndef NONWK
//  384   {
//  385     ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
//  386   },
//  387   {
//  388     ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
//  389   },
//  390   {
//  391     ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
//  392   },
//  393   {
//  394     ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
//  395   },
//  396   {
//  397     ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
//  398   },
//  399   {
//  400     ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
//  401   },
//  402   {
//  403     ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
//  404   },
//  405 #endif // NONWK
//  406   {
//  407     ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
//  408   },
//  409   {
//  410     ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
//  411   },
//  412   {
//  413     ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
//  414   },
//  415   {
//  416     ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
//  417   },
//  418   {
//  419     ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
//  420   },
//  421   {
//  422     ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
//  423   },
//  424   {
//  425     ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
//  426   },
//  427   {
//  428     ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
//  429   },
//  430   {
//  431     ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
//  432   },
//  433   {
//  434     ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
//  435   },
//  436   {
//  437     ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
//  438   },
//  439   {
//  440     ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
//  441   },
//  442   {
//  443     ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
//  444   },
//  445   {
//  446     ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
//  447   },
//  448   {
//  449     ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
//  450   },
//  451   {
//  452     ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
//  453   },
//  454   {
//  455     ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
//  456   },
//  457   {
//  458     ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
//  459   },
//  460   {
//  461     ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
//  462   },
//  463   {
//  464     ZCD_NV_NWK_PARENT_INFO, sizeof(zgNwkParentInformation), &zgNwkParentInformation
//  465   },
//  466   {
//  467     ZCD_NV_NWK_ENDDEV_TIMEOUT_DEF, sizeof(zgNwkEndDeviceTimeoutDefault), &zgNwkEndDeviceTimeoutDefault
//  468   },
//  469   {
//  470     ZCD_NV_END_DEV_TIMEOUT_VALUE, sizeof(zgEndDeviceTimeoutValue), &zgEndDeviceTimeoutValue
//  471   },
//  472   {
//  473     ZCD_NV_END_DEV_CONFIGURATION, sizeof(zgEndDeviceConfiguration), &zgEndDeviceConfiguration
//  474   },
//  475 #endif // NV_INIT
//  476   // Last item -- DO NOT MOVE IT!
//  477   {
//  478     0x00, 0, NULL
//  479   }
//  480 };
//  481 
//  482 /*********************************************************************
//  483  * LOCAL FUNCTIONS
//  484  */
//  485 
//  486 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
//  487 
//  488 static void zgUpgradeNVItems( void );
//  489 
//  490 #ifndef NONWK
//  491 static uint8 zgPreconfigKeyInit( uint8 setDefault );
//  492 #endif
//  493 
//  494 /*********************************************************************
//  495  * @fn       zgItemInit()
//  496  *
//  497  * @brief
//  498  *
//  499  *   Initialize a global item. If the item doesn't exist in NV memory,
//  500  *   write the system default (value passed in) into NV memory. But if
//  501  *   it exists, set the item to the value stored in NV memory.
//  502  *
//  503  *   Also, if setDefault is TRUE and the item exists, we will write
//  504  *   the default value to NV space.
//  505  *
//  506  * @param   id - item id
//  507  * @param   len - item len
//  508  * @param   buf - pointer to the item
//  509  * @param   setDefault - TRUE to set default, not read
//  510  *
//  511  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  512  *          exist in NV, NV_OPER_FAILED if failure.
//  513  */
//  514 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
//  515 {
//  516   uint8 status;
//  517 
//  518   // If the item doesn't exist in NV memory, create and initialize
//  519   // it with the value passed in.
//  520   status = osal_nv_item_init( id, len, buf );
//  521   if ( status == ZSUCCESS )
//  522   {
//  523     if ( setDefault )
//  524     {
//  525       // Write the default value back to NV
//  526       status = osal_nv_write( id, 0, len, buf );
//  527     }
//  528     else
//  529     {
//  530       // The item exists in NV memory, read it from NV memory
//  531       status = osal_nv_read( id, 0, len, buf );
//  532     }
//  533   }
//  534 
//  535   return (status);
//  536 }
//  537 
//  538 /*********************************************************************
//  539  * API FUNCTIONS
//  540  */
//  541 
//  542 /*********************************************************************
//  543  * @fn          zgInit
//  544  *
//  545  * @brief
//  546  *
//  547  *   Initialize the Z-Stack Globals. If an item doesn't exist in
//  548  *   NV memory, write the system default into NV memory. But if
//  549  *   it exists, set the item to the value stored in NV memory.
//  550  *
//  551  * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
//  552  *       that the Config state items (zgItemTable) need to be
//  553  *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
//  554  *
//  555  * @param       none
//  556  *
//  557  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  558  *              exist in NV, NV_OPER_FAILED if failure.
//  559  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  560 uint8 zgInit( void )
zgInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zgInit
        CODE
//  561 {
        FUNCALL zgInit, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, ZDSecMgrInitNVKeyTables
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 18
        MOV       A,#-0x12
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  562   uint8  setDefault = FALSE;
        MOV       R6,#0x0
//  563 
//  564   // Do we want to default the Config state values
//  565   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV       A,R1
        MOV       R0,A
        MOV       C,0xE0 /* A   */.0
        JNC       ??zgInit_0
//  566   {
//  567     setDefault = TRUE;
        MOV       R6,#0x1
//  568   }
//  569 
//  570 #if defined ( FEATURE_SYSTEM_STATS )
//  571   {
//  572     // This sections tracks the number of resets
//  573     uint16 bootCnt = 0;
??zgInit_0:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ??Subroutine4_0 & 0xFFFF
//  574 
//  575     // Update the Boot Counter
//  576     if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
??CrossCallReturnLabel_6:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JNZ       ??zgInit_1
//  577     {
//  578       // Get the old value from NV memory
//  579       osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  580     }
//  581 
//  582     // Increment the Boot Counter and store it into NV memory
//  583     if ( setDefault )
??zgInit_1:
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JNC       ??zgInit_2
//  584     {
//  585       bootCnt = 0;
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??zgInit_3
//  586     }
//  587     else
//  588     {
//  589       bootCnt++;
??zgInit_2:
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
//  590     }
//  591 
//  592     osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
//  593   }
??zgInit_3:
        LCALL     ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  594 #endif  // FEATURE_SYSTEM_STATS
//  595 
//  596   zgUpgradeNVItems();
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x24
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x35
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V3,R3
        MOV       A,R2
        ORL       A,?V3
        JNZ       ??zgInit_4
        MOV       A,#0x2
        XRL       A,?V0
        ORL       A,?V1
        JNZ       ??zgInit_4
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x24
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPTR,#zgPollRate
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#zgPollRate & 0xff
        MOV       ?V1,#(zgPollRate >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       R2,#0x35
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        ; Setup parameters for call to function osal_nv_delete
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       R2,#0x24
        MOV       R3,#0x0
        LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
//  597 
//  598   // Initialize the Extended PAN ID as my own extended address
//  599   ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
??zgInit_4:
        ; Setup parameters for call to function ZMacGetReq
        MOV       R2,#zgExtendedPANID & 0xff
        MOV       R3,#(zgExtendedPANID >> 8) & 0xff
        MOV       R1,#-0x1e
        LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
//  600 
//  601   // Initialize the items table
//  602   zgInitItems( setDefault );
        ; Setup parameters for call to function zgInitItems
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
//  603 
//  604 #ifndef NONWK
//  605   if ( ZG_SECURE_ENABLED )
//  606   {
//  607     // Initialize the Pre-Configured Key to the default key
//  608     zgPreconfigKeyInit( setDefault );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#defaultKey & 0xff
        MOV       ?V1,#(defaultKey >> 8) & 0xff
        MOV       ?V2,#-0x80
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        ; Setup parameters for call to function osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        JNZ       ??zgInit_5
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JNC       ??zgInit_5
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,#0x10
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
??zgInit_5:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  609 
//  610     // Initialize NV items for all Keys: NWK, APS, TCLK and Master
//  611     ZDSecMgrInitNVKeyTables( setDefault );
        ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDSecMgrInitNVKeyTables::?relay`; Banked call to: ZDSecMgrInitNVKeyTables
//  612   }
//  613 #endif // NONWK
//  614 
//  615   // Clear the Config State default
//  616   if ( setDefault )
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        JNC       ??zgInit_6
//  617   {
//  618     zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV       R2,#0x1
        MOV       R1,#0x0
        LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  619   }
//  620 
//  621   return ( ZSUCCESS );
??zgInit_6:
        MOV       R1,#0x0
        MOV       A,#0x12
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  622 }
          CFI EndBlock cfiBlock0
//  623 
//  624 /*********************************************************************
//  625  * @fn          zgInitItems
//  626  *
//  627  * @brief       Initializes RAM variables from NV.  If NV items don't
//  628  *              exist, then the NV is initialize with what is in RAM
//  629  *              variables.
//  630  *
//  631  * @param       none
//  632  *
//  633  * @return      none
//  634  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  635 void zgInitItems( uint8 setDefault )
zgInitItems:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zgInitItems
        CODE
//  636 {
        FUNCALL zgInitItems, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInitItems, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInitItems, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V5,R1
//  637   uint8  i = 0;
        MOV       ?V4,#0x0
//  638 
//  639   if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
        MOV       DPTR,#zgApsLinkKeyType
        MOVX      A,@DPTR
        MOV       DPTR,#zgUseDefaultTCLK
        JNZ       ??zgInitItems_0
//  640   {
//  641     zgUseDefaultTCLK = FALSE;
        CLR       A
        SJMP      ??zgInitItems_1
//  642   }
//  643   else
//  644   {
//  645     // Most of the time default TCLK will be used
//  646     zgUseDefaultTCLK = TRUE;
??zgInitItems_0:
        MOV       A,#0x1
??zgInitItems_1:
        MOVX      @DPTR,A
        SJMP      ??zgInitItems_2
//  647   }
//  648 
//  649   while ( zgItemTable[i].id != 0x00 )
//  650   {
??zgInitItems_3:
        ; Setup parameters for call to function osal_nv_read
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
??zgInitItems_4:
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  651     // Initialize the item
//  652     zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
//  653 
//  654     // Move on to the next item
//  655     i++;
??zgInitItems_5:
        INC       ?V4
??zgInitItems_2:
        MOV       A,?V4
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       A,R2
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ        ??zgInitItems_6
        MOV       A,?V4
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       A,R2
        MOV       R1,A
        MOV       A,#zgItemTable & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(zgItemTable >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        MOV       ?V2,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       ?V3,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVC      A,@A+DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
        MOV       ?V0,DPL
        MOV       ?V1,DPH
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVC      A,@A+DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       DPH,A
        POP       DPL
          CFI CFA_SP SP+0
        MOV       R6,DPL
        MOV       R7,DPH
        ; Setup parameters for call to function osal_nv_item_init
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        JNZ       ??zgInitItems_5
        MOV       A,?V5
        MOV       R0,#?V2
        JNZ       $+5
        LJMP      ??zgInitItems_3 & 0xFFFF
        ; Setup parameters for call to function osal_nv_write
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        LJMP      ??zgInitItems_4 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 14)
//  656   }
//  657 }
??zgInitItems_6:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  658 
//  659 /*********************************************************************
//  660  * @fn          zgReadStartupOptions
//  661  *
//  662  * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
//  663  *
//  664  * @param       none
//  665  *
//  666  * @return      the ZCD_NV_STARTUP_OPTION NV item
//  667  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  668 uint8 zgReadStartupOptions( void )
zgReadStartupOptions:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zgReadStartupOptions
        CODE
//  669 {
        FUNCALL zgReadStartupOptions, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgReadStartupOptions, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  670   // Default to Use Config State and Use Network State
//  671   uint8 startupOption = 0;
        LCALL     ?Subroutine1 & 0xFFFF
//  672 
//  673   // This should have been done in ZMain.c, but just in case.
//  674   if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
//  675                               sizeof(startupOption),
//  676                               &startupOption ) == ZSUCCESS )
??CrossCallReturnLabel_4:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        JNZ       ??zgReadStartupOptions_0
//  677   {
//  678     // Read saved startup control
//  679     osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  680                   0,
//  681                   sizeof( startupOption ),
//  682                   &startupOption);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  683   }
//  684   return ( startupOption );
??zgReadStartupOptions_0:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R1,A
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  685 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  686 
//  687 /*********************************************************************
//  688  * @fn          zgWriteStartupOptions
//  689  *
//  690  * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
//  691  *
//  692  * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
//  693  *               clear bit. The set bit is an OR operation, and the
//  694  *               clear bit is an AND ~(bitOptions) operation.
//  695  *
//  696  * @param       bitOptions - which bits to perform action on:
//  697  *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
//  698  *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  699  *
//  700  * @return      ZSUCCESS if successful
//  701  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  702 uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
zgWriteStartupOptions:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zgWriteStartupOptions
        CODE
//  703 {
        FUNCALL zgWriteStartupOptions, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgWriteStartupOptions, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R2
        MOV       R7,A
//  704   uint8 status;
//  705   uint8 startupOptions = 0;
        LCALL     ?Subroutine1 & 0xFFFF
//  706 
//  707   status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  708                 0,
//  709                 sizeof( startupOptions ),
//  710                 &startupOptions );
??CrossCallReturnLabel_5:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R1,A
//  711 
//  712   if ( status == ZSUCCESS )
        JNZ       ??zgWriteStartupOptions_0
//  713   {
//  714     if ( action == ZG_STARTUP_SET )
        MOV       A,#-0x1
        XRL       A,R6
        JNZ       ??zgWriteStartupOptions_1
//  715     {
//  716       // Set bits
//  717       startupOptions |= bitOptions;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ORL       A,R7
        SJMP      ??zgWriteStartupOptions_2
//  718     }
//  719     else
//  720     {
//  721       // Clear bits
//  722       startupOptions &= (bitOptions ^ 0xFF);
??zgWriteStartupOptions_1:
        MOV       A,#-0x1
        XRL       A,R7
        MOV       R0,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ANL       A,R0
//  723     }
//  724 
//  725     // Changed?
//  726     status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
//  727                  0,
//  728                  sizeof( startupOptions ),
//  729                  &startupOptions );
//  730   }
??zgWriteStartupOptions_2:
        LCALL     ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R1,A
//  731 
//  732   return ( status );
??zgWriteStartupOptions_0:
        SJMP      ?Subroutine0
//  733 }
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zgReadStartupOptions
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zgWriteStartupOptions
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zgInit
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zgInit
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zgWriteStartupOptions
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zgReadStartupOptions
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zgWriteStartupOptions
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_read
        ; Setup parameters for call to function osal_nv_item_init
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//  734 
//  735 /*********************************************************************
//  736  * @fn          zgSetItem
//  737  *
//  738  * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
//  739  *
//  740  * @param       id - NV ID
//  741  *              len - NV item length
//  742  *              buf - pointer to the input buffer
//  743  *
//  744  * @return      none
//  745  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  746 void zgSetItem( uint16 id, uint16 len, void *buf )
zgSetItem:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function zgSetItem
        CODE
//  747 {
        FUNCALL zgSetItem, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  748 
//  749   uint8  i = 0;
        MOV       R6,#0x0
        SJMP      ??zgSetItem_0
//  750 
//  751   // Look up the NV item table
//  752   while ( zgItemTable[i].id != 0x00 )
//  753   {
//  754     if( zgItemTable[i].id == id )
//  755     {
//  756       if ( zgItemTable[i].len == len )
//  757       {
//  758         osal_memcpy( zgItemTable[i].buf, buf, len );
//  759       }
//  760       break;
//  761     }
//  762     // Move on to the next item
//  763     i++;
??zgSetItem_1:
        INC       R6
??zgSetItem_0:
        MOV       A,R6
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       R7,B
        MOV       A,R7
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ        ??zgSetItem_2
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        MOV       A,R2
        XRL       A,R0
        JNZ       ??zgSetItem_3
        MOV       A,R3
        XRL       A,R1
??zgSetItem_3:
        JNZ       ??zgSetItem_1
        MOV       A,R6
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       A,#(zgItemTable + 2) & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#((zgItemTable + 2) >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV       A,R4
        XRL       A,R0
        JNZ       ??zgSetItem_4
        MOV       A,R5
        XRL       A,R1
??zgSetItem_4:
        JNZ       ??zgSetItem_2
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R6
        MOV       B,#0x6
        MUL       AB
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       A,#(zgItemTable + 4) & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#((zgItemTable + 4) >> 8) & 0xff
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R2,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  764   }
//  765 }
??zgSetItem_2:
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function zgInitItems
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zgSetItem
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV       R1,A
        MOV       A,#zgItemTable & 0xff
        ADD       A,R0
        MOV       DPL,A
        MOV       A,#(zgItemTable >> 8) & 0xff
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function zgSetItem
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zgInitItems
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-4
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function zgSetItem
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-4
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,#0x1
        MOVC      A,@A+DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgPollRate>`:
        DATA32
        DD 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgQueuedPollRate>`:
        DATA16
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgResponsePollRate>`:
        DATA16
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRejoinPollRate>`:
        DATA16
        DW 440

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultRejoinBackoff>`:
        DATA32
        DD 900000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultRejoinScan>`:
        DATA32
        DD 900000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxDataRetries>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxPollFailureRetries>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultChannelList>`:
        DATA32
        DD 2048

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultStartingScanDuratio`:
        DATA8
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgStackProfile>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgIndirectMsgTimeout>`:
        DATA8
        DB 7

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgSecurityMode>`:
        DATA8
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgSecurePermitJoin>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRouteDiscoveryTime>`:
        DATA8
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRouteExpiryTime>`:
        DATA8
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxBcastRetires>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgPassiveAckTimeout>`:
        DATA8
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBcastDeliveryTime>`:
        DATA8
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkMode>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgConcentratorRadius>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkSrcRtgExpiryTime>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkLeaveRequestAllowed>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkEndDeviceTimeoutDefault`:
        DATA8
        DB 8

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgEndDeviceTimeoutValue>`:
        DATA8
        DB 8

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscMaxFrameRetries>`:
        DATA8
        DB 3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscAckWaitDurationPolled>`:
        DATA16
        DW 3000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsAckWaitMultiplier>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsDefaultMaxBindingTime>`:
        DATA16
        DW 16000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsUseInsecureJoin>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsNonMemberRadius>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkCommissionedNwkAddr>`:
        DATA16
        DW 65534

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscDupRejTimeoutInc>`:
        DATA16
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscDupRejTimeoutCount>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsMinDupRejTableSize>`:
        DATA16
        DW 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsLinkKeyType>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgConfigPANID>`:
        DATA16
        DW 65535

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgStartDelay>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkMgrMinTransmissions>`:
        DATA8
        DB 20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkMgrMode>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgSapiEndpoint>`:
        DATA8
        DB 224

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgInitItems::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgInitItems

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgReadStartupOptions::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgReadStartupOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgWriteStartupOptions::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgWriteStartupOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgSetItem::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgSetItem

        END
//  766 
//  767 #ifndef NONWK
//  768 /*********************************************************************
//  769  * @fn       zgPreconfigKeyInit()
//  770  *
//  771  * @brief
//  772  *
//  773  *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
//  774  *   write the system default (value passed in) into NV memory. But if
//  775  *   it exists do not overwrite it.
//  776  *
//  777  *   Also, if setDefault is TRUE and the item exists, we will write
//  778  *   the default value to NV space.
//  779  *
//  780  * @param   setDefault - TRUE to set default
//  781  *
//  782  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  783  *          exist in NV, NV_OPER_FAILED if failure.
//  784  */
//  785 static uint8 zgPreconfigKeyInit( uint8 setDefault )
//  786 {
//  787   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  788   uint8 status;
//  789 
//  790   // Initialize the Pre-Configured Key to the default key
//  791   osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
//  792 
//  793   // If the item doesn't exist in NV memory, create and initialize it
//  794   status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
//  795   if ( status == ZSUCCESS )
//  796   {
//  797     if ( setDefault )
//  798     {
//  799       // Write the default value back to NV
//  800       status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
//  801     }
//  802   }
//  803 
//  804   // clear local copy of default key
//  805   osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
//  806 
//  807   return (status);
//  808 }
//  809 #endif
//  810 
//  811 /*********************************************************************
//  812  * @fn       zgUpgradeNVItems()
//  813  *
//  814  * @brief
//  815  *
//  816  *   Function that upgrades NV Items that have changed.
//  817  *
//  818  * @param   none
//  819  *
//  820  * @return  none
//  821  */
//  822 static void zgUpgradeNVItems( void )
//  823 {
//  824 #if defined ( ZCD_NV_POLL_RATE_OLD16 )
//  825   {
//  826     // This conversion will only happen if the old poll rate exists and
//  827     // the new poll rate doesn't exist.  It will read the old poll rate,
//  828     // convert it to the new poll rate, create the new poll rate NV item,
//  829     // then delete the old poll rate NV item.
//  830     uint16 oldNvLen;
//  831     uint16 newNvLen;
//  832 
//  833     // Use the length of the NV items to determine if they exist
//  834     oldNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE_OLD16 );
//  835     newNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE );
//  836     if ( (newNvLen == 0) && (oldNvLen == sizeof ( uint16 )) )
//  837     {
//  838       // The old poll rate exists, so read it and convert to the new 32 bit poll rate
//  839       uint16 oldPollRate;
//  840       osal_nv_read( ZCD_NV_POLL_RATE_OLD16, 0, sizeof(uint16), &oldPollRate );
//  841       zgPollRate = (uint32)oldPollRate;
//  842       osal_nv_item_init( ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate );
//  843       osal_nv_delete( ZCD_NV_POLL_RATE_OLD16, oldNvLen );
//  844     }
//  845   }
//  846 #endif // ZCD_NV_POLL_RATE_OLD16
//  847 }
//  848 
//  849 /*********************************************************************
//  850 *********************************************************************/
// 
// 1 010 bytes in segment BANKED_CODE
//    30 bytes in segment BANK_RELAYS
//   330 bytes in segment CODE_C
//    62 bytes in segment XDATA_I
//    62 bytes in segment XDATA_ID
//    40 bytes in segment XDATA_Z
// 
//   422 bytes of CODE     memory
// 1 010 bytes of HUGECODE memory
//   102 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
