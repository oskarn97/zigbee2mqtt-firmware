###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:27
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_SYS.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW5ED0.tmp ("C:\Texas
#        Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_SYS.c" -D
#        FEATURE_SYSTEM_STATS -D CC2531ZNP -D POWER_SAVING -D xTC_LINKKEY_JOIN
#        -lC "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\cc2531\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\class_cdc\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\List\MT_SYS.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-Debug\Obj\MT_SYS.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_SYS.c
      1          /******************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2015-02-09 19:10:05 -0800 (Mon, 09 Feb 2015) $
      4            Revision:       $Revision: 42469 $
      5          
      6            Description:   MonitorTest functions for SYS commands.
      7          
      8            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           *****************************************************************************/
     39          
     40          /******************************************************************************
     41           * INCLUDES
     42           *****************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "OSAL.h"
     48          #include "OSAL_NV.h"
     49          #include "Onboard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     50          #include "OSAL_Clock.h"
     51          #include "mac_low_level.h"
     52          #include "ZMAC.h"
     53          #include "MT_UART.h"
     54          
     55          #if !defined( CC26XX )
     56            #include "hal_adc.h"
     57          #endif
     58          #if !defined( CC253X_MACNP )
     59            #include "ZGlobals.h"
     60          #endif
     61          #if defined( FEATURE_NVEXID )
     62            #include "zstackconfig.h"
     63          #endif
     64          #if defined( FEATURE_DUAL_MAC )
     65            #include "dmmgr.h"
     66          #endif
     67          #if defined( FEATURE_SYSTEM_STATS )
     68          #include "ZDiags.h"
     69          #endif
     70          #if defined( MT_SYS_JAMMER_FEATURE )
     71            #include "mac_rx.h"
     72            #include "mac_radio_defs.h"
     73          #endif
     74          #if (defined INCLUDE_REVISION_INFORMATION) && ((defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)) //built for bootloader
     75            #include "hal_flash.h"
     76            #include "sb_shared.h"
     77          #endif
     78          
     79          /******************************************************************************
     80           * MACROS
     81           *****************************************************************************/
     82          
     83          /* RPC_CMD responses for MT_SYS commands */
     84          #define MT_ARSP_SYS ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS)
     85          #define MT_SRSP_SYS ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS)
     86          
     87          /* Max possible MT response length, limited by TX buffer and sizeof uint8 */
     88          #define MT_MAX_RSP_LEN  ( MIN( MT_UART_DEFAULT_MAX_TX_BUFF, 255 ) )
     89          
     90          /* Max possible MT response data length, MT protocol overhead */
     91          #define MT_MAX_RSP_DATA_LEN  ( (MT_MAX_RSP_LEN - 1) - SPI_0DATA_MSG_LEN )
     92          
     93          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     94          
     95          #if !defined HAL_GPIO || !HAL_GPIO
     96          #define GPIO_DIR_IN(IDX)
     97          #define GPIO_DIR_OUT(IDX)
     98          #define GPIO_TRI(IDX)
     99          #define GPIO_PULL_UP(IDX)
    100          #define GPIO_PULL_DN(IDX)
    101          #define GPIO_SET(IDX)
    102          #define GPIO_CLR(IDX)
    103          #define GPIO_TOG(IDX)
    104          #define GPIO_GET(IDX) 0
    105          #define GPIO_HiD_SET() (val = 0)
    106          #define GPIO_HiD_CLR() (val = 0)
    107          #endif
    108          
    109          #if defined ( MT_SYS_SNIFFER_FEATURE )
    110          #if defined ( HAL_MCU_CC2530 ) && !defined ( HAL_BOARD_CC2530USB )
    111            // This only works with CC253x chips
    112            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() st         \
    113            (                                                                                                                                                                                                                                   \
    114              OBSSEL3 = 0xFD;                                        \
    115              OBSSEL4 = 0xFC;                                        \
    116              RFC_OBS_CTRL1 = 0x09; /* 9 - sniff clk */              \
    117              RFC_OBS_CTRL2 = 0x08; /* 8 - sniff data */             \
    118              MDMTEST1 |= 0x04;                                      \
    119            )
    120          
    121            // This only works with CC253x chips
    122            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() st        \
    123            (                                                                                                                                                                                                                                   \
    124              OBSSEL3 &= ~0x80;                                                                                                                                                                             \
    125              OBSSEL4 &= ~0x80;                                                                                                                                                                             \
    126              RFC_OBS_CTRL1 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[1] */                                                                                   \
    127              RFC_OBS_CTRL2 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[2] */                                                                                   \
    128              MDMTEST1 &= ~0x04;                                                                                                                                                         \
    129            )
    130          #else
    131            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    132            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    133          #endif
    134          #endif // MT_SYS_SNIFFER_FEATURE
    135          
    136          #define RESET_HARD     0
    137          #define RESET_SOFT     1
    138          #define RESET_SHUTDOWN 2
    139          
    140          /******************************************************************************
    141           * CONSTANTS
    142           *****************************************************************************/
    143          
    144          #if !defined( MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA )
    145          #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
    146          #endif
    147          
    148          #if defined( MT_SYS_FUNC )

   \                                 In  segment XDATA_ROM_C, align 1
    149          static const uint16 MT_SysOsalEventId[] =
   \                     MT_SysOsalEventId:
   \   000000   0008         DW 2048
   \   000002   0004         DW 1024
   \   000004   0002         DW 512
   \   000006   0001         DW 256
    150          {
    151            MT_SYS_OSAL_EVENT_0,
    152            MT_SYS_OSAL_EVENT_1,
    153            MT_SYS_OSAL_EVENT_2,
    154            MT_SYS_OSAL_EVENT_3
    155          };
    156          #endif
    157          
    158          typedef enum {
    159            GPIO_DIR,
    160            GPIO_TRI,
    161            GPIO_SET,
    162            GPIO_CLR,
    163            GPIO_TOG,
    164            GPIO_GET,
    165            GPIO_HiD = 0x12
    166          } GPIO_Op_t;
    167          
    168          #if defined( MT_SYS_JAMMER_FEATURE )
    169            #define JAMMER_CHECK_EVT                           0x0001
    170          
    171            #if !defined( JAMMER_DETECT_CONTINUOUS_EVENTS )
    172              #define JAMMER_DETECT_CONTINUOUS_EVENTS          150
    173            #endif
    174            #if !defined( JAMMER_DETECT_PERIOD_TIME )
    175              #define JAMMER_DETECT_PERIOD_TIME                100  // In milliseconds
    176            #endif
    177            #if !defined( JAMMER_HIGH_NOISE_LEVEL )
    178              #define JAMMER_HIGH_NOISE_LEVEL                  -65
    179            #endif
    180          #endif // MT_SYS_JAMMER_FEATURE
    181          
    182          /******************************************************************************
    183           * EXTERNAL VARIABLES
    184           *****************************************************************************/
    185          #if defined( FEATURE_NVEXID )
    186          extern zstack_Config_t *pZStackCfg;
    187          #endif /* FEATURE_NVEXID */
    188          
    189          /******************************************************************************
    190           * LOCAL VARIABLES
    191           *****************************************************************************/
    192          #if defined( MT_SYS_JAMMER_FEATURE )
    193          static uint8 jammerTaskID;
    194          static uint16 jammerContinuousEvents = JAMMER_DETECT_CONTINUOUS_EVENTS;
    195          static uint16 jammerDetections = JAMMER_DETECT_CONTINUOUS_EVENTS;
    196          static int8 jammerHighNoiseLevel = JAMMER_HIGH_NOISE_LEVEL;
    197          static uint32 jammerDetectPeriodTime = JAMMER_DETECT_PERIOD_TIME;
    198          #endif
    199          
    200          #if defined( MT_SYS_SNIFFER_FEATURE )
    201          static uint8 sniffer = FALSE;
    202          #endif
    203          
    204          /******************************************************************************
    205           * LOCAL FUNCTIONS
    206           *****************************************************************************/
    207          #if defined( MT_SYS_FUNC )
    208          static void MT_SysReset(uint8 *pBuf);
    209          static void MT_SysPing(void);
    210          static void MT_SysVersion(void);
    211          static void MT_SysSetExtAddr(uint8 *pBuf);
    212          static void MT_SysGetExtAddr(void);
    213          static void MT_SysOsalStartTimer(uint8 *pBuf);
    214          static void MT_SysOsalStopTimer(uint8 *pBuf);
    215          static void MT_SysRandom(void);
    216          static void MT_SysGpio(uint8 *pBuf);
    217          static void MT_SysStackTune(uint8 *pBuf);
    218          static void MT_SysSetUtcTime(uint8 *pBuf);
    219          static void MT_SysGetUtcTime(void);
    220          static void MT_SysSetTxPower(uint8 *pBuf);
    221          #if !defined( CC26XX )
    222          static void MT_SysAdcRead(uint8 *pBuf);
    223          #endif /* !CC26xx */
    224          #if !defined( CC253X_MACNP )
    225          static void MT_SysOsalNVItemInit(uint8 *pBuf);
    226          static void MT_SysOsalNVDelete(uint8 *pBuf);
    227          static void MT_SysOsalNVLength(uint8 *pBuf);
    228          static void MT_SysOsalNVRead(uint8 *pBuf);
    229          static void MT_SysOsalNVWrite(uint8 *pBuf);
    230          static uint8 MT_CheckNvId(uint16 nvId);
    231          #if defined( FEATURE_NVEXID )
    232          static void MT_SysNvCompact(uint8 *pBuf);
    233          static void MT_SysNvCreate(uint8 *pBuf);
    234          static void MT_SysNvDelete(uint8 *pBuf);
    235          static void MT_SysNvLength(uint8 *pBuf);
    236          static void MT_SysNvRead(uint8 *pBuf);
    237          static void MT_SysNvWrite(uint8 *pBuf);
    238          static uint8 MT_StackNvExtId( NVINTF_itemID_t *nvId );
    239          static uint8 *MT_ParseNvExtId( uint8 *pBuf, NVINTF_itemID_t *nvId );
    240          #endif /* FEATURE_NVEXID */
    241          #endif /* !CC253X_MACNP */
    242          #if defined( MT_SYS_JAMMER_FEATURE )
    243          static void MT_SysJammerParameters( uint8 *pBuf );
    244          #endif /* MT_SYS_JAMMER_FEATURE */
    245          #if defined( MT_SYS_SNIFFER_FEATURE )
    246          static void MT_SysSnifferParameters( uint8 *pBuf );
    247          #endif /* MT_SYS_SNIFFER_FEATURE */
    248          #if defined( FEATURE_SYSTEM_STATS )
    249          static void MT_SysZDiagsInitStats(void);
    250          static void MT_SysZDiagsClearStats(uint8 *pBuf);
    251          static void MT_SysZDiagsGetStatsAttr(uint8 *pBuf);
    252          static void MT_SysZDiagsRestoreStatsFromNV(void);
    253          static void MT_SysZDiagsSaveStatsToNV(void);
    254          #endif /* FEATURE_SYSTEM_STATS */
    255          #if defined( ENABLE_MT_SYS_RESET_SHUTDOWN )
    256          static void powerOffSoc(void);
    257          #endif /* ENABLE_MT_SYS_RESET_SHUTDOWN */
    258          #endif /* MT_SYS_FUNC */
    259          
    260          #if defined( MT_SYS_FUNC )
    261          /******************************************************************************
    262           * @fn      MT_SysProcessing
    263           *
    264           * @brief   Process all the SYS commands that are issued by test tool
    265           *
    266           * @param   pBuf - pointer to the msg buffer
    267           *
    268           *          | LEN  | CMD0  | CMD1  |  DATA  |
    269           *          |  1   |   1   |   1   |  0-255 |
    270           *
    271           * @return  status
    272           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    273          uint8 MT_SysCommandProcessing(uint8 *pBuf)
   \                     MT_SysCommandProcessing:
    274          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    275            uint8 status = MT_RPC_SUCCESS;
   \   00000A   7E00         MOV       R6,#0x0
    276          
    277            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   12....       LCALL     ?UC_SWITCH_DENSE
   \                     `?<Jumptable for MT_SysCommandProcessing>_0`:
   \   000016   00           DB        0
   \   000017   1D           DB        29
   \   000018   ....         DW        ??MT_SysCommandProcessing_0
   \   00001A   ....         DW        ??MT_SysCommandProcessing_1
   \   00001C   ....         DW        ??MT_SysCommandProcessing_2
   \   00001E   ....         DW        ??MT_SysCommandProcessing_3
   \   000020   ....         DW        ??MT_SysCommandProcessing_4
   \   000022   ....         DW        ??MT_SysCommandProcessing_5
   \   000024   ....         DW        ??MT_SysCommandProcessing_0
   \   000026   ....         DW        ??MT_SysCommandProcessing_0
   \   000028   ....         DW        ??MT_SysCommandProcessing_6
   \   00002A   ....         DW        ??MT_SysCommandProcessing_7
   \   00002C   ....         DW        ??MT_SysCommandProcessing_8
   \   00002E   ....         DW        ??MT_SysCommandProcessing_9
   \   000030   ....         DW        ??MT_SysCommandProcessing_10
   \   000032   ....         DW        ??MT_SysCommandProcessing_11
   \   000034   ....         DW        ??MT_SysCommandProcessing_12
   \   000036   ....         DW        ??MT_SysCommandProcessing_13
   \   000038   ....         DW        ??MT_SysCommandProcessing_14
   \   00003A   ....         DW        ??MT_SysCommandProcessing_15
   \   00003C   ....         DW        ??MT_SysCommandProcessing_16
   \   00003E   ....         DW        ??MT_SysCommandProcessing_17
   \   000040   ....         DW        ??MT_SysCommandProcessing_18
   \   000042   ....         DW        ??MT_SysCommandProcessing_19
   \   000044   ....         DW        ??MT_SysCommandProcessing_0
   \   000046   ....         DW        ??MT_SysCommandProcessing_0
   \   000048   ....         DW        ??MT_SysCommandProcessing_20
   \   00004A   ....         DW        ??MT_SysCommandProcessing_21
   \   00004C   ....         DW        ??MT_SysCommandProcessing_22
   \   00004E   ....         DW        ??MT_SysCommandProcessing_23
   \   000050   ....         DW        ??MT_SysCommandProcessing_24
   \   000052   ....         DW        ??MT_SysCommandProcessing_7
   \   000054   ....         DW        ??MT_SysCommandProcessing_8
    278            {
    279              case MT_SYS_RESET_REQ:
    280                MT_SysReset(pBuf);
   \                     ??MT_SysCommandProcessing_1:
   \   000056   8A82         MOV       DPL,R2
   \   000058   8B83         MOV       DPH,R3
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   6006         JZ        ??MT_SysCommandProcessing_25
   \   000060   14           DEC       A
   \   000061   600F         JZ        ??MT_SysCommandProcessing_26
   \   000063   02....       LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
   \                     ??MT_SysCommandProcessing_25:
   \   000066   C2AF         CLR       0xa8.7
   \   000068   C2AF         CLR       0xa8.7
   \   00006A   75C9AB       MOV       0xc9,#-0x55
   \   00006D   75C95B       MOV       0xc9,#0x5b
   \                     ??MT_SysCommandProcessing_28:
   \   000070   80FE         SJMP      ??MT_SysCommandProcessing_28
   \                     ??MT_SysCommandProcessing_26:
   \   000072                ; Setup parameters for call to function Onboard_soft_reset
   \   000072   12....       LCALL     Onboard_soft_reset & 0xFFFF
   \   000075   02....       LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
    281                break;
    282          
    283              case MT_SYS_PING:
    284                MT_SysPing();
   \                     ??MT_SysCommandProcessing_2:
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   7479         MOV       A,#0x79
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   7402         MOV       A,#0x2
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   7401         MOV       A,#0x1
   \   000087   F0           MOVX      @DPTR,A
   \   000088                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000088   12....       LCALL     ?XSTACK_DISP102_8
   \   00008B   7B02         MOV       R3,#0x2
   \   00008D   7A01         MOV       R2,#0x1
   \   00008F   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    285                break;
    286          
    287              case MT_SYS_VERSION:
    288                MT_SysVersion();
   \                     ??MT_SysCommandProcessing_3:
   \   000092                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000092   7C..         MOV       R4,#MTVersionString & 0xff
   \   000094   7D..         MOV       R5,#(MTVersionString >> 8) & 0xff
   \   000096   7B05         MOV       R3,#0x5
   \   000098   7A02         MOV       R2,#0x2
   \   00009A   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    289                break;
    290          
    291              case MT_SYS_SET_EXTADDR:
    292                MT_SysSetExtAddr(pBuf);
   \                     ??MT_SysCommandProcessing_4:
   \   00009D   85..82       MOV       DPL,?XSP + 0
   \   0000A0   85..83       MOV       DPH,?XSP + 1
   \   0000A3   7401         MOV       A,#0x1
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A9   79E2         MOV       R1,#-0x1e
   \   0000AB   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000AE   E9           MOV       A,R1
   \   0000AF   7027         JNZ       ??MT_SysCommandProcessing_30
   \   0000B1                ; Setup parameters for call to function osal_nv_write
   \   0000B1   78..         MOV       R0,#?V0
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B6   75..08       MOV       ?V0,#0x8
   \   0000B9   8E..         MOV       ?V1,R6
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   7C00         MOV       R4,#0x0
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   7A01         MOV       R2,#0x1
   \   0000C6   7B00         MOV       R3,#0x0
   \   0000C8   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000CB   7404         MOV       A,#0x4
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D0   E9           MOV       A,R1
   \   0000D1   85..82       MOV       DPL,?XSP + 0
   \   0000D4   85..83       MOV       DPH,?XSP + 1
   \   0000D7   F0           MOVX      @DPTR,A
   \                     ??MT_SysCommandProcessing_30:
   \   0000D8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D8   AC..         MOV       R4,?XSP + 0
   \   0000DA   AD..         MOV       R5,?XSP + 1
   \   0000DC   7B01         MOV       R3,#0x1
   \   0000DE   7A03         MOV       R2,#0x3
   \   0000E0   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    293                break;
    294          
    295              case MT_SYS_GET_EXTADDR:
    296                MT_SysGetExtAddr();
   \                     ??MT_SysCommandProcessing_5:
   \   0000E3                ; Setup parameters for call to function ZMacGetReq
   \   0000E3   7408         MOV       A,#0x8
   \   0000E5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E8   79E2         MOV       R1,#-0x1e
   \   0000EA   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   0000ED                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000ED   7408         MOV       A,#0x8
   \   0000EF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F2   7B08         MOV       R3,#0x8
   \   0000F4   7A04         MOV       R2,#0x4
   \   0000F6   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    297                break;
    298          
    299              case MT_SYS_OSAL_START_TIMER:
    300                MT_SysOsalStartTimer(pBuf);
   \                     ??MT_SysCommandProcessing_9:
   \   0000F9   EA           MOV       A,R2
   \   0000FA   2403         ADD       A,#0x3
   \   0000FC   F8           MOV       R0,A
   \   0000FD   E4           CLR       A
   \   0000FE   3B           ADDC      A,R3
   \   0000FF   F9           MOV       R1,A
   \   000100   88..         MOV       ?V0,R0
   \   000102   89..         MOV       ?V1,R1
   \   000104   8882         MOV       DPL,R0
   \   000106   F583         MOV       DPH,A
   \   000108   E0           MOVX      A,@DPTR
   \   000109   C3           CLR       C
   \   00010A   9404         SUBB      A,#0x4
   \   00010C   5030         JNC       ??MT_SysCommandProcessing_31
   \   00010E                ; Setup parameters for call to function osal_build_uint16
   \   00010E   A3           INC       DPTR
   \   00010F   AA82         MOV       R2,DPL
   \   000111   AB83         MOV       R3,DPH
   \   000113   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000116   8A..         MOV       ?V4,R2
   \   000118   8B..         MOV       ?V5,R3
   \   00011A                ; Setup parameters for call to function osal_start_timerEx
   \   00011A   E4           CLR       A
   \   00011B   F5..         MOV       ?V6,A
   \   00011D   F5..         MOV       ?V7,A
   \   00011F   78..         MOV       R0,#?V4
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000124   85..82       MOV       DPL,?V0
   \   000127   85..83       MOV       DPH,?V1
   \   00012A   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00012D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000130   7404         MOV       A,#0x4
   \   000132   12....       LCALL     ?DEALLOC_XSTACK8
   \   000135   E9           MOV       A,R1
   \   000136   85..82       MOV       DPL,?XSP + 0
   \   000139   85..83       MOV       DPH,?XSP + 1
   \   00013C   8008         SJMP      ??MT_SysCommandProcessing_32
   \                     ??MT_SysCommandProcessing_31:
   \   00013E   85..82       MOV       DPL,?XSP + 0
   \   000141   85..83       MOV       DPH,?XSP + 1
   \   000144   7402         MOV       A,#0x2
   \                     ??MT_SysCommandProcessing_32:
   \   000146   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000149   7A0A         MOV       R2,#0xa
   \   00014B   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    301                break;
    302          
    303              case MT_SYS_OSAL_STOP_TIMER:
    304                MT_SysOsalStopTimer(pBuf);
   \                     ??MT_SysCommandProcessing_10:
   \   00014E   85..82       MOV       DPL,?XSP + 0
   \   000151   85..83       MOV       DPH,?XSP + 1
   \   000154   7401         MOV       A,#0x1
   \   000156   F0           MOVX      @DPTR,A
   \   000157   8A82         MOV       DPL,R2
   \   000159   8B83         MOV       DPH,R3
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   C3           CLR       C
   \   000160   9404         SUBB      A,#0x4
   \   000162   5016         JNC       ??MT_SysCommandProcessing_33
   \   000164                ; Setup parameters for call to function osal_stop_timerEx
   \   000164   8A82         MOV       DPL,R2
   \   000166   8B83         MOV       DPH,R3
   \   000168   A3           INC       DPTR
   \   000169   A3           INC       DPTR
   \   00016A   A3           INC       DPTR
   \   00016B   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00016E   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000171   E9           MOV       A,R1
   \   000172   85..82       MOV       DPL,?XSP + 0
   \   000175   85..83       MOV       DPH,?XSP + 1
   \   000178   8008         SJMP      ??MT_SysCommandProcessing_34
   \                     ??MT_SysCommandProcessing_33:
   \   00017A   85..82       MOV       DPL,?XSP + 0
   \   00017D   85..83       MOV       DPH,?XSP + 1
   \   000180   7402         MOV       A,#0x2
   \                     ??MT_SysCommandProcessing_34:
   \   000182   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000185   7A0B         MOV       R2,#0xb
   \   000187   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    305                break;
    306          
    307              case MT_SYS_RANDOM:
    308                MT_SysRandom();
   \                     ??MT_SysCommandProcessing_11:
   \   00018A                ; Setup parameters for call to function Onboard_rand
   \   00018A   12....       LCALL     `??Onboard_rand::?relay`; Banked call to: Onboard_rand
   \   00018D   7401         MOV       A,#0x1
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   EA           MOV       A,R2
   \   000193   F0           MOVX      @DPTR,A
   \   000194   7402         MOV       A,#0x2
   \   000196   12....       LCALL     ?XSTACK_DISP0_8
   \   000199   EB           MOV       A,R3
   \   00019A   F0           MOVX      @DPTR,A
   \   00019B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00019B   7401         MOV       A,#0x1
   \   00019D   12....       LCALL     ?XSTACK_DISP102_8
   \   0001A0   7B02         MOV       R3,#0x2
   \   0001A2   7A0C         MOV       R2,#0xc
   \   0001A4   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    309                break;
    310          
    311          #if !defined( CC26XX )
    312              case MT_SYS_ADC_READ:
    313                MT_SysAdcRead(pBuf);
   \                     ??MT_SysCommandProcessing_12:
   \   0001A7   7C00         MOV       R4,#0x0
   \   0001A9   7D00         MOV       R5,#0x0
   \   0001AB   8A82         MOV       DPL,R2
   \   0001AD   8B83         MOV       DPH,R3
   \   0001AF   A3           INC       DPTR
   \   0001B0   A3           INC       DPTR
   \   0001B1   A3           INC       DPTR
   \   0001B2   E0           MOVX      A,@DPTR
   \   0001B3   F9           MOV       R1,A
   \   0001B4   8A82         MOV       DPL,R2
   \   0001B6   8B83         MOV       DPH,R3
   \   0001B8   A3           INC       DPTR
   \   0001B9   A3           INC       DPTR
   \   0001BA   A3           INC       DPTR
   \   0001BB   A3           INC       DPTR
   \   0001BC   E0           MOVX      A,@DPTR
   \   0001BD   FA           MOV       R2,A
   \   0001BE   E9           MOV       A,R1
   \   0001BF   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysCommandProcessing>_1`:
   \   0001C2   02           DB        2
   \   0001C3   00           DB        0
   \   0001C4   07           DB        7
   \   0001C5   ....         DW        ??MT_SysCommandProcessing_35
   \   0001C7   0E           DB        14
   \   0001C8   0F           DB        15
   \   0001C9   ....         DW        ??MT_SysCommandProcessing_36
   \   0001CB   00           DB        0
   \   0001CC   ....         DW        ??MT_SysCommandProcessing_37
   \                     ??MT_SysCommandProcessing_36:
   \   0001CE   7A04         MOV       R2,#0x4
   \                     ??MT_SysCommandProcessing_35:
   \   0001D0                ; Setup parameters for call to function HalAdcRead
   \   0001D0   12....       LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   0001D3   8A..         MOV       ?V0,R2
   \   0001D5   8B..         MOV       ?V1,R3
   \   0001D7   AC..         MOV       R4,?V0
   \   0001D9   AD..         MOV       R5,?V1
   \                     ??MT_SysCommandProcessing_37:
   \   0001DB   7401         MOV       A,#0x1
   \   0001DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E0   EC           MOV       A,R4
   \   0001E1   F0           MOVX      @DPTR,A
   \   0001E2   7402         MOV       A,#0x2
   \   0001E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E7   ED           MOV       A,R5
   \   0001E8   F0           MOVX      @DPTR,A
   \   0001E9                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001E9   7401         MOV       A,#0x1
   \   0001EB   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EE   7B02         MOV       R3,#0x2
   \   0001F0   7A0D         MOV       R2,#0xd
   \   0001F2   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    314                break;
    315          #endif /* !CC26XX */
    316          
    317              case MT_SYS_GPIO:
    318                MT_SysGpio(pBuf);
   \                     ??MT_SysCommandProcessing_13:
   \   0001F5   85..82       MOV       DPL,?XSP + 0
   \   0001F8   85..83       MOV       DPH,?XSP + 1
   \   0001FB   E4           CLR       A
   \   0001FC   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001FF   7A0E         MOV       R2,#0xe
   \   000201   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    319                break;
    320          
    321              case MT_SYS_STACK_TUNE:
    322                MT_SysStackTune(pBuf);
   \                     ??MT_SysCommandProcessing_14:
   \   000204   EA           MOV       A,R2
   \   000205   2403         ADD       A,#0x3
   \   000207   F8           MOV       R0,A
   \   000208   E4           CLR       A
   \   000209   3B           ADDC      A,R3
   \   00020A   F9           MOV       R1,A
   \   00020B   8882         MOV       DPL,R0
   \   00020D   8983         MOV       DPH,R1
   \   00020F   A3           INC       DPTR
   \   000210   AA82         MOV       R2,DPL
   \   000212   AB83         MOV       R3,DPH
   \   000214   8882         MOV       DPL,R0
   \   000216   8983         MOV       DPH,R1
   \   000218   E0           MOVX      A,@DPTR
   \   000219   601E         JZ        ??MT_SysCommandProcessing_38
   \   00021B   14           DEC       A
   \   00021C   7029         JNZ       ??MT_SysCommandProcessing_39
   \   00021E   8A82         MOV       DPL,R2
   \   000220   8B83         MOV       DPH,R3
   \   000222   E0           MOVX      A,@DPTR
   \   000223   6401         XRL       A,#0x1
   \   000225   600E         JZ        ??MT_SysCommandProcessing_40
   \   000227   E0           MOVX      A,@DPTR
   \   000228   600B         JZ        ??MT_SysCommandProcessing_40
   \   00022A                ; Setup parameters for call to function ZMacGetReq
   \   00022A   AA..         MOV       R2,?XSP + 0
   \   00022C   AB..         MOV       R3,?XSP + 1
   \   00022E   7952         MOV       R1,#0x52
   \   000230   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000233   801B         SJMP      ??MT_SysCommandProcessing_41
   \                     ??MT_SysCommandProcessing_40:
   \   000235                ; Setup parameters for call to function ZMacSetReq
   \   000235   7952         MOV       R1,#0x52
   \   000237   8002         SJMP      ??MT_SysCommandProcessing_42
   \                     ??MT_SysCommandProcessing_38:
   \   000239                ; Setup parameters for call to function ZMacSetReq
   \   000239   79E0         MOV       R1,#-0x20
   \                     ??MT_SysCommandProcessing_42:
   \   00023B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00023E   E9           MOV       A,R1
   \   00023F   85..82       MOV       DPL,?XSP + 0
   \   000242   85..83       MOV       DPH,?XSP + 1
   \   000245   8008         SJMP      ??MT_SysCommandProcessing_43
   \                     ??MT_SysCommandProcessing_39:
   \   000247   85..82       MOV       DPL,?XSP + 0
   \   00024A   85..83       MOV       DPH,?XSP + 1
   \   00024D   7402         MOV       A,#0x2
   \                     ??MT_SysCommandProcessing_43:
   \   00024F   F0           MOVX      @DPTR,A
   \                     ??MT_SysCommandProcessing_41:
   \   000250                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000250   AC..         MOV       R4,?XSP + 0
   \   000252   AD..         MOV       R5,?XSP + 1
   \   000254   7B01         MOV       R3,#0x1
   \   000256   7A0F         MOV       R2,#0xf
   \   000258   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    323                break;
    324          
    325              case MT_SYS_SET_TIME:
    326                MT_SysSetUtcTime(pBuf);
   \                     ??MT_SysCommandProcessing_15:
   \   00025B                ; Setup parameters for call to function MT_SysSetUtcTime
   \   00025B   12....       LCALL     `??MT_SysSetUtcTime::?relay`; Banked call to: MT_SysSetUtcTime
    327                break;
   \   00025E   02....       LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
    328          
    329              case MT_SYS_GET_TIME:
    330                MT_SysGetUtcTime();
   \                     ??MT_SysCommandProcessing_16:
   \   000261                ; Setup parameters for call to function MT_SysGetUtcTime
   \   000261   12....       LCALL     `??MT_SysGetUtcTime::?relay`; Banked call to: MT_SysGetUtcTime
    331                break;
   \   000264   02....       LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
    332          
    333              case MT_SYS_SET_TX_POWER:
    334                MT_SysSetTxPower(pBuf);
   \                     ??MT_SysCommandProcessing_19:
   \   000267   8A82         MOV       DPL,R2
   \   000269   8B83         MOV       DPH,R3
   \   00026B   A3           INC       DPTR
   \   00026C   A3           INC       DPTR
   \   00026D   A3           INC       DPTR
   \   00026E   E0           MOVX      A,@DPTR
   \   00026F   85..82       MOV       DPL,?XSP + 0
   \   000272   85..83       MOV       DPH,?XSP + 1
   \   000275   F0           MOVX      @DPTR,A
   \   000276                ; Setup parameters for call to function macRadioSetTxPower
   \   000276   F9           MOV       R1,A
   \   000277   12....       LCALL     `??macRadioSetTxPower::?relay`; Banked call to: macRadioSetTxPower
   \   00027A   7403         MOV       A,#0x3
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   E9           MOV       A,R1
   \   000280   F0           MOVX      @DPTR,A
   \   000281                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000281   AA..         MOV       R2,?XSP + 0
   \   000283   AB..         MOV       R3,?XSP + 1
   \   000285   79E0         MOV       R1,#-0x20
   \   000287   12....       LCALL     `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   \   00028A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00028A   7403         MOV       A,#0x3
   \   00028C   12....       LCALL     ?XSTACK_DISP102_8
   \   00028F   7B01         MOV       R3,#0x1
   \   000291   7A14         MOV       R2,#0x14
   \   000293   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    335                break;
    336          
    337          // CC253X MAC Network Processor does not have NV support
    338          #if !defined( CC253X_MACNP )
    339              case MT_SYS_OSAL_NV_DELETE:
    340                MT_SysOsalNVDelete(pBuf);
   \                     ??MT_SysCommandProcessing_17:
   \   000296   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000299   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00029C   8A..         MOV       ?V2,R2
   \   00029E   8B..         MOV       ?V3,R3
   \   0002A0                ; Setup parameters for call to function osal_build_uint16
   \   0002A0   E5..         MOV       A,?V0
   \   0002A2   2402         ADD       A,#0x2
   \   0002A4   FA           MOV       R2,A
   \   0002A5   E4           CLR       A
   \   0002A6   35..         ADDC      A,?V1
   \   0002A8   FB           MOV       R3,A
   \   0002A9   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0002AC   8A..         MOV       ?V0,R2
   \   0002AE   8B..         MOV       ?V1,R3
   \   0002B0   AC..         MOV       R4,?V0
   \   0002B2   AD..         MOV       R5,?V1
   \   0002B4   7424         MOV       A,#0x24
   \   0002B6   65..         XRL       A,?V2
   \   0002B8   45..         ORL       A,?V3
   \   0002BA   7009         JNZ       ??MT_SysCommandProcessing_44
   \   0002BC   85..82       MOV       DPL,?XSP + 0
   \   0002BF   85..83       MOV       DPH,?XSP + 1
   \   0002C2   E4           CLR       A
   \   0002C3   800E         SJMP      ??MT_SysCommandProcessing_45
   \                     ??MT_SysCommandProcessing_44:
   \   0002C5                ; Setup parameters for call to function osal_nv_delete
   \   0002C5   AA..         MOV       R2,?V2
   \   0002C7   AB..         MOV       R3,?V3
   \   0002C9   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0002CC   E9           MOV       A,R1
   \   0002CD   85..82       MOV       DPL,?XSP + 0
   \   0002D0   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_SysCommandProcessing_45:
   \   0002D3   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0002D6   7A12         MOV       R2,#0x12
   \   0002D8   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    341                break;
    342          
    343              case MT_SYS_OSAL_NV_ITEM_INIT:
    344                MT_SysOsalNVItemInit(pBuf);
   \                     ??MT_SysCommandProcessing_6:
   \   0002DB                ; Setup parameters for call to function MT_SysOsalNVItemInit
   \   0002DB   12....       LCALL     `??MT_SysOsalNVItemInit::?relay`; Banked call to: MT_SysOsalNVItemInit
    345                break;
   \   0002DE   02....       LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
    346          
    347              case MT_SYS_OSAL_NV_LENGTH:
    348                MT_SysOsalNVLength(pBuf);
   \                     ??MT_SysCommandProcessing_18:
   \   0002E1                ; Setup parameters for call to function osal_build_uint16
   \   0002E1   EA           MOV       A,R2
   \   0002E2   2403         ADD       A,#0x3
   \   0002E4   FA           MOV       R2,A
   \   0002E5   5001         JNC       ??MT_SysCommandProcessing_46
   \   0002E7   0B           INC       R3
   \                     ??MT_SysCommandProcessing_46:
   \   0002E8   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0002EB   7424         MOV       A,#0x24
   \   0002ED   6A           XRL       A,R2
   \   0002EE   4B           ORL       A,R3
   \   0002EF   7006         JNZ       ??MT_SysCommandProcessing_47
   \   0002F1   7800         MOV       R0,#0x0
   \   0002F3   7900         MOV       R1,#0x0
   \   0002F5   800B         SJMP      ??MT_SysCommandProcessing_48
   \                     ??MT_SysCommandProcessing_47:
   \   0002F7                ; Setup parameters for call to function osal_nv_item_len
   \   0002F7   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0002FA   8A..         MOV       ?V0,R2
   \   0002FC   8B..         MOV       ?V1,R3
   \   0002FE   A8..         MOV       R0,?V0
   \   000300   A9..         MOV       R1,?V1
   \                     ??MT_SysCommandProcessing_48:
   \   000302   7401         MOV       A,#0x1
   \   000304   12....       LCALL     ?XSTACK_DISP0_8
   \   000307   E8           MOV       A,R0
   \   000308   F0           MOVX      @DPTR,A
   \   000309   7402         MOV       A,#0x2
   \   00030B   12....       LCALL     ?XSTACK_DISP0_8
   \   00030E   E9           MOV       A,R1
   \   00030F   F0           MOVX      @DPTR,A
   \   000310                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000310   7401         MOV       A,#0x1
   \   000312   12....       LCALL     ?XSTACK_DISP102_8
   \   000315   7B02         MOV       R3,#0x2
   \   000317   7A13         MOV       R2,#0x13
   \   000319   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    349                break;
    350          
    351              case MT_SYS_OSAL_NV_READ:
    352              case MT_SYS_OSAL_NV_READ_EXT:
    353                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_7:
   \   00031C                ; Setup parameters for call to function MT_SysOsalNVRead
   \   00031C   12....       LCALL     `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
    354                break;
   \   00031F   02....       LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
    355          
    356              case MT_SYS_OSAL_NV_WRITE:
    357              case MT_SYS_OSAL_NV_WRITE_EXT:
    358                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_8:
   \   000322                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   000322   12....       LCALL     `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
    359                break;
   \   000325   02....       LJMP      ??MT_SysCommandProcessing_27 & 0xFFFF
    360          
    361          #if defined( FEATURE_NVEXID )
    362              case MT_SYS_NV_COMPACT:
    363                MT_SysNvCompact(pBuf);
    364                break;
    365          
    366              case MT_SYS_NV_CREATE:
    367                MT_SysNvCreate(pBuf);
    368                break;
    369          
    370              case MT_SYS_NV_DELETE:
    371                MT_SysNvDelete(pBuf);
    372                break;
    373          
    374              case MT_SYS_NV_LENGTH:
    375                MT_SysNvLength(pBuf);
    376                break;
    377          
    378              case MT_SYS_NV_READ:
    379                MT_SysNvRead(pBuf);
    380                break;
    381          
    382              case MT_SYS_NV_WRITE:
    383              case MT_SYS_NV_UPDATE:
    384                MT_SysNvWrite(pBuf);
    385                break;
    386          #endif  /* FEATURE_NVEXID */
    387          #endif  /* !CC253X_MACNP */
    388          
    389          #if !defined( CC26XX )
    390          #if defined( MT_SYS_JAMMER_FEATURE )
    391              case MT_SYS_JAMMER_PARAMETERS:
    392                MT_SysJammerParameters( pBuf );
    393                break;
    394          #endif  /* MT_SYS_JAMMER_FEATURE */
    395          
    396          #if defined( MT_SYS_SNIFFER_FEATURE )
    397              case MT_SYS_SNIFFER_PARAMETERS:
    398                MT_SysSnifferParameters( pBuf );
    399                break;
    400          #endif  /* MT_SYS_SNIFFER_FEATURE */
    401          #endif /* !CC26XX */
    402          
    403          #if defined( FEATURE_SYSTEM_STATS )
    404              case MT_SYS_ZDIAGS_INIT_STATS:
    405                MT_SysZDiagsInitStats();
   \                     ??MT_SysCommandProcessing_20:
   \   000328                ; Setup parameters for call to function ZDiagsInitStats
   \   000328   12....       LCALL     `??ZDiagsInitStats::?relay`; Banked call to: ZDiagsInitStats
   \   00032B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00032E   7A17         MOV       R2,#0x17
   \   000330   02....       LJMP      ??MT_SysCommandProcessing_29 & 0xFFFF
    406                break;
    407          
    408              case MT_SYS_ZDIAGS_CLEAR_STATS:
    409                MT_SysZDiagsClearStats(pBuf);
   \                     ??MT_SysCommandProcessing_21:
   \   000333                ; Setup parameters for call to function ZDiagsClearStats
   \   000333   8A82         MOV       DPL,R2
   \   000335   8B83         MOV       DPH,R3
   \   000337   A3           INC       DPTR
   \   000338   A3           INC       DPTR
   \   000339   A3           INC       DPTR
   \   00033A   E0           MOVX      A,@DPTR
   \   00033B   F9           MOV       R1,A
   \   00033C   12....       LCALL     `??ZDiagsClearStats::?relay`; Banked call to: ZDiagsClearStats
   \   00033F   8A..         MOV       ?V0,R2
   \   000341   8B..         MOV       ?V1,R3
   \   000343   8C..         MOV       ?V2,R4
   \   000345   8D..         MOV       ?V3,R5
   \   000347                ; Setup parameters for call to function osal_buffer_uint32
   \   000347   78..         MOV       R0,#?V0
   \   000349   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00034C   7408         MOV       A,#0x8
   \   00034E   12....       LCALL     ?XSTACK_DISP101_8
   \   000351   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000354   7404         MOV       A,#0x4
   \   000356   12....       LCALL     ?DEALLOC_XSTACK8
   \   000359                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000359   7404         MOV       A,#0x4
   \   00035B   12....       LCALL     ?XSTACK_DISP102_8
   \   00035E   7B04         MOV       R3,#0x4
   \   000360   7A18         MOV       R2,#0x18
   \   000362   8062         SJMP      ??MT_SysCommandProcessing_29
    410                break;
    411          
    412              case MT_SYS_ZDIAGS_GET_STATS:
    413                MT_SysZDiagsGetStatsAttr(pBuf);
   \                     ??MT_SysCommandProcessing_22:
   \   000364                ; Setup parameters for call to function osal_build_uint16
   \   000364   EA           MOV       A,R2
   \   000365   2403         ADD       A,#0x3
   \   000367   FA           MOV       R2,A
   \   000368   5001         JNC       ??MT_SysCommandProcessing_49
   \   00036A   0B           INC       R3
   \                     ??MT_SysCommandProcessing_49:
   \   00036B   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00036E                ; Setup parameters for call to function ZDiagsGetStatsAttr
   \   00036E   12....       LCALL     `??ZDiagsGetStatsAttr::?relay`; Banked call to: ZDiagsGetStatsAttr
   \   000371   8A..         MOV       ?V0,R2
   \   000373   8B..         MOV       ?V1,R3
   \   000375   8C..         MOV       ?V2,R4
   \   000377   8D..         MOV       ?V3,R5
   \   000379                ; Setup parameters for call to function osal_buffer_uint32
   \   000379   78..         MOV       R0,#?V0
   \   00037B   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00037E   7408         MOV       A,#0x8
   \   000380   12....       LCALL     ?XSTACK_DISP101_8
   \   000383   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000386   7404         MOV       A,#0x4
   \   000388   12....       LCALL     ?DEALLOC_XSTACK8
   \   00038B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00038B   7404         MOV       A,#0x4
   \   00038D   12....       LCALL     ?XSTACK_DISP102_8
   \   000390   7B04         MOV       R3,#0x4
   \   000392   7A19         MOV       R2,#0x19
   \   000394   8030         SJMP      ??MT_SysCommandProcessing_29
    414                 break;
    415          
    416              case MT_SYS_ZDIAGS_RESTORE_STATS_NV:
    417                MT_SysZDiagsRestoreStatsFromNV();
   \                     ??MT_SysCommandProcessing_23:
   \   000396                ; Setup parameters for call to function ZDiagsRestoreStatsFromNV
   \   000396   12....       LCALL     `??ZDiagsRestoreStatsFromNV::?relay`; Banked call to: ZDiagsRestoreStatsFromNV
   \   000399   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00039C   7A1A         MOV       R2,#0x1a
   \   00039E   8026         SJMP      ??MT_SysCommandProcessing_29
    418                break;
    419          
    420              case MT_SYS_ZDIAGS_SAVE_STATS_TO_NV:
    421                MT_SysZDiagsSaveStatsToNV();
   \                     ??MT_SysCommandProcessing_24:
   \   0003A0                ; Setup parameters for call to function ZDiagsSaveStatsToNV
   \   0003A0   12....       LCALL     `??ZDiagsSaveStatsToNV::?relay`; Banked call to: ZDiagsSaveStatsToNV
   \   0003A3   8A..         MOV       ?V0,R2
   \   0003A5   8B..         MOV       ?V1,R3
   \   0003A7   8C..         MOV       ?V2,R4
   \   0003A9   8D..         MOV       ?V3,R5
   \   0003AB                ; Setup parameters for call to function osal_buffer_uint32
   \   0003AB   78..         MOV       R0,#?V0
   \   0003AD   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0003B0   7408         MOV       A,#0x8
   \   0003B2   12....       LCALL     ?XSTACK_DISP101_8
   \   0003B5   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   0003B8   7404         MOV       A,#0x4
   \   0003BA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003BD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003BD   7404         MOV       A,#0x4
   \   0003BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0003C2   7B04         MOV       R3,#0x4
   \   0003C4   7A1B         MOV       R2,#0x1b
   \                     ??MT_SysCommandProcessing_29:
   \   0003C6   7961         MOV       R1,#0x61
   \   0003C8   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    422                break;
   \   0003CB   8002         SJMP      ??MT_SysCommandProcessing_27
    423          #endif /* FEATURE_SYSTEM_STATS */
    424          
    425              default:
    426                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SysCommandProcessing_0:
   \   0003CD   7E02         MOV       R6,#0x2
    427                break;
    428            }
    429          
    430            return status;
   \                     ??MT_SysCommandProcessing_27:
   \   0003CF   EE           MOV       A,R6
   \   0003D0   F9           MOV       R1,A
   \   0003D1   7410         MOV       A,#0x10
   \   0003D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003D6   7F08         MOV       R7,#0x8
   \   0003D8   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0003DB                REQUIRE _A_IEN0
   \   0003DB                REQUIRE WDCTL
    431          }
    432          
    433          /******************************************************************************
    434           * @fn      MT_SysReset
    435           *
    436           * @brief   Reset the device.
    437           * @param   typID: 0=reset, 1=serial bootloader,
    438           *
    439           * @return  None
    440           *****************************************************************************/
    441          void MT_SysReset( uint8 *pBuf )
    442          {
    443            switch( pBuf[MT_RPC_POS_DAT0] )
    444            {
    445              case MT_SYS_RESET_HARD:
    446                SystemReset();
    447                break;
    448          
    449              case MT_SYS_RESET_SOFT:
    450          #if !defined( HAL_BOARD_F5438 )
    451                SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
    452          #endif
    453                break;
    454          
    455              case MT_SYS_RESET_SHUTDOWN:
    456                {
    457          #if defined( ENABLE_MT_SYS_RESET_SHUTDOWN )
    458                  // Disable interrupts and put into deep sleep, use hardware reset to wakeup
    459                  powerOffSoc();
    460          #endif
    461                }
    462                break;
    463            }
    464          }
    465          
    466          /******************************************************************************
    467           * @fn      MT_SysPing
    468           *
    469           * @brief   Process the Ping command
    470           *
    471           * @param   None
    472           *
    473           * @return  None
    474           *****************************************************************************/
    475          static void MT_SysPing(void)
    476          {
    477            uint16 tmp16;
    478            uint8 retArray[2];
    479          
    480            /* Build Capabilities */
    481            tmp16 = MT_CAP_SYS | MT_CAP_MAC  | MT_CAP_NWK  | MT_CAP_AF    |
    482                    MT_CAP_ZDO | MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG |
    483                    MT_CAP_APP | MT_CAP_GP   | MT_CAP_ZOAD;
    484          
    485            /* Convert to high byte first into temp buffer */
    486            retArray[0] = LO_UINT16( tmp16 );
    487            retArray[1] = HI_UINT16( tmp16 );
    488          
    489            /* Build and send back the response */
    490            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_PING,
    491                                          sizeof(retArray), retArray );
    492          }
    493          
    494          /******************************************************************************
    495           * @fn      MT_SysVersion
    496           *
    497           * @brief   Process the Version command
    498           *
    499           * @param   None
    500           *
    501           * @return  None
    502           *****************************************************************************/
    503          static void MT_SysVersion(void)
    504          {
    505          #if !defined( INCLUDE_REVISION_INFORMATION )
    506            /* Build and send back the default response */
    507            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_VERSION,
    508                                          sizeof(MTVersionString),(uint8*)MTVersionString);
    509          #else
    510            uint8 verStr[sizeof(MTVersionString) + 4];
    511            uint8 *pBuf = &verStr[sizeof(MTVersionString)];
    512          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    513            uint32 sblSig;
    514            uint32 sblRev;
    515          #endif
    516          
    517            osal_memcpy(verStr, (uint8 *)MTVersionString, sizeof(MTVersionString));
    518          
    519          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    520            HalFlashRead(SBL_SIG_ADDR / HAL_FLASH_PAGE_SIZE,
    521                         SBL_SIG_ADDR % HAL_FLASH_PAGE_SIZE,
    522                         (uint8 *)&sblSig, sizeof(sblSig));
    523          
    524            if (sblSig == SBL_SIGNATURE)
    525            {
    526              // SBL is supported and its revision is provided (in a known flash location)
    527              HalFlashRead(SBL_REV_ADDR / HAL_FLASH_PAGE_SIZE,
    528                           SBL_REV_ADDR % HAL_FLASH_PAGE_SIZE,
    529                           (uint8 *)&sblRev, sizeof(sblRev));
    530            }
    531            else
    532            {
    533              //  SBL is supported but its revision is not provided
    534              sblRev = 0x00000000;
    535            }
    536          #else
    537            // SBL is NOT supported
    538            sblRev = 0xFFFFFFFF;
    539          #endif
    540          
    541            // Plug the SBL revision indication
    542            UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,sblRev);
    543          
    544            /* Build and send back the response */
    545            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_VERSION,
    546                                          sizeof(verStr), verStr);
    547          #endif
    548          }
    549          
    550          /******************************************************************************
    551           * @fn      MT_SysSetExtAddr
    552           *
    553           * @brief   Set the Extended Address
    554           *
    555           * @param   pBuf
    556           *
    557           * @return  None
    558           *****************************************************************************/
    559          static void MT_SysSetExtAddr(uint8 *pBuf)
    560          {
    561            uint8 retValue = ZFailure;
    562          
    563            /* Skip over RPC header */
    564            pBuf += MT_RPC_FRAME_HDR_SZ;
    565          
    566            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
    567            {
    568          // CC253X MAC Network Processor does not have NV support
    569          #if defined(CC253X_MACNP)
    570              retValue = ZSuccess;
    571          #else
    572              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
    573          #endif
    574            }
    575          
    576            /* Build and send back the response */
    577            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SET_EXTADDR,
    578                                          sizeof(retValue), &retValue);
    579          }
    580          
    581          /******************************************************************************
    582           * @fn      MT_SysGetExtAddr
    583           *
    584           * @brief   Get the Extended Address
    585           *
    586           * @param   None
    587           *
    588           * @return  None
    589           *****************************************************************************/
    590          static void MT_SysGetExtAddr(void)
    591          {
    592            uint8 extAddr[Z_EXTADDR_LEN];
    593          
    594            ZMacGetReq( ZMacExtAddr, extAddr );
    595          
    596            /* Build and send back the response */
    597            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_GET_EXTADDR,
    598                                          sizeof(extAddr), extAddr);
    599          }
    600          
    601          #if !defined( CC253X_MACNP )
    602          /******************************************************************************
    603           * @fn      MT_CheckNvId
    604           *
    605           * @brief   Check whether (ZigBee Stack) NV read should be blocked
    606           *
    607           * @param   nvId - NV item ID
    608           *
    609           * @return  'ZInvalidParameter' if blocked, otherwise 'ZSuccess'
    610           *****************************************************************************/
    611          static uint8 MT_CheckNvId( uint16 nvId )
    612          {
    613          #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    614            if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
    615                (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
    616                (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
    617            {
    618              /* Access to Security Certificate Data is denied */
    619              return( ZInvalidParameter );
    620            }
    621          #endif  /* MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA */
    622          
    623          #if !MT_SYS_KEY_MANAGEMENT
    624            if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
    625                 (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
    626                ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
    627                ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
    628                 (nvId == ZCD_NV_PRECFGKEY) )
    629            {
    630              /* Access to Security Key Data is denied */
    631              return( ZInvalidParameter );
    632            }
    633          #endif  /* !MT_SYS_KEY_MANAGEMENT */
    634          
    635            return( ZSuccess );
    636          }
    637          
    638          /******************************************************************************
    639           * @fn      MT_SysOsalNVRead
    640           *
    641           * @brief   Attempt to read an NV value
    642           *
    643           * @param   pBuf - pointer to the data
    644           *
    645           * @return  None
    646           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          static void MT_SysOsalNVRead(uint8 *pBuf)
   \                     MT_SysOsalNVRead:
    648          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    649            uint8 error;
    650            uint8 cmdId;
    651            uint16 nvId;
    652            uint16 dataLen;
    653            uint16 dataOfs;
    654            uint16 nvItemLen;
    655          
    656            /* MT command ID */
    657            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F5..         MOV       ?V3,A
    658            /* Skip over RPC header */
    659            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV       A,R6
   \   000018   2403         ADD       A,#0x3
   \   00001A   FE           MOV       R6,A
   \   00001B   5001         JNC       ??MT_SysOsalNVRead_0
   \   00001D   0F           INC       R7
    660          
    661            /* NV item ID */
    662            nvId = osal_build_uint16( pBuf );
   \                     ??MT_SysOsalNVRead_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint16
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
    663          
    664          #if defined( ZCD_NV_POLL_RATE_OLD16 )
    665            if( nvId == ZCD_NV_POLL_RATE_OLD16 )
   \   000028   7424         MOV       A,#0x24
   \   00002A   65..         XRL       A,?V0
   \   00002C   4B           ORL       A,R3
   \   00002D   7068         JNZ       ??MT_SysOsalNVRead_1
    666            {
    667              // This ID shouldn't exist anymore, it was converted to the new size and ID
    668              // then deleted during initialization. But, a read of this item will
    669              // read the new item and convert the size and return the size expected.
    670              uint32 pollRate;
    671              uint16 *pOldPollRate;
    672              uint8 respBuf[4];
    673              uint8 respLen;
    674              // Convert from old uint16 NV item to the new uint32 NV item
    675              if ( osal_nv_read( ZCD_NV_POLL_RATE, 0, sizeof( uint32 ), &pollRate ) == ZSUCCESS )
   \   00002F                ; Setup parameters for call to function osal_nv_read
   \   00002F   7406         MOV       A,#0x6
   \   000031   12....       LCALL     ?XSTACK_DISP100_8
   \   000034   88..         MOV       ?V0,R0
   \   000036   89..         MOV       ?V1,R1
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   75..04       MOV       ?V0,#0x4
   \   000040   75..00       MOV       ?V1,#0x0
   \   000043   78..         MOV       R0,#?V0
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000048   7C00         MOV       R4,#0x0
   \   00004A   7D00         MOV       R5,#0x0
   \   00004C   7A35         MOV       R2,#0x35
   \   00004E   7B00         MOV       R3,#0x0
   \   000050   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
   \   000058   E9           MOV       A,R1
   \   000059   85..82       MOV       DPL,?XSP + 0
   \   00005C   85..83       MOV       DPH,?XSP + 1
   \   00005F   7023         JNZ       ??MT_SysOsalNVRead_2
    676              {
    677                respBuf[0] = ZSuccess;
   \   000061   E4           CLR       A
   \   000062   F0           MOVX      @DPTR,A
    678                respBuf[1] = sizeof( uint16 );
   \   000063   04           INC       A
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   7402         MOV       A,#0x2
   \   000069   F0           MOVX      @DPTR,A
    679                pOldPollRate = (uint16 *)&respBuf[2];
    680                *pOldPollRate = (uint16)pollRate;
   \   00006A   7406         MOV       A,#0x6
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?L_MOV_X
   \   000074   7402         MOV       A,#0x2
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E5..         MOV       A,?V0
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   A3           INC       DPTR
   \   00007D   E5..         MOV       A,?V1
   \   00007F   F0           MOVX      @DPTR,A
    681                respLen = 4;
   \   000080   7B04         MOV       R3,#0x4
   \   000082   800A         SJMP      ??MT_SysOsalNVRead_3
    682              }
    683              else
    684              {
    685                respBuf[0] = ZFailure;
   \                     ??MT_SysOsalNVRead_2:
   \   000084   7401         MOV       A,#0x1
   \   000086   F0           MOVX      @DPTR,A
    686                respBuf[1] = 0;
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   E4           CLR       A
   \   00008B   F0           MOVX      @DPTR,A
    687                respLen = 2;
   \   00008C   7B02         MOV       R3,#0x2
    688              }
    689              /* Build and send back the response */
    690              MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_READ,
    691                                            respLen, respBuf );
   \                     ??MT_SysOsalNVRead_3:
   \   00008E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008E   AC..         MOV       R4,?XSP + 0
   \   000090   AD..         MOV       R5,?XSP + 1
   \   000092   7A08         MOV       R2,#0x8
   \   000094   02....       LJMP      ??MT_SysOsalNVRead_4 & 0xFFFF
    692              return;
    693            }
    694          #endif
    695          
    696            /* Check whether read-access to this item is allowed */
    697            error = MT_CheckNvId( nvId );
   \                     ??MT_SysOsalNVRead_1:
   \   000097   7469         MOV       A,#0x69
   \   000099   65..         XRL       A,?V0
   \   00009B   7001         JNZ       ??MT_SysOsalNVRead_5
   \   00009D   EB           MOV       A,R3
   \                     ??MT_SysOsalNVRead_5:
   \   00009E   604D         JZ        ??MT_SysOsalNVRead_6
   \   0000A0   746B         MOV       A,#0x6b
   \   0000A2   65..         XRL       A,?V0
   \   0000A4   7001         JNZ       ??MT_SysOsalNVRead_7
   \   0000A6   EB           MOV       A,R3
   \                     ??MT_SysOsalNVRead_7:
   \   0000A7   6044         JZ        ??MT_SysOsalNVRead_6
   \   0000A9   746A         MOV       A,#0x6a
   \   0000AB   65..         XRL       A,?V0
   \   0000AD   7001         JNZ       ??MT_SysOsalNVRead_8
   \   0000AF   EB           MOV       A,R3
   \                     ??MT_SysOsalNVRead_8:
   \   0000B0   603B         JZ        ??MT_SysOsalNVRead_6
   \   0000B2   743A         MOV       A,#0x3a
   \   0000B4   65..         XRL       A,?V0
   \   0000B6   7001         JNZ       ??MT_SysOsalNVRead_9
   \   0000B8   EB           MOV       A,R3
   \                     ??MT_SysOsalNVRead_9:
   \   0000B9   6032         JZ        ??MT_SysOsalNVRead_6
   \   0000BB   743B         MOV       A,#0x3b
   \   0000BD   65..         XRL       A,?V0
   \   0000BF   7001         JNZ       ??MT_SysOsalNVRead_10
   \   0000C1   EB           MOV       A,R3
   \                     ??MT_SysOsalNVRead_10:
   \   0000C2   6029         JZ        ??MT_SysOsalNVRead_6
   \   0000C4   EA           MOV       A,R2
   \   0000C5   24FF         ADD       A,#-0x1
   \   0000C7   F8           MOV       R0,A
   \   0000C8   EB           MOV       A,R3
   \   0000C9   34FE         ADDC      A,#-0x2
   \   0000CB   F9           MOV       R1,A
   \   0000CC   C3           CLR       C
   \   0000CD   E8           MOV       A,R0
   \   0000CE   94FF         SUBB      A,#-0x1
   \   0000D0   E9           MOV       A,R1
   \   0000D1   9400         SUBB      A,#0x0
   \   0000D3   4018         JC        ??MT_SysOsalNVRead_6
   \   0000D5   19           DEC       R1
   \   0000D6   C3           CLR       C
   \   0000D7   E8           MOV       A,R0
   \   0000D8   94FF         SUBB      A,#-0x1
   \   0000DA   E9           MOV       A,R1
   \   0000DB   9400         SUBB      A,#0x0
   \   0000DD   400E         JC        ??MT_SysOsalNVRead_6
   \   0000DF   7462         MOV       A,#0x62
   \   0000E1   65..         XRL       A,?V0
   \   0000E3   7001         JNZ       ??MT_SysOsalNVRead_11
   \   0000E5   EB           MOV       A,R3
   \                     ??MT_SysOsalNVRead_11:
   \   0000E6   6005         JZ        ??MT_SysOsalNVRead_6
   \   0000E8   75..00       MOV       ?V2,#0x0
   \   0000EB   8003         SJMP      ??MT_SysOsalNVRead_12
   \                     ??MT_SysOsalNVRead_6:
   \   0000ED   75..02       MOV       ?V2,#0x2
    698          
    699            /* Get NV data offset */
    700            if( cmdId == MT_SYS_OSAL_NV_READ )
   \                     ??MT_SysOsalNVRead_12:
   \   0000F0   7408         MOV       A,#0x8
   \   0000F2   65..         XRL       A,?V3
   \   0000F4   700C         JNZ       ??MT_SysOsalNVRead_13
    701            {
    702              /* MT_SYS_OSAL_NV_READ has 1-byte offset */
    703              dataOfs = (uint16)pBuf[2];
   \   0000F6   8E82         MOV       DPL,R6
   \   0000F8   8F83         MOV       DPH,R7
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   FE           MOV       R6,A
   \   0000FE   7F00         MOV       R7,#0x0
   \   000100   8012         SJMP      ??MT_SysOsalNVRead_14
    704            }
    705            else
    706            {
    707              /* MT_SYS_OSAL_NV_READ_EXT has 2-byte offset */
    708              dataOfs = osal_build_uint16( pBuf+2 );
   \                     ??MT_SysOsalNVRead_13:
   \   000102                ; Setup parameters for call to function osal_build_uint16
   \   000102   EE           MOV       A,R6
   \   000103   2402         ADD       A,#0x2
   \   000105   FA           MOV       R2,A
   \   000106   E4           CLR       A
   \   000107   3F           ADDC      A,R7
   \   000108   FB           MOV       R3,A
   \   000109   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00010C   8A..         MOV       ?V4,R2
   \   00010E   8B..         MOV       ?V5,R3
   \   000110   AE..         MOV       R6,?V4
   \   000112   AF..         MOV       R7,?V5
    709            }
    710          
    711            /* Length of entire NV item data */
    712            nvItemLen = osal_nv_item_len( nvId );
   \                     ??MT_SysOsalNVRead_14:
   \   000114                ; Setup parameters for call to function osal_nv_item_len
   \   000114   AA..         MOV       R2,?V0
   \   000116   AB..         MOV       R3,?V1
   \   000118   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00011B   8A..         MOV       ?V4,R2
   \   00011D   8B..         MOV       ?V5,R3
   \   00011F   A8..         MOV       R0,?V4
   \   000121   A9..         MOV       R1,?V5
    713            if( nvItemLen <= dataOfs )
   \   000123   C3           CLR       C
   \   000124   EE           MOV       A,R6
   \   000125   98           SUBB      A,R0
   \   000126   EF           MOV       A,R7
   \   000127   99           SUBB      A,R1
   \   000128   4006         JC        ??MT_SysOsalNVRead_15
    714            {
    715              /* Offset is past end of data */
    716              error = ZInvalidParameter;
   \   00012A   75..02       MOV       ?V2,#0x2
   \   00012D   02....       LJMP      ??MT_SysOsalNVRead_16 & 0xFFFF
    717            }
    718          
    719            if( error == ZSuccess )
   \                     ??MT_SysOsalNVRead_15:
   \   000130   E5..         MOV       A,?V2
   \   000132   6003         JZ        $+5
   \   000134   02....       LJMP      ??MT_SysOsalNVRead_17 & 0xFFFF
    720            {
    721              uint8 *pRetBuf;
    722              uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
    723          
    724              dataLen = nvItemLen - dataOfs;
   \   000137   E8           MOV       A,R0
   \   000138   C3           CLR       C
   \   000139   9E           SUBB      A,R6
   \   00013A   F5..         MOV       ?V8,A
   \   00013C   E9           MOV       A,R1
   \   00013D   9F           SUBB      A,R7
   \   00013E   F5..         MOV       ?V9,A
    725              if (dataLen > (uint16)(MT_MAX_RSP_DATA_LEN - respLen))
   \   000140   C3           CLR       C
   \   000141   E5..         MOV       A,?V8
   \   000143   94F7         SUBB      A,#-0x9
   \   000145   E5..         MOV       A,?V9
   \   000147   9400         SUBB      A,#0x0
   \   000149   4006         JC        ??MT_SysOsalNVRead_18
    726              {
    727                /* Data length is limited by TX buffer size and MT protocol */
    728                dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
   \   00014B   75..F6       MOV       ?V8,#-0xa
   \   00014E   75..00       MOV       ?V9,#0x0
    729              }
    730              respLen += dataLen;
   \                     ??MT_SysOsalNVRead_18:
   \   000151   E5..         MOV       A,?V8
   \   000153   2402         ADD       A,#0x2
   \   000155   F5..         MOV       ?V4,A
    731          
    732              pRetBuf = osal_mem_alloc(respLen);
   \   000157                ; Setup parameters for call to function osal_mem_alloc
   \   000157   FA           MOV       R2,A
   \   000158   7B00         MOV       R3,#0x0
   \   00015A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00015D   8A..         MOV       ?V6,R2
   \   00015F   8B..         MOV       ?V7,R3
    733              if( pRetBuf != NULL )
   \   000161   EA           MOV       A,R2
   \   000162   45..         ORL       A,?V7
   \   000164   7003         JNZ       $+5
   \   000166   02....       LJMP      ??MT_SysOsalNVRead_19 & 0xFFFF
    734              {
    735                osal_memset(&pRetBuf[2], 0, dataLen);
   \   000169   EA           MOV       A,R2
   \   00016A   2402         ADD       A,#0x2
   \   00016C   F5..         MOV       ?V10,A
   \   00016E   E4           CLR       A
   \   00016F   35..         ADDC      A,?V7
   \   000171   F5..         MOV       ?V11,A
   \   000173                ; Setup parameters for call to function osal_memset
   \   000173   AC..         MOV       R4,?V8
   \   000175   AD..         MOV       R5,?V9
   \   000177   7900         MOV       R1,#0x0
   \   000179   0A           INC       R2
   \   00017A   0A           INC       R2
   \   00017B   FB           MOV       R3,A
   \   00017C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    736                if (((osal_nv_read( nvId, dataOfs, dataLen, &pRetBuf[2] )) == ZSUCCESS))
   \   00017F                ; Setup parameters for call to function osal_nv_read
   \   00017F   78..         MOV       R0,#?V10
   \   000181   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000184   78..         MOV       R0,#?V8
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000189   EE           MOV       A,R6
   \   00018A   FC           MOV       R4,A
   \   00018B   EF           MOV       A,R7
   \   00018C   FD           MOV       R5,A
   \   00018D   AA..         MOV       R2,?V0
   \   00018F   AB..         MOV       R3,?V1
   \   000191   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000194   7404         MOV       A,#0x4
   \   000196   12....       LCALL     ?DEALLOC_XSTACK8
   \   000199   E9           MOV       A,R1
   \   00019A   701B         JNZ       ??MT_SysOsalNVRead_20
    737                {
    738                  pRetBuf[0] = ZSuccess;
   \   00019C   85..82       MOV       DPL,?V6
   \   00019F   85..83       MOV       DPH,?V7
   \   0001A2   E4           CLR       A
   \   0001A3   F0           MOVX      @DPTR,A
    739                  pRetBuf[1] = dataLen;
   \   0001A4   A3           INC       DPTR
   \   0001A5   E5..         MOV       A,?V8
   \   0001A7   F0           MOVX      @DPTR,A
    740                  MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId,
    741                                                respLen, pRetBuf );
   \   0001A8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001A8   AC..         MOV       R4,?V6
   \   0001AA   AD..         MOV       R5,?V7
   \   0001AC   AB..         MOV       R3,?V4
   \   0001AE   AA..         MOV       R2,?V3
   \   0001B0   7961         MOV       R1,#0x61
   \   0001B2   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   0001B5   8003         SJMP      ??MT_SysOsalNVRead_21
    742                }
    743                else
    744                {
    745                  error = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVRead_20:
   \   0001B7   75..0A       MOV       ?V2,#0xa
    746                }
    747                osal_mem_free(pRetBuf);
   \                     ??MT_SysOsalNVRead_21:
   \   0001BA                ; Setup parameters for call to function osal_mem_free
   \   0001BA   AA..         MOV       R2,?V6
   \   0001BC   AB..         MOV       R3,?V7
   \   0001BE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    748              }
    749              else
    750              {
    751                /* Could not get buffer for NV data */
    752                error = ZMemError;
    753              }
    754            }
    755          
    756            if( error != ZSuccess )
   \                     ??MT_SysOsalNVRead_17:
   \   0001C1   E5..         MOV       A,?V2
   \   0001C3   6023         JZ        ??MT_SysOsalNVRead_22
    757            {
    758              uint8 tmp[2] = { error, 0 };
   \                     ??MT_SysOsalNVRead_16:
   \   0001C5   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   0001C8   7404         MOV       A,#0x4
   \   0001CA   12....       LCALL     ?XSTACK_DISP102_8
   \   0001CD   7402         MOV       A,#0x2
   \   0001CF   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0001D2   7404         MOV       A,#0x4
   \   0001D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D7   E5..         MOV       A,?V2
   \   0001D9   F0           MOVX      @DPTR,A
    759              MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId,
    760                                            sizeof(tmp), tmp);
   \   0001DA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001DA   7404         MOV       A,#0x4
   \   0001DC   12....       LCALL     ?XSTACK_DISP102_8
   \   0001DF   7B02         MOV       R3,#0x2
   \   0001E1   AA..         MOV       R2,?V3
   \                     ??MT_SysOsalNVRead_4:
   \   0001E3   7961         MOV       R1,#0x61
   \   0001E5   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    761            }
    762          }
   \                     ??MT_SysOsalNVRead_22:
   \   0001E8   740A         MOV       A,#0xa
   \   0001EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001ED   7F0C         MOV       R7,#0xc
   \   0001EF   02....       LJMP      ?BANKED_LEAVE_XDATA
   \                     ??MT_SysOsalNVRead_19:
   \   0001F2   75..10       MOV       ?V2,#0x10
   \   0001F5   80CE         SJMP      ??MT_SysOsalNVRead_16

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
    763          
    764          /******************************************************************************
    765           * @fn      MT_SysOsalNVWrite
    766           *
    767           * @brief   Attempt to write an NV item
    768           *
    769           * @param   pBuf - pointer to the data
    770           *
    771           * @return  None
    772           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    773          static void MT_SysOsalNVWrite(uint8 *pBuf)
   \                     MT_SysOsalNVWrite:
    774          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V5,R3
    775            uint8 cmdId;
    776            uint16 nvId;
    777            uint16 dataLen;
    778            uint16 dataOfs;
    779            uint16 nvItemLen;
    780            uint8 rtrn = ZSuccess;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
    781          
    782            /* MT command ID */
    783            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V2,A
    784            /* Skip over RPC header */
    785            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001D   EA           MOV       A,R2
   \   00001E   2403         ADD       A,#0x3
   \   000020   F5..         MOV       ?V4,A
   \   000022   5002         JNC       ??MT_SysOsalNVWrite_0
   \   000024   05..         INC       ?V5
    786          
    787            /* NV item ID */
    788            nvId = osal_build_uint16( pBuf );
   \                     ??MT_SysOsalNVWrite_0:
   \   000026                ; Setup parameters for call to function osal_build_uint16
   \   000026   0A           INC       R2
   \   000027   0A           INC       R2
   \   000028   0A           INC       R2
   \   000029   AB..         MOV       R3,?V5
   \   00002B   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   AE..         MOV       R6,?V0
   \   000034   AF..         MOV       R7,?V1
    789          
    790            /* Get NV data offset & length */
    791            if ( cmdId == MT_SYS_OSAL_NV_WRITE )
   \   000036   7409         MOV       A,#0x9
   \   000038   65..         XRL       A,?V2
   \   00003A   7023         JNZ       ??MT_SysOsalNVWrite_1
    792            {
    793              /* MT_SYS_OSAL_NV_WRITE has 1-byte offset & length */
    794              dataOfs = (uint16)pBuf[2];
   \   00003C   85..82       MOV       DPL,?V4
   \   00003F   85..83       MOV       DPH,?V5
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F5..         MOV       ?V0,A
   \   000047   75..00       MOV       ?V1,#0x0
    795              dataLen = (uint16)pBuf[3];
   \   00004A   85..82       MOV       DPL,?V4
   \   00004D   85..83       MOV       DPH,?V5
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F5..         MOV       ?V6,A
   \   000056   75..00       MOV       ?V7,#0x0
    796              pBuf += 4;
   \   000059   E5..         MOV       A,?V4
   \   00005B   2404         ADD       A,#0x4
   \   00005D   8024         SJMP      ??MT_SysOsalNVWrite_2
    797            }
    798            else
    799            {
    800              /* MT_SYS_OSAL_NV_WRITE_EXT has 2-byte offset & length */
    801              dataOfs = osal_build_uint16( pBuf+2 );
   \                     ??MT_SysOsalNVWrite_1:
   \   00005F                ; Setup parameters for call to function osal_build_uint16
   \   00005F   E5..         MOV       A,?V4
   \   000061   2402         ADD       A,#0x2
   \   000063   FA           MOV       R2,A
   \   000064   E4           CLR       A
   \   000065   35..         ADDC      A,?V5
   \   000067   FB           MOV       R3,A
   \   000068   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00006B   8A..         MOV       ?V0,R2
   \   00006D   8B..         MOV       ?V1,R3
    802              dataLen = osal_build_uint16( pBuf+4 );
   \   00006F                ; Setup parameters for call to function osal_build_uint16
   \   00006F   E5..         MOV       A,?V4
   \   000071   2404         ADD       A,#0x4
   \   000073   FA           MOV       R2,A
   \   000074   E4           CLR       A
   \   000075   35..         ADDC      A,?V5
   \   000077   FB           MOV       R3,A
   \   000078   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00007B   8A..         MOV       ?V6,R2
   \   00007D   8B..         MOV       ?V7,R3
    803              pBuf += 6;
   \   00007F   E5..         MOV       A,?V4
   \   000081   2406         ADD       A,#0x6
   \                     ??MT_SysOsalNVWrite_2:
   \   000083   F5..         MOV       ?V4,A
   \   000085   5002         JNC       ??MT_SysOsalNVWrite_3
   \   000087   05..         INC       ?V5
    804            }
    805          
    806          #if defined ( ZCD_NV_POLL_RATE_OLD16 )
    807            if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
   \                     ??MT_SysOsalNVWrite_3:
   \   000089   7424         MOV       A,#0x24
   \   00008B   6E           XRL       A,R6
   \   00008C   4F           ORL       A,R7
   \   00008D   700D         JNZ       ??MT_SysOsalNVWrite_4
    808            {
    809              // This ID shouldn't exist anymore, it was converted to the new size and ID
    810              // then deleted during initialization.  But a write to this item will
    811              // convert the 16 bits to the new 32 bits and write that value to the new
    812              // NV item.
    813              uint32 pollRate;
    814              uint16 *pOldPollRate = (uint16 *)pBuf;
    815              uint16 oldPollRate = *pOldPollRate;
    816              nvId = ZCD_NV_POLL_RATE;
   \   00008F   7E35         MOV       R6,#0x35
   \   000091   7F00         MOV       R7,#0x0
    817              nvItemLen = sizeof ( uint32 );
    818              pollRate = (uint32)oldPollRate;
    819              pBuf = (uint8 *)&pollRate;
   \   000093   7401         MOV       A,#0x1
   \   000095   12....       LCALL     ?XSTACK_DISP100_8
   \   000098   88..         MOV       ?V4,R0
   \   00009A   89..         MOV       ?V5,R1
    820            }
    821          #endif
    822          
    823            /* Length of entire NV item data */
    824            nvItemLen = osal_nv_item_len(nvId);
    825            if ((dataOfs + dataLen) <= nvItemLen)
   \                     ??MT_SysOsalNVWrite_4:
   \   00009C                ; Setup parameters for call to function osal_nv_item_len
   \   00009C   EE           MOV       A,R6
   \   00009D   FA           MOV       R2,A
   \   00009E   EF           MOV       A,R7
   \   00009F   FB           MOV       R3,A
   \   0000A0   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   0000A3   E5..         MOV       A,?V0
   \   0000A5   25..         ADD       A,?V6
   \   0000A7   F8           MOV       R0,A
   \   0000A8   E5..         MOV       A,?V1
   \   0000AA   35..         ADDC      A,?V7
   \   0000AC   F9           MOV       R1,A
   \   0000AD   C3           CLR       C
   \   0000AE   EA           MOV       A,R2
   \   0000AF   98           SUBB      A,R0
   \   0000B0   EB           MOV       A,R3
   \   0000B1   99           SUBB      A,R1
   \   0000B2   405A         JC        ??MT_SysOsalNVWrite_5
    826            {
    827              if (dataOfs == 0)
   \   0000B4   E5..         MOV       A,?V0
   \   0000B6   45..         ORL       A,?V1
   \   0000B8   7015         JNZ       ??MT_SysOsalNVWrite_6
    828              {
    829                /* Set the Z-Globals value of this NV item */
    830                zgSetItem( nvId, dataLen, pBuf );
   \   0000BA                ; Setup parameters for call to function zgSetItem
   \   0000BA   78..         MOV       R0,#?V4
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BF   AC..         MOV       R4,?V6
   \   0000C1   AD..         MOV       R5,?V7
   \   0000C3   EE           MOV       A,R6
   \   0000C4   FA           MOV       R2,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   FB           MOV       R3,A
   \   0000C7   12....       LCALL     `??zgSetItem::?relay`; Banked call to: zgSetItem
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
    831              }
    832          
    833              if ((osal_nv_write(nvId, dataOfs, dataLen, pBuf)) == ZSUCCESS)
   \                     ??MT_SysOsalNVWrite_6:
   \   0000CF                ; Setup parameters for call to function osal_nv_write
   \   0000CF   78..         MOV       R0,#?V4
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   78..         MOV       R0,#?V6
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   AC..         MOV       R4,?V0
   \   0000DB   AD..         MOV       R5,?V1
   \   0000DD   EE           MOV       A,R6
   \   0000DE   FA           MOV       R2,A
   \   0000DF   EF           MOV       A,R7
   \   0000E0   FB           MOV       R3,A
   \   0000E1   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000E4   7404         MOV       A,#0x4
   \   0000E6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E9   E9           MOV       A,R1
   \   0000EA   7018         JNZ       ??MT_SysOsalNVWrite_7
    834              {
    835                if (nvId == ZCD_NV_EXTADDR)
   \   0000EC   7401         MOV       A,#0x1
   \   0000EE   6E           XRL       A,R6
   \   0000EF   4F           ORL       A,R7
   \   0000F0   7025         JNZ       ??MT_SysOsalNVWrite_8
    836                {
    837                  rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
   \   0000F2                ; Setup parameters for call to function ZMacSetReq
   \   0000F2   AA..         MOV       R2,?V4
   \   0000F4   AB..         MOV       R3,?V5
   \   0000F6   79E2         MOV       R1,#-0x1e
   \   0000F8   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000FB   E9           MOV       A,R1
   \   0000FC   85..82       MOV       DPL,?XSP + 0
   \   0000FF   85..83       MOV       DPH,?XSP + 1
   \   000102   8012         SJMP      ??MT_SysOsalNVWrite_9
    838                }
    839              }
    840              else
    841              {
    842                rtrn = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVWrite_7:
   \   000104   85..82       MOV       DPL,?XSP + 0
   \   000107   85..83       MOV       DPH,?XSP + 1
   \   00010A   740A         MOV       A,#0xa
   \   00010C   8008         SJMP      ??MT_SysOsalNVWrite_9
    843              }
    844            }
    845            else
    846            {
    847              /* Bad length or/and offset */
    848              rtrn = ZInvalidParameter;
   \                     ??MT_SysOsalNVWrite_5:
   \   00010E   85..82       MOV       DPL,?XSP + 0
   \   000111   85..83       MOV       DPH,?XSP + 1
   \   000114   7402         MOV       A,#0x2
   \                     ??MT_SysOsalNVWrite_9:
   \   000116   F0           MOVX      @DPTR,A
    849            }
    850          
    851            /* Build and send back the response */
    852            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId,
    853                                          sizeof(rtrn), &rtrn);
   \                     ??MT_SysOsalNVWrite_8:
   \   000117                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000117   AC..         MOV       R4,?XSP + 0
   \   000119   AD..         MOV       R5,?XSP + 1
   \   00011B   7B01         MOV       R3,#0x1
   \   00011D   AA..         MOV       R2,?V2
   \   00011F   7961         MOV       R1,#0x61
   \   000121   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    854          }
   \   000124   7405         MOV       A,#0x5
   \   000126   12....       LCALL     ?DEALLOC_XSTACK8
   \   000129   7F0A         MOV       R7,#0xa
   \   00012B   02....       LJMP      ?BANKED_LEAVE_XDATA
    855          
    856          /******************************************************************************
    857           * @fn      MT_SysOsalNVItemInit
    858           *
    859           * @brief   Attempt to create an NV item
    860           *
    861           * @param   pBuf - pointer to the data
    862           *
    863           * @return  None
    864           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    865          static void MT_SysOsalNVItemInit(uint8 *pBuf)
   \                     MT_SysOsalNVItemInit:
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V1,R3
    867            uint8 ret;
    868            uint8 idLen;
    869            uint16 nvId;
    870            uint16 nvLen;
    871          
    872            /* Skip over RPC header */
    873            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000C   EA           MOV       A,R2
   \   00000D   2403         ADD       A,#0x3
   \   00000F   F5..         MOV       ?V0,A
   \   000011   5002         JNC       ??MT_SysOsalNVItemInit_0
   \   000013   05..         INC       ?V1
    874          
    875            /* NV item ID */
    876            nvId = osal_build_uint16( pBuf );
   \                     ??MT_SysOsalNVItemInit_0:
   \   000015                ; Setup parameters for call to function osal_build_uint16
   \   000015   0A           INC       R2
   \   000016   0A           INC       R2
   \   000017   0A           INC       R2
   \   000018   AB..         MOV       R3,?V1
   \   00001A   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00001D   8A..         MOV       ?V2,R2
   \   00001F   8B..         MOV       ?V3,R3
   \   000021   AE..         MOV       R6,?V2
   \   000023   AF..         MOV       R7,?V3
    877            /* NV item length */
    878            nvLen = osal_build_uint16( pBuf+2 );
   \   000025                ; Setup parameters for call to function osal_build_uint16
   \   000025   E5..         MOV       A,?V0
   \   000027   2402         ADD       A,#0x2
   \   000029   FA           MOV       R2,A
   \   00002A   E4           CLR       A
   \   00002B   35..         ADDC      A,?V1
   \   00002D   FB           MOV       R3,A
   \   00002E   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000031   8A..         MOV       ?V2,R2
   \   000033   8B..         MOV       ?V3,R3
   \   000035   AC..         MOV       R4,?V2
   \   000037   AD..         MOV       R5,?V3
    879            /* Initialization data length */
    880            idLen = pBuf[4];
   \   000039   85..82       MOV       DPL,?V0
   \   00003C   85..83       MOV       DPH,?V1
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F5..         MOV       ?V2,A
    881            pBuf += 5;
   \   000046   E5..         MOV       A,?V0
   \   000048   2405         ADD       A,#0x5
   \   00004A   F5..         MOV       ?V0,A
   \   00004C   5002         JNC       ??MT_SysOsalNVItemInit_1
   \   00004E   05..         INC       ?V1
    882          
    883          #if defined( ZCD_NV_POLL_RATE_OLD16 )
    884            if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
   \                     ??MT_SysOsalNVItemInit_1:
   \   000050   7424         MOV       A,#0x24
   \   000052   6E           XRL       A,R6
   \   000053   4F           ORL       A,R7
   \   000054   7009         JNZ       ??MT_SysOsalNVItemInit_2
    885            {
    886              /* This item shouldn't exist anymore.  Read and write will convert
    887               * to the new NV item, so return Success.
    888               */
    889              ret = ZSuccess;
   \   000056   85..82       MOV       DPL,?XSP + 0
   \   000059   85..83       MOV       DPH,?XSP + 1
   \   00005C   E4           CLR       A
   \   00005D   8069         SJMP      ??MT_SysOsalNVItemInit_3
    890            }
    891            else
    892          #endif
    893            {
    894              if ( idLen < nvLen )
   \                     ??MT_SysOsalNVItemInit_2:
   \   00005F   C3           CLR       C
   \   000060   E5..         MOV       A,?V2
   \   000062   9C           SUBB      A,R4
   \   000063   E4           CLR       A
   \   000064   9D           SUBB      A,R5
   \   000065   5049         JNC       ??MT_SysOsalNVItemInit_4
    895              {
    896                /* Attempt to create a new NV item */
    897                ret = osal_nv_item_init( nvId, nvLen, NULL );
   \   000067                ; Setup parameters for call to function osal_nv_item_init
   \   000067   E4           CLR       A
   \   000068   F5..         MOV       ?V4,A
   \   00006A   F5..         MOV       ?V5,A
   \   00006C   78..         MOV       R0,#?V4
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000078   7402         MOV       A,#0x2
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   E9           MOV       A,R1
   \   00007E   85..82       MOV       DPL,?XSP + 0
   \   000081   85..83       MOV       DPH,?XSP + 1
   \   000084   F0           MOVX      @DPTR,A
    898                if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
   \   000085   6409         XRL       A,#0x9
   \   000087   7040         JNZ       ??MT_SysOsalNVItemInit_5
   \   000089   E5..         MOV       A,?V2
   \   00008B   603C         JZ        ??MT_SysOsalNVItemInit_5
    899                {
    900                  /* Write initialization data to first part of new item */
    901                  (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
   \   00008D                ; Setup parameters for call to function osal_nv_write
   \   00008D   78..         MOV       R0,#?V0
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000092   E5..         MOV       A,?V2
   \   000094   F5..         MOV       ?V0,A
   \   000096   75..00       MOV       ?V1,#0x0
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   7C00         MOV       R4,#0x0
   \   0000A0   7D00         MOV       R5,#0x0
   \   0000A2   EE           MOV       A,R6
   \   0000A3   FA           MOV       R2,A
   \   0000A4   EF           MOV       A,R7
   \   0000A5   FB           MOV       R3,A
   \   0000A6   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A9   7404         MOV       A,#0x4
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   8019         SJMP      ??MT_SysOsalNVItemInit_5
    902                }
    903              }
    904              else
    905              {
    906                /* Attempt to create/initialize a new NV item */
    907                ret = osal_nv_item_init( nvId, nvLen, pBuf );
   \                     ??MT_SysOsalNVItemInit_4:
   \   0000B0                ; Setup parameters for call to function osal_nv_item_init
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   EE           MOV       A,R6
   \   0000B6   FA           MOV       R2,A
   \   0000B7   EF           MOV       A,R7
   \   0000B8   FB           MOV       R3,A
   \   0000B9   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000BC   7402         MOV       A,#0x2
   \   0000BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C1   E9           MOV       A,R1
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_SysOsalNVItemInit_3:
   \   0000C8   F0           MOVX      @DPTR,A
    908              }
    909            }
    910          
    911            /* Build and send back the response */
    912            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_ITEM_INIT,
    913                                          sizeof(ret), &ret);
   \                     ??MT_SysOsalNVItemInit_5:
   \   0000C9                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000C9   AC..         MOV       R4,?XSP + 0
   \   0000CB   AD..         MOV       R5,?XSP + 1
   \   0000CD   7B01         MOV       R3,#0x1
   \   0000CF   7A07         MOV       R2,#0x7
   \   0000D1   7961         MOV       R1,#0x61
   \   0000D3   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    914          }
   \   0000D6   7401         MOV       A,#0x1
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DB   7F06         MOV       R7,#0x6
   \   0000DD   02....       LJMP      ?BANKED_LEAVE_XDATA
    915          
    916          /******************************************************************************
    917           * @fn      MT_SysOsalNVDelete
    918           *
    919           * @brief   Attempt to delete an NV item
    920           *
    921           * @param   pBuf - pointer to the data
    922           *
    923           * @return  None
    924           *****************************************************************************/
    925          static void MT_SysOsalNVDelete(uint8 *pBuf)
    926          {
    927            uint16 nvId;
    928            uint16 nvLen;
    929            uint8 ret;
    930          
    931            /* Skip over RPC header */
    932            pBuf += MT_RPC_FRAME_HDR_SZ;
    933          
    934            /* Get the ID */
    935            nvId = osal_build_uint16( pBuf );
    936            /* Get the length */
    937            nvLen = osal_build_uint16( pBuf+2 );
    938          
    939          #if defined ( ZCD_NV_POLL_RATE_OLD16 )
    940            if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
    941            {
    942              /* This item shouldn't exist anymore.  Read and write will convert
    943               * to the new NV item, so return Success.
    944               */
    945              ret = ZSuccess;
    946            }
    947            else
    948          #endif
    949            {
    950              /* Attempt to delete the NV item */
    951              ret = osal_nv_delete( nvId, nvLen );
    952            }
    953          
    954            /* Build and send back the response */
    955            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_DELETE,
    956                                          sizeof(ret), &ret);
    957          }
    958          
    959          /******************************************************************************
    960           * @fn      MT_SysOsalNVLength
    961           *
    962           * @brief   Attempt to get the length to an NV item
    963           *
    964           * @param   pBuf - pointer to the data
    965           *
    966           * @return  None
    967           *****************************************************************************/
    968          static void MT_SysOsalNVLength(uint8 *pBuf)
    969          {
    970            uint16 nvId;
    971            uint16 nvLen;
    972            uint8 rsp[2];
    973          
    974            /* Skip over RPC header */
    975            pBuf += MT_RPC_FRAME_HDR_SZ;
    976          
    977            /* Get the ID */
    978            nvId = osal_build_uint16( pBuf );
    979          
    980          #if defined ( ZCD_NV_POLL_RATE_OLD16 )
    981            if ( nvId == ZCD_NV_POLL_RATE_OLD16 )
    982            {
    983              /* Ignore this item and force return  */
    984              nvLen = 0;
    985            }
    986            else
    987          #endif
    988            {
    989              /* Attempt to get NV item length */
    990              nvLen = osal_nv_item_len( nvId );
    991            }
    992          
    993            rsp[0] = LO_UINT16( nvLen );
    994            rsp[1] = HI_UINT16( nvLen );
    995          
    996            /* Build and send back the response */
    997            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_NV_LENGTH,
    998                                          sizeof(rsp), rsp);
    999          }
   1000          
   1001          #if defined( FEATURE_NVEXID )
   1002          /******************************************************************************
   1003           * @fn      MT_ParseNvExtId
   1004           *
   1005           * @brief   Parse the incoming NV ID parameters
   1006           *
   1007           * @param   pBuf - pointer to incoming data
   1008           * @param   nvId - pointer to outgoing NV ID
   1009           *
   1010           * @return  pointer to next incoming data byte
   1011           *****************************************************************************/
   1012          static uint8 *MT_ParseNvExtId( uint8 *pBuf, NVINTF_itemID_t *nvId )
   1013          {
   1014            /* Skip over RPC header */
   1015            pBuf += MT_RPC_FRAME_HDR_SZ;
   1016          
   1017            nvId->systemID = pBuf[0];
   1018            nvId->itemID = osal_build_uint16( pBuf+1 );
   1019            nvId->subID = osal_build_uint16( pBuf+3 );
   1020          
   1021            return( pBuf + 5 );
   1022          }
   1023          
   1024          /******************************************************************************
   1025           * @fn      MT_StackNvExtId
   1026           *
   1027           * @brief   Check whether extended NV ID is from ZigBee Stack
   1028           *
   1029           * @param   nvId - pointer to extended NV ID
   1030           *
   1031           * @return  TRUE if ZigBee Stack NV item, otherwise FALSE
   1032           *****************************************************************************/
   1033          static uint8 MT_StackNvExtId( NVINTF_itemID_t *nvId )
   1034          {
   1035            return( (nvId->systemID == NVINTF_SYSID_ZSTACK) && (nvId->itemID == 0) );
   1036          }
   1037          
   1038          /******************************************************************************
   1039           * @fn      MT_SysNvCompact
   1040           *
   1041           * @brief   Attempt to compact the active NV page
   1042           *
   1043           * @param   pBuf - pointer to the data
   1044           *
   1045           * @return  None
   1046           *****************************************************************************/
   1047          static void MT_SysNvCompact(uint8 *pBuf)
   1048          {
   1049            uint8 retVal;
   1050          
   1051            if (( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.compactNV == NULL ))
   1052            {
   1053              /* NV item compact function not available */
   1054              retVal = NVINTF_NOTREADY;
   1055            }
   1056            else
   1057            {
   1058              uint16 minSize;
   1059          
   1060              /* Skip over RPC header */
   1061              pBuf += MT_RPC_FRAME_HDR_SZ;
   1062          
   1063              /* Get the remaining size threshold */
   1064              minSize = osal_build_uint16( pBuf );
   1065          
   1066              /* Attempt to compact the active NV page */
   1067              retVal = pZStackCfg->nvFps.compactNV( minSize );
   1068            }
   1069          
   1070            /* Build and send back the response */
   1071            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_COMPACT,
   1072                                          sizeof(retVal), &retVal);
   1073          }
   1074          
   1075          /******************************************************************************
   1076           * @fn      MT_SysNvCreate
   1077           *
   1078           * @brief   Attempt to create an NV item (extended item ID)
   1079           *
   1080           * @param   pBuf - pointer to the data
   1081           *
   1082           * @return  None
   1083           *****************************************************************************/
   1084          static void MT_SysNvCreate(uint8 *pBuf)
   1085          {
   1086            uint8 retVal;
   1087          
   1088            if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.createItem == NULL ))
   1089            {
   1090              /* NV item create function not available */
   1091              retVal = NVINTF_NOTREADY;
   1092            }
   1093            else
   1094            {
   1095              uint32 nvLen;
   1096              NVINTF_itemID_t nvId;
   1097          
   1098              /* Get the NV ID parameters */
   1099              pBuf = MT_ParseNvExtId( pBuf, &nvId );
   1100          
   1101              /* Get the length */
   1102              nvLen = osal_build_uint32( pBuf, sizeof(nvLen) );
   1103          
   1104              /* Attempt to create the specified item with no initial data */
   1105              retVal = pZStackCfg->nvFps.createItem( nvId, nvLen, NULL );
   1106            }
   1107          
   1108            /* Build and send back the response */
   1109            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_CREATE,
   1110                                          sizeof(retVal), &retVal);
   1111          }
   1112          
   1113          /******************************************************************************
   1114           * @fn      MT_SysNvDelete
   1115           *
   1116           * @brief   Attempt to delete an NV item (extended item ID)
   1117           *
   1118           * @param   pBuf - pointer to the data
   1119           *
   1120           * @return  None
   1121           *****************************************************************************/
   1122          static void MT_SysNvDelete(uint8 *pBuf)
   1123          {
   1124            uint8 retVal;
   1125          
   1126            if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.deleteItem == NULL ))
   1127            {
   1128              /* NV item delete function not available */
   1129              retVal = NVINTF_NOTREADY;
   1130            }
   1131            else
   1132            {
   1133              NVINTF_itemID_t nvId;
   1134          
   1135              /* Get the NV ID parameters */
   1136              MT_ParseNvExtId( pBuf, &nvId );
   1137          
   1138              /* Attempt to delete the specified item */
   1139              retVal = pZStackCfg->nvFps.deleteItem( nvId );
   1140            }
   1141          
   1142            /* Build and send back the response */
   1143            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_DELETE,
   1144                                          sizeof(retVal), &retVal);
   1145          }
   1146          
   1147          /******************************************************************************
   1148           * @fn      MT_SysNvLength
   1149           *
   1150           * @brief   Attempt to delete an NV item (extended item ID)
   1151           *
   1152           * @param   pBuf - pointer to the data
   1153           *
   1154           * @return  None
   1155           *****************************************************************************/
   1156          static void MT_SysNvLength(uint8 *pBuf)
   1157          {
   1158            uint32 nvLen;
   1159            uint8 retBuf[4];
   1160          
   1161            if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.getItemLen == NULL ))
   1162            {
   1163              /* NV item length function not available */
   1164              nvLen = 0;
   1165            }
   1166            else
   1167            {
   1168              NVINTF_itemID_t nvId;
   1169          
   1170              /* Get the NV ID parameters */
   1171              MT_ParseNvExtId( pBuf, &nvId );
   1172          
   1173              /* Attempt to get length of the specified item */
   1174              nvLen = pZStackCfg->nvFps.getItemLen( nvId );
   1175            }
   1176          
   1177            /* Serialize the length bytes */
   1178            osal_buffer_uint32( retBuf, nvLen );
   1179          
   1180            /* Build and send back the response */
   1181            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_LENGTH,
   1182                                          sizeof(retBuf), retBuf);
   1183          }
   1184          
   1185          /******************************************************************************
   1186           * @fn      MT_SysNvRead
   1187           *
   1188           * @brief   Attempt to read an NV item (extended item ID)
   1189           *
   1190           * @param   pBuf - pointer to the data
   1191           *
   1192           * @return  None
   1193           *****************************************************************************/
   1194          static void MT_SysNvRead(uint8 *pBuf)
   1195          {
   1196            uint8 error;
   1197          
   1198            if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.readItem == NULL ))
   1199            {
   1200              /* NV item length/read function not available */
   1201              error = NVINTF_NOTREADY;
   1202            }
   1203            else
   1204            {
   1205              uint8 dataLen;
   1206              uint16 dataOfs;
   1207              uint8 *pRetBuf;
   1208              uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
   1209              NVINTF_itemID_t nvId;
   1210          
   1211              /* Get the NV ID parameters */
   1212              pBuf = MT_ParseNvExtId( pBuf, &nvId );
   1213          
   1214              if( MT_StackNvExtId(&nvId) == TRUE )
   1215              {
   1216                /* Check whether read-access to this ZigBee Stack item is allowed */
   1217                if( MT_CheckNvId( nvId.subID ) != ZSuccess )
   1218                {
   1219                  /* Convert to NVINTF error code */
   1220                  error = NVINTF_BADSUBID;
   1221                }
   1222              }
   1223              else
   1224              {
   1225                /* It's OK to read this item */
   1226                error = ZSuccess;
   1227              }
   1228          
   1229              /* Get the read data offset */
   1230              dataOfs = osal_build_uint16( pBuf );
   1231          
   1232              /* And the read data length */
   1233              dataLen = pBuf[2];
   1234          
   1235              if( dataLen > (MT_MAX_RSP_DATA_LEN - respLen) )
   1236              {
   1237                /* Data length is limited by TX buffer size and MT protocol */
   1238                dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
   1239              }
   1240              respLen += dataLen;
   1241          
   1242              pRetBuf = osal_mem_alloc(respLen);
   1243              if( pRetBuf != NULL )
   1244              {
   1245                /* Attempt to read data from the specified item */
   1246                error = pZStackCfg->nvFps.readItem( nvId, dataOfs, dataLen, pRetBuf+2 );
   1247                if( error == NVINTF_SUCCESS )
   1248                {
   1249                  pRetBuf[0] = ZSuccess;
   1250                  pRetBuf[1] = dataLen;
   1251                  MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_READ,
   1252                                                respLen, pRetBuf );
   1253                }
   1254                osal_mem_free(pRetBuf);
   1255              }
   1256              else
   1257              {
   1258                /* Could not get buffer for NV data */
   1259                error = ZMemError;
   1260              }
   1261            }
   1262          
   1263            if( error != ZSuccess )
   1264            {
   1265              uint8 tmp[2] = { error, 0 };
   1266              MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_NV_READ,
   1267                                            sizeof(tmp), tmp );
   1268            }
   1269          }
   1270          
   1271          /******************************************************************************
   1272           * @fn      MT_SysNvWrite
   1273           *
   1274           * @brief   Attempt to write an NV item (extended item ID)
   1275           *
   1276           * @param   pBuf - pointer to the data
   1277           *
   1278           * @return  None
   1279           *****************************************************************************/
   1280          static void MT_SysNvWrite(uint8 *pBuf)
   1281          {
   1282            uint8 cmdId;
   1283            uint8 error;
   1284          
   1285            /* MT command ID */
   1286            cmdId = pBuf[MT_RPC_POS_CMD1];
   1287          
   1288            if(( pZStackCfg == NULL ) || ( pZStackCfg->nvFps.writeItem == NULL ))
   1289            {
   1290              /* NV item length/read function not available */
   1291              error = NVINTF_NOTREADY;
   1292            }
   1293            else
   1294            {
   1295              uint8 dataLen;
   1296              uint16 dataOfs = 0;
   1297              NVINTF_itemID_t nvId;
   1298          
   1299              /* Get the NV ID parameters */
   1300              pBuf = MT_ParseNvExtId( pBuf, &nvId );
   1301          
   1302              if( cmdId == MT_SYS_NV_WRITE )
   1303              {
   1304                /* Get data offset for Write command */
   1305                dataOfs = osal_build_uint16( pBuf );
   1306                pBuf += 2;
   1307              }
   1308          
   1309              /* Get the write data length */
   1310              dataLen = pBuf[0];
   1311              pBuf += 1;
   1312          
   1313              if( (dataOfs == 0) && (MT_StackNvExtId(&nvId) == TRUE) )
   1314              {
   1315                /* Set the Z-Globals value of this NV item */
   1316                zgSetItem( nvId.subID, dataLen, pBuf );
   1317          
   1318                if( nvId.subID == ZCD_NV_EXTADDR )
   1319                {
   1320                  /* Give MAC the new 64-bit address */
   1321                  ZMacSetReq( ZMacExtAddr, pBuf );
   1322                }
   1323              }
   1324          
   1325              if( cmdId == MT_SYS_NV_UPDATE )
   1326              {
   1327                /* Attempt to update (create) data to the specified item */
   1328                error = pZStackCfg->nvFps.writeItem( nvId, dataLen, pBuf );
   1329              }
   1330              else
   1331              {
   1332                /* Attempt to write data (existing) to the specified item */
   1333                error = pZStackCfg->nvFps.writeItemEx( nvId, dataOfs, dataLen, pBuf );
   1334              }
   1335            }
   1336          
   1337            /* Build and send back the response */
   1338            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, cmdId, sizeof(error), &error);
   1339          }
   1340          #endif  /* FEATURE_NVEXID */
   1341          #endif  /* !CC253X_MACNP */
   1342          
   1343          /******************************************************************************
   1344           * @fn      MT_SysOsalStartTimer
   1345           *
   1346           * @brief
   1347           *
   1348           * @param   uint8 pBuf - pointer to the data
   1349           *
   1350           * @return  None
   1351           *****************************************************************************/
   1352          static void MT_SysOsalStartTimer(uint8 *pBuf)
   1353          {
   1354            uint8 retValue;
   1355          
   1356            /* Skip over RPC header */
   1357            pBuf += MT_RPC_FRAME_HDR_SZ;
   1358          
   1359            if (*pBuf <= 3)
   1360            {
   1361              uint16 timer = osal_build_uint16( pBuf+1 );
   1362              uint16 eventId = (uint16)MT_SysOsalEventId[pBuf[0]];
   1363          
   1364              retValue = osal_start_timerEx(MT_TaskID, eventId, timer);
   1365            }
   1366            else
   1367            {
   1368              retValue = ZInvalidParameter;
   1369            }
   1370          
   1371            /* Build and send back the response */
   1372            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_START_TIMER,
   1373                                          sizeof(retValue), &retValue);
   1374          }
   1375          
   1376          /******************************************************************************
   1377           * @fn      MT_SysOsalStopTimer
   1378           *
   1379           * @brief
   1380           *
   1381           * @param   uint8 pBuf - pointer to the data
   1382           *
   1383           * @return  None
   1384           *****************************************************************************/
   1385          static void MT_SysOsalStopTimer(uint8 *pBuf)
   1386          {
   1387            uint16 eventId;
   1388            uint8 retValue = ZFailure;
   1389          
   1390            /* Skip over RPC header */
   1391            pBuf += MT_RPC_FRAME_HDR_SZ;
   1392          
   1393            if (*pBuf <= 3)
   1394            {
   1395              eventId = (uint16) MT_SysOsalEventId[*pBuf];
   1396              retValue = osal_stop_timerEx(MT_TaskID, eventId);
   1397            }
   1398            else
   1399            {
   1400              retValue = ZInvalidParameter;
   1401            }
   1402          
   1403            /* Build and send back the response */
   1404            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_OSAL_STOP_TIMER,
   1405                                          sizeof(retValue), &retValue );
   1406          }
   1407          
   1408          /******************************************************************************
   1409           * @fn      MT_SysRandom
   1410           *
   1411           * @brief
   1412           *
   1413           * @param   uint8 pData - pointer to the data
   1414           *
   1415           * @return  None
   1416           *****************************************************************************/
   1417          static void MT_SysRandom()
   1418          {
   1419            uint16 randValue = Onboard_rand();
   1420            uint8 retArray[2];
   1421          
   1422            retArray[0] = LO_UINT16(randValue);
   1423            retArray[1] = HI_UINT16(randValue);
   1424          
   1425            /* Build and send back the response */
   1426            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_RANDOM,
   1427                                          sizeof(retArray), retArray );
   1428          }
   1429          
   1430          #if !defined( CC26XX )
   1431          /******************************************************************************
   1432           * @fn      MT_SysAdcRead
   1433           *
   1434           * @brief   Reading ADC value, temperature sensor and voltage
   1435           *
   1436           * @param   uint8 pBuf - pointer to the data
   1437           *
   1438           * @return  None
   1439           *****************************************************************************/
   1440          static void MT_SysAdcRead(uint8 *pBuf)
   1441          {
   1442            uint16 tempValue = 0;
   1443            uint8 retArray[2];
   1444          
   1445            /* Skip over RPC header */
   1446            pBuf += MT_RPC_FRAME_HDR_SZ;
   1447          
   1448            {
   1449              uint8 channel = *pBuf++;  /* ADC channel */
   1450              uint8 resolution = *pBuf++;  /* ADC resolution */
   1451          
   1452              /* Voltage reading */
   1453              switch (channel)
   1454              {
   1455                case HAL_ADC_CHANNEL_TEMP:  /* Temperature sensor */
   1456                case HAL_ADC_CHANNEL_VDD:   /* Voltage reading */
   1457                  resolution = HAL_ADC_RESOLUTION_14;
   1458          
   1459                case HAL_ADC_CHANNEL_0:  /* Analog input channels */
   1460                case HAL_ADC_CHANNEL_1:
   1461                case HAL_ADC_CHANNEL_2:
   1462                case HAL_ADC_CHANNEL_3:
   1463                case HAL_ADC_CHANNEL_4:
   1464                case HAL_ADC_CHANNEL_5:
   1465                case HAL_ADC_CHANNEL_6:
   1466                case HAL_ADC_CHANNEL_7:
   1467                  tempValue = HalAdcRead(channel, resolution);
   1468                  break;
   1469          
   1470                default:  /* Undefined channel */
   1471                  break;
   1472              }
   1473            }
   1474          
   1475            retArray[0] = LO_UINT16(tempValue);
   1476            retArray[1] = HI_UINT16(tempValue);
   1477          
   1478            /* Build and send back the response */
   1479            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ADC_READ,
   1480                                          sizeof(retArray), retArray);
   1481          }
   1482          #endif /* !CC26XX */
   1483          
   1484          /******************************************************************************
   1485           * @fn      MT_SysGpio
   1486           *
   1487           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
   1488           *
   1489           * @param   uint8 pBuf - pointer to the data
   1490           *
   1491           * @return  None
   1492           *****************************************************************************/
   1493          static void MT_SysGpio(uint8 *pBuf)
   1494          {
   1495            uint8 val;
   1496            GPIO_Op_t op;
   1497          
   1498            /* Skip over RPC header */
   1499            pBuf += MT_RPC_FRAME_HDR_SZ;
   1500          
   1501            op = (GPIO_Op_t)(*pBuf++);
   1502            val = *pBuf;
   1503          
   1504            switch (op)
   1505            {
   1506              case GPIO_DIR:
   1507                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
   1508                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
   1509                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
   1510                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
   1511                break;
   1512          
   1513              case GPIO_TRI:
   1514                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
   1515                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
   1516                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
   1517                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
   1518                break;
   1519          
   1520              case GPIO_SET:
   1521                if (val & BV(0)) {GPIO_SET(0);}
   1522                if (val & BV(1)) {GPIO_SET(1);}
   1523                if (val & BV(2)) {GPIO_SET(2);}
   1524                if (val & BV(3)) {GPIO_SET(3);}
   1525                break;
   1526          
   1527              case GPIO_CLR:
   1528                if (val & BV(0)) {GPIO_CLR(0);}
   1529                if (val & BV(1)) {GPIO_CLR(1);}
   1530                if (val & BV(2)) {GPIO_CLR(2);}
   1531                if (val & BV(3)) {GPIO_CLR(3);}
   1532                break;
   1533          
   1534              case GPIO_TOG:
   1535                if (val & BV(0)) {GPIO_TOG(0);}
   1536                if (val & BV(1)) {GPIO_TOG(1);}
   1537                if (val & BV(2)) {GPIO_TOG(2);}
   1538                if (val & BV(3)) {GPIO_TOG(3);}
   1539                break;
   1540          
   1541              case GPIO_GET:
   1542                break;
   1543          
   1544              case GPIO_HiD:
   1545                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
   1546                break;
   1547          
   1548              default:
   1549                break;
   1550            }
   1551          
   1552            val  = (GPIO_GET(0)) ? BV(0) : 0;
   1553            val |= (GPIO_GET(1)) ? BV(1) : 0;
   1554            val |= (GPIO_GET(2)) ? BV(2) : 0;
   1555            val |= (GPIO_GET(3)) ? BV(3) : 0;
   1556          
   1557            /* Build and send back the response */
   1558            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_GPIO,
   1559                                          sizeof(val), &val);
   1560          }
   1561          
   1562          /******************************************************************************
   1563           * @fn      MT_SysStackTune
   1564           *
   1565           * @brief   RPC interface for tuning the stack parameters to adjust performance
   1566           *
   1567           * @param   uint8 pBuf - pointer to the data
   1568           *
   1569           * @return  None
   1570           *****************************************************************************/
   1571          static void MT_SysStackTune(uint8 *pBuf)
   1572          {
   1573            uint8 rtrn;
   1574          
   1575            /* Skip over RPC header */
   1576            pBuf += MT_RPC_FRAME_HDR_SZ;
   1577          
   1578            switch (*pBuf++)
   1579            {
   1580            case STK_TX_PWR:
   1581              rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
   1582              break;
   1583          
   1584            case STK_RX_ON_IDLE:
   1585              if ((*pBuf != TRUE) && (*pBuf != FALSE))
   1586              {
   1587                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
   1588              }
   1589              else
   1590              {
   1591                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
   1592              }
   1593              break;
   1594          
   1595            default:
   1596              rtrn = ZInvalidParameter;
   1597              break;
   1598            }
   1599          
   1600            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_STACK_TUNE,
   1601                                          sizeof(rtrn), &rtrn);
   1602          }
   1603          
   1604          /******************************************************************************
   1605           * @fn      MT_SysSetUtcTime
   1606           *
   1607           * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
   1608           *
   1609           * @param   pBuf - pointer to time parameters
   1610           *
   1611           * @return  None
   1612           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1613          static void MT_SysSetUtcTime(uint8 *pBuf)
   \                     MT_SysSetUtcTime:
   1614          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1615            uint8 retStat;
   1616            UTCTime utcSecs;
   1617          
   1618            /* Skip over RPC header */
   1619            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000E   EE           MOV       A,R6
   \   00000F   2403         ADD       A,#0x3
   \   000011   FE           MOV       R6,A
   \   000012   5001         JNC       ??MT_SysSetUtcTime_0
   \   000014   0F           INC       R7
   1620          
   1621            utcSecs = osal_build_uint32( pBuf, 4 );
   \                     ??MT_SysSetUtcTime_0:
   \   000015                ; Setup parameters for call to function osal_build_uint32
   \   000015   7904         MOV       R1,#0x4
   \   000017   FA           MOV       R2,A
   \   000018   EF           MOV       A,R7
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00001D   8A..         MOV       ?V0,R2
   \   00001F   8B..         MOV       ?V1,R3
   \   000021   8C..         MOV       ?V2,R4
   \   000023   8D..         MOV       ?V3,R5
   1622            if ( utcSecs == 0 )
   \   000025   EA           MOV       A,R2
   \   000026   45..         ORL       A,?V1
   \   000028   45..         ORL       A,?V2
   \   00002A   45..         ORL       A,?V3
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??MT_SysSetUtcTime_1 & 0xFFFF
   1623            {
   1624              UTCTimeStruct utc;
   1625          
   1626              /* Skip past UTC time */
   1627              pBuf += 4;
   1628          
   1629              /* Get time and date parameters */
   1630              utc.hour = *pBuf++;
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   C0E0         PUSH      A
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   D0E0         POP       A
   \   000043   12....       LCALL     ?Subroutine7 & 0xFFFF
   1631              utc.minutes = *pBuf++;
   \                     ??CrossCallReturnLabel_10:
   \   000046   E0           MOVX      A,@DPTR
   \   000047   C0E0         PUSH      A
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   D0E0         POP       A
   \   000050   12....       LCALL     ?Subroutine7 & 0xFFFF
   1632              utc.seconds = *pBuf++;
   \                     ??CrossCallReturnLabel_11:
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   C0E0         PUSH      A
   \   000057   7401         MOV       A,#0x1
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   12....       LCALL     ?Subroutine5 & 0xFFFF
   1633              utc.month = (*pBuf++) - 1;
   \                     ??CrossCallReturnLabel_6:
   \   000061   E0           MOVX      A,@DPTR
   \   000062   14           DEC       A
   \   000063   C0E0         PUSH      A
   \   000065   7405         MOV       A,#0x5
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   12....       LCALL     ?Subroutine5 & 0xFFFF
   1634              utc.day = (*pBuf++) - 1;
   \                     ??CrossCallReturnLabel_7:
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   14           DEC       A
   \   000072   C0E0         PUSH      A
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   D0E0         POP       A
   \   00007B   F0           MOVX      @DPTR,A
   1635              utc.year = osal_build_uint16 ( pBuf );
   \   00007C                ; Setup parameters for call to function osal_build_uint16
   \   00007C   EE           MOV       A,R6
   \   00007D   2409         ADD       A,#0x9
   \   00007F   FA           MOV       R2,A
   \   000080   E4           CLR       A
   \   000081   3F           ADDC      A,R7
   \   000082   FB           MOV       R3,A
   \   000083   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000086   7406         MOV       A,#0x6
   \   000088   12....       LCALL     ?XSTACK_DISP0_8
   \   00008B   EA           MOV       A,R2
   \   00008C   F0           MOVX      @DPTR,A
   \   00008D   A3           INC       DPTR
   \   00008E   EB           MOV       A,R3
   \   00008F   F0           MOVX      @DPTR,A
   1636          
   1637              if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
   1638                  (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
   \   000090   7403         MOV       A,#0x3
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E0           MOVX      A,@DPTR
   \   000096   C3           CLR       C
   \   000097   9418         SUBB      A,#0x18
   \   000099   4003         JC        $+5
   \   00009B   02....       LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
   \   00009E   7402         MOV       A,#0x2
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   C3           CLR       C
   \   0000A5   943C         SUBB      A,#0x3c
   \   0000A7   4003         JC        $+5
   \   0000A9   02....       LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000AC   7401         MOV       A,#0x1
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   C3           CLR       C
   \   0000B3   943C         SUBB      A,#0x3c
   \   0000B5   4003         JC        $+5
   \   0000B7   02....       LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000BA   7405         MOV       A,#0x5
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   C3           CLR       C
   \   0000C1   940C         SUBB      A,#0xc
   \   0000C3   4003         JC        $+5
   \   0000C5   02....       LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   C3           CLR       C
   \   0000CF   941F         SUBB      A,#0x1f
   \   0000D1   4003         JC        $+5
   \   0000D3   02....       LJMP      ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000D6   7406         MOV       A,#0x6
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   2430         ADD       A,#0x30
   \   0000DE   F8           MOV       R0,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   34F8         ADDC      A,#-0x8
   \   0000E3   F9           MOV       R1,A
   \   0000E4   C3           CLR       C
   \   0000E5   E8           MOV       A,R0
   \   0000E6   9488         SUBB      A,#-0x78
   \   0000E8   E9           MOV       A,R1
   \   0000E9   9400         SUBB      A,#0x0
   \   0000EB   5074         JNC       ??MT_SysSetUtcTime_2
   1639              {
   1640                /* Got past the course filter, now check for leap year */
   1641                if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
   \   0000ED   7405         MOV       A,#0x5
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   6401         XRL       A,#0x1
   \   0000F5   7050         JNZ       ??MT_SysSetUtcTime_3
   \   0000F7   7406         MOV       A,#0x6
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F8           MOV       R0,A
   \   0000FE   A3           INC       DPTR
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   F9           MOV       R1,A
   \   000101   7A90         MOV       R2,#-0x70
   \   000103   7B01         MOV       R3,#0x1
   \   000105   12....       LCALL     ?US_DIV_MOD
   \   000108   8B..         MOV       ?V1,R3
   \   00010A   EA           MOV       A,R2
   \   00010B   45..         ORL       A,?V1
   \   00010D   6022         JZ        ??MT_SysSetUtcTime_4
   \   00010F   7406         MOV       A,#0x6
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   E0           MOVX      A,@DPTR
   \   000115   F8           MOV       R0,A
   \   000116   A3           INC       DPTR
   \   000117   E0           MOVX      A,@DPTR
   \   000118   F9           MOV       R1,A
   \   000119   7A64         MOV       R2,#0x64
   \   00011B   7B00         MOV       R3,#0x0
   \   00011D   12....       LCALL     ?US_DIV_MOD
   \   000120   8B..         MOV       ?V1,R3
   \   000122   EA           MOV       A,R2
   \   000123   45..         ORL       A,?V1
   \   000125   600E         JZ        ??MT_SysSetUtcTime_5
   \   000127   7406         MOV       A,#0x6
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   5403         ANL       A,#0x3
   \   00012F   7004         JNZ       ??MT_SysSetUtcTime_5
   \                     ??MT_SysSetUtcTime_4:
   \   000131   781D         MOV       R0,#0x1d
   \   000133   8002         SJMP      ??MT_SysSetUtcTime_6
   \                     ??MT_SysSetUtcTime_5:
   \   000135   781C         MOV       R0,#0x1c
   \                     ??MT_SysSetUtcTime_6:
   \   000137   7404         MOV       A,#0x4
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   C3           CLR       C
   \   00013E   98           SUBB      A,R0
   \   00013F   95E0         SUBB      A,0xE0 /* A   */
   \   000141   C3           CLR       C
   \   000142   65D0         XRL       A,PSW
   \   000144   33           RLC       A
   \   000145   501A         JNC       ??MT_SysSetUtcTime_2
   1642                {
   1643                  /* Numbers look reasonable, convert to UTC */
   1644                  utcSecs = osal_ConvertUTCSecs( &utc );
   \                     ??MT_SysSetUtcTime_3:
   \   000147                ; Setup parameters for call to function osal_ConvertUTCSecs
   \   000147   7401         MOV       A,#0x1
   \   000149   12....       LCALL     ?XSTACK_DISP101_8
   \   00014C   12....       LCALL     `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
   \   00014F   8A..         MOV       ?V0,R2
   \   000151   8B..         MOV       ?V1,R3
   \   000153   8C..         MOV       ?V2,R4
   \   000155   8D..         MOV       ?V3,R5
   1645                }
   1646              }
   1647            }
   1648          
   1649            if ( utcSecs == 0 )
   \                     ??MT_SysSetUtcTime_1:
   \   000157   E5..         MOV       A,?V0
   \   000159   45..         ORL       A,?V1
   \   00015B   45..         ORL       A,?V2
   \   00015D   45..         ORL       A,?V3
   \   00015F   700A         JNZ       ??MT_SysSetUtcTime_7
   1650            {
   1651              /* Bad parameter(s) */
   1652              retStat = ZInvalidParameter;
   \                     ??MT_SysSetUtcTime_2:
   \   000161   85..82       MOV       DPL,?XSP + 0
   \   000164   85..83       MOV       DPH,?XSP + 1
   \   000167   7402         MOV       A,#0x2
   \   000169   8012         SJMP      ??MT_SysSetUtcTime_8
   1653            }
   1654            else
   1655            {
   1656              /* Parameters accepted, set the time */
   1657              osal_setClock( utcSecs );
   \                     ??MT_SysSetUtcTime_7:
   \   00016B                ; Setup parameters for call to function osal_setClock
   \   00016B   AA..         MOV       R2,?V0
   \   00016D   AB..         MOV       R3,?V1
   \   00016F   AC..         MOV       R4,?V2
   \   000171   AD..         MOV       R5,?V3
   \   000173   12....       LCALL     `??osal_setClock::?relay`; Banked call to: osal_setClock
   1658              retStat = ZSuccess;
   \   000176   85..82       MOV       DPL,?XSP + 0
   \   000179   85..83       MOV       DPH,?XSP + 1
   \   00017C   E4           CLR       A
   1659            }
   \                     ??MT_SysSetUtcTime_8:
   \   00017D   12....       LCALL     ??Subroutine10_0 & 0xFFFF
   1660          
   1661            /* Build and send back the response */
   1662            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SET_TIME,
   1663                                          sizeof(retStat), &retStat);
   \                     ??CrossCallReturnLabel_24:
   \   000180   7A10         MOV       R2,#0x10
   \   000182   7961         MOV       R1,#0x61
   \   000184   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1664          }
   \   000187   7408         MOV       A,#0x8
   \   000189                REQUIRE ?Subroutine0
   \   000189                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   7B01         MOV       R3,#0x1
   \   000007   22           RET
   1665          
   1666          /******************************************************************************
   1667           * @fn      MT_SysGetUtcTime
   1668           *
   1669           * @brief   Get the OSAL UTC time
   1670           *
   1671           * @param   None
   1672           *
   1673           * @return  32-bit and Parsed UTC time
   1674           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          static void MT_SysGetUtcTime(void)
   \                     MT_SysGetUtcTime:
   1676          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1677            uint8 len;
   1678            uint8 *buf;
   1679          
   1680            len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
   1681          
   1682            buf = osal_mem_alloc( len );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A0B         MOV       R2,#0xb
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   \   000015   AE..         MOV       R6,?V0
   \   000017   AF..         MOV       R7,?V1
   1683            if ( buf )
   \   000019   EE           MOV       A,R6
   \   00001A   4F           ORL       A,R7
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??MT_SysGetUtcTime_0 & 0xFFFF
   1684            {
   1685              uint8 *pBuf;
   1686              UTCTime utcSecs;
   1687              UTCTimeStruct utcTime;
   1688          
   1689              // Get current 32-bit UTC time and parse it
   1690              utcSecs = osal_getClock();
   \   000020                ; Setup parameters for call to function osal_getClock
   \   000020   12....       LCALL     `??osal_getClock::?relay`; Banked call to: osal_getClock
   \   000023   8A..         MOV       ?V0,R2
   \   000025   8B..         MOV       ?V1,R3
   \   000027   8C..         MOV       ?V2,R4
   \   000029   8D..         MOV       ?V3,R5
   1691              osal_ConvertUTCTime( &utcTime, utcSecs );
   \   00002B                ; Setup parameters for call to function osal_ConvertUTCTime
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000030   7404         MOV       A,#0x4
   \   000032   12....       LCALL     ?XSTACK_DISP101_8
   \   000035   12....       LCALL     `??osal_ConvertUTCTime::?relay`; Banked call to: osal_ConvertUTCTime
   \   000038   7404         MOV       A,#0x4
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   1692          
   1693              // Start with 32-bit UTC time
   1694              pBuf = osal_buffer_uint32( buf, utcSecs );
   \   00003D                ; Setup parameters for call to function osal_buffer_uint32
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000042   EE           MOV       A,R6
   \   000043   FA           MOV       R2,A
   \   000044   EF           MOV       A,R7
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000049   7404         MOV       A,#0x4
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   1695          
   1696              // Concatenate parsed UTC time fields
   1697              *pBuf++ = utcTime.hour;
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   F0           MOVX      @DPTR,A
   1698              *pBuf++ = utcTime.minutes;
   \   000059   7401         MOV       A,#0x1
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000061   F0           MOVX      @DPTR,A
   1699              *pBuf++ = utcTime.seconds;
   \   000062   85..82       MOV       DPL,?XSP + 0
   \   000065   85..83       MOV       DPH,?XSP + 1
   \   000068   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00006B   A3           INC       DPTR
   \   00006C   F0           MOVX      @DPTR,A
   1700              *pBuf++ = utcTime.month + 1;  // Convert to human numbers
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000075   F0           MOVX      @DPTR,A
   1701              *pBuf++ = utcTime.day + 1;
   \   000076   7403         MOV       A,#0x3
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00007E   A3           INC       DPTR
   \   00007F   F0           MOVX      @DPTR,A
   1702              *pBuf++ = LO_UINT16( utcTime.year );
   \   000080   7405         MOV       A,#0x5
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000088   F0           MOVX      @DPTR,A
   1703              *pBuf++ = HI_UINT16( utcTime.year );
   \   000089   7405         MOV       A,#0x5
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   A3           INC       DPTR
   \   00008F   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000092   A3           INC       DPTR
   \   000093   F0           MOVX      @DPTR,A
   1704          
   1705              /* Build and send back the response */
   1706              MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_GET_TIME,
   1707                                           (uint8)(pBuf-buf), buf);
   \   000094                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000094   EE           MOV       A,R6
   \   000095   FC           MOV       R4,A
   \   000096   EF           MOV       A,R7
   \   000097   FD           MOV       R5,A
   \   000098   EE           MOV       A,R6
   \   000099   F8           MOV       R0,A
   \   00009A   EA           MOV       A,R2
   \   00009B   2407         ADD       A,#0x7
   \   00009D   C3           CLR       C
   \   00009E   98           SUBB      A,R0
   \   00009F   FB           MOV       R3,A
   \   0000A0   7A11         MOV       R2,#0x11
   \   0000A2   7961         MOV       R1,#0x61
   \   0000A4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1708          
   1709              osal_mem_free( buf );
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   EE           MOV       A,R6
   \   0000A8   FA           MOV       R2,A
   \   0000A9   EF           MOV       A,R7
   \   0000AA   FB           MOV       R3,A
   \   0000AB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1710            }
   1711          }
   \                     ??MT_SysGetUtcTime_0:
   \   0000AE   7407         MOV       A,#0x7
   \   0000B0   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   04           INC       A
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   1712          
   1713          /******************************************************************************
   1714           * @fn      MT_SysSetTxPower
   1715           *
   1716           * @brief   Set the transmit power.
   1717           *
   1718           * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
   1719           *
   1720           * @return  None
   1721           *****************************************************************************/
   1722          static void MT_SysSetTxPower(uint8 *pBuf)
   1723          {
   1724            /* A local variable to hold the signed dBm value of TxPower that is being requested. */
   1725            uint8 signed_dBm_of_TxPower_requeseted;
   1726          
   1727            /*
   1728             * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
   1729             * the requested dBm value of TxPower, but which is also valid according to a complex set of
   1730             * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
   1731             * function.
   1732             */
   1733            uint8 signed_dBm_of_TxPower_range_corrected;
   1734          
   1735            /* Parse the requested dBm from the RPC message. */
   1736            signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
   1737          
   1738            /*
   1739             * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
   1740             * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
   1741             * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
   1742             * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
   1743             * the code that will properly constrain the requested dBm to a valid range based on both the
   1744             * compile-time and the run-time configurations that affect the available valid ranges
   1745             * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
   1746             */
   1747            signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
   1748          
   1749            /*
   1750             * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
   1751             * as possible within the TxPower range that is valid for the compile-time and run-time
   1752             * configuration.
   1753             */
   1754            (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
   1755          
   1756            /* Send back response that includes the actual dBm TxPower that can be set. */
   1757            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SET_TX_POWER, 1,
   1758                                          &signed_dBm_of_TxPower_range_corrected);
   1759          }
   1760          
   1761          #if defined ( FEATURE_SYSTEM_STATS )
   1762          /******************************************************************************
   1763           * @fn      MT_SysZDiagsInitStats
   1764           *
   1765           * @brief   Initialize the statistics table in NV or restore values from
   1766           *          NV into the Statistics table in RAM
   1767           *
   1768           * @param   None
   1769           *
   1770           * @return  None
   1771           *****************************************************************************/
   1772          static void MT_SysZDiagsInitStats(void)
   1773          {
   1774            uint8 retValue;
   1775          
   1776            retValue = ZDiagsInitStats();
   1777          
   1778            /* Build and send back the response */
   1779            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_INIT_STATS,
   1780                                          sizeof(retValue), &retValue);
   1781          }
   1782          
   1783          /******************************************************************************
   1784           * @fn      MT_SysZDiagsClearStats
   1785           *
   1786           * @brief   Clears the statistics table in RAM and NV if option flag set.
   1787           *
   1788           * @param   uint8 pBuf - pointer to the data
   1789           *
   1790           * @return  None
   1791           *****************************************************************************/
   1792          static void MT_SysZDiagsClearStats(uint8 *pBuf)
   1793          {
   1794            uint32 sysClock;
   1795            uint8 retBuf[4];
   1796          
   1797            /* parse header */
   1798            pBuf += MT_RPC_FRAME_HDR_SZ;
   1799          
   1800            /* returns the system clock of the time when the statistics were cleared */
   1801            sysClock = ZDiagsClearStats( *pBuf );
   1802          
   1803            osal_buffer_uint32( retBuf, sysClock );
   1804          
   1805            /* Build and send back the response */
   1806            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_CLEAR_STATS,
   1807                                          sizeof(retBuf), retBuf);
   1808          }
   1809          
   1810          /******************************************************************************
   1811           * @fn      MT_SysZDiagsGetStatsAttr
   1812           *
   1813           * @brief   Reads specific system (attribute) ID statistics and/or metrics.
   1814           *
   1815           * @param   uint8 pBuf - pointer to the data
   1816           *
   1817           * @return  None
   1818           *****************************************************************************/
   1819          static void MT_SysZDiagsGetStatsAttr(uint8 *pBuf)
   1820          {
   1821            uint16 attrId;
   1822            uint32 attrValue;
   1823            uint8 retBuf[4];
   1824          
   1825            /* parse header */
   1826            pBuf += MT_RPC_FRAME_HDR_SZ;
   1827          
   1828            /* Get the Attribute ID */
   1829            attrId = osal_build_uint16( pBuf );
   1830          
   1831            attrValue = ZDiagsGetStatsAttr( attrId );
   1832          
   1833            osal_buffer_uint32( retBuf, attrValue );
   1834          
   1835            /* Build and send back the response */
   1836            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_GET_STATS,
   1837                                          sizeof(retBuf), retBuf);
   1838          }
   1839          
   1840          /******************************************************************************
   1841           * @fn      MT_SysZDiagsRestoreStatsFromNV
   1842           *
   1843           * @brief   Restores the statistics table from NV into the RAM table.
   1844           *
   1845           * @param   None
   1846           *
   1847           * @return  None
   1848           *****************************************************************************/
   1849          static void MT_SysZDiagsRestoreStatsFromNV(void)
   1850          {
   1851            uint8 retValue;
   1852          
   1853            retValue = ZDiagsRestoreStatsFromNV();
   1854          
   1855            /* Build and send back the response */
   1856            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_RESTORE_STATS_NV,
   1857                                          sizeof(retValue), &retValue);
   1858          }
   1859          
   1860          /******************************************************************************
   1861           * @fn      MT_SysZDiagsSaveStatsToNV
   1862           *
   1863           * @brief   Saves the statistics table from RAM to NV.
   1864           *
   1865           * @param   None
   1866           *
   1867           * @return  None
   1868           *****************************************************************************/
   1869          static void MT_SysZDiagsSaveStatsToNV(void)
   1870          {
   1871            uint32 sysClock;
   1872            uint8 retBuf[4];
   1873          
   1874            /* Returns system clock of the time when the statistics were saved to NV */
   1875            sysClock = ZDiagsSaveStatsToNV();
   1876          
   1877            osal_buffer_uint32( retBuf, sysClock );
   1878          
   1879            /* Build and send back the response */
   1880            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_ZDIAGS_SAVE_STATS_TO_NV,
   1881                                          sizeof(retBuf), retBuf);
   1882          }
   1883          #endif /* FEATURE_SYSTEM_STATS */
   1884          #endif /* MT_SYS_FUNC */
   1885          
   1886          /******************************************************************************
   1887           * SUPPORT
   1888           *****************************************************************************/
   1889          
   1890          /******************************************************************************
   1891           * @fn      MT_SysResetInd()
   1892           *
   1893           * @brief   Sends a ZTOOL "reset response" message.
   1894           *
   1895           * @param   None
   1896           *
   1897           * @return  None
   1898           *
   1899           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1900          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
   1901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1902            uint8 retArray[6];
   1903          
   1904            retArray[0] = ResetReason();   /* Reason */
   \   00000A   E59D         MOV       A,0x9d
   \   00000C   13           RRC       A
   \   00000D   13           RRC       A
   \   00000E   13           RRC       A
   \   00000F   541F         ANL       A,#0x1f
   \   000011   5403         ANL       A,#0x3
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   F0           MOVX      @DPTR,A
   1905            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   \   00001A                ; Setup parameters for call to function osal_memcpy
   \   00001A   75....       MOV       ?V0,#MTVersionString & 0xff
   \   00001D   75....       MOV       ?V1,#(MTVersionString >> 8) & 0xff
   \   000020   75..00       MOV       ?V2,#0x0
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000028   7C05         MOV       R4,#0x5
   \   00002A   7D00         MOV       R5,#0x0
   \   00002C   7404         MOV       A,#0x4
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   AA82         MOV       R2,DPL
   \   000033   AB83         MOV       R3,DPH
   \   000035   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000038   7403         MOV       A,#0x3
   \   00003A   12....       LCALL     ?DEALLOC_XSTACK8
   1906          
   1907            /* Send out Reset Response message */
   1908            MT_BuildAndSendZToolResponse( MT_ARSP_SYS, MT_SYS_RESET_IND,
   1909                                          sizeof(retArray), retArray);
   \   00003D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003D   AC..         MOV       R4,?XSP + 0
   \   00003F   AD..         MOV       R5,?XSP + 1
   \   000041   7B06         MOV       R3,#0x6
   \   000043   7A80         MOV       R2,#-0x80
   \   000045   7941         MOV       R1,#0x41
   \   000047   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1910          }
   \   00004A   7406         MOV       A,#0x6
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004F   7F03         MOV       R7,#0x3
   \   000051   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   000054                REQUIRE SLEEPSTA
   1911          
   1912          /******************************************************************************
   1913           * @fn      MT_SysOsalTimerExpired()
   1914           *
   1915           * @brief   Sends a SYS Osal Timer Expired
   1916           *
   1917           * @param   None
   1918           *
   1919           * @return  None
   1920           *
   1921           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine10_0
   \   000007                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1922          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
   1923          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine4 & 0xFFFF
   1924            uint8 retValue = Id;
   1925          
   1926            MT_BuildAndSendZToolResponse( MT_ARSP_SYS, MT_SYS_OSAL_TIMER_EXPIRED,
   1927                                          sizeof(retValue), &retValue);
   \                     ??CrossCallReturnLabel_19:
   \   00000D   7A81         MOV       R2,#-0x7f
   \   00000F   7941         MOV       R1,#0x41
   \   000011   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1928          }
   \   000014   7401         MOV       A,#0x1
   \   000016   12....       LCALL     ?DEALLOC_XSTACK8
   \   000019   7F01         MOV       R7,#0x1
   \   00001B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV       A,R2
   \   000001   2403         ADD       A,#0x3
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F5..         MOV       ?V1,A
   \   000009                ; Setup parameters for call to function ZMacSetReq
   \   000009                ; Setup parameters for call to function osal_build_uint16
   \   000009   0A           INC       R2
   \   00000A   0A           INC       R2
   \   00000B   0A           INC       R2
   \   00000C   FB           MOV       R3,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F9           MOV       R1,A
   \   000007   74..         MOV       A,#MT_SysOsalEventId & 0xff
   \   000009   28           ADD       A,R0
   \   00000A   F582         MOV       DPL,A
   \   00000C   74..         MOV       A,#(MT_SysOsalEventId >> 8) & 0xff
   \   00000E   39           ADDC      A,R1
   \   00000F   F583         MOV       DPH,A
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FA           MOV       R2,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FB           MOV       R3,A
   \   000016   90....       MOV       DPTR,#MT_TaskID
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F9           MOV       R1,A
   \   00001B   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVItemInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVItemInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysResetInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalTimerExpired::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired
   1929          
   1930          #if defined ( MT_SYS_JAMMER_FEATURE )
   1931          /******************************************************************************
   1932           * @fn      MT_SysJammerParameters
   1933           *
   1934           * @brief   Set the Jammer detection parameters.
   1935           *
   1936           * @param   pBuf - MT message containing the parameters.
   1937           *
   1938           * @return  None
   1939           *****************************************************************************/
   1940          static void MT_SysJammerParameters( uint8 *pBuf )
   1941          {
   1942            uint8 status = SUCCESS;
   1943          
   1944            // Adjust for the data
   1945            pBuf += MT_RPC_FRAME_HDR_SZ;
   1946          
   1947            // Number of continuous events needed to detect Jam
   1948            jammerContinuousEvents = osal_build_uint16( pBuf );
   1949            jammerDetections = jammerContinuousEvents;
   1950            pBuf += 2;
   1951          
   1952            // Noise Level need to be a Jam
   1953            jammerHighNoiseLevel = *pBuf++;
   1954          
   1955            // The time between each noise level reading
   1956            jammerDetectPeriodTime = osal_build_uint32( pBuf, 4 );
   1957          
   1958            // Update the timer
   1959            osal_start_reload_timer( jammerTaskID, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1960          
   1961            /* Send out Reset Response message */
   1962            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_JAMMER_PARAMETERS,
   1963                                          sizeof(status), &status );
   1964          }
   1965          
   1966          /******************************************************************************
   1967           * @fn      MT_SysJammerInd()
   1968           *
   1969           * @brief   Sends a jammer indication message.
   1970           *
   1971           * @param   jammerInd - TRUE if jammer detected, FALSE if changed to undetected
   1972           *
   1973           * @return  None
   1974           *
   1975           *****************************************************************************/
   1976          void MT_SysJammerInd( uint8 jammerInd )
   1977          {
   1978            /* Send out Reset Response message */
   1979            MT_BuildAndSendZToolResponse( MT_ARSP_SYS, MT_SYS_JAMMER_IND,
   1980                                          sizeof(jammerInd), &jammerInd );
   1981          }
   1982          
   1983          /******************************************************************************
   1984           * @fn      jammerInit()
   1985           *
   1986           * @brief   Jammer Detection task initialization function
   1987           *
   1988           * @param   taskId - task ID
   1989           *
   1990           * @return  None
   1991           *
   1992           *****************************************************************************/
   1993          void jammerInit( uint8 taskId )
   1994          {
   1995            jammerTaskID = taskId;
   1996          
   1997            // Start the jammer check timer
   1998            osal_start_reload_timer( taskId, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1999          }
   2000          
   2001          /******************************************************************************
   2002           * @fn      jammerEventLoop()
   2003           *
   2004           * @brief   Jammer Detection task event processing function
   2005           *
   2006           * @param   taskId - task ID
   2007           * @param   events - task events
   2008           *
   2009           * @return  remaining events
   2010           *
   2011           *****************************************************************************/
   2012          uint16 jammerEventLoop( uint8 taskId, uint16 events )
   2013          {
   2014            osal_event_hdr_t  *pMsg;
   2015          
   2016            if (events & SYS_EVENT_MSG)
   2017            {
   2018              if ( (pMsg = (osal_event_hdr_t *) osal_msg_receive( taskId )) != NULL )
   2019              {
   2020                switch ( pMsg->event )
   2021                {
   2022                  default:
   2023                    break;
   2024                }
   2025          
   2026                osal_msg_deallocate( (byte *)pMsg );
   2027              }
   2028          
   2029              events ^= SYS_EVENT_MSG;
   2030            }
   2031            else if ( events & JAMMER_CHECK_EVT )
   2032            {
   2033          #ifdef FEATURE_DUAL_MAC
   2034              if ( DMMGR_IsDefaultMac() )
   2035          #endif /* FEATURE_DUAL_MAC */
   2036              {
   2037              // Make sure we aren't currently receiving a message and radio is active.
   2038              if ( MAC_RX_IS_PHYSICALLY_ACTIVE() == MAC_RX_ACTIVE_NO_ACTIVITY )
   2039              {
   2040                int8 rssiDbm = -128;
   2041          
   2042                // Read the noise level
   2043                if ( RSSISTAT & 0x01 )
   2044                {
   2045                  /* Add the RSSI offset */
   2046                  rssiDbm = RSSI + MAC_RADIO_RSSI_OFFSET;
   2047          
   2048                  /* Adjust for external PA/LNA, if any */
   2049                  MAC_RADIO_RSSI_LNA_OFFSET( rssiDbm );
   2050          
   2051                  // Check for a noise level that's high
   2052                  if ( jammerDetections && (rssiDbm  > jammerHighNoiseLevel) )
   2053                  {
   2054                    jammerDetections--;
   2055                    if ( jammerDetections == 0 )
   2056                    {
   2057                      // Jam detected
   2058                      MT_SysJammerInd( TRUE );
   2059                    }
   2060                  }
   2061                  else if ( rssiDbm <= jammerHighNoiseLevel )
   2062                  {
   2063                    if ( jammerDetections == 0 )
   2064                    {
   2065                      // Jam cleared
   2066                      MT_SysJammerInd( FALSE );
   2067                    }
   2068                    jammerDetections = jammerContinuousEvents;
   2069                  }
   2070                }
   2071              }
   2072              }
   2073              events ^= JAMMER_CHECK_EVT;
   2074            }
   2075            else
   2076            {
   2077              events = 0;  /* Discard unknown events. */
   2078            }
   2079          
   2080            return ( events );
   2081          }
   2082          #endif // MT_SYS_JAMMER_FEATURE
   2083          
   2084          #if defined ( MT_SYS_SNIFFER_FEATURE )
   2085          /******************************************************************************
   2086           * @fn      MT_SysSnifferParameters
   2087           *
   2088           * @brief   Set the sniffer parameters.
   2089           *
   2090           * @param   pBuf - MT message containing the parameters.
   2091           *
   2092           * @return  None
   2093           *****************************************************************************/
   2094          static void MT_SysSnifferParameters( uint8 *pBuf )
   2095          {
   2096            uint8 status = SUCCESS;
   2097            uint8 param;
   2098          
   2099            // Adjust for the data
   2100            pBuf += MT_RPC_FRAME_HDR_SZ;
   2101          
   2102            // Noise Level need to be a Jam
   2103            param = *pBuf;
   2104          
   2105            if ( param == MT_SYS_SNIFFER_DISABLE )
   2106            {
   2107              // Disable Sniffer
   2108              HAL_BOARD_DISABLE_INTEGRATED_SNIFFER();
   2109              sniffer = FALSE;
   2110            }
   2111            else if ( param == MT_SYS_SNIFFER_ENABLE )
   2112            {
   2113              // Enable the Sniffer
   2114              HAL_BOARD_ENABLE_INTEGRATED_SNIFFER();
   2115              sniffer = TRUE;
   2116            }
   2117            else if ( param == MT_SYS_SNIFFER_GET_SETTING )
   2118            {
   2119              status = sniffer; // sniffer setting
   2120            }
   2121            else
   2122            {
   2123              status = INVALIDPARAMETER;
   2124            }
   2125          
   2126            /* Send back response that includes the actual dBm TxPower that can be set. */
   2127            MT_BuildAndSendZToolResponse( MT_SRSP_SYS, MT_SYS_SNIFFER_PARAMETERS,
   2128                                          sizeof(status), &status );
   2129          }
   2130          #endif // MT_SYS_SNIFFER_FEATURE
   2131          
   2132          #if defined( ENABLE_MT_SYS_RESET_SHUTDOWN )
   2133          /******************************************************************************
   2134           * @fn          powerOffSoc
   2135           *
   2136           * @brief   Put the device in lowest power mode infinitely
   2137           *
   2138           * @param   None
   2139           *
   2140           * @return  None
   2141           *****************************************************************************/
   2142          static void powerOffSoc(void)
   2143          {
   2144            HAL_DISABLE_INTERRUPTS();
   2145          
   2146            /* turn off the RF front end device */
   2147            //TBD, based on the rf-front-end being used
   2148          
   2149            /* turn off the receiver */
   2150            MAC_RADIO_RXTX_OFF();
   2151          
   2152            /* just in case a receive was about to start, flush the receive FIFO */
   2153            MAC_RADIO_FLUSH_RX_FIFO();
   2154          
   2155            /* clear any receive interrupt that happened to squeak through */
   2156            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   2157          
   2158            /* put MAC timer to sleep */
   2159            MAC_RADIO_TIMER_SLEEP();
   2160          
   2161            /* power of radio */
   2162            MAC_RADIO_TURN_OFF_POWER();
   2163          
   2164            STIF = 0; //HAL_SLEEP_TIMER_CLEAR_INT;
   2165          
   2166            if (ZNP_CFG1_UART == znpCfg1)
   2167            {
   2168              HalUARTSuspend();
   2169            }
   2170          
   2171            /* Prep CC2530 power mode */
   2172            //HAL_SLEEP_PREP_POWER_MODE(3);
   2173            SLEEPCMD &= ~PMODE; /* clear mode bits */
   2174            SLEEPCMD |= 3;      /* set mode bits  to PM3 */
   2175            while (!(STLOAD & LDRDY));
   2176          
   2177            while (1) //just in case we wake up for some unknown reason
   2178            {
   2179              /* Execution is supposed to halt at this instruction. Interrupts are
   2180                 disabled - the only way to exit this state is from hardware reset. */
   2181              PCON = halSleepPconValue;
   2182              asm("NOP");
   2183            }
   2184          }
   2185          #endif
   2186          
   2187          /******************************************************************************
   2188           *****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     36   MT_SysCommandProcessing
        0     32   -> HalAdcRead
        0     32   -> MAC_MlmeSetReq
        0     32   -> MT_BuildAndSendZToolResponse
        0     32   -> MT_SysGetUtcTime
        0     32   -> MT_SysOsalNVItemInit
        0     32   -> MT_SysOsalNVRead
        0     32   -> MT_SysOsalNVWrite
        0     32   -> MT_SysSetUtcTime
        0     32   -> Onboard_rand
        0     32   -> Onboard_soft_reset
        0     32   -> ZDiagsClearStats
        0     32   -> ZDiagsGetStatsAttr
        0     32   -> ZDiagsInitStats
        0     32   -> ZDiagsRestoreStatsFromNV
        0     32   -> ZDiagsSaveStatsToNV
        0     32   -> ZMacGetReq
        0     32   -> ZMacSetReq
        0     32   -> macRadioSetTxPower
        0     36   -> osal_buffer_uint32
        0     32   -> osal_build_uint16
        0     32   -> osal_nv_delete
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_write
        0     36   -> osal_start_timerEx
        0     32   -> osal_stop_timerEx
      1     55   MT_SysGetUtcTime
        0     19   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_ConvertUTCTime
        0     23   -> osal_buffer_uint32
        0     19   -> osal_getClock
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      1     51   MT_SysOsalNVItemInit
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_build_uint16
        0     17   -> osal_nv_item_init
        0     19   -> osal_nv_write
      1     66   MT_SysOsalNVRead
        0     30   -> MT_BuildAndSendZToolResponse
        0     30   -> osal_build_uint16
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     30   -> osal_memset
        0     30   -> osal_nv_item_len
        0     34   -> osal_nv_read
      1     59   MT_SysOsalNVWrite
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> ZMacSetReq
        0     23   -> osal_build_uint16
        0     23   -> osal_nv_item_len
        0     27   -> osal_nv_write
        0     25   -> zgSetItem
      1     10   MT_SysOsalTimerExpired
        0     10   -> MT_BuildAndSendZToolResponse
      1     20   MT_SysResetInd
        0     17   -> MT_BuildAndSendZToolResponse
        0     20   -> osal_memcpy
      1     52   MT_SysSetUtcTime
        0     20   -> MT_BuildAndSendZToolResponse
        0     20   -> osal_ConvertUTCSecs
        0     20   -> osal_build_uint16
        0     20   -> osal_build_uint32
        0     20   -> osal_setClock


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       8  ??Subroutine10_0
       8  ?Subroutine0
      28  ?Subroutine1
       8  ?Subroutine2
      10  ?Subroutine3
       7  ?Subroutine4
       6  ?Subroutine5
      14  ?Subroutine6
       4  ?Subroutine7
      11  ?Subroutine8
       7  ?Subroutine9
     987  MT_SysCommandProcessing
       6  MT_SysCommandProcessing::?relay
     179  MT_SysGetUtcTime
       6  MT_SysGetUtcTime::?relay
       8  MT_SysOsalEventId
     224  MT_SysOsalNVItemInit
       6  MT_SysOsalNVItemInit::?relay
     503  MT_SysOsalNVRead
       6  MT_SysOsalNVRead::?relay
     302  MT_SysOsalNVWrite
       6  MT_SysOsalNVWrite::?relay
      30  MT_SysOsalTimerExpired
       6  MT_SysOsalTimerExpired::?relay
      84  MT_SysResetInd
       6  MT_SysResetInd::?relay
     393  MT_SysSetUtcTime
       6  MT_SysSetUtcTime::?relay
       1  SLEEPSTA
       1  WDCTL
       1  _A_IEN0

 
 2 813 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    10 bytes in segment XDATA_ROM_C
 
    48 bytes of CODE     memory
    10 bytes of CONST    memory
     0 bytes of DATA     memory (+ 3 bytes shared)
 2 813 bytes of HUGECODE memory

Errors: none
Warnings: none
