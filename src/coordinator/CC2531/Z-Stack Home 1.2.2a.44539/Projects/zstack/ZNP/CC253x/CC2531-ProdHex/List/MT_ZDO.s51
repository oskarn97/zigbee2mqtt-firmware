///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              16/Feb/2018  22:13:32
// Copyright 2004-2017 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c
//    Command line       =  
//        -f C:\Users\Oskar\AppData\Local\Temp\EWB229.tmp ("C:\Texas
//        Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c" -D
//        FEATURE_SYSTEM_STATS -D CC2531ZNP -D POWER_SAVING -D ASSERT_RESET -D
//        FAKE_CRC_SHDW -D xTC_LINKKEY_JOIN -lC "C:\Texas Instruments\Z-Stack
//        Home 1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List" -lA
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\Obj" -e
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DTC_LINKKEY_JOIN -DMT_UTIL_FUNC -DMT_SYS_FUNC
//        -DMT_AF_FUNC -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC
//        -DMT_ZDO_FUNC -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Utilities\BootLoad\Source\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\library\cc2531\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530USB\usb\class_cdc\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  German_Germany.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2531-ProdHex\List\MT_ZDO.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??MT_ZdoAddrRspCB::?relay`
        FUNCTION `??MT_ZdoAddrRspCB::?relay`,0203H
        PUBLIC `??MT_ZdoBeaconIndCB::?relay`
        FUNCTION `??MT_ZdoBeaconIndCB::?relay`,0203H
        FUNCTION `??MT_ZdoBindRequest::?relay`,0203H
        PUBLIC `??MT_ZdoCommandProcessing::?relay`
        FUNCTION `??MT_ZdoCommandProcessing::?relay`,0203H
        FUNCTION `??MT_ZdoConcentratorIndCB::?relay`,0203H
        PUBLIC `??MT_ZdoDirectCB::?relay`
        FUNCTION `??MT_ZdoDirectCB::?relay`,0203H
        PUBLIC `??MT_ZdoEndDevAnnceCB::?relay`
        FUNCTION `??MT_ZdoEndDevAnnceCB::?relay`,0203H
        FUNCTION `??MT_ZdoEndDevBindRequest::?relay`,0203H
        FUNCTION `??MT_ZdoExtFindAllGroupsEndpoint::?relay`,0203H
        FUNCTION `??MT_ZdoExtFindGroup::?relay`,0203H
        FUNCTION `??MT_ZdoExtNwkInfo::?relay`,0203H
        PUBLIC `??MT_ZdoInit::?relay`
        FUNCTION `??MT_ZdoInit::?relay`,0203H
        PUBLIC `??MT_ZdoJoinCnfCB::?relay`
        FUNCTION `??MT_ZdoJoinCnfCB::?relay`,0203H
        FUNCTION `??MT_ZdoLeaveInd::?relay`,0203H
        FUNCTION `??MT_ZdoMatchDescRequest::?relay`,0203H
        FUNCTION `??MT_ZdoMgmtNwkUpdateRequest::?relay`,0203H
        FUNCTION `??MT_ZdoNWKAddressRequest::?relay`,0203H
        FUNCTION `??MT_ZdoNwkAddrOfInterestReq::?relay`,0203H
        PUBLIC `??MT_ZdoNwkDiscoveryCnfCB::?relay`
        FUNCTION `??MT_ZdoNwkDiscoveryCnfCB::?relay`,0203H
        PUBLIC `??MT_ZdoPermitJoinInd::?relay`
        FUNCTION `??MT_ZdoPermitJoinInd::?relay`,0203H
        FUNCTION `??MT_ZdoSendData::?relay`,0203H
        PUBLIC `??MT_ZdoSendMsgCB::?relay`
        FUNCTION `??MT_ZdoSendMsgCB::?relay`,0203H
        PUBLIC `??MT_ZdoSrcRtgCB::?relay`
        FUNCTION `??MT_ZdoSrcRtgCB::?relay`,0203H
        PUBLIC `??MT_ZdoStateChangeCB::?relay`
        FUNCTION `??MT_ZdoStateChangeCB::?relay`,0203H
        PUBLIC `??MT_ZdoTcDeviceInd::?relay`
        FUNCTION `??MT_ZdoTcDeviceInd::?relay`,0203H
        FUNCTION `??MT_ZdoUnbindRequest::?relay`,0203H
        PUBLIC MT_ZdoAddrRspCB
        FUNCTION MT_ZdoAddrRspCB,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC MT_ZdoBeaconIndCB
        FUNCTION MT_ZdoBeaconIndCB,0a1603H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION MT_ZdoBindRequest,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoCommandProcessing
        FUNCTION MT_ZdoCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 75, STACK
        FUNCTION MT_ZdoConcentratorIndCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC MT_ZdoDirectCB
        FUNCTION MT_ZdoDirectCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC MT_ZdoEndDevAnnceCB
        FUNCTION MT_ZdoEndDevAnnceCB,0a1203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION MT_ZdoEndDevBindRequest,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 99, STACK
        FUNCTION MT_ZdoExtFindAllGroupsEndpoint,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        FUNCTION MT_ZdoExtFindGroup,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        FUNCTION MT_ZdoExtNwkInfo,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC MT_ZdoInit
        FUNCTION MT_ZdoInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_ZdoJoinCnfCB
        FUNCTION MT_ZdoJoinCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION MT_ZdoLeaveInd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        FUNCTION MT_ZdoMatchDescRequest,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 100, STACK
        FUNCTION MT_ZdoMgmtNwkUpdateRequest,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION MT_ZdoNWKAddressRequest,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        FUNCTION MT_ZdoNwkAddrOfInterestReq,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC MT_ZdoNwkDiscoveryCnfCB
        FUNCTION MT_ZdoNwkDiscoveryCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoPermitJoinInd
        FUNCTION MT_ZdoPermitJoinInd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION MT_ZdoSendData,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC MT_ZdoSendMsgCB
        FUNCTION MT_ZdoSendMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC MT_ZdoSrcRtgCB
        FUNCTION MT_ZdoSrcRtgCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ZdoStateChangeCB
        FUNCTION MT_ZdoStateChangeCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_ZdoTcDeviceInd
        FUNCTION MT_ZdoTcDeviceInd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION MT_ZdoUnbindRequest,0a1203H
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC _zdoCallbackSub
        PUBLIC ignoreIndication
        PUBLIC pBeaconIndBuf
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AssocGetWithExt     SYMBOL "AssocGetWithExt"
`??AssocGetWithExt::?relay` SYMBOL "?relay", AssocGetWithExt
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
MT_Word2Buf         SYMBOL "MT_Word2Buf"
`??MT_Word2Buf::?relay` SYMBOL "?relay", MT_Word2Buf
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_RouteDiscoveryRequest SYMBOL "NLME_RouteDiscoveryRequest"
`??NLME_RouteDiscoveryRequest::?relay` SYMBOL "?relay", NLME_RouteDiscoveryRequest
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
`??RTG_CheckRtStatus::?relay` SYMBOL "?relay", RTG_CheckRtStatus
ZDApp_ForceConcentratorChange SYMBOL "ZDApp_ForceConcentratorChange"
`??ZDApp_ForceConcentratorChange::?relay` SYMBOL "?relay", ZDApp_ForceConcentratorChange
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_SetRejoinBackoffDuration SYMBOL "ZDApp_SetRejoinBackoffDuration"
`??ZDApp_SetRejoinBackoffDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinBackoffDuration
ZDApp_SetRejoinScanDuration SYMBOL "ZDApp_SetRejoinScanDuration"
`??ZDApp_SetRejoinScanDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinScanDuration
ZDOInitDevice       SYMBOL "ZDOInitDevice"
`??ZDOInitDevice::?relay` SYMBOL "?relay", ZDOInitDevice
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
`??ZDO_RemoveRegisteredCB::?relay` SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
`??ZDP_IEEEAddrReq::?relay` SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
`??ZDP_MatchDescReq::?relay` SYMBOL "?relay", ZDP_MatchDescReq
ZDP_MgmtDirectJoinReq SYMBOL "ZDP_MgmtDirectJoinReq"
`??ZDP_MgmtDirectJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtDirectJoinReq
ZDP_MgmtLeaveReq    SYMBOL "ZDP_MgmtLeaveReq"
`??ZDP_MgmtLeaveReq::?relay` SYMBOL "?relay", ZDP_MgmtLeaveReq
ZDP_MgmtNwkDiscReq  SYMBOL "ZDP_MgmtNwkDiscReq"
`??ZDP_MgmtNwkDiscReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkDiscReq
ZDP_MgmtNwkUpdateReq SYMBOL "ZDP_MgmtNwkUpdateReq"
`??ZDP_MgmtNwkUpdateReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkUpdateReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
`??ZDP_ServerDiscReq::?relay` SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
`??ZDP_UserDescSet::?relay` SYMBOL "?relay", ZDP_UserDescSet
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
`??ZDSecMgrAPSRemove::?relay` SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
`??ZDSecMgrAddLinkKey::?relay` SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
`??ZDSecMgrEntryLookupExt::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrSwitchNwkKey SYMBOL "ZDSecMgrSwitchNwkKey"
`??ZDSecMgrSwitchNwkKey::?relay` SYMBOL "?relay", ZDSecMgrSwitchNwkKey
ZDSecMgrUpdateNwkKey SYMBOL "ZDSecMgrUpdateNwkKey"
`??ZDSecMgrUpdateNwkKey::?relay` SYMBOL "?relay", ZDSecMgrUpdateNwkKey
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
aps_AddGroup        SYMBOL "aps_AddGroup"
`??aps_AddGroup::?relay` SYMBOL "?relay", aps_AddGroup
aps_CountAllGroups  SYMBOL "aps_CountAllGroups"
`??aps_CountAllGroups::?relay` SYMBOL "?relay", aps_CountAllGroups
aps_FindAllGroupsForEndpoint SYMBOL "aps_FindAllGroupsForEndpoint"
`??aps_FindAllGroupsForEndpoint::?relay` SYMBOL "?relay", aps_FindAllGroupsForEndpoint
aps_FindGroup       SYMBOL "aps_FindGroup"
`??aps_FindGroup::?relay` SYMBOL "?relay", aps_FindGroup
aps_RemoveAllGroup  SYMBOL "aps_RemoveAllGroup"
`??aps_RemoveAllGroup::?relay` SYMBOL "?relay", aps_RemoveAllGroup
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
`??aps_RemoveGroup::?relay` SYMBOL "?relay", aps_RemoveGroup
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
MT_ZdoAddrRspCB     SYMBOL "MT_ZdoAddrRspCB"
`??MT_ZdoAddrRspCB::?relay` SYMBOL "?relay", MT_ZdoAddrRspCB
MT_ZdoBeaconIndCB   SYMBOL "MT_ZdoBeaconIndCB"
`??MT_ZdoBeaconIndCB::?relay` SYMBOL "?relay", MT_ZdoBeaconIndCB
MT_ZdoCommandProcessing SYMBOL "MT_ZdoCommandProcessing"
`??MT_ZdoCommandProcessing::?relay` SYMBOL "?relay", MT_ZdoCommandProcessing
MT_ZdoDirectCB      SYMBOL "MT_ZdoDirectCB"
`??MT_ZdoDirectCB::?relay` SYMBOL "?relay", MT_ZdoDirectCB
MT_ZdoEndDevAnnceCB SYMBOL "MT_ZdoEndDevAnnceCB"
`??MT_ZdoEndDevAnnceCB::?relay` SYMBOL "?relay", MT_ZdoEndDevAnnceCB
MT_ZdoInit          SYMBOL "MT_ZdoInit"
`??MT_ZdoInit::?relay` SYMBOL "?relay", MT_ZdoInit
MT_ZdoJoinCnfCB     SYMBOL "MT_ZdoJoinCnfCB"
`??MT_ZdoJoinCnfCB::?relay` SYMBOL "?relay", MT_ZdoJoinCnfCB
MT_ZdoNwkDiscoveryCnfCB SYMBOL "MT_ZdoNwkDiscoveryCnfCB"
`??MT_ZdoNwkDiscoveryCnfCB::?relay` SYMBOL "?relay", MT_ZdoNwkDiscoveryCnfCB
MT_ZdoPermitJoinInd SYMBOL "MT_ZdoPermitJoinInd"
`??MT_ZdoPermitJoinInd::?relay` SYMBOL "?relay", MT_ZdoPermitJoinInd
MT_ZdoSendMsgCB     SYMBOL "MT_ZdoSendMsgCB"
`??MT_ZdoSendMsgCB::?relay` SYMBOL "?relay", MT_ZdoSendMsgCB
MT_ZdoSrcRtgCB      SYMBOL "MT_ZdoSrcRtgCB"
`??MT_ZdoSrcRtgCB::?relay` SYMBOL "?relay", MT_ZdoSrcRtgCB
MT_ZdoStateChangeCB SYMBOL "MT_ZdoStateChangeCB"
`??MT_ZdoStateChangeCB::?relay` SYMBOL "?relay", MT_ZdoStateChangeCB
MT_ZdoTcDeviceInd   SYMBOL "MT_ZdoTcDeviceInd"
`??MT_ZdoTcDeviceInd::?relay` SYMBOL "?relay", MT_ZdoTcDeviceInd

        EXTERN `??AssocGetWithExt::?relay`
        FUNCTION `??AssocGetWithExt::?relay`,00H
        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??MT_Word2Buf::?relay`
        FUNCTION `??MT_Word2Buf::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_RouteDiscoveryRequest::?relay`
        FUNCTION `??NLME_RouteDiscoveryRequest::?relay`,00H
        EXTERN `??RTG_CheckRtStatus::?relay`
        FUNCTION `??RTG_CheckRtStatus::?relay`,00H
        EXTERN `??ZDApp_ForceConcentratorChange::?relay`
        FUNCTION `??ZDApp_ForceConcentratorChange::?relay`,00H
        EXTERN `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,00H
        EXTERN `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,00H
        EXTERN `??ZDApp_SetRejoinBackoffDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinBackoffDuration::?relay`,00H
        EXTERN `??ZDApp_SetRejoinScanDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinScanDuration::?relay`,00H
        EXTERN `??ZDOInitDevice::?relay`
        FUNCTION `??ZDOInitDevice::?relay`,00H
        EXTERN `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,00H
        EXTERN `??ZDO_RemoveRegisteredCB::?relay`
        FUNCTION `??ZDO_RemoveRegisteredCB::?relay`,00H
        EXTERN `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??ZDP_IEEEAddrReq::?relay`
        FUNCTION `??ZDP_IEEEAddrReq::?relay`,00H
        EXTERN `??ZDP_MatchDescReq::?relay`
        FUNCTION `??ZDP_MatchDescReq::?relay`,00H
        EXTERN `??ZDP_MgmtDirectJoinReq::?relay`
        FUNCTION `??ZDP_MgmtDirectJoinReq::?relay`,00H
        EXTERN `??ZDP_MgmtLeaveReq::?relay`
        FUNCTION `??ZDP_MgmtLeaveReq::?relay`,00H
        EXTERN `??ZDP_MgmtNwkDiscReq::?relay`
        FUNCTION `??ZDP_MgmtNwkDiscReq::?relay`,00H
        EXTERN `??ZDP_MgmtNwkUpdateReq::?relay`
        FUNCTION `??ZDP_MgmtNwkUpdateReq::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,00H
        EXTERN `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,00H
        EXTERN `??ZDP_ServerDiscReq::?relay`
        FUNCTION `??ZDP_ServerDiscReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??ZDP_UserDescSet::?relay`
        FUNCTION `??ZDP_UserDescSet::?relay`,00H
        EXTERN `??ZDSecMgrAPSRemove::?relay`
        FUNCTION `??ZDSecMgrAPSRemove::?relay`,00H
        EXTERN `??ZDSecMgrAddLinkKey::?relay`
        FUNCTION `??ZDSecMgrAddLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,00H
        EXTERN `??ZDSecMgrEntryLookupExt::?relay`
        FUNCTION `??ZDSecMgrEntryLookupExt::?relay`,00H
        EXTERN `??ZDSecMgrSwitchNwkKey::?relay`
        FUNCTION `??ZDSecMgrSwitchNwkKey::?relay`,00H
        EXTERN `??ZDSecMgrUpdateNwkKey::?relay`
        FUNCTION `??ZDSecMgrUpdateNwkKey::?relay`,00H
        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??aps_AddGroup::?relay`
        FUNCTION `??aps_AddGroup::?relay`,00H
        EXTERN `??aps_CountAllGroups::?relay`
        FUNCTION `??aps_CountAllGroups::?relay`,00H
        EXTERN `??aps_FindAllGroupsForEndpoint::?relay`
        FUNCTION `??aps_FindAllGroupsForEndpoint::?relay`,00H
        EXTERN `??aps_FindGroup::?relay`
        FUNCTION `??aps_FindGroup::?relay`,00H
        EXTERN `??aps_RemoveAllGroup::?relay`
        FUNCTION `??aps_RemoveAllGroup::?relay`,00H
        EXTERN `??aps_RemoveGroup::?relay`
        FUNCTION `??aps_RemoveGroup::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN MT_Word2Buf
        FUNCTION MT_Word2Buf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_RouteDiscoveryRequest
        FUNCTION NLME_RouteDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_ForceConcentratorChange
        FUNCTION ZDApp_ForceConcentratorChange,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SetRejoinBackoffDuration
        FUNCTION ZDApp_SetRejoinBackoffDuration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SetRejoinScanDuration
        FUNCTION ZDApp_SetRejoinScanDuration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 99, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtDirectJoinReq
        FUNCTION ZDP_MgmtDirectJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtLeaveReq
        FUNCTION ZDP_MgmtLeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtNwkDiscReq
        FUNCTION ZDP_MgmtNwkDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtNwkUpdateReq
        FUNCTION ZDP_MgmtNwkUpdateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SendData
        FUNCTION ZDP_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_TransID
        EXTERN ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSwitchNwkKey
        FUNCTION ZDSecMgrSwitchNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrUpdateNwkKey
        FUNCTION ZDSecMgrUpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_CountAllGroups
        FUNCTION aps_CountAllGroups,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindAllGroupsForEndpoint
        FUNCTION aps_FindAllGroupsForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveAllGroup
        FUNCTION aps_RemoveAllGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devState
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgDeviceLogicalType

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
//    4   Revision:       $Revision: 42371 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 **************************************************************************************************/
//   38 
//   39 #ifdef MT_ZDO_FUNC
//   40 
//   41 /**************************************************************************************************
//   42  * INCLUDES
//   43  **************************************************************************************************/
//   44 #include "ZComDef.h"
//   45 #include "OSAL.h"
//   46 #include "OSAL_Nv.h"
//   47 #include "MT.h"
//   48 #include "MT_ZDO.h"
//   49 #include "AddrMgr.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 #include "OnBoard.h"
//   56 #include "aps_groups.h"
//   57 
//   58 #if defined ( MT_ZDO_EXTENSIONS )
//   59   #include "rtg.h"
//   60 #endif
//   61 #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
//   62   #include "ZDSecMgr.h"
//   63 #endif
//   64 
//   65 #include "nwk_util.h"
//   66 
//   67 /**************************************************************************************************
//   68  * CONSTANTS
//   69  **************************************************************************************************/
//   70 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   71 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   72 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   73 #define MT_ZDO_BEACON_IND_LEN             21
//   74 #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
//   75 #define MT_ZDO_JOIN_CNF_LEN               5
//   76 
//   77 // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
//   78 // sizeof(zdoConcentratorInd_t) is not usable.
//   79 #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
//   80 
//   81 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   82 
//   83 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   84 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   85 
//   86 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   87 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   88 
//   89 #define MT_ZDO_STATUS_LEN   1
//   90 
//   91 #if defined ( MT_ZDO_EXTENSIONS )
//   92 typedef struct
//   93 {
//   94   uint16            ami;
//   95   uint16            keyNvId;   // index to the Link Key table in NV
//   96   ZDSecMgr_Authentication_Option authenticateOption;
//   97 } ZDSecMgrEntry_t;
//   98 #endif  // MT_ZDO_EXTENSIONS
//   99 
//  100 /**************************************************************************************************
//  101  * GLOBAL VARIABLES
//  102  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  103 uint32 _zdoCallbackSub;
_zdoCallbackSub:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  104 uint8 *pBeaconIndBuf = NULL;
pBeaconIndBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  105 
//  106 /**************************************************************************************************
//  107  * LOCAL VARIABLES
//  108  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  109 bool ignoreIndication = FALSE;
ignoreIndication:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  110 
//  111 /**************************************************************************************************
//  112  * LOCAL FUNCTIONS
//  113  **************************************************************************************************/
//  114 #if defined (MT_ZDO_FUNC)
//  115 static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//  116 static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//  117 static void MT_ZdoNodeDescRequest(uint8 *pBuf);
//  118 static void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  119 static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  120 static void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  121 static void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  122 static void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  123 static void MT_ZdoUserDescRequest(uint8 *pBuf);
//  124 static void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  125 static void MT_ZdoUserDescSet(uint8 *pBuf);
//  126 static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  127 static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  128 static void MT_ZdoBindRequest(uint8 *pBuf);
//  129 static void MT_ZdoUnbindRequest(uint8 *pBuf);
//  130 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  131 static void MT_ZdoSetLinkKey(uint8 *pBuf);
//  132 static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  133 static void MT_ZdoGetLinkKey(uint8 *pBuf);
//  134 #endif /* MT_SYS_KEY_MANAGEMENT */
//  135 static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
//  136 static void MT_ZdoJoinReq(uint8 *pBuf);
//  137 /* Call back function */
//  138 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
//  139 void *MT_ZdoBeaconIndCB ( void *pStr );
//  140 void *MT_ZdoJoinCnfCB ( void *pStr );
//  141 #if defined (MT_ZDO_MGMT)
//  142 static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  143 static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  144 static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  145 static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  146 static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  147 static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  148 static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  149 static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  150 #endif /* MT_ZDO_MGMT */
//  151 static void MT_ZdoSendData( uint8 *pBuf );
//  152 static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
//  153 static void MT_ZdoStartupFromApp(uint8 *pBuf);
//  154 static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  155 static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  156 static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
//  157 #endif /* MT_ZDO_FUNC */
//  158 
//  159 #if defined (MT_ZDO_CB_FUNC)
//  160 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  161 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  162 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  163 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  164 void* MT_ZdoSrcRtgCB( void *pStr );
//  165 static void *MT_ZdoConcentratorIndCB(void *pStr);
//  166 static void *MT_ZdoLeaveInd(void *vPtr);
//  167 void *MT_ZdoTcDeviceInd( void *params );
//  168 void *MT_ZdoPermitJoinInd( void *duration );
//  169 #endif /* MT_ZDO_CB_FUNC */
//  170 
//  171 #if defined ( MT_ZDO_EXTENSIONS )
//  172 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  173 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
//  174 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
//  175 #endif // ZDO_COORDINATOR
//  176 static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
//  177 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
//  178 static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
//  179 static void MT_ZdoExtRouteDisc( uint8 *pBuf );
//  180 static void MT_ZdoExtRouteCheck( uint8 *pBuf );
//  181 static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
//  182 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
//  183 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
//  184 static void MT_ZdoExtFindGroup( uint8 *pBuf );
//  185 static void MT_ZdoExtAddGroup( uint8 *pBuf );
//  186 static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
//  187 static void MT_ZdoExtRxIdle( uint8 *pBuf );
//  188 static void MT_ZdoExtNwkInfo( uint8 *pBuf );
//  189 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
//  190 static void MT_ZdoExtSetParams( uint8 *pBuf );
//  191 extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  192 #endif // MT_ZDO_EXTENSIONS
//  193 
//  194 #if defined (MT_ZDO_FUNC)
//  195 /***************************************************************************************************
//  196  * @fn      MT_ZdoInit
//  197  *
//  198  * @brief   MT ZDO initialization
//  199  *
//  200  * @param   none
//  201  *
//  202  * @return  none
//  203  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  204 void MT_ZdoInit(void)
MT_ZdoInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_ZdoInit
        CODE
//  205 {
        FUNCALL MT_ZdoInit, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoInit, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoInit, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoInit, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoInit, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  206 #ifdef MT_ZDO_CB_FUNC
//  207   /* Register with ZDO for indication callbacks */
//  208   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoSrcRtgCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoSrcRtgCB::?relay` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
//  209   ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoConcentratorIndCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoConcentratorIndCB::?relay` >> 8) & 0xff
        MOV       R1,#0x1
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
//  210   ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoLeaveInd::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoLeaveInd::?relay` >> 8) & 0xff
        MOV       R1,#0x6
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
//  211   ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoPermitJoinInd::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoPermitJoinInd::?relay` >> 8) & 0xff
        MOV       R1,#0x7
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
//  212   ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoTcDeviceInd::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoTcDeviceInd::?relay` >> 8) & 0xff
        MOV       R1,#0x8
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
//  213 #endif
//  214 }
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
//  215 
//  216 /***************************************************************************************************
//  217  * @fn      MT_ZdoCommandProcessing
//  218  *
//  219  * @brief
//  220  *
//  221  *   Process all the ZDO commands that are issued by test tool
//  222  *
//  223  * @param   pBuf - pointer to the msg buffer
//  224  *
//  225  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  226  *          |  1   |   1   |   1   |  0-255 |
//  227  *
//  228  * @return  status
//  229  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  230 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
MT_ZdoCommandProcessing:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
        CODE
//  231 {
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNWKAddressRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMatchDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_UserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_ServerDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUnbindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_NetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_JoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtNwkDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 74, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 74, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 75, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 75, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtLeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtDirectJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMgmtNwkUpdateRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNwkAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_SetRejoinScanDuration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_SetRejoinBackoffDuration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDSecMgrUpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDSecMgrSwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDSecMgrAddLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, NLME_RouteDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, aps_RemoveAllGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoExtFindAllGroupsEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoExtFindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 73, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 73, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, aps_CountAllGroups
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoExtNwkInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDSecMgrAPSRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 72, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 72, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_ForceConcentratorChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 70, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 70, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 54
        MOV       A,#-0x36
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
//  232   uint8 status = MT_RPC_SUCCESS;
        MOV       R6,#0x0
//  233 
//  234   switch (pBuf[MT_RPC_POS_CMD1])
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_0 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_1 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_7 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_8 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_9 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_10 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_11 & 0xFFFF
        ADD       A,#-0x14
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_12 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_13 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_14 & 0xFFFF
        ADD       A,#-0x4
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_15 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_16 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_17 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_18 & 0xFFFF
        ADD       A,#-0x7
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_19 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_20 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_21 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_22 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_23 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_24 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_25 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_26 & 0xFFFF
        ADD       A,#-0x7
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_27 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_28 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_29 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_30 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_31 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_33 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_34 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_35 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_36 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_38 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_39 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_40 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_42 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_43 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_44 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_45 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_46 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_47 & 0xFFFF
        ADD       A,#-0x79
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_48 & 0xFFFF
        LJMP      ??MT_ZdoCommandProcessing_49 & 0xFFFF
//  235   {
//  236 #if defined ( ZDO_NWKADDR_REQUEST )
//  237     case MT_ZDO_NWK_ADDR_REQ:
//  238       MT_ZdoNWKAddressRequest(pBuf);
??MT_ZdoCommandProcessing_0:
        ; Setup parameters for call to function MT_ZdoNWKAddressRequest
        LCALL     `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
//  239       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  240 #endif
//  241 
//  242 #if defined ( ZDO_IEEEADDR_REQUEST )
//  243     case MT_ZDO_IEEE_ADDR_REQ:
//  244       MT_ZdoIEEEAddrRequest(pBuf);
??MT_ZdoCommandProcessing_1:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV       R5,#0x0
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
        LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
//  245       break;
//  246 #endif
//  247 
//  248 #if defined ( ZDO_NODEDESC_REQUEST )
//  249     case MT_ZDO_NODE_DESC_REQ:
//  250       MT_ZdoNodeDescRequest(pBuf);
??MT_ZdoCommandProcessing_2:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       R1,#0x2
        LJMP      ??MT_ZdoCommandProcessing_52 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 70)
//  251       break;
//  252 #endif
//  253 
//  254 #if defined ( ZDO_POWERDESC_REQUEST )
//  255     case MT_ZDO_POWER_DESC_REQ:
//  256       MT_ZdoPowerDescRequest(pBuf);
??MT_ZdoCommandProcessing_3:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_82:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       R1,#0x3
        MOV       A,R1
        LJMP      ??MT_ZdoCommandProcessing_53 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 70)
//  257       break;
//  258 #endif
//  259 
//  260 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  261     case MT_ZDO_SIMPLE_DESC_REQ:
//  262       MT_ZdoSimpleDescRequest(pBuf);
??MT_ZdoCommandProcessing_4:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_94:
        JNC       ??MT_ZdoCommandProcessing_54
        INC       ?V1
??MT_ZdoCommandProcessing_54:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV       ?V2,R6
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 70)
//  263       break;
//  264 #endif
//  265 
//  266 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  267     case MT_ZDO_ACTIVE_EP_REQ:
//  268       MT_ZdoActiveEpRequest(pBuf);
??MT_ZdoCommandProcessing_5:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       R1,#0x5
        SJMP      ??MT_ZdoCommandProcessing_52
          CFI CFA_XSP16 add(XSP16, 70)
//  269       break;
//  270 #endif
//  271 
//  272 #if defined ( ZDO_MATCH_REQUEST )
//  273     case MT_ZDO_MATCH_DESC_REQ:
//  274       MT_ZdoMatchDescRequest(pBuf);
??MT_ZdoCommandProcessing_6:
        ; Setup parameters for call to function MT_ZdoMatchDescRequest
        LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
//  275       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  276 #endif
//  277 
//  278 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  279     case MT_ZDO_COMPLEX_DESC_REQ:
//  280       MT_ZdoComplexDescRequest(pBuf);
??MT_ZdoCommandProcessing_7:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       R1,#0x10
        SJMP      ??MT_ZdoCommandProcessing_52
          CFI CFA_XSP16 add(XSP16, 70)
//  281       break;
//  282 #endif
//  283 
//  284 #if defined ( ZDO_USERDESC_REQUEST )
//  285     case MT_ZDO_USER_DESC_REQ:
//  286       MT_ZdoUserDescRequest(pBuf);
??MT_ZdoCommandProcessing_8:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       R1,#0x11
??MT_ZdoCommandProcessing_52:
        MOV       A,#0x3
??MT_ZdoCommandProcessing_53:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 70)
//  287       break;
//  288 #endif
//  289 
//  290 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  291     case MT_ZDO_END_DEV_ANNCE:
//  292       MT_ZdoEndDevAnnce(pBuf);
??MT_ZdoCommandProcessing_9:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,?V0
        ADD       A,#0x2
        MOV       ?V0,A
        JNC       ??MT_ZdoCommandProcessing_56
        INC       ?V1
??MT_ZdoCommandProcessing_56:
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV       ?V2,R6
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        LJMP      ??MT_ZdoCommandProcessing_55 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 70)
//  293       break;
//  294 #endif
//  295 
//  296 #if defined ( ZDO_USERDESCSET_REQUEST )
//  297     case MT_ZDO_USER_DESC_SET:
//  298       MT_ZdoUserDescSet(pBuf);
??MT_ZdoCommandProcessing_10:
        LCALL     ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_179:
        MOV       ?V2,A
        CLR       A
        ADDC      A,R3
        MOV       ?V3,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V3
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_124:
        MOV       A,?V2
        ADD       A,#0x2
        MOV       ?V2,A
        JNC       ??MT_ZdoCommandProcessing_57
        INC       ?V3
??MT_ZdoCommandProcessing_57:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       R3,?V3
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,R6
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x29
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
        ; Setup parameters for call to function ZDP_UserDescSet
        MOV       A,#0x25
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       R1,#0x0
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
        LJMP      ??MT_ZdoCommandProcessing_58 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 70)
//  299       break;
//  300 #endif
//  301 
//  302 #if defined ( ZDO_SERVERDISC_REQUEST )
//  303     case MT_ZDO_SERVICE_DISC_REQ:
//  304       MT_ZdoServiceDiscRequest(pBuf);
??MT_ZdoCommandProcessing_11:
        LCALL     ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_180:
        MOV       R2,A
        JNC       ??MT_ZdoCommandProcessing_59
        INC       R3
??MT_ZdoCommandProcessing_59:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDP_ServerDiscReq
        MOV       R1,#0x0
        LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
        LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
//  305       break;
//  306 #endif
//  307 
//  308 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  309     case MT_ZDO_END_DEV_BIND_REQ:
//  310       MT_ZdoEndDevBindRequest(pBuf);
??MT_ZdoCommandProcessing_12:
        ; Setup parameters for call to function MT_ZdoEndDevBindRequest
        LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
//  311       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  312 #endif
//  313 
//  314 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  315     case MT_ZDO_BIND_REQ:
//  316       MT_ZdoBindRequest(pBuf);
??MT_ZdoCommandProcessing_13:
        ; Setup parameters for call to function MT_ZdoBindRequest
        LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
//  317       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  318 #endif
//  319 
//  320 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  321     case MT_ZDO_UNBIND_REQ:
//  322       MT_ZdoUnbindRequest(pBuf);
??MT_ZdoCommandProcessing_14:
        ; Setup parameters for call to function MT_ZdoUnbindRequest
        LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
//  323       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  324 #endif
//  325 
//  326 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  327     case MT_ZDO_SET_LINK_KEY:
//  328       MT_ZdoSetLinkKey(pBuf);
//  329       break;
//  330 
//  331     case MT_ZDO_REMOVE_LINK_KEY:
//  332       MT_ZdoRemoveLinkKey(pBuf);
//  333       break;
//  334 
//  335     case MT_ZDO_GET_LINK_KEY:
//  336       MT_ZdoGetLinkKey(pBuf);
//  337       break;
//  338 #endif // MT_SYS_KEY_MANAGEMENT
//  339 
//  340 #if defined ( ZDO_MANUAL_JOIN )
//  341     case MT_ZDO_NWK_DISCOVERY_REQ:
//  342       MT_ZdoNetworkDiscoveryReq(pBuf);
??MT_ZdoCommandProcessing_15:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
        MOV       R1,#0x2
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
        MOV       R1,#0x3
        SJMP      ??MT_ZdoCommandProcessing_60
//  343       break;
//  344 
//  345     case MT_ZDO_JOIN_REQ:
//  346       MT_ZdoJoinReq(pBuf);
??MT_ZdoCommandProcessing_16:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_47:
        ; Setup parameters for call to function osal_build_uint16
        MOV       DPL,?V0
        MOV       DPH,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,?V0
        ADD       A,#0xb
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
        ; Setup parameters for call to function ZDApp_JoinReq
        MOV       A,?V0
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_205:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       A,?V0
        ADD       A,#0xd
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_206:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 74)
        MOV       A,?V0
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       R2,?V2
        MOV       R3,?V3
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
        MOV       R1,#0x4
??MT_ZdoCommandProcessing_60:
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP      ??MT_ZdoCommandProcessing_61 & 0xFFFF
//  347       break;
//  348 #endif
//  349 
//  350 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  351     case MT_ZDO_MGMT_NWKDISC_REQ:
//  352       MT_ZdoMgmtNwkDiscRequest(pBuf);
??MT_ZdoCommandProcessing_19:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_95:
        JNC       ??MT_ZdoCommandProcessing_62
        INC       ?V1
??MT_ZdoCommandProcessing_62:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       R2,A
        MOV       R3,?V1
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
        ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 74)
        MOV       R5,#0x0
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_157:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtNwkDiscReq::?relay`; Banked call to: ZDP_MgmtNwkDiscReq
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
        LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
//  353       break;
//  354 #endif
//  355 
//  356 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  357     case MT_ZDO_MGMT_LQI_REQ:
//  358       MT_ZdoMgmtLqiRequest(pBuf);
??MT_ZdoCommandProcessing_20:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_76:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDP_SendData
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       ?V0,#0x31
        SJMP      ??MT_ZdoCommandProcessing_63
          CFI CFA_XSP16 add(XSP16, 70)
//  359       break;
//  360 #endif
//  361 
//  362 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  363     case MT_ZDO_MGMT_RTG_REQ:
//  364       MT_ZdoMgmtRtgRequest(pBuf);
??MT_ZdoCommandProcessing_21:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_77:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDP_SendData
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       ?V0,#0x32
        SJMP      ??MT_ZdoCommandProcessing_63
          CFI CFA_XSP16 add(XSP16, 70)
//  365       break;
//  366 #endif
//  367 
//  368 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  369     case MT_ZDO_MGMT_BIND_REQ:
//  370       MT_ZdoMgmtBindRequest(pBuf);
??MT_ZdoCommandProcessing_22:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_78:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDP_SendData
        MOV       ?V0,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       ?V0,#0x33
??MT_ZdoCommandProcessing_63:
        MOV       ?V1,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 75)
        MOV       R1,#0x1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
        LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
        LJMP      ??MT_ZdoCommandProcessing_51 & 0xFFFF
//  371       break;
//  372 #endif
//  373 
//  374 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  375     case MT_ZDO_MGMT_LEAVE_REQ:
//  376       MT_ZdoMgmtLeaveRequest(pBuf);
??MT_ZdoCommandProcessing_23:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_96:
        JNC       ??MT_ZdoCommandProcessing_64
        INC       ?V1
??MT_ZdoCommandProcessing_64:
        MOV       DPL,A
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??MT_ZdoCommandProcessing_65
        SETB      B.0
        SJMP      ??MT_ZdoCommandProcessing_66
??MT_ZdoCommandProcessing_65:
        CLR       B.0
??MT_ZdoCommandProcessing_66:
        ; Setup parameters for call to function ZDP_MgmtLeaveReq
        MOV       ?V2,R6
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        CLR       A
        RLC       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
??MT_ZdoCommandProcessing_58:
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
        SJMP      ??MT_ZdoCommandProcessing_51
//  377       break;
//  378 #endif
//  379 
//  380 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  381     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  382       MT_ZdoMgmtDirectJoinRequest(pBuf);
??MT_ZdoCommandProcessing_24:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_92:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_97:
        JNC       ??MT_ZdoCommandProcessing_67
        INC       ?V1
??MT_ZdoCommandProcessing_67:
        ; Setup parameters for call to function ZDP_MgmtDirectJoinReq
        MOV       ?V2,R6
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtDirectJoinReq::?relay`; Banked call to: ZDP_MgmtDirectJoinReq
??MT_ZdoCommandProcessing_55:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
??MT_ZdoCommandProcessing_51:
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LJMP      ??MT_ZdoCommandProcessing_68 & 0xFFFF
//  383       break;
//  384 #endif
//  385 
//  386 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  387     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  388       MT_ZdoMgmtPermitJoinRequest(pBuf);
??MT_ZdoCommandProcessing_25:
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x4
        JNZ       ??MT_ZdoCommandProcessing_69
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        SJMP      ??MT_ZdoCommandProcessing_70
??MT_ZdoCommandProcessing_69:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_131:
        MOV       ?V0,DPL
        MOV       ?V1,DPH
??MT_ZdoCommandProcessing_70:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPTR,#ignoreIndication
        MOV       A,#0x1
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV       R5,#0x0
        INC       A
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       DPTR,#ignoreIndication
        LJMP      ??MT_ZdoCommandProcessing_71 & 0xFFFF
//  389       break;
//  390 #endif
//  391 
//  392 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  393     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  394       MT_ZdoMgmtNwkUpdateRequest(pBuf);
??MT_ZdoCommandProcessing_26:
        ; Setup parameters for call to function MT_ZdoMgmtNwkUpdateRequest
        LCALL     `??MT_ZdoMgmtNwkUpdateRequest::?relay`; Banked call to: MT_ZdoMgmtNwkUpdateRequest
//  395       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  396 #endif
//  397 
//  398 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  399     case MT_ZDO_STARTUP_FROM_APP:
//  400       MT_ZdoStartupFromApp(pBuf);
??MT_ZdoCommandProcessing_29:
        LCALL     ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_153:
        ; Setup parameters for call to function ZDOInitDevice
        MOV       R2,#0x64
        MOV       R3,#0x0
        LCALL     `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
        SJMP      ??MT_ZdoCommandProcessing_72
//  401       break;
//  402 #endif
//  403 
//  404     case MT_ZDO_SEND_DATA:
//  405       MT_ZdoSendData( pBuf );
??MT_ZdoCommandProcessing_17:
        ; Setup parameters for call to function MT_ZdoSendData
        LCALL     `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
//  406       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  407 
//  408     case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
//  409       MT_ZdoNwkAddrOfInterestReq( pBuf );
??MT_ZdoCommandProcessing_18:
        ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
        LCALL     `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
//  410       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  411 
//  412     case MT_ZDO_MSG_CB_REGISTER:
//  413       MT_ZdoRegisterForZDOMsg(pBuf);
??MT_ZdoCommandProcessing_27:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_26:
        JNC       ??MT_ZdoCommandProcessing_73
        INC       R3
??MT_ZdoCommandProcessing_73:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV       DPTR,#MT_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        SJMP      ??MT_ZdoCommandProcessing_72
//  414       break;
//  415 
//  416     case MT_ZDO_MSG_CB_REMOVE:
//  417       MT_ZdoRemoveRegisteredCB(pBuf);
??MT_ZdoCommandProcessing_28:
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_27:
        JNC       ??MT_ZdoCommandProcessing_74
        INC       R3
??MT_ZdoCommandProcessing_74:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDO_RemoveRegisteredCB
        MOV       DPTR,#MT_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
??MT_ZdoCommandProcessing_72:
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,#-0x20
        ANL       A,?V0
        XRL       A,#0x20
        JZ        $+5
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        SJMP      ??MT_ZdoCommandProcessing_61
//  418       break;
//  419 
//  420     case MT_ZDO_SET_REJOIN_PARAMS:
//  421       MT_ZdoSetRejoinParameters(pBuf);
??MT_ZdoCommandProcessing_48:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       A,?V0
        ADD       A,R1
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        ; Setup parameters for call to function ZDApp_SetRejoinScanDuration
        LCALL     `??ZDApp_SetRejoinScanDuration::?relay`; Banked call to: ZDApp_SetRejoinScanDuration
        ; Setup parameters for call to function ZDApp_SetRejoinBackoffDuration
        MOV       R2,?V4
        MOV       R3,?V5
        MOV       R4,?V6
        MOV       R5,?V7
        LCALL     `??ZDApp_SetRejoinBackoffDuration::?relay`; Banked call to: ZDApp_SetRejoinBackoffDuration
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_ZdoCommandProcessing_71:
        CLR       A
??MT_ZdoCommandProcessing_68:
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
??MT_ZdoCommandProcessing_61:
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R7
        MOV       R2,A
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  422       break;
//  423 
//  424 #if defined ( MT_ZDO_EXTENSIONS )
//  425 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  426     case MT_ZDO_EXT_UPDATE_NWK_KEY:
//  427       MT_ZdoSecUpdateNwkKey( pBuf );
??MT_ZdoCommandProcessing_42:
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function ZDSecMgrUpdateNwkKey
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,?V0
        ADD       A,#0x3
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??ZDSecMgrUpdateNwkKey::?relay`; Banked call to: ZDSecMgrUpdateNwkKey
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_245:
        MOV       R2,#0x4e
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  428       break;
//  429 
//  430     case MT_ZDO_EXT_SWITCH_NWK_KEY:
//  431       MT_ZdoSecSwitchNwkKey( pBuf );
??MT_ZdoCommandProcessing_43:
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDSecMgrSwitchNwkKey
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDSecMgrSwitchNwkKey::?relay`; Banked call to: ZDSecMgrSwitchNwkKey
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_246:
        MOV       R2,#0x4f
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  432       break;
//  433 #endif // ZDO_COORDINATOR
//  434     case MT_ZDO_SEC_ADD_LINK_KEY:
//  435       MT_ZdoSecAddLinkKey( pBuf );
??MT_ZdoCommandProcessing_30:
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,?V0
        ADD       A,#0x2
        MOV       ?V0,A
        JNC       ??MT_ZdoCommandProcessing_76
        INC       ?V1
??MT_ZdoCommandProcessing_76:
        ; Setup parameters for call to function ZDSecMgrAddLinkKey
        ADD       A,#0x8
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       R4,?V0
        MOV       R5,?V1
        LCALL     `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_247:
        MOV       R2,#0x42
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  436       break;
//  437 
//  438     case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
//  439       MT_ZdoSecEntryLookupExt( pBuf );
??MT_ZdoCommandProcessing_31:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_ZdoCommandProcessing_77
        INC       R3
??MT_ZdoCommandProcessing_77:
        LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_232:
        JZ        ??MT_ZdoCommandProcessing_78
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_184:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_56:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_105:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_57:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
??MT_ZdoCommandProcessing_78:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x6
        MOV       R2,#0x43
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  440       break;
//  441 
//  442     case MT_ZDO_SEC_DEVICE_REMOVE:
//  443        MT_ZdoSecDeviceRemove( pBuf );
??MT_ZdoCommandProcessing_32:
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        JNC       ??MT_ZdoCommandProcessing_79
        INC       R3
??MT_ZdoCommandProcessing_79:
        LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_248:
        MOV       R2,#0x44
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  444        break;
//  445 
//  446     case MT_ZDO_EXT_ROUTE_DISC:
//  447        MT_ZdoExtRouteDisc( pBuf );
??MT_ZdoCommandProcessing_33:
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function NLME_RouteDiscoveryRequest
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL     `??NLME_RouteDiscoveryRequest::?relay`; Banked call to: NLME_RouteDiscoveryRequest
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_249:
        MOV       R2,#0x45
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  448        break;
//  449 
//  450     case MT_ZDO_EXT_ROUTE_CHECK:
//  451        MT_ZdoExtRouteCheck( pBuf );
??MT_ZdoCommandProcessing_34:
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function RTG_CheckRtStatus
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_250:
        MOV       R2,#0x46
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  452        break;
//  453 
//  454     case MT_ZDO_EXT_REMOVE_GROUP:
//  455       MT_ZdoExtRemoveGroup( pBuf );
??MT_ZdoCommandProcessing_35:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x4
        MOV       R2,A
        JNC       ??MT_ZdoCommandProcessing_80
        INC       R3
??MT_ZdoCommandProcessing_80:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function aps_RemoveGroup
        MOV       A,R7
        MOV       R1,A
        LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JZ        ??MT_ZdoCommandProcessing_81
        CLR       A
        SJMP      ??MT_ZdoCommandProcessing_82
??MT_ZdoCommandProcessing_81:
        MOV       A,#0x1
??MT_ZdoCommandProcessing_82:
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        SJMP      ??MT_ZdoCommandProcessing_83
//  456       break;
//  457 
//  458     case MT_ZDO_EXT_REMOVE_ALL_GROUP:
//  459       MT_ZdoExtRemoveAllGroup( pBuf );
??MT_ZdoCommandProcessing_36:
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_115:
        MOV       R1,A
        LCALL     `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
??MT_ZdoCommandProcessing_83:
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,#0x47
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  460       break;
//  461 
//  462     case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
//  463       MT_ZdoExtFindAllGroupsEndpoint( pBuf );
??MT_ZdoCommandProcessing_37:
        ; Setup parameters for call to function MT_ZdoExtFindAllGroupsEndpoint
        LCALL     `??MT_ZdoExtFindAllGroupsEndpoint::?relay`; Banked call to: MT_ZdoExtFindAllGroupsEndpoint
//  464       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  465 
//  466     case MT_ZDO_EXT_FIND_GROUP:
//  467       MT_ZdoExtFindGroup( pBuf );
??MT_ZdoCommandProcessing_38:
        ; Setup parameters for call to function MT_ZdoExtFindGroup
        LCALL     `??MT_ZdoExtFindGroup::?relay`; Banked call to: MT_ZdoExtFindGroup
//  468       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  469 
//  470     case MT_ZDO_EXT_ADD_GROUP:
//  471       MT_ZdoExtAddGroup( pBuf );
??MT_ZdoCommandProcessing_39:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        MOV       DPTR,#`?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x12
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,R2
        ADD       A,#0x4
        MOV       ?V0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V1,A
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,?V0
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV       R0,A
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        CLR       C
        SUBB      A,#0x10
        JC        ??MT_ZdoCommandProcessing_84
        MOV       A,#0xf
        MOVX      @DPTR,A
        SJMP      ??MT_ZdoCommandProcessing_85
??MT_ZdoCommandProcessing_84:
        MOVX      A,@DPTR
        JZ        ??MT_ZdoCommandProcessing_86
??MT_ZdoCommandProcessing_85:
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 73)
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
??MT_ZdoCommandProcessing_86:
        ; Setup parameters for call to function aps_AddGroup
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP101_8
        MOV       A,R7
        MOV       R1,A
        LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_251:
        MOV       R2,#0x4b
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  472       break;
//  473 
//  474     case MT_ZDO_EXT_COUNT_ALL_GROUPS:
//  475       MT_ZdoExtCountAllGroups( pBuf );
??MT_ZdoCommandProcessing_40:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function aps_CountAllGroups
        LCALL     `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_252:
        MOV       R2,#0x4c
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  476       break;
//  477 
//  478     case MT_ZDO_EXT_RX_IDLE:
//  479       MT_ZdoExtRxIdle( pBuf );
??MT_ZdoCommandProcessing_41:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_187:
        MOV       A,R0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x52
        JZ        ??MT_ZdoCommandProcessing_87
        ; Setup parameters for call to function ZMacSetReq
        LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        SJMP      ??MT_ZdoCommandProcessing_88
??MT_ZdoCommandProcessing_87:
        ; Setup parameters for call to function ZMacGetReq
        LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
??MT_ZdoCommandProcessing_88:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,#0x4d
        LJMP      ??MT_ZdoCommandProcessing_75 & 0xFFFF
//  480       break;
//  481 
//  482     case MT_ZDO_EXT_NWK_INFO:
//  483       MT_ZdoExtNwkInfo( pBuf );
??MT_ZdoCommandProcessing_44:
        ; Setup parameters for call to function MT_ZdoExtNwkInfo
        LCALL     `??MT_ZdoExtNwkInfo::?relay`; Banked call to: MT_ZdoExtNwkInfo
//  484       break;
        LJMP      ??MT_ZdoCommandProcessing_50 & 0xFFFF
//  485 
//  486     case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
//  487       MT_ZdoExtSecApsRemoveReq( pBuf );
??MT_ZdoCommandProcessing_45:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        LCALL     ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_161:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoCommandProcessing_89
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       A,?V0
        ADD       A,#0x2
        MOV       ?V0,A
        JNC       ??MT_ZdoCommandProcessing_90
        INC       ?V1
??MT_ZdoCommandProcessing_90:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDSecMgrAPSRemove
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 72)
        MOV       A,?V0
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        LCALL     `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 70)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        SJMP      ??MT_ZdoCommandProcessing_91
??MT_ZdoCommandProcessing_89:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x12
??MT_ZdoCommandProcessing_91:
        LCALL     ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_253:
        MOV       R2,#0x51
        SJMP      ??MT_ZdoCommandProcessing_75
//  488       break;
//  489 
//  490     case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
//  491       ZDApp_ForceConcentratorChange();
??MT_ZdoCommandProcessing_46:
        ; Setup parameters for call to function ZDApp_ForceConcentratorChange
        LCALL     `??ZDApp_ForceConcentratorChange::?relay`; Banked call to: ZDApp_ForceConcentratorChange
//  492       break;
        SJMP      ??MT_ZdoCommandProcessing_50
//  493 
//  494     case MT_ZDO_EXT_SET_PARAMS:
//  495       MT_ZdoExtSetParams( pBuf );
??MT_ZdoCommandProcessing_47:
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_116:
        MOV       R0,A
        MOV       C,0xE0 /* A   */.7
        JNC       ??MT_ZdoCommandProcessing_92
        MOV       A,#0x7f
        ANL       A,R0
        MOV       DPTR,#_NIB + 100
        JZ        ??MT_ZdoCommandProcessing_93
        MOV       A,#0x1
        SJMP      ??MT_ZdoCommandProcessing_94
??MT_ZdoCommandProcessing_93:
        CLR       A
??MT_ZdoCommandProcessing_94:
        MOVX      @DPTR,A
??MT_ZdoCommandProcessing_92:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,#0x53
??MT_ZdoCommandProcessing_75:
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  496       break;
        SJMP      ??MT_ZdoCommandProcessing_50
//  497 #endif  // MT_ZDO_EXTENSIONS
//  498 
//  499     default:
//  500       status = MT_RPC_ERR_COMMAND_ID;
??MT_ZdoCommandProcessing_49:
        MOV       R6,#0x2
//  501       break;
//  502   }
//  503 
//  504   return status;
??MT_ZdoCommandProcessing_50:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x36
        LJMP      ??Subroutine93_0 & 0xFFFF
//  505 }
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function MT_ZdoCommandProcessing
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        LCALL     ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_163:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function MT_ZdoCommandProcessing
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function MT_ZdoCommandProcessing
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function MT_ZdoCommandProcessing
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        LCALL     ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_169:
        MOV       ?V0,A
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function MT_ZdoCommandProcessing
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function MT_ZdoCommandProcessing
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function MT_ZdoCommandProcessing
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function MT_ZdoCommandProcessing
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_171:
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function MT_ZdoCommandProcessing
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function MT_ZdoCommandProcessing
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MT_ZdoCommandProcessing
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_ZdoCommandProcessing
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        LCALL     ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_170:
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine80:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MT_ZdoCommandProcessing
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_95
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function MT_ZdoCommandProcessing
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_96
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-4
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function MT_ZdoCommandProcessing
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_169, ??CrossCallReturnLabel_97
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-4
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_ZdoCommandProcessing
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_71
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-4
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_ZdoCommandProcessing
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_72
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-4
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function MT_ZdoCommandProcessing
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_73
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-4
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_ZdoCommandProcessing
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_74
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-4
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_ZdoCommandProcessing
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_75
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,?V0
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_ZdoCommandProcessing
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MT_ZdoCommandProcessing
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_ZdoCommandProcessing
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_ZdoCommandProcessing
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL     ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_162:
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,A
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine77:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_161
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MT_ZdoCommandProcessing
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_66
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function MT_ZdoCommandProcessing
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_67
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-4
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function MT_ZdoCommandProcessing
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_68
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-4
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MT_ZdoCommandProcessing
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_69
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-4
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function MT_ZdoCommandProcessing
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_70
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-4
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond46 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MT_ZdoCommandProcessing
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        LCALL     ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_215:
        INC       DPTR
        RET
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_184
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_ZdoBeaconIndCB
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_185
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        INC       DPTR
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51
        REQUIRE ??Subroutine87_0
        ; // Fall through to label ??Subroutine87_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine87_0:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_183
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_ZdoCommandProcessing
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_184
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function MT_ZdoBeaconIndCB
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_185
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function MT_ZdoCommandProcessing
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        LCALL     ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_145:
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine67:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function MT_ZdoCommandProcessing
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_48
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function MT_ZdoCommandProcessing
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_24
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function MT_ZdoCommandProcessing
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_25
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function MT_ZdoCommandProcessing
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_22
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function MT_ZdoCommandProcessing
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_23
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function MT_ZdoCommandProcessing
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_0
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function MT_ZdoCommandProcessing
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_1
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function MT_ZdoCommandProcessing
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_2
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function MT_ZdoCommandProcessing
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_3
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function MT_ZdoCommandProcessing
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_4
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-4
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function MT_ZdoCommandProcessing
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_5
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function MT_ZdoCommandProcessing
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_6
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function MT_ZdoCommandProcessing
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_7
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function MT_ZdoCommandProcessing
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_8
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function MT_ZdoCommandProcessing
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_9
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-4
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_ZdoCommandProcessing
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_10
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-4
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function MT_ZdoCommandProcessing
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_11
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        LCALL     ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_181:
        MOV       ?V0,A
        CLR       A
        ADDC      A,R3
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine85:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_179
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function MT_ZdoCommandProcessing
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_180
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function MT_ZdoCommandProcessing
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_47
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-6
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function MT_ZdoCommandProcessing
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_145, ??CrossCallReturnLabel_48
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-6
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function MT_ZdoCommandProcessing
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_24
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-6
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function MT_ZdoCommandProcessing
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_25
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-6
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function MT_ZdoCommandProcessing
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_22
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-6
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function MT_ZdoCommandProcessing
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_23
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-6
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function MT_ZdoCommandProcessing
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_0
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-6
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function MT_ZdoCommandProcessing
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_1
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-6
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function MT_ZdoCommandProcessing
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_2
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-6
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function MT_ZdoCommandProcessing
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_3
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-6
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function MT_ZdoCommandProcessing
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_4
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-6
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function MT_ZdoCommandProcessing
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_5
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-6
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function MT_ZdoCommandProcessing
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_6
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-6
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function MT_ZdoCommandProcessing
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_7
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-6
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function MT_ZdoCommandProcessing
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_8
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-6
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function MT_ZdoCommandProcessing
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_9
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-6
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function MT_ZdoCommandProcessing
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_10
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-6
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function MT_ZdoCommandProcessing
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_11
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-6
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function MT_ZdoSendData
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_182
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x3
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_187
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function MT_ZdoSendData
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102
        REQUIRE ??Subroutine88_0
        ; // Fall through to label ??Subroutine88_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine88_0:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
          CFI Conditional ??CrossCallReturnLabel_186
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function MT_ZdoCommandProcessing
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_187
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function MT_ZdoSendData
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        LCALL     ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_190:
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine76:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_187
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function MT_ZdoSendData
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_188
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function MT_ZdoJoinCnfCB
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_186
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function MT_ZdoConcentratorIndCB
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_12
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function MT_ZdoLeaveInd
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_13
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function MT_ZdoTcDeviceInd
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_14
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function MT_ZdoCommandProcessing
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        LCALL     ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_154:
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine71:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_153
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function MT_ZdoCommandProcessing
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_26
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function MT_ZdoCommandProcessing
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_27
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function MT_ZdoCommandProcessing
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        LCALL     ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_146:
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,A
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function MT_ZdoCommandProcessing
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        LCALL     ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_147:
        ; Setup parameters for call to function osal_build_uint32
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,A
        RET
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function MT_ZdoCommandProcessing
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function MT_ZdoCommandProcessing
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_158:
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine73:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_157
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 74)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function MT_ZdoCommandProcessing
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_15
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function MT_ZdoCommandProcessing
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_16
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function MT_ZdoCommandProcessing
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_17
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function MT_ZdoCommandProcessing
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function MT_ZdoCommandProcessing
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function MT_ZdoCommandProcessing
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function MT_ZdoCommandProcessing
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function MT_ZdoCommandProcessing
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function MT_ZdoCommandProcessing
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function MT_ZdoCommandProcessing
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function MT_ZdoCommandProcessing
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function MT_ZdoCommandProcessing
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function MT_ZdoCommandProcessing
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function MT_ZdoCommandProcessing
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        LCALL     ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_148:
        MOV       A,#0xa
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148
//  506 
//  507 /***************************************************************************************************
//  508  * @fn      MT_ZdoNwkAddrReq
//  509  *
//  510  * @brief   Handle a nwk address request.
//  511  *
//  512  * @param   pData  - MT message data
//  513  *
//  514  * @return  void
//  515  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  516 static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
MT_ZdoNWKAddressRequest:
          CFI Block cfiBlock149 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
        CODE
//  517 {
        FUNCALL MT_ZdoNWKAddressRequest, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 22
        MOV       A,#-0x16
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
//  518   uint8 cmdId;
//  519   uint8 retValue;
//  520   uint8 reqType;
//  521   uint8 startIndex;
//  522   uint8 *pExtAddr;
//  523 
//  524   /* parse header */
//  525   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
//  526   pBuf += MT_RPC_FRAME_HDR_SZ;
//  527 
//  528   /* parse parameters */
//  529   pExtAddr = pBuf;
        MOV       A,R2
        ADD       A,#0x3
        MOV       R6,A
        CLR       A
        ADDC      A,R3
        MOV       R7,A
//  530   pBuf += Z_EXTADDR_LEN;
        MOV       A,R6
        ADD       A,#0x8
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
//  531 
//  532   /* Request type */
//  533   reqType = *pBuf++;
//  534 
//  535   /* Start index */
//  536   startIndex = *pBuf;
//  537 
//  538   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV       R5,#0x0
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
        LCALL     ?Subroutine51 & 0xFFFF
//  539 
//  540   /* Build and send back the response */
//  541   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??CrossCallReturnLabel_109:
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  542 
//  543 #if defined ( MT_ZDO_EXTENSIONS )
//  544   {
//  545     // Force a response message if the ext address matches a child of this device
//  546     associated_devices_t *pAssoc;
//  547     uint8 buf[21];
//  548     uint8 *pBuf = buf;
//  549 
//  550     if ( (ZSTACK_ROUTER_BUILD)
//  551       && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
//  552              && (pAssoc->nodeRelation == CHILD_RFD)) )
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??MT_ZdoNWKAddressRequest_0
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
??MT_ZdoNWKAddressRequest_0:
        ; Setup parameters for call to function AssocGetWithExt
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
//  553     {
//  554       uint16 nwkAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V2,R2
        MOV       R0,?V2
//  555 
//  556       *pBuf++ = LO_UINT16(nwkAddr);
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R3
        MOV       R2,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
//  557       *pBuf++ = HI_UINT16(nwkAddr);
//  558       *pBuf++ = 0;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  559       *pBuf++ = LO_UINT16(NWK_addr_rsp);
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  560       *pBuf++ = HI_UINT16(NWK_addr_rsp);
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        MOVX      @DPTR,A
//  561       *pBuf++ = 0;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  562       *pBuf++ = 0;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  563       *pBuf++ = LO_UINT16(nwkAddr);
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
//  564       *pBuf++ = HI_UINT16(nwkAddr);
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
//  565 
//  566       *pBuf++ = ZSuccess;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  567 
//  568       pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  569 
//  570       *pBuf++ = LO_UINT16( pAssoc->shortAddr );
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_218:
        MOVX      @DPTR,A
//  571       *pBuf++ = HI_UINT16( pAssoc->shortAddr );
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_220:
        INC       DPTR
        LCALL     ?Subroutine56 & 0xFFFF
//  572       *pBuf = 0;
??CrossCallReturnLabel_117:
        CLR       A
        MOVX      @DPTR,A
//  573 
//  574       MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
//  575                                   MT_ZDO_MSG_CB_INCOMING, 21, buf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        INC       A
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x15
        MOV       R2,#-0x1
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  576     }
//  577   }
//  578 #endif
//  579 }
??MT_ZdoNWKAddressRequest_1:
        MOV       A,#0x16
          CFI EndBlock cfiBlock149
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock150 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock150
//  580 
//  581 /***************************************************************************************************
//  582  * @fn      MT_ZdoIEEEAddrRequest
//  583  *
//  584  * @brief   Handle a IEEE address request.
//  585  *
//  586  * @param   pData  - MT message data
//  587  *
//  588  * @return  void
//  589  ***************************************************************************************************/
//  590 static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
//  591 {
//  592   uint8 cmdId;
//  593   uint8 retValue;
//  594   uint16 shortAddr;
//  595   uint8 reqType;
//  596   uint8 startIndex;
//  597 
//  598   /* parse header */
//  599   cmdId = pBuf[MT_RPC_POS_CMD1];
//  600   pBuf += MT_RPC_FRAME_HDR_SZ;
//  601 
//  602   /* Dev address */
//  603   shortAddr = osal_build_uint16( pBuf );
//  604   pBuf += 2;
//  605 
//  606   /* request type */
//  607   reqType = *pBuf++;
//  608 
//  609   /* start index */
//  610   startIndex = *pBuf;
//  611 
//  612   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
//  613 
//  614   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  615 }
//  616 
//  617 /***************************************************************************************************
//  618  * @fn      MT_ZdoNodeDescRequest
//  619  *
//  620  * @brief   Handle a Node Descriptor request.
//  621  *
//  622  * @param   pData  - MT message data
//  623  *
//  624  * @return  void
//  625  ***************************************************************************************************/
//  626 static void MT_ZdoNodeDescRequest (uint8 *pBuf)
//  627 {
//  628   uint8 cmdId;
//  629   uint8 retValue;
//  630   zAddrType_t destAddr;
//  631   uint16 shortAddr;
//  632 
//  633   /* parse header */
//  634   cmdId = pBuf[MT_RPC_POS_CMD1];
//  635   pBuf += MT_RPC_FRAME_HDR_SZ;
//  636 
//  637   /* Destination address */
//  638   destAddr.addrMode = Addr16Bit;
//  639   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  640   pBuf += 2;
//  641 
//  642   /* Network address of interest */
//  643   shortAddr = osal_build_uint16( pBuf );
//  644 
//  645   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
//  646 
//  647   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  648 }
//  649 
//  650 /***************************************************************************************************
//  651  * @fn      MT_ZdoPowerDescRequest
//  652  *
//  653  * @brief   Handle a Power Descriptor request.
//  654  *
//  655  * @param   pData  - MT message data
//  656  *
//  657  * @return  void
//  658  ***************************************************************************************************/
//  659 static void MT_ZdoPowerDescRequest(uint8 *pBuf)
//  660 {
//  661   uint8 cmdId;
//  662   uint8 retValue;
//  663   zAddrType_t destAddr;
//  664   uint16 shortAddr;
//  665 
//  666   /* parse header */
//  667   cmdId = pBuf[MT_RPC_POS_CMD1];
//  668   pBuf += MT_RPC_FRAME_HDR_SZ;
//  669 
//  670   /* Dev address */
//  671   destAddr.addrMode = Addr16Bit;
//  672   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  673   pBuf += 2;
//  674 
//  675   /* Network address of interest */
//  676   shortAddr = osal_build_uint16( pBuf );
//  677 
//  678   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
//  679 
//  680   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  681 }
//  682 
//  683 /***************************************************************************************************
//  684  * @fn      MT_ZdoSimpleDescRequest
//  685  *
//  686  * @brief   Handle a Simple Descriptor request.
//  687  *
//  688  * @param   pBuf  - MT message data
//  689  *
//  690  * @return  void
//  691  ***************************************************************************************************/
//  692 static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
//  693 {
//  694   uint8 cmdId;
//  695   uint8 retValue;
//  696   uint8 epInt;
//  697   zAddrType_t destAddr;
//  698   uint16 shortAddr;
//  699 
//  700   /* parse header */
//  701   cmdId = pBuf[MT_RPC_POS_CMD1];
//  702   pBuf += MT_RPC_FRAME_HDR_SZ;
//  703 
//  704   /* Dev address */
//  705   destAddr.addrMode = Addr16Bit;
//  706   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  707   pBuf += 2;
//  708 
//  709   /* Network address of interest */
//  710   shortAddr = osal_build_uint16( pBuf );
//  711   pBuf += 2;
//  712 
//  713   /* endpoint/interface */
//  714   epInt = *pBuf;
//  715 
//  716   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
//  717 
//  718   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  719 }
//  720 
//  721 /***************************************************************************************************
//  722  * @fn      MT_ZdoActiveEpRequest
//  723  *
//  724  * @brief   Handle a Active EP request.
//  725  *
//  726  * @param   pBuf  - MT message data
//  727  *
//  728  * @return  void
//  729  ***************************************************************************************************/
//  730 static void MT_ZdoActiveEpRequest(uint8 *pBuf)
//  731 {
//  732   uint8 cmdId;
//  733   uint8 retValue;
//  734   zAddrType_t destAddr;
//  735   uint16 shortAddr;
//  736 
//  737   /* parse header */
//  738   cmdId = pBuf[MT_RPC_POS_CMD1];
//  739   pBuf += MT_RPC_FRAME_HDR_SZ;
//  740 
//  741   /* Dev address */
//  742   destAddr.addrMode = Addr16Bit;
//  743   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  744   pBuf += 2;
//  745 
//  746   /* Network address of interest */
//  747   shortAddr = osal_build_uint16( pBuf );
//  748 
//  749   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
//  750 
//  751   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  752 }
//  753 
//  754 /***************************************************************************************************
//  755  * @fn      MT_ZdoMatchDescRequest
//  756  *
//  757  * @brief   Handle a Match Descriptor request.
//  758  *
//  759  * @param   pBuf  - MT message data
//  760  *
//  761  * @return  void
//  762  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  763 static void MT_ZdoMatchDescRequest(uint8 *pBuf)
MT_ZdoMatchDescRequest:
          CFI Block cfiBlock151 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
        CODE
//  764 {
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 74
        MOV       A,#-0x4a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
        LCALL     ?Subroutine32 & 0xFFFF
//  765   uint8 cmdId;
//  766   uint8 retValue = 0;
//  767   uint8 i, numInClusters, numOutClusters;
//  768   uint16 profileId;
//  769   zAddrType_t destAddr;
//  770   uint16 shortAddr;
//  771   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  772 
//  773   /* parse header */
//  774   cmdId = pBuf[MT_RPC_POS_CMD1];
//  775   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_195:
        JNC       ??MT_ZdoMatchDescRequest_0
        INC       R7
//  776 
//  777   /* Dev address */
//  778   destAddr.addrMode = Addr16Bit;
??MT_ZdoMatchDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine49 & 0xFFFF
//  779   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_100:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine92_0 & 0xFFFF
//  780   pBuf += 2;
??CrossCallReturnLabel_202:
        JNC       ??MT_ZdoMatchDescRequest_1
        INC       R7
//  781 
//  782   /* Network address of interest */
//  783   shortAddr = osal_build_uint16( pBuf );
??MT_ZdoMatchDescRequest_1:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
//  784   pBuf += 2;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??MT_ZdoMatchDescRequest_2
        INC       R7
//  785 
//  786   /* Profile ID */
//  787   profileId = osal_build_uint16( pBuf );
??MT_ZdoMatchDescRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
//  788   pBuf += 2;
//  789 
//  790   /* NumInClusters */
//  791   numInClusters = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoMatchDescRequest_3
        INC       R7
//  792   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
??MT_ZdoMatchDescRequest_3:
        MOV       A,?V6
        CLR       C
        SUBB      A,#0x11
        JNC       ??MT_ZdoMatchDescRequest_4
//  793   {
//  794     /* IN clusters */
//  795     for ( i = 0; i < numInClusters; i++ )
        MOV       ?V3,#0x0
??MT_ZdoMatchDescRequest_5:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V6
        JNC       ??MT_ZdoMatchDescRequest_6
//  796     {
//  797       inClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        LCALL     ?Subroutine63 & 0xFFFF
//  798       pBuf += 2;
//  799     }
??CrossCallReturnLabel_193:
        MOV       A,#0x2a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_198:
        JNC       ??MT_ZdoMatchDescRequest_7
        INC       R7
??MT_ZdoMatchDescRequest_7:
        INC       ?V3
        SJMP      ??MT_ZdoMatchDescRequest_5
//  800   }
//  801   else
//  802   {
//  803     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        MOVX      @DPTR,A
//  804   }
//  805 
//  806   /* NumOutClusters */
//  807   numOutClusters = *pBuf++;
??MT_ZdoMatchDescRequest_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V7,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  808   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR       C
        SUBB      A,#0x11
        JNC       ??MT_ZdoMatchDescRequest_8
//  809   {
//  810     /* OUT Clusters */
//  811     for ( i = 0; i < numOutClusters; i++ )
        MOV       ?V3,#0x0
??MT_ZdoMatchDescRequest_9:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V7
        JNC       ??MT_ZdoMatchDescRequest_10
//  812     {
//  813       outClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        LCALL     ?Subroutine63 & 0xFFFF
//  814       pBuf += 2;
//  815     }
??CrossCallReturnLabel_194:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_199:
        JNC       ??MT_ZdoMatchDescRequest_11
        INC       R7
??MT_ZdoMatchDescRequest_11:
        INC       ?V3
        SJMP      ??MT_ZdoMatchDescRequest_9
//  816   }
//  817   else
//  818   {
//  819     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        SJMP      ??MT_ZdoMatchDescRequest_12
//  820   }
//  821 
//  822   if ( retValue == 0 )
??MT_ZdoMatchDescRequest_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoMatchDescRequest_13
//  823   {
//  824     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  825                                        inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV       ?V3,#0x0
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 93)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 95)
        MOV       A,?V7
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 96)
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 98)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 100)
        MOV       R1,?V6
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_ZdoMatchDescRequest_12:
        MOVX      @DPTR,A
//  826   }
//  827 
//  828   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMatchDescRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V2
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  829 }
        MOV       A,#0x4a
          CFI EndBlock cfiBlock151
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock152 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 92)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock152
        REQUIRE ??Subroutine89_0
        ; // Fall through to label ??Subroutine89_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine89_0:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock153

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine63:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_193
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function MT_ZdoMatchDescRequest
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_194
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        MOV       R0,?V3
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156
        REQUIRE ??Subroutine90_0
        ; // Fall through to label ??Subroutine90_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine90_0:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_191
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_192
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function MT_ZdoMatchDescRequest
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_193
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function MT_ZdoMatchDescRequest
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_194
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOV       A,R0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        RET
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_195
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_196
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164
        REQUIRE ??Subroutine91_0
        ; // Fall through to label ??Subroutine91_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine91_0:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function MT_ZdoNwkAddrOfInterestReq
          CFI Conditional ??CrossCallReturnLabel_197
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function MT_ZdoMatchDescRequest
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_195
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_196
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168
//  830 
//  831 /***************************************************************************************************
//  832  * @fn      MT_ZdoComplexDescRequest
//  833  *
//  834  * @brief   Handle a Complex Descriptor request.
//  835  *
//  836  * @param   pBuf  - MT message data
//  837  *
//  838  * @return  void
//  839  ***************************************************************************************************/
//  840 static void MT_ZdoComplexDescRequest(uint8 *pBuf)
//  841 {
//  842   uint8 cmdId;
//  843   uint8 retValue;
//  844   zAddrType_t destAddr;
//  845   uint16 shortAddr;
//  846 
//  847   /* parse header */
//  848   cmdId = pBuf[MT_RPC_POS_CMD1];
//  849   pBuf += MT_RPC_FRAME_HDR_SZ;
//  850 
//  851   /* Dev address */
//  852   destAddr.addrMode = Addr16Bit;
//  853   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  854   pBuf += 2;
//  855 
//  856   /* Network address of interest */
//  857   shortAddr = osal_build_uint16( pBuf );
//  858 
//  859   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
//  860 
//  861   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  862 }
//  863 
//  864 /***************************************************************************************************
//  865  * @fn      MT_ZdoUserDescRequest
//  866  *
//  867  * @brief   Handle a User Descriptor request.
//  868  *
//  869  * @param   pBuf  - MT message data
//  870  *
//  871  * @return  void
//  872  ***************************************************************************************************/
//  873 static void MT_ZdoUserDescRequest(uint8 *pBuf)
//  874 {
//  875   uint8 cmdId;
//  876   uint8 retValue;
//  877   zAddrType_t destAddr;
//  878   uint16 shortAddr;
//  879 
//  880   /* parse header */
//  881   cmdId = pBuf[MT_RPC_POS_CMD1];
//  882   pBuf += MT_RPC_FRAME_HDR_SZ;
//  883 
//  884   /* Dev address */
//  885   destAddr.addrMode = Addr16Bit;
//  886   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  887   pBuf += 2;
//  888 
//  889   /* Network address of interest */
//  890   shortAddr = osal_build_uint16( pBuf );
//  891 
//  892   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
//  893 
//  894   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  895 }
//  896 
//  897 /***************************************************************************************************
//  898  * @fn      MT_ZdoEndDevAnnce
//  899  *
//  900  * @brief   Handle a End Device Announce Descriptor request.
//  901  *
//  902  * @param   pBuf  - MT message data
//  903  *
//  904  * @return  void
//  905  ***************************************************************************************************/
//  906 static void MT_ZdoEndDevAnnce(uint8 *pBuf)
//  907 {
//  908   uint8 cmdId;
//  909   uint8 retValue;
//  910   uint16 shortAddr;
//  911   uint8 *pIEEEAddr;
//  912 
//  913   /* parse header */
//  914   cmdId = pBuf[MT_RPC_POS_CMD1];
//  915   pBuf += MT_RPC_FRAME_HDR_SZ;
//  916 
//  917   /* network address */
//  918   shortAddr = osal_build_uint16( pBuf );
//  919   pBuf += 2;
//  920 
//  921   /* extended address */
//  922   pIEEEAddr = pBuf;
//  923   pBuf += Z_EXTADDR_LEN;
//  924 
//  925   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
//  926 
//  927   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  928 }
//  929 
//  930 /***************************************************************************************************
//  931  * @fn      MT_ZdoUserDescSet
//  932  *
//  933  * @brief   Handle a User Descriptor Set.
//  934  *
//  935  * @param   pBuf  - MT message data
//  936  *
//  937  * @return  void
//  938  ***************************************************************************************************/
//  939 static void MT_ZdoUserDescSet(uint8 *pBuf)
//  940 {
//  941   uint8 cmdId;
//  942   uint8 retValue;
//  943   zAddrType_t destAddr;
//  944   uint16 shortAddr;
//  945   UserDescriptorFormat_t userDesc;
//  946 
//  947   /* parse header */
//  948   cmdId = pBuf[MT_RPC_POS_CMD1];
//  949   pBuf += MT_RPC_FRAME_HDR_SZ;
//  950 
//  951   /* Dev address */
//  952   destAddr.addrMode = Addr16Bit;
//  953   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  954   pBuf += 2;
//  955 
//  956   /* Network address of interest */
//  957   shortAddr = osal_build_uint16( pBuf );
//  958   pBuf += 2;
//  959 
//  960   /* User descriptor */
//  961   userDesc.len = *pBuf++;
//  962   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
//  963 
//  964   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
//  965 
//  966   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  967 }
//  968 
//  969 /***************************************************************************************************
//  970  * @fn      MT_ZdoServiceDiscRequest
//  971  *
//  972  * @brief   Handle a Server Discovery request.
//  973  *
//  974  * @param   pBuf  - MT message data
//  975  *
//  976  * @return  void
//  977  ***************************************************************************************************/
//  978 static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
//  979 {
//  980   uint8 cmdId;
//  981   uint8 retValue;
//  982   uint16 serviceMask;
//  983 
//  984   /* parse header */
//  985   cmdId = pBuf[MT_RPC_POS_CMD1];
//  986   pBuf += MT_RPC_FRAME_HDR_SZ;
//  987 
//  988   /* Service Mask */
//  989   serviceMask = osal_build_uint16( pBuf );
//  990 
//  991   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
//  992 
//  993   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  994 }
//  995 
//  996 /***************************************************************************************************
//  997  * @fn      MT_ZdoEndDevBindRequest
//  998  *
//  999  * @brief   Handle a End Device Bind request.
// 1000  *
// 1001  * @param   pBuf  - MT message data
// 1002  *
// 1003  * @return  void
// 1004  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1005 static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
MT_ZdoEndDevBindRequest:
          CFI Block cfiBlock169 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
        CODE
// 1006 {
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 99, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 99, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 70
        MOV       A,#-0x46
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 90)
        LCALL     ?Subroutine32 & 0xFFFF
// 1007   uint8 cmdId;
// 1008   uint8 retValue = 0;
// 1009   uint8 i, epInt, numInClusters, numOutClusters;
// 1010   zAddrType_t destAddr;
// 1011   uint16 shortAddr;
// 1012   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
// 1013 
// 1014   /* parse header */
// 1015   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1016   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_196:
        JNC       ??MT_ZdoEndDevBindRequest_0
        INC       R7
// 1017 
// 1018   /* Dev address */
// 1019   destAddr.addrMode = Addr16Bit;
??MT_ZdoEndDevBindRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine49 & 0xFFFF
// 1020   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_101:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine92_0 & 0xFFFF
// 1021   pBuf += 2;
??CrossCallReturnLabel_203:
        JNC       ??MT_ZdoEndDevBindRequest_1
        INC       R7
// 1022 
// 1023   /* Local coordinator of the binding */
// 1024   shortAddr = osal_build_uint16( pBuf );
??MT_ZdoEndDevBindRequest_1:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1025   pBuf += 2;
// 1026 
// 1027   /* For now, skip past the extended address */
// 1028   pBuf += Z_EXTADDR_LEN;
// 1029 
// 1030   /* Endpoint */
// 1031   epInt = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R6
        ADD       A,#0xb
        MOV       R6,A
        JNC       ??MT_ZdoEndDevBindRequest_2
        INC       R7
// 1032 
// 1033   /* Profile ID */
// 1034   profileID = osal_build_uint16( pBuf );
??MT_ZdoEndDevBindRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V6,R2
        MOV       ?V7,R3
// 1035   pBuf += 2;
// 1036 
// 1037   /* NumInClusters */
// 1038   numInClusters = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoEndDevBindRequest_3
        INC       R7
// 1039   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
??MT_ZdoEndDevBindRequest_3:
        MOV       A,?V4
        CLR       C
        SUBB      A,#0x10
        JNC       ??MT_ZdoEndDevBindRequest_4
// 1040   {
// 1041     for ( i = 0; i < numInClusters; i++ )
        MOV       ?V5,#0x0
??MT_ZdoEndDevBindRequest_5:
        MOV       A,?V5
        CLR       C
        SUBB      A,?V4
        JNC       ??MT_ZdoEndDevBindRequest_6
// 1042     {
// 1043       inClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       R0,?V5
        LCALL     ??Subroutine90_0 & 0xFFFF
// 1044       pBuf += 2;
// 1045     }
??CrossCallReturnLabel_191:
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_200:
        JNC       ??MT_ZdoEndDevBindRequest_7
        INC       R7
??MT_ZdoEndDevBindRequest_7:
        INC       ?V5
        SJMP      ??MT_ZdoEndDevBindRequest_5
// 1046   }
// 1047   else
// 1048   {
// 1049     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        MOVX      @DPTR,A
// 1050   }
// 1051 
// 1052   /* NumOutClusters */
// 1053   numOutClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1054   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR       C
        SUBB      A,#0x10
        JNC       ??MT_ZdoEndDevBindRequest_8
// 1055   {
// 1056     for ( i = 0; i < numOutClusters; i++ )
        MOV       ?V5,#0x0
??MT_ZdoEndDevBindRequest_9:
        MOV       A,?V5
        CLR       C
        SUBB      A,?V8
        JNC       ??MT_ZdoEndDevBindRequest_10
// 1057     {
// 1058       outClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       R0,?V5
        LCALL     ??Subroutine90_0 & 0xFFFF
// 1059       pBuf += 2;
// 1060     }
??CrossCallReturnLabel_192:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_201:
        JNC       ??MT_ZdoEndDevBindRequest_11
        INC       R7
??MT_ZdoEndDevBindRequest_11:
        INC       ?V5
        SJMP      ??MT_ZdoEndDevBindRequest_9
// 1061   }
// 1062   else
// 1063   {
// 1064     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        SJMP      ??MT_ZdoEndDevBindRequest_12
// 1065   }
// 1066 
// 1067   if ( retValue == 0 )
??MT_ZdoEndDevBindRequest_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoEndDevBindRequest_13
// 1068   {
// 1069     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
// 1070                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV       ?V5,#0x0
        MOV       R0,#?V5
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 91)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV       A,?V8
        MOV       ?V5,A
        MOV       R0,#?V5
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x2c
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 96)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 97)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 99)
        MOV       R1,?V3
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 90)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_ZdoEndDevBindRequest_12:
        MOVX      @DPTR,A
// 1071   }
// 1072 
// 1073   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoEndDevBindRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V2
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1074 }
        MOV       A,#0x46
          CFI EndBlock cfiBlock169
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock170 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 90)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Valid
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock170

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_198
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function MT_ZdoMatchDescRequest
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_199
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_200
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_201
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        MOV       A,DPL
        ADD       A,R0
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R1
        MOV       DPH,A
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175
        REQUIRE ??Subroutine92_0
        ; // Fall through to label ??Subroutine92_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine92_0:
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_202
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_203
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_204
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function MT_ZdoMatchDescRequest
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_198
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function MT_ZdoMatchDescRequest
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_199
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_200
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_201
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        RET
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183
// 1075 
// 1076 /***************************************************************************************************
// 1077  * @fn      MT_ZdoBindRequest
// 1078  *
// 1079  * @brief   Handle a Bind request.
// 1080  *
// 1081  * @param   pBuf  - MT message data
// 1082  *
// 1083  * @return  void
// 1084  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1085 static void MT_ZdoBindRequest(uint8 *pBuf)
MT_ZdoBindRequest:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
        CODE
// 1086 {
        FUNCALL MT_ZdoBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine30 & 0xFFFF
// 1087   uint8 cmdId;
// 1088   uint8 retValue;
// 1089   zAddrType_t destAddr, devAddr;
// 1090   uint8 *pSrcAddr, *ptr;
// 1091   uint8 srcEPInt, dstEPInt;
// 1092   uint16 clusterID;
// 1093 
// 1094   /* parse header */
// 1095   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1096   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_49:
        JNC       ??MT_ZdoBindRequest_0
        INC       R7
// 1097 
// 1098   /* Dev address */
// 1099   destAddr.addrMode = Addr16Bit;
??MT_ZdoBindRequest_0:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine49 & 0xFFFF
// 1100   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_102:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
// 1101   pBuf += 2;
// 1102 
// 1103   /* SrcAddress */
// 1104   pSrcAddr = pBuf;
// 1105   pBuf += Z_EXTADDR_LEN;
// 1106 
// 1107   /* SrcEPInt */
// 1108   srcEPInt = *pBuf++;
// 1109 
// 1110   /* ClusterID */
// 1111   clusterID = osal_build_uint16( pBuf );
??CrossCallReturnLabel_45:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
// 1112   pBuf += 2;
// 1113 
// 1114   /* Destination Address mode */
// 1115   devAddr.addrMode = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoBindRequest_1
        INC       R7
// 1116 
// 1117   /* Destination Address */
// 1118   if ( devAddr.addrMode == Addr64Bit )
??MT_ZdoBindRequest_1:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_ZdoBindRequest_2
// 1119   {
// 1120     ptr = pBuf;
// 1121     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??CrossCallReturnLabel_125
// 1122   }
// 1123   else
// 1124   {
// 1125     devAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_ZdoBindRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine58 & 0xFFFF
// 1126   }
// 1127   /* The short address occupies LSB two bytes */
// 1128   pBuf += Z_EXTADDR_LEN;
// 1129 
// 1130   /* DstEPInt */
// 1131   dstEPInt = *pBuf;
// 1132 
// 1133   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??CrossCallReturnLabel_125:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV       ?V6,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_207:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R1,?V1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x21
          CFI EndBlock cfiBlock184
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1134 
// 1135   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1136 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R3,#0x0
        LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV       A,#0x13
          CFI EndBlock cfiBlock185
        REQUIRE ??Subroutine93_0
        ; // Fall through to label ??Subroutine93_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine93_0:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 70)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock186

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond187 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_109
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function MT_ZdoBindRequest
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function MT_ZdoUnbindRequest
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V0
        MOV       R1,#0x65
        RET
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond191 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_100
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function MT_ZdoBindRequest
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function MT_ZdoUnbindRequest
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker196 Using cfiCommon1
          CFI (cfiPicker196) NoFunction
          CFI (cfiPicker196) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       A,R7
        MOV       R3,A
        RET
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiPicker196

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond197 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_207
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function MT_ZdoUnbindRequest
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_208
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) Picker
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199
        REQUIRE ??Subroutine94_0
        ; // Fall through to label ??Subroutine94_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine94_0:
          CFI Block cfiCond200 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_205
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function MT_ZdoCommandProcessing
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 71)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function MT_ZdoBindRequest
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_207
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function MT_ZdoUnbindRequest
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_208
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker204 Using cfiCommon1
          CFI (cfiPicker204) NoFunction
          CFI (cfiPicker204) Picker
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       R0,#?V6
        RET
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiPicker204
// 1137 
// 1138 /***************************************************************************************************
// 1139  * @fn      MT_ZdoUnbindRequest
// 1140  *
// 1141  * @brief   Handle a Unbind request.
// 1142  *
// 1143  * @param   pBuf  - MT message data
// 1144  *
// 1145  * @return  void
// 1146  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1147 static void MT_ZdoUnbindRequest(uint8 *pBuf)
MT_ZdoUnbindRequest:
          CFI Block cfiBlock205 Using cfiCommon0
          CFI Function MT_ZdoUnbindRequest
        CODE
// 1148 {
        FUNCALL MT_ZdoUnbindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine30 & 0xFFFF
// 1149   uint8 cmdId;
// 1150   uint8 retValue;
// 1151   zAddrType_t destAddr, devAddr;
// 1152   uint8 *pSrcAddr, *ptr;
// 1153   uint8 srcEPInt, dstEPInt;
// 1154   uint16 clusterID;
// 1155 
// 1156   /* parse header */
// 1157   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1158   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_50:
        JNC       ??MT_ZdoUnbindRequest_0
        INC       R7
// 1159 
// 1160   /* dev address */
// 1161   destAddr.addrMode = Addr16Bit;
??MT_ZdoUnbindRequest_0:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine49 & 0xFFFF
// 1162   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_103:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
// 1163   pBuf += 2;
// 1164 
// 1165   /* SrcAddress */
// 1166   pSrcAddr = pBuf;
// 1167   pBuf += Z_EXTADDR_LEN;
// 1168 
// 1169   /* SrcEPInt */
// 1170   srcEPInt = *pBuf++;
// 1171 
// 1172   /* ClusterID */
// 1173   clusterID = osal_build_uint16( pBuf );
??CrossCallReturnLabel_46:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
// 1174   pBuf += 2;
// 1175 
// 1176   /* Destination Address mode */
// 1177   devAddr.addrMode = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoUnbindRequest_1
        INC       R7
// 1178 
// 1179   /* Destination Address */
// 1180   if ( devAddr.addrMode == Addr64Bit )
??MT_ZdoUnbindRequest_1:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_ZdoUnbindRequest_2
// 1181   {
// 1182     ptr = pBuf;
// 1183     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??CrossCallReturnLabel_126
// 1184   }
// 1185   else
// 1186   {
// 1187     devAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_ZdoUnbindRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine58 & 0xFFFF
// 1188   }
// 1189   /* The short address occupies LSB two bytes */
// 1190   pBuf += Z_EXTADDR_LEN;
// 1191 
// 1192   /* dstEPInt */
// 1193   dstEPInt = *pBuf;
// 1194 
// 1195   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??CrossCallReturnLabel_126:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV       ?V6,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_208:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R1,?V1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x22
        LJMP      ?Subroutine1 & 0xFFFF
// 1196 
// 1197   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1198 }
          CFI EndBlock cfiBlock205

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function MT_ZdoUnbindRequest
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function MT_ZdoUnbindRequest
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        MOV       A,?V2
        ADD       A,#0x8
        MOV       R6,A
        CLR       A
        ADDC      A,?V3
        MOV       R7,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V1,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        RET
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212
// 1199 
// 1200 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1201 /***************************************************************************************************
// 1202  * @fn      MT_ZdoSetLinkKey
// 1203  *
// 1204  * @brief   Set an application or trust center link key.
// 1205  *
// 1206  * @param   pBuf  - MT message data
// 1207  *
// 1208  * @return  void
// 1209  ***************************************************************************************************/
// 1210 static void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1211 {
// 1212   uint8 cmdId;
// 1213   uint8 retValue;
// 1214   uint8 *pExtAddr;
// 1215   uint8 *pKey;
// 1216   uint16 shortAddr;
// 1217 
// 1218   /* parse header */
// 1219   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1220   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1221 
// 1222   /* ShortAddr */
// 1223   shortAddr = osal_build_uint16( pBuf );
// 1224   pBuf += 2;
// 1225 
// 1226   /* Extended Addr */
// 1227   pExtAddr = pBuf;
// 1228   pBuf += Z_EXTADDR_LEN;
// 1229 
// 1230   /* Key data */
// 1231   pKey = pBuf;
// 1232 
// 1233   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1234 
// 1235   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1236 }
// 1237 
// 1238 /***************************************************************************************************
// 1239  * @fn      MT_ZdoRemoveLinkKey
// 1240  *
// 1241  * @brief   Remove an application or trust center link key.
// 1242  *
// 1243  * @param   pBuf  - MT message data
// 1244  *
// 1245  * @return  void
// 1246  ***************************************************************************************************/
// 1247 static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1248 {
// 1249   uint8 cmdId;
// 1250   uint8 retValue;
// 1251   uint8 *pExtAddr;
// 1252 
// 1253   /* parse header */
// 1254   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1255   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1256 
// 1257   /* ShortAddr */
// 1258   pExtAddr = pBuf;
// 1259 
// 1260   retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1261 
// 1262   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1263 }
// 1264 
// 1265 /***************************************************************************************************
// 1266  * @fn      MT_ZdoGetLinkKey
// 1267  *
// 1268  * @brief   Get the application link key.
// 1269  *
// 1270  * @param   pBuf  - MT message data
// 1271  *
// 1272  * @return  void
// 1273  ***************************************************************************************************/
// 1274 static void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1275 {
// 1276   uint8 cmdId;
// 1277   uint8 retValue;
// 1278   uint8 *pExtAddr;
// 1279   uint8 *retBuf = NULL;
// 1280   uint8 len;
// 1281   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1282   uint16 apsLinkKeyNvId;
// 1283 
// 1284   // parse header
// 1285   len = pBuf[MT_RPC_POS_LEN];
// 1286   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1287   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1288 
// 1289   // Extended Address
// 1290   pExtAddr = pBuf;
// 1291 
// 1292   // Check for illegal extended address -- indicating network address lookup
// 1293   if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
// 1294        ( len >= Z_EXTADDR_LEN )            )
// 1295   {
// 1296     uint16 nwkAddr;
// 1297     nwkAddr = osal_build_uint16( pExtAddr );
// 1298     (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
// 1299   }
// 1300 
// 1301   // Fetch the key NV ID
// 1302   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1303 
// 1304   if (retValue == ZSuccess)
// 1305   {
// 1306     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1307     {
// 1308       // retrieve key from NV
// 1309       if (osal_nv_read( apsLinkKeyNvId, 0,
// 1310                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1311       {
// 1312         retValue = ZNwkUnknownDevice;
// 1313       }
// 1314     }
// 1315     else
// 1316     {
// 1317       retValue = ZNwkUnknownDevice;
// 1318     }
// 1319   }
// 1320 
// 1321   // Construct the response message
// 1322   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1323   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1324   {
// 1325     if (retValue == ZSuccess)
// 1326     {
// 1327       // Extended Address
// 1328       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1329 
// 1330       // Key data
// 1331       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
// 1332     }
// 1333     else
// 1334     {
// 1335       // Failed case - set the rest fields to all FF
// 1336       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
// 1337     }
// 1338 
// 1339     retBuf[0] = retValue;  // Status
// 1340 
// 1341     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1342 
// 1343     // clear retBuf because it contains key data and free allocated memory
// 1344     osal_memset(retBuf, 0x00, len);
// 1345 
// 1346     osal_mem_free(retBuf);
// 1347   }
// 1348 
// 1349   // clear copy of key in RAM
// 1350   if (pApsLinkKey != NULL)
// 1351   {
// 1352     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1353 
// 1354     osal_mem_free(pApsLinkKey);
// 1355   }
// 1356 
// 1357   return;
// 1358 }
// 1359 #endif // MT_SYS_KEY_MANAGEMENT
// 1360 
// 1361 #if defined (MT_ZDO_MGMT)
// 1362 /***************************************************************************************************
// 1363  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1364  *
// 1365  * @brief   Handle a Mgmt Nwk Discovery request.
// 1366  *
// 1367  * @param   pBuf  - MT message data
// 1368  *
// 1369  * @return  void
// 1370  ***************************************************************************************************/
// 1371 static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1372 {
// 1373   uint8 cmdId;
// 1374   uint8 retValue;
// 1375   zAddrType_t destAddr;
// 1376   uint32 scanChannels;
// 1377   uint8 scanDuration, startIndex;
// 1378 
// 1379   /* parse header */
// 1380   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1381   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1382 
// 1383   /* Dev address */
// 1384   destAddr.addrMode = Addr16Bit;
// 1385   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1386   pBuf += 2;
// 1387 
// 1388   /* Scan Channels */
// 1389   scanChannels = osal_build_uint32(pBuf, 4);
// 1390   pBuf += 4;
// 1391 
// 1392   /* Scan Duration */
// 1393   scanDuration = *pBuf++;
// 1394 
// 1395   /* Start Index */
// 1396   startIndex = *pBuf;
// 1397 
// 1398   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1399 
// 1400   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1401 }
// 1402 
// 1403 /***************************************************************************************************
// 1404  * @fn      MT_ZdoMgmtLqiRequest
// 1405  *
// 1406  * @brief   Handle a Mgmt Lqi request.
// 1407  *
// 1408  * @param   pBuf  - MT message data
// 1409  *
// 1410  * @return  void
// 1411  ***************************************************************************************************/
// 1412 static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1413 {
// 1414   uint8 cmdId;
// 1415   uint8 retValue;
// 1416   zAddrType_t destAddr;
// 1417   uint8 startIndex;
// 1418 
// 1419   /* parse header */
// 1420   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1421   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1422 
// 1423   /* Dev address */
// 1424   destAddr.addrMode = Addr16Bit;
// 1425   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1426   pBuf += 2;
// 1427 
// 1428   /* Start Index */
// 1429   startIndex = *pBuf;
// 1430 
// 1431   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1432 
// 1433   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1434 }
// 1435 
// 1436 /***************************************************************************************************
// 1437  * @fn      MT_ZdoMgmtRtgRequest
// 1438  *
// 1439  * @brief   Handle a Mgmt Rtg request.
// 1440  *
// 1441  * @param   pBuf  - MT message data
// 1442  *
// 1443  * @return  void
// 1444  ***************************************************************************************************/
// 1445 static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1446 {
// 1447   uint8 cmdId;
// 1448   uint8 retValue;
// 1449   zAddrType_t destAddr;
// 1450   uint8 startIndex;
// 1451 
// 1452   /* parse header */
// 1453   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1454   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1455 
// 1456   /* Dev Address */
// 1457   destAddr.addrMode = Addr16Bit;
// 1458   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1459   pBuf += 2;
// 1460 
// 1461   /* Start Index */
// 1462   startIndex = *pBuf;
// 1463 
// 1464   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1465 
// 1466   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1467 }
// 1468 
// 1469 /***************************************************************************************************
// 1470  * @fn      MT_ZdoMgmtBindRequest
// 1471  *
// 1472  * @brief   Handle a Mgmt Bind request.
// 1473  *
// 1474  * @param   pBuf  - MT message data
// 1475  *
// 1476  * @return  void
// 1477  ***************************************************************************************************/
// 1478 static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1479 {
// 1480   uint8 cmdId;
// 1481   uint8 retValue;
// 1482   zAddrType_t destAddr;
// 1483   uint8 startIndex;
// 1484 
// 1485   /* parse header */
// 1486   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1487   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1488 
// 1489   /* Dev Address */
// 1490   destAddr.addrMode = Addr16Bit;
// 1491   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1492   pBuf += 2;
// 1493 
// 1494   /* Start Index */
// 1495   startIndex = *pBuf;
// 1496 
// 1497   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1498 
// 1499   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1500 }
// 1501 
// 1502 /***************************************************************************************************
// 1503  * @fn      MT_ZdoMgmtLeaveRequest
// 1504  *
// 1505  * @brief   Handle a Mgmt Leave request.
// 1506  *
// 1507  * @param   pBuf  - MT message data
// 1508  *
// 1509  * @return  void
// 1510  ***************************************************************************************************/
// 1511 static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1512 {
// 1513   uint8 cmdId;
// 1514   uint8 retValue;
// 1515   zAddrType_t destAddr;
// 1516   uint8 *pIEEEAddr;
// 1517   uint8 removeChildren;
// 1518   uint8 rejoin;
// 1519 
// 1520   /* parse header */
// 1521   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1522   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1523 
// 1524   /* Destination Address */
// 1525   destAddr.addrMode = Addr16Bit;
// 1526   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1527   pBuf += 2;
// 1528 
// 1529   /* IEEE address */
// 1530   pIEEEAddr = pBuf;
// 1531   pBuf += Z_EXTADDR_LEN;
// 1532 
// 1533   /* Rejoin if bit0 is set */
// 1534   rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
// 1535 
// 1536   /* Remove Children if bit1 is set */
// 1537   removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
// 1538 
// 1539   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1540 
// 1541   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1542 }
// 1543 
// 1544 /***************************************************************************************************
// 1545  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1546  *
// 1547  * @brief   Handle a Mgmt Direct Join request.
// 1548  *
// 1549  * @param   pBuf  - MT message data
// 1550  *
// 1551  * @return  void
// 1552  ***************************************************************************************************/
// 1553 static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1554 {
// 1555   uint8 cmdId;
// 1556   uint8 retValue;
// 1557   zAddrType_t destAddr;
// 1558   uint8 *deviceAddr;
// 1559   uint8 capInfo;
// 1560 
// 1561   /* parse header */
// 1562   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1563   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1564 
// 1565   /* Destination Address */
// 1566   destAddr.addrMode = Addr16Bit;
// 1567   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1568   pBuf += 2;
// 1569 
// 1570   /* Device Address */
// 1571   deviceAddr = pBuf;
// 1572   pBuf += Z_EXTADDR_LEN;
// 1573 
// 1574   /* Capability information */
// 1575   capInfo = *pBuf;
// 1576 
// 1577   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1578 
// 1579   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1580 }
// 1581 
// 1582 /***************************************************************************************************
// 1583  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1584  *
// 1585  * @brief   Handle a Mgmt Permit Join request.
// 1586  *
// 1587  * @param   pBuf  - MT message data
// 1588  *
// 1589  * @return  void
// 1590  ***************************************************************************************************/
// 1591 static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1592 {
// 1593   uint8 cmdId;
// 1594   uint8 dataLn;
// 1595   uint8 retValue;
// 1596   uint8 duration;
// 1597   uint8 tcSignificance;
// 1598   zAddrType_t destAddr;
// 1599 
// 1600   /* parse header */
// 1601   dataLn = pBuf[MT_RPC_POS_LEN];
// 1602   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1603   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1604 
// 1605   if ( 4 == dataLn )
// 1606   {
// 1607     /* addrMode was hardwired up to Z-Stack 2.6.0 */
// 1608     destAddr.addrMode = afAddr16Bit;
// 1609   }
// 1610   else
// 1611   {
// 1612     /* addrMode is a parameter after Z-Stack 2.6.0 */
// 1613     destAddr.addrMode = *pBuf++;
// 1614   }
// 1615 
// 1616   /* Destination Address */
// 1617   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1618   pBuf += 2;
// 1619 
// 1620   /* Duration */
// 1621   duration = *pBuf++;
// 1622 
// 1623   /* Trust center significance */
// 1624   tcSignificance = *pBuf;
// 1625 
// 1626   ignoreIndication = TRUE;
// 1627   retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1628   ignoreIndication = FALSE;
// 1629 
// 1630   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1631 }
// 1632 
// 1633 /***************************************************************************************************
// 1634  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1635  *
// 1636  * @brief   Handle a Mgmt Nwk Update request.
// 1637  *
// 1638  * @param   pBuf  - MT message data
// 1639  *
// 1640  * @return  void
// 1641  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1642 static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
MT_ZdoMgmtNwkUpdateRequest:
          CFI Block cfiBlock213 Using cfiCommon0
          CFI Function MT_ZdoMgmtNwkUpdateRequest
        CODE
// 1643 {
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, ZDP_MgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, ZDP_MgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        LCALL     ?Subroutine30 & 0xFFFF
// 1644   uint8 cmdId;
// 1645   uint8 retValue;
// 1646   zAddrType_t destAddr;
// 1647   uint32 channelMask;
// 1648   uint8 scanDuration, scanCount;
// 1649   uint16 nwkManagerAddr;
// 1650 
// 1651     /* parse header */
// 1652   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1653   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_51:
        JNC       ??MT_ZdoMgmtNwkUpdateRequest_0
        INC       R7
// 1654 
// 1655   /* Destination address */
// 1656   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_ZdoMgmtNwkUpdateRequest_0:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine58 & 0xFFFF
// 1657   pBuf += 2;
// 1658 
// 1659   /* Destination address mode */
// 1660   destAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_127:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoMgmtNwkUpdateRequest_1
        INC       R7
// 1661 
// 1662   channelMask = osal_build_uint32(pBuf, 4);
??MT_ZdoMgmtNwkUpdateRequest_1:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
// 1663   pBuf += 4;
// 1664 
// 1665   /* Scan duration */
// 1666   scanDuration = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1667 
// 1668   /* Scan count */
// 1669   scanCount = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
// 1670 
// 1671   /* NWK manager address */
// 1672   nwkManagerAddr = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V8,R2
        MOV       ?V9,R3
// 1673 
// 1674   /* Send the Management Network Update request */
// 1675   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1676                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1677 
// 1678   /*
// 1679     Since we don't recevied our own broadcast messages, we should
// 1680     send a unicast copy of the message to ourself.
// 1681   */
// 1682   if ( destAddr.addrMode == AddrBroadcast )
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??MT_ZdoMgmtNwkUpdateRequest_2
// 1683   {
// 1684     destAddr.addrMode = Addr16Bit;
        LCALL     ?Subroutine23 & 0xFFFF
// 1685     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_209:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1686     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1687                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine38 & 0xFFFF
// 1688   }
??CrossCallReturnLabel_59:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1689 
// 1690   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMgmtNwkUpdateRequest_2:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V0
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1691 }
        MOV       A,#0xa
        LJMP      ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock213

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine58:
          CFI Block cfiCond214 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function MT_ZdoBindRequest
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function MT_ZdoUnbindRequest
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function MT_ZdoSendData
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function MT_ZdoBeaconIndCB
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker220 Using cfiCommon1
          CFI (cfiPicker220) NoFunction
          CFI (cfiPicker220) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiPicker220

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond221 Using cfiCommon0
          CFI Function MT_ZdoMgmtNwkUpdateRequest
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker223 Using cfiCommon1
          CFI (cfiPicker223) NoFunction
          CFI (cfiPicker223) Picker
        MOV       DPTR,#_NIB + 109
        MOVX      A,@DPTR
        INC       A
        MOV       R5,A
        MOV       R4,?V2
        MOV       R1,?V1
        MOV       A,#0x7
        RET
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiPicker223
// 1692 #endif /* MT_ZDO_MGMT */
// 1693 
// 1694 /***************************************************************************************************
// 1695  * @fn      MT_ZdoSendData
// 1696  *
// 1697  * @brief   Handle a ZDO Send Data request.
// 1698  *
// 1699  * @param   pBuf  - MT message data
// 1700  *
// 1701  * @return  void
// 1702  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1703 static void MT_ZdoSendData( uint8 *pBuf )
MT_ZdoSendData:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function MT_ZdoSendData
        CODE
// 1704 {
        FUNCALL MT_ZdoSendData, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V1,R3
// 1705   uint8 cmdId;
// 1706   uint8 retValue;
// 1707   zAddrType_t destAddr;
// 1708   uint8 transSeq;
// 1709   uint8 len;
// 1710   uint16 cmd;
// 1711 
// 1712     /* parse header */
// 1713   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ?Subroutine85 & 0xFFFF
// 1714   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_182:
        MOV       ?V0,A
        JNC       ??MT_ZdoSendData_0
        INC       ?V1
// 1715 
// 1716   /* Destination address */
// 1717   destAddr.addrMode = Addr16Bit;
??MT_ZdoSendData_0:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine45 & 0xFFFF
// 1718   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_93:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine58 & 0xFFFF
// 1719   pBuf += 2;
// 1720 
// 1721   /* Destination address mode */
// 1722   transSeq = *pBuf++;
??CrossCallReturnLabel_128:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_188:
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_ZdoSendData_1
        INC       ?V1
// 1723 
// 1724   /* cmd */
// 1725   cmd = osal_build_uint16( pBuf );
??MT_ZdoSendData_1:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
// 1726   pBuf += 2;
// 1727   len = *pBuf++;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_ZdoSendData_2
        INC       ?V1
// 1728 
// 1729   /* Send the Generic ZDO message request */
// 1730   retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
??MT_ZdoSendData_2:
        ; Setup parameters for call to function ZDP_SendData
        MOV       ?V4,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 1731   /*
// 1732     Since we don't recevied our own broadcast messages, we should
// 1733     send a unicast copy of the message to ourself.
// 1734   */
// 1735   if ( destAddr.addrMode == AddrBroadcast )
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??MT_ZdoSendData_3
// 1736   {
// 1737     destAddr.addrMode = Addr16Bit;
        LCALL     ?Subroutine23 & 0xFFFF
// 1738     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_210:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1739     retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
        ; Setup parameters for call to function ZDP_SendData
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 1740   }
// 1741 
// 1742   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoSendData_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x1
        MOV       A,R7
        MOV       R2,A
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1743 }
        MOV       A,#0xb
        LJMP      ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock224

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function MT_ZdoCommandProcessing
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function MT_ZdoCommandProcessing
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function MT_ZdoCommandProcessing
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function MT_ZdoCommandProcessing
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function MT_ZdoCommandProcessing
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function MT_ZdoCommandProcessing
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function MT_ZdoCommandProcessing
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function MT_ZdoCommandProcessing
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function MT_ZdoCommandProcessing
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function MT_ZdoCommandProcessing
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function MT_ZdoCommandProcessing
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-2
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function MT_ZdoSendData
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function MT_ZdoMgmtNwkUpdateRequest
          CFI Conditional ??CrossCallReturnLabel_209
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function MT_ZdoSendData
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker242 Using cfiCommon1
          CFI (cfiPicker242) NoFunction
          CFI (cfiPicker242) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiPicker242
        REQUIRE ??Subroutine95_0
        ; // Fall through to label ??Subroutine95_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine95_0:
          CFI Block cfiCond243 Using cfiCommon0
          CFI Function MT_ZdoExtNwkInfo
          CFI Conditional ??CrossCallReturnLabel_214
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_209
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function MT_ZdoSendData
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker247 Using cfiCommon1
          CFI (cfiPicker247) NoFunction
          CFI (cfiPicker247) Picker
        MOV       DPTR,#_NIB + 20
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiPicker247
        REQUIRE ??Subroutine96_0
        ; // Fall through to label ??Subroutine96_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine96_0:
          CFI Block cfiCond248 Using cfiCommon0
          CFI Function MT_ZdoExtNwkInfo
          CFI Conditional ??CrossCallReturnLabel_212
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function MT_ZdoExtNwkInfo
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_213
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-2
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function MT_ZdoExtNwkInfo
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_214
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+-2
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_209
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function MT_ZdoSendData
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-2
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker254 Using cfiCommon1
          CFI (cfiPicker254) NoFunction
          CFI (cfiPicker254) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiPicker254
// 1744 
// 1745 /***************************************************************************************************
// 1746  * @fn      MT_ZdoNwkAddrOfInterestReq
// 1747  *
// 1748  * @brief   Handle a ZDO Network Address of Interest request.
// 1749  *
// 1750  * @param   pBuf  - MT message data
// 1751  *
// 1752  * @return  void
// 1753  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1754 static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
MT_ZdoNwkAddrOfInterestReq:
          CFI Block cfiBlock255 Using cfiCommon0
          CFI Function MT_ZdoNwkAddrOfInterestReq
        CODE
// 1755 {
        FUNCALL MT_ZdoNwkAddrOfInterestReq, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1756   uint8 cmdId;
// 1757   uint8 retValue;
// 1758   zAddrType_t destAddr;
// 1759   uint16 nwkAddr;
// 1760   uint8 cmd;
// 1761 
// 1762     /* parse header */
// 1763   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL     ??Subroutine91_0 & 0xFFFF
// 1764   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_197:
        JNC       ??MT_ZdoNwkAddrOfInterestReq_0
        INC       R7
// 1765 
// 1766   /* Destination address */
// 1767   destAddr.addrMode = Addr16Bit;
??MT_ZdoNwkAddrOfInterestReq_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine49 & 0xFFFF
// 1768   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_104:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine92_0 & 0xFFFF
// 1769   pBuf += 2;
??CrossCallReturnLabel_204:
        JNC       ??MT_ZdoNwkAddrOfInterestReq_1
        INC       R7
// 1770 
// 1771   /* Network Address of Interest */
// 1772   nwkAddr = osal_build_uint16( pBuf );
??MT_ZdoNwkAddrOfInterestReq_1:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1773   pBuf += 2;
// 1774 
// 1775   cmd = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
// 1776 
// 1777   /* Send the Generic ZDO message request */
// 1778   retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V3,#0x0
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R6
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1779 
// 1780 
// 1781   /*
// 1782     Since we don't recevied our own broadcast messages, we should
// 1783     send a unicast copy of the message to ourself.
// 1784   */
// 1785   if ( destAddr.addrMode == AddrBroadcast )
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??MT_ZdoNwkAddrOfInterestReq_2
// 1786   {
// 1787     destAddr.addrMode = Addr16Bit;
        LCALL     ?Subroutine23 & 0xFFFF
// 1788     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_211:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1789     retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R6
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1790   }
// 1791 
// 1792   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoNwkAddrOfInterestReq_2:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V2
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1793 }
        MOV       A,#0xa
        LJMP      ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock255
// 1794 
// 1795 /***************************************************************************************************
// 1796  * @fn      MT_ZdoStartupFromApp
// 1797  *
// 1798  * @brief   Handle a Startup from App request.
// 1799  *
// 1800  * @param   pBuf  - MT message data
// 1801  *
// 1802  * @return  void
// 1803  ***************************************************************************************************/
// 1804 static void MT_ZdoStartupFromApp(uint8 *pBuf)
// 1805 {
// 1806   uint8 cmd0, cmd1, retValue;
// 1807 
// 1808   /* parse header */
// 1809   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 1810   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1811   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1812 
// 1813   retValue = ZDOInitDevice(100);
// 1814 
// 1815   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 1816   {
// 1817     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
// 1818   }
// 1819 }
// 1820 
// 1821 
// 1822 /***************************************************************************************************
// 1823  * @fn      MT_ZdoNetworkDiscoveryReq
// 1824  *
// 1825  * @brief   Handle a ZDO Network Discovery request.
// 1826  *
// 1827  * @param   pBuf  - MT message data
// 1828  *
// 1829  * @return  void
// 1830  ***************************************************************************************************/
// 1831 static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
// 1832 {
// 1833   uint8  retValue = ZFailure;
// 1834   uint8  cmdId;
// 1835   uint32 scanChannels;
// 1836 
// 1837   /* parse header */
// 1838   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1839   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1840 
// 1841   /* Packet format */
// 1842   /* scan channels (4) | scan duration (1) */
// 1843 
// 1844   /* Scan channels */
// 1845   scanChannels = osal_build_uint32(pBuf, 4);
// 1846   pBuf += 4;
// 1847 
// 1848   retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
// 1849 
// 1850   // Register ZDO callback for MT to handle the network discovery confirm
// 1851   // and beacon notification confirm
// 1852   ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
// 1853   ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
// 1854 
// 1855   /* Build and send back the response */
// 1856   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1857 }
// 1858 
// 1859 
// 1860 /***************************************************************************************************
// 1861  * @fn      MT_ZdoJoinReq
// 1862  *
// 1863  * @brief   Handle a ZDO Join request.
// 1864  *
// 1865  * @param   pBuf  - MT message data
// 1866  *
// 1867  * @return  void
// 1868  ***************************************************************************************************/
// 1869 static void MT_ZdoJoinReq(uint8 *pBuf)
// 1870 {
// 1871   uint8  retValue = ZFailure;
// 1872   uint8  cmdId;
// 1873   uint16 panId;
// 1874   uint16 chosenParent;
// 1875 
// 1876   /* parse header */
// 1877   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1878   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1879 
// 1880   /* Packet format */
// 1881   /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
// 1882    * parentDepth (1) | stackProfile  (1)
// 1883    */
// 1884 
// 1885   panId        = osal_build_uint16( &pBuf[1] );
// 1886   chosenParent = osal_build_uint16( &pBuf[11] );
// 1887 
// 1888   retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
// 1889 
// 1890   /* Register for MT to receive Join Confirm */
// 1891   ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
// 1892 
// 1893   /* Build and send back the response */
// 1894   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1895 
// 1896 }
// 1897 
// 1898 
// 1899 /***************************************************************************************************
// 1900  * @fn          MT_ZdoNwkDiscoveryCnfCB
// 1901  *
// 1902  * @brief       Send an indication to inform host device the completion of
// 1903  *              network discovery scan
// 1904  *
// 1905  * @param       pStr - pointer to a parameter and a structure of parameters
// 1906  *
// 1907  * @return      void
// 1908  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1909 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
MT_ZdoNwkDiscoveryCnfCB:
          CFI Block cfiBlock256 Using cfiCommon0
          CFI Function MT_ZdoNwkDiscoveryCnfCB
        CODE
// 1910 {
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_ZdoBeaconIndCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1911   /* pStr: status (uint8) */
// 1912   /* Packet Format */
// 1913   /* Status (1) */
// 1914 
// 1915   // Scan completed. De-register the callback with ZDO
// 1916   ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x2
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 1917   ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x3
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 1918 
// 1919   // Send the buffered beacon indication
// 1920   MT_ZdoBeaconIndCB ( NULL );
        ; Setup parameters for call to function MT_ZdoBeaconIndCB
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
// 1921 
// 1922   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1923                                          MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,#0x1
        MOV       R2,#-0x39
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1924   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
          CFI EndBlock cfiBlock256
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1925 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock257
// 1926 
// 1927 /***************************************************************************************************
// 1928  * @fn          MT_ZdoBeaconIndCB
// 1929  *
// 1930  * @brief       Send an indication to host device of a beacon notification
// 1931  *
// 1932  * @param       pStr -  pointer to a parameter and a structure of parameters
// 1933  *
// 1934  * @return      void
// 1935  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1936 void *MT_ZdoBeaconIndCB ( void *pStr )
MT_ZdoBeaconIndCB:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
        CODE
// 1937 {
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1938   zdoBeaconInd_t *pBeacon = pStr;
// 1939   uint8 *pTmp;
// 1940 
// 1941   /* Packet Format */
// 1942   /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
// 1943 
// 1944   if( pStr != NULL)
        MOV       A,R6
        ORL       A,R7
        MOV       DPTR,#pBeaconIndBuf
        JNZ       $+5
        LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
// 1945   {
// 1946     if( pBeaconIndBuf == NULL )
        LCALL     ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_233:
        JNZ       ??MT_ZdoBeaconIndCB_1
// 1947     {
// 1948       // If pBeaconIndBuf has not been allocated yet
// 1949       // allocate memory now with MAX_UART_TX_BUFF
// 1950       if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#-0x7
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#pBeaconIndBuf
        LCALL     ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_236:
        JNZ       $+5
        LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
// 1951       {
// 1952         // Memory failure
// 1953         return NULL;
// 1954       }
// 1955       pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        CLR       A
        MOVX      @DPTR,A
// 1956     }
// 1957 
// 1958     // Fill in the buffer with the beacon indication
// 1959     pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
??MT_ZdoBeaconIndCB_1:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
// 1960     *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_219:
        MOVX      @DPTR,A
// 1961     *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_221:
        INC       DPTR
        MOVX      @DPTR,A
// 1962     *pTmp++ = LO_UINT16(pBeacon->panID);
        MOV       A,R6
        ADD       A,#0x2
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_134:
        LCALL     ?Subroutine25 & 0xFFFF
// 1963     *pTmp++ = HI_UINT16(pBeacon->panID);
??CrossCallReturnLabel_38:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine17 & 0xFFFF
// 1964     *pTmp++ = pBeacon->logicalChannel;
??CrossCallReturnLabel_223:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine33 & 0xFFFF
// 1965     *pTmp++ = pBeacon->permitJoining;
??CrossCallReturnLabel_54:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine31 & 0xFFFF
// 1966     *pTmp++ = pBeacon->routerCapacity;
??CrossCallReturnLabel_52:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine27 & 0xFFFF
// 1967     *pTmp++ = pBeacon->deviceCapacity;
??CrossCallReturnLabel_43:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine26 & 0xFFFF
// 1968     *pTmp++ = pBeacon->protocolVersion;
??CrossCallReturnLabel_41:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine18 & 0xFFFF
// 1969     *pTmp++ = pBeacon->stackProfile;
??CrossCallReturnLabel_28:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL     ?Subroutine79 & 0xFFFF
// 1970     *pTmp++ = pBeacon->LQI;
??CrossCallReturnLabel_166:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_31:
        INC       DPTR
        LCALL     ?Subroutine53 & 0xFFFF
// 1971     *pTmp++ = pBeacon->depth;
??CrossCallReturnLabel_111:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine54 & 0xFFFF
// 1972     *pTmp++ = pBeacon->updateID;
??CrossCallReturnLabel_113:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1973     osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0xd
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0xd
        MOV       R2,A
        JNC       ??MT_ZdoBeaconIndCB_3
        INC       R3
??MT_ZdoBeaconIndCB_3:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1974 
// 1975     pBeaconIndBuf[0] += 1; // Increment the devCnt
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R0,A
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_185:
        INC       A
        MOVX      @DPTR,A
// 1976 
// 1977     // Check if the buffer can fit in another beacon
// 1978     if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV       R1,B
        ADD       A,#0x16
        JNC       ??MT_ZdoBeaconIndCB_4
        INC       R1
??MT_ZdoBeaconIndCB_4:
        CLR       C
        SUBB      A,#-0x6
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??MT_ZdoBeaconIndCB_2
// 1979     {
// 1980       // Packet full, send the packet over MT
// 1981       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1982                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1983                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1984       pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
        LCALL     ?Subroutine68 & 0xFFFF
// 1985     }
// 1986   }
??CrossCallReturnLabel_216:
        CLR       A
        SJMP      ??MT_ZdoBeaconIndCB_5
// 1987   else
// 1988   {
// 1989     if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
??MT_ZdoBeaconIndCB_0:
        LCALL     ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_234:
        JZ        ??MT_ZdoBeaconIndCB_2
        LCALL     ??Subroutine87_0 & 0xFFFF
??CrossCallReturnLabel_183:
        JZ        ??MT_ZdoBeaconIndCB_6
// 1990     {
// 1991       // End of beacon indication, send the packet over MT
// 1992       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1993                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1994                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL     ?Subroutine12 & 0xFFFF
// 1995     }
??CrossCallReturnLabel_19:
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1996     // Free the allocated memory
// 1997     if(pBeaconIndBuf != NULL)
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_237:
        JZ        ??MT_ZdoBeaconIndCB_2
// 1998     {
// 1999       osal_mem_free(pBeaconIndBuf);
??MT_ZdoBeaconIndCB_6:
        ; Setup parameters for call to function osal_mem_free
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2000       pBeaconIndBuf = NULL;
        MOV       DPTR,#pBeaconIndBuf
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
??MT_ZdoBeaconIndCB_5:
        MOVX      @DPTR,A
// 2001     }
// 2002   }
// 2003 
// 2004   return NULL;
??MT_ZdoBeaconIndCB_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ??Subroutine105_0 & 0xFFFF
// 2005 }
          CFI EndBlock cfiBlock258

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine68:
          CFI Block cfiCond259 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_216
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function MT_ZdoBeaconIndCB
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_36
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-4
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function MT_ZdoBeaconIndCB
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_37
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-4
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker262 Using cfiCommon1
          CFI (cfiPicker262) NoFunction
          CFI (cfiPicker262) Picker
        MOV       DPTR,#pBeaconIndBuf
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiPicker262
        REQUIRE ??Subroutine97_0
        ; // Fall through to label ??Subroutine97_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine97_0:
          CFI Block cfiCond263 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function MT_ZdoCommandProcessing
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_57
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-4
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function MT_ZdoBeaconIndCB
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_216
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function MT_ZdoBeaconIndCB
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_36
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-4
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function MT_ZdoBeaconIndCB
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_217, ??CrossCallReturnLabel_37
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-4
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker268 Using cfiCommon1
          CFI (cfiPicker268) NoFunction
          CFI (cfiPicker268) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiPicker268

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond269 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_220
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function MT_ZdoBeaconIndCB
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_221
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-2
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker271 Using cfiCommon1
          CFI (cfiPicker271) NoFunction
          CFI (cfiPicker271) Picker
        INC       DPTR
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiPicker271
        REQUIRE ??Subroutine98_0
        ; // Fall through to label ??Subroutine98_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine98_0:
          CFI Block cfiCond272 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_218
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function MT_ZdoBeaconIndCB
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-2
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function MT_ZdoNWKAddressRequest
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_220
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function MT_ZdoBeaconIndCB
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_221
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker276 Using cfiCommon1
          CFI (cfiPicker276) NoFunction
          CFI (cfiPicker276) Picker
        LCALL     ?Subroutine86 & 0xFFFF
??CrossCallReturnLabel_230:
        RET
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiPicker276

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine86:
          CFI Block cfiCond277 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_220
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function MT_ZdoBeaconIndCB
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_221
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-4
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function MT_ZdoNWKAddressRequest
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_218
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-4
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function MT_ZdoBeaconIndCB
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_230, ??CrossCallReturnLabel_219
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-4
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function MT_ZdoBeaconIndCB
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_223
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+-6
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-6
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function MT_ZdoSendMsgCB
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_222
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-6
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function MT_ZdoBeaconIndCB
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_38
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+-6
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_39
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-6
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function MT_ZdoSendMsgCB
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_40
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-6
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function MT_ZdoSrcRtgCB
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_20
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-6
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function MT_ZdoSendMsgCB
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_231, ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_21
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-6
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function MT_ZdoBeaconIndCB
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_54
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-6
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function MT_ZdoSendMsgCB
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_55
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-6
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function MT_ZdoBeaconIndCB
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_52
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-6
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function MT_ZdoSendMsgCB
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_229, ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_53
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-6
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function MT_ZdoSrcRtgCB
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_20
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-4
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function MT_ZdoSendMsgCB
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_21
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond294) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-4
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker295 Using cfiCommon1
          CFI (cfiPicker295) NoFunction
          CFI (cfiPicker295) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiPicker295

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond296 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function MT_ZdoBeaconIndCB
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-2
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker298 Using cfiCommon1
          CFI (cfiPicker298) NoFunction
          CFI (cfiPicker298) Picker
        LCALL     ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_217:
        MOVX      A,@DPTR
        MOV       B,#0x15
        MUL       AB
        RET
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiPicker298

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond299 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function MT_ZdoBeaconIndCB
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-2
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker301 Using cfiCommon1
          CFI (cfiPicker301) NoFunction
          CFI (cfiPicker301) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_150:
        INC       DPTR
        RET
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiPicker301

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond302 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_223
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_224
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-2
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker304 Using cfiCommon1
          CFI (cfiPicker304) NoFunction
          CFI (cfiPicker304) Picker
        INC       DPTR
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiPicker304
        REQUIRE ??Subroutine99_0
        ; // Fall through to label ??Subroutine99_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine99_0:
          CFI Block cfiCond305 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_222
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function MT_ZdoBeaconIndCB
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_223
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-2
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_224
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-2
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker308 Using cfiCommon1
          CFI (cfiPicker308) NoFunction
          CFI (cfiPicker308) Picker
        LCALL     ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_227:
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiPicker308

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond309 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function MT_ZdoBeaconIndCB
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-2
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker311 Using cfiCommon1
          CFI (cfiPicker311) NoFunction
          CFI (cfiPicker311) Picker
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       B,#0x15
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MUL       AB
        INC       A
        MOV       R3,A
        MOV       R2,#-0x3b
        MOV       R1,#0x45
        RET
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiPicker311

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond312 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_236
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function MT_ZdoBeaconIndCB
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_237
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-2
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker314 Using cfiCommon1
          CFI (cfiPicker314) NoFunction
          CFI (cfiPicker314) Picker
        MOV       DPTR,#pBeaconIndBuf
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiPicker314
        REQUIRE ??Subroutine100_0
        ; // Fall through to label ??Subroutine100_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine100_0:
          CFI Block cfiCond315 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_232
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function MT_ZdoBeaconIndCB
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_233
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function MT_ZdoBeaconIndCB
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_234
          CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond317) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond317) CFA_SP SP+-2
          CFI (cfiCond317) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function MT_ZdoSrcRtgCB
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_235
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function MT_ZdoBeaconIndCB
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_236
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-2
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function MT_ZdoBeaconIndCB
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_237
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-2
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker321 Using cfiCommon1
          CFI (cfiPicker321) NoFunction
          CFI (cfiPicker321) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiPicker321
// 2006 
// 2007 /***************************************************************************************************
// 2008  * @fn          MT_ZdoJoinCnfCB
// 2009  *
// 2010  * @brief       Handle the ZDO Join Confirm from ZDO
// 2011  *
// 2012  * @param       pStr - pointer to a parameter and a structure of parameters
// 2013  *
// 2014  * @return      void
// 2015  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2016 void *MT_ZdoJoinCnfCB ( void *pStr )
MT_ZdoJoinCnfCB:
          CFI Block cfiBlock322 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
        CODE
// 2017 {
        FUNCALL MT_ZdoJoinCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2018   /* pStr: zdoJoinCnf_t* */
// 2019   /* Packet Format */
// 2020   /* Status (1) | device addr (2) | parent addr (2) */
// 2021 
// 2022   uint8 buf[MT_ZDO_JOIN_CNF_LEN];
// 2023   zdoJoinCnf_t *joinCnf = pStr;
// 2024 
// 2025   /* Join Complete. De-register the callback with ZDO */
// 2026   ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x4
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 2027 
// 2028   buf[0] = joinCnf->status;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine88_0 & 0xFFFF
// 2029   buf[1] = LO_UINT16( joinCnf->deviceAddr );
??CrossCallReturnLabel_186:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine50 & 0xFFFF
// 2030   buf[2] = HI_UINT16( joinCnf->deviceAddr );
??CrossCallReturnLabel_106:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2031   buf[3] = LO_UINT16( joinCnf->parentAddr );
        MOV       A,R6
        ADD       A,#0x3
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_135:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine50 & 0xFFFF
// 2032   buf[4] = HI_UINT16( joinCnf->parentAddr );
??CrossCallReturnLabel_107:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine57 & 0xFFFF
// 2033 
// 2034   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2035                                MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
??CrossCallReturnLabel_120:
        MOV       R3,#0x5
        MOV       R2,#-0x3a
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2036 
// 2037   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP      ?Subroutine6 & 0xFFFF
// 2038 }
          CFI EndBlock cfiBlock322

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond323 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function MT_ZdoJoinCnfCB
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond324) CFA_SP SP+-2
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function MT_ZdoJoinCnfCB
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-2
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function MT_ZdoTcDeviceInd
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker327 Using cfiCommon1
          CFI (cfiPicker327) NoFunction
          CFI (cfiPicker327) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiPicker327
// 2039 
// 2040 /*************************************************************************************************
// 2041  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 2042  *
// 2043  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 2044  *
// 2045  * @param   pBuf  - MT message data
// 2046  *
// 2047  * @return  void
// 2048  *************************************************************************************************/
// 2049 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
// 2050 {
// 2051   uint8 cmd0, cmd1, tmp;
// 2052   uint16 cId;
// 2053 
// 2054   /* parse header */
// 2055   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2056   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2057   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2058 
// 2059   cId = osal_build_uint16( pBuf );
// 2060   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
// 2061 
// 2062   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2063   {
// 2064     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2065   }
// 2066 }
// 2067 
// 2068 /*************************************************************************************************
// 2069  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 2070  *
// 2071  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 2072  *
// 2073  * @param   pBuf  - MT message data
// 2074  *
// 2075  * @return  void
// 2076  *************************************************************************************************/
// 2077 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
// 2078 {
// 2079   uint8 cmd0, cmd1, tmp;
// 2080   uint16 cId;
// 2081 
// 2082   /* parse header */
// 2083   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2084   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2085   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2086 
// 2087   cId = osal_build_uint16( pBuf );
// 2088   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
// 2089 
// 2090   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2091   {
// 2092     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2093   }
// 2094 }
// 2095 
// 2096 /*************************************************************************************************
// 2097  * @fn      MT_ZdoSetRejoinParameters(pBuf);
// 2098  *
// 2099  * @brief   Set Rejoin backoff and scan duration from MT
// 2100  *
// 2101  * @param   pBuf  - MT message data
// 2102  *
// 2103  * @return  void
// 2104  *************************************************************************************************/
// 2105 static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
// 2106 {
// 2107   uint8 cmdId;
// 2108   uint8 retValue;
// 2109   uint32 rejoinBackoffDuration, rejoinScanDuration;
// 2110 
// 2111   // parse header
// 2112   cmdId = pBuf[MT_RPC_POS_CMD1];
// 2113   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2114 
// 2115   //Rejoin Backoff Duration
// 2116   rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
// 2117   pBuf += 4;
// 2118 
// 2119   //Rejoin Scan Duration
// 2120   rejoinScanDuration = osal_build_uint32(pBuf, 4);
// 2121 
// 2122   ZDApp_SetRejoinScanDuration(rejoinScanDuration);
// 2123   ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
// 2124 
// 2125   retValue = ZSuccess;
// 2126 
// 2127   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 2128 
// 2129 }
// 2130 
// 2131 #endif /* MT_ZDO_FUNC */
// 2132 
// 2133 
// 2134 /***************************************************************************************************
// 2135  * Callback handling function
// 2136  ***************************************************************************************************/
// 2137 
// 2138 #if defined (MT_ZDO_CB_FUNC)
// 2139 
// 2140 /***************************************************************************************************
// 2141  * @fn      MT_ZdoStateChangeCB
// 2142  *
// 2143  * @brief   Handle state change OSAL message from ZDO.
// 2144  *
// 2145  * @param   pMsg  - Message data
// 2146  *
// 2147  * @return  void
// 2148  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2149 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
MT_ZdoStateChangeCB:
          CFI Block cfiBlock328 Using cfiCommon0
          CFI Function MT_ZdoStateChangeCB
        CODE
// 2150 {
        FUNCALL MT_ZdoStateChangeCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2151   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2152                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       R3,#0x1
        MOV       R2,#-0x40
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2153 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock328
// 2154 
// 2155 /***************************************************************************************************
// 2156  * @fn     MT_ZdoDirectCB()
// 2157  *
// 2158  * @brief  ZDO direct callback.  Build an MT message directly from the
// 2159  *         over-the-air ZDO message.
// 2160  *
// 2161  * @param  pData - Incoming AF frame.
// 2162  *
// 2163  * @return  none
// 2164  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2165 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
MT_ZdoDirectCB:
          CFI Block cfiBlock329 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
        CODE
// 2166 {
        FUNCALL MT_ZdoDirectCB, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, MT_ZdoEndDevAnnceCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, MT_ZdoAddrRspCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoDirectCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2167   uint8 len, *pBuf;
// 2168   uint16 origClusterId;
// 2169 
// 2170   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
// 2171   origClusterId = pData->clusterId;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
// 2172 
// 2173   // Is the message an exception or not a response?
// 2174   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
        MOV       ?V4,#0x1
        LCALL     ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_139:
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?US_SWITCH_SPARSE
`?<Jumptable for MT_ZdoDirectCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_ZdoDirectCB_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_ZdoDirectCB_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32772
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_ZdoDirectCB_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_ZdoDirectCB_3
        CODE
??MT_ZdoDirectCB_2:
        LCALL     ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_141:
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#0x6
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       ??MT_ZdoDirectCB_3
        MOV       ?V4,#0x0
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,#0x40
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        LCALL     ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_142:
        MOV       A,#0x2
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        SJMP      ??MT_ZdoDirectCB_4
??MT_ZdoDirectCB_1:
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
        ; Setup parameters for call to function MT_ZdoEndDevAnnceCB
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??MT_ZdoEndDevAnnceCB::?relay`; Banked call to: MT_ZdoEndDevAnnceCB
        SJMP      ??MT_ZdoDirectCB_4
??MT_ZdoDirectCB_0:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       A,R2
        ORL       A,?V3
        JZ        ??MT_ZdoDirectCB_4
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoDirectCB_5
        ; Setup parameters for call to function MT_ZdoAddrRspCB
        LCALL     ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_140:
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        LCALL     `??MT_ZdoAddrRspCB::?relay`; Banked call to: MT_ZdoAddrRspCB
??MT_ZdoDirectCB_5:
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??MT_ZdoDirectCB_4
??MT_ZdoDirectCB_3:
        MOV       ?V4,#0x0
??MT_ZdoDirectCB_4:
        MOV       A,?V4
        MOV       C,0xE0 /* A   */.0
        JC        ??MT_ZdoDirectCB_6
        MOV       A,?V7
        ANL       A,#0x80
        JNZ       ??MT_ZdoDirectCB_7
// 2175   {
// 2176     return;  // Handled somewhere else or not needed.
??MT_ZdoDirectCB_6:
        LJMP      ??MT_ZdoDirectCB_8 & 0xFFFF
// 2177   }
// 2178 
// 2179   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 2180    * two bytes for srcAddr.
// 2181    */
// 2182   len = pData->cmd.DataLength - 1 + sizeof(uint16);
??MT_ZdoDirectCB_7:
        LCALL     ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_240:
        INC       A
        MOV       ?V2,A
// 2183 
// 2184   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
        MOV       A,R6
        ORL       A,R7
        JZ        ??MT_ZdoDirectCB_8
// 2185   {
// 2186     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ORL       A,#0x80
        MOV       ?V3,A
// 2187 
// 2188     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
        MOV       A,?V0
        ADD       A,#0x6
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine102_0 & 0xFFFF
// 2189     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
??CrossCallReturnLabel_242:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX      @DPTR,A
// 2190 
// 2191     /* copy ZDO data, skipping one-byte sequence number */
// 2192     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,?V0
        ADD       A,#0x22
        LCALL     ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_238:
        ADD       A,#0x1
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 32)
        LCALL     ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_241:
        ADD       A,#-0x1
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       R5,A
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
// 2193 
// 2194     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,?V2
        MOV       R2,?V3
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2195     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2196   }
// 2197 }
??MT_ZdoDirectCB_8:
        MOV       A,#0xb
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock329

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine65:
          CFI Block cfiCond330 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
          CFI Conditional ??CrossCallReturnLabel_141
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function MT_ZdoDirectCB
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond331) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond331) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond331) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond331) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+-2
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker332 Using cfiCommon1
          CFI (cfiPicker332) NoFunction
          CFI (cfiPicker332) Picker
        MOV       A,R2
        ADD       A,#0x20
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiPicker332

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine64:
          CFI Block cfiCond333 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
          CFI Conditional ??CrossCallReturnLabel_139
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function MT_ZdoDirectCB
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond334) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond334) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond334) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond334) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond334) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+-2
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker335 Using cfiCommon1
          CFI (cfiPicker335) NoFunction
          CFI (cfiPicker335) Picker
        LCALL     ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_174:
        RET
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiPicker335
// 2198 
// 2199 /***************************************************************************************************
// 2200  * @fn     MT_ZdoHandleExceptions()
// 2201  *
// 2202  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 2203  *
// 2204  * @param  pData - Incoming AF frame.
// 2205  *
// 2206  * @return  TRUE if handled by this function, FALSE if not
// 2207  ***************************************************************************************************/
// 2208 static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2209 {
// 2210   uint8 ret = TRUE;
// 2211   ZDO_NwkIEEEAddrResp_t *nwkRsp;
// 2212   ZDO_DeviceAnnce_t devAnnce;
// 2213   uint8 doDefault = FALSE;
// 2214 
// 2215   switch ( inMsg->clusterID )
// 2216   {
// 2217     case NWK_addr_rsp:
// 2218     case IEEE_addr_rsp:
// 2219       if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
// 2220       {
// 2221         if ( nwkRsp->status == ZDO_SUCCESS )
// 2222         {
// 2223           MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 2224         }
// 2225         osal_mem_free( nwkRsp );
// 2226       }
// 2227       break;
// 2228 
// 2229     case Device_annce:
// 2230       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 2231       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 2232       break;
// 2233 
// 2234     case Simple_Desc_rsp:
// 2235       if ( pData->cmd.DataLength > 5 )
// 2236       {
// 2237         ret = FALSE;
// 2238       }
// 2239       else
// 2240       {
// 2241         doDefault = TRUE;
// 2242       }
// 2243       break;
// 2244 
// 2245     default:
// 2246       ret = FALSE;
// 2247       break;
// 2248   }
// 2249 
// 2250   if ( doDefault )
// 2251   {
// 2252     ret = FALSE;
// 2253     pData->clusterId = MtZdoDef_rsp;
// 2254     pData->cmd.DataLength = 2;
// 2255   }
// 2256 
// 2257   return ( ret );
// 2258 }
// 2259 
// 2260 /***************************************************************************************************
// 2261  * @fn      MT_ZdoAddrRspCB
// 2262  *
// 2263  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 2264  *
// 2265  * @param   pMsg  - Message data
// 2266  *
// 2267  * @return  void
// 2268  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2269 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
MT_ZdoAddrRspCB:
          CFI Block cfiBlock336 Using cfiCommon0
          CFI Function MT_ZdoAddrRspCB
        CODE
// 2270 {
        FUNCALL MT_ZdoAddrRspCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoAddrRspCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoAddrRspCB, MT_Word2Buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoAddrRspCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoAddrRspCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
// 2271   uint8   listLen, len, *pBuf;
// 2272 
// 2273   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 2274 
// 2275   /* get length, sanity check length */
// 2276   listLen = pMsg->numAssocDevs;
        MOV       A,R2
        ADD       A,#0xb
        LCALL     ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_239:
        MOV       ?V4,A
// 2277 
// 2278   /* calculate msg length */
// 2279   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
        CLR       C
        RLC       A
        ADD       A,#0xd
        MOV       ?V5,A
// 2280 
// 2281   /* get buffer */
// 2282   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       A,R2
        ORL       A,?V7
        JZ        ??MT_ZdoAddrRspCB_0
// 2283   {
// 2284     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 2285     uint8 *pTmp = pBuf;
        MOV       R6,?V6
        MOV       R7,?V7
// 2286 
// 2287     *pTmp++ = pMsg->status;
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_243:
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 2288 
// 2289     osal_cpyExtAddr(pTmp, pMsg->extAddr);
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V0
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2290     pTmp += Z_EXTADDR_LEN;
// 2291 
// 2292     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        LCALL     ?Subroutine20 & 0xFFFF
// 2293     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
??CrossCallReturnLabel_32:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_34:
        MOVX      @DPTR,A
// 2294 
// 2295     *pTmp++ = pMsg->startIndex;
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_35:
        INC       DPTR
        MOVX      @DPTR,A
// 2296     *pTmp++ = listLen;
        LCALL     ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV       A,?V4
        MOVX      @DPTR,A
// 2297 
// 2298     MT_Word2Buf(pTmp, pMsg->devList, listLen);
        ; Setup parameters for call to function MT_Word2Buf
        MOV       R1,A
        MOV       A,?V0
        ADD       A,#0xd
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       A,R6
        ADD       A,#0xc
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??MT_Word2Buf::?relay`; Banked call to: MT_Word2Buf
// 2299 
// 2300     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V6
        MOV       R5,?V7
        MOV       R3,?V5
        MOV       A,?V2
        ORL       A,#0x80
        MOV       R2,A
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2301     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2302   }
// 2303 }
??MT_ZdoAddrRspCB_0:
        LJMP      ??Subroutine89_0 & 0xFFFF
          CFI EndBlock cfiBlock336

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine60:
          CFI Block cfiCond337 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
          CFI Conditional ??CrossCallReturnLabel_240
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function MT_ZdoDirectCB
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_241
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond338) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond338) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-2
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        MOV       A,?V0
        ADD       A,#0x20
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339
        REQUIRE ??Subroutine101_0
        ; // Fall through to label ??Subroutine101_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine101_0:
          CFI Block cfiCond340 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
          CFI Conditional ??CrossCallReturnLabel_238
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function MT_ZdoAddrRspCB
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_239
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond341) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond341) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond341) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond341) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+-2
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function MT_ZdoDirectCB
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_240
          CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond342) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond342) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond342) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond342) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond342) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond342) CFA_SP SP+-2
          CFI (cfiCond342) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function MT_ZdoDirectCB
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_241
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond343) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+-2
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker344 Using cfiCommon1
          CFI (cfiPicker344) NoFunction
          CFI (cfiPicker344) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiPicker344

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond345 Using cfiCommon0
          CFI Function MT_ZdoAddrRspCB
          CFI Conditional ??CrossCallReturnLabel_243
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function MT_ZdoSrcRtgCB
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_244
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-2
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker347 Using cfiCommon1
          CFI (cfiPicker347) NoFunction
          CFI (cfiPicker347) Picker
        MOV       DPL,?V0
        MOV       DPH,?V1
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiPicker347
        REQUIRE ??Subroutine102_0
        ; // Fall through to label ??Subroutine102_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine102_0:
          CFI Block cfiCond348 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
          CFI Conditional ??CrossCallReturnLabel_242
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function MT_ZdoAddrRspCB
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_243
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-2
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function MT_ZdoSrcRtgCB
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_244
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-2
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker351 Using cfiCommon1
          CFI (cfiPicker351) NoFunction
          CFI (cfiPicker351) Picker
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiPicker351

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond352 Using cfiCommon0
          CFI Function MT_ZdoAddrRspCB
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond353 Using cfiCommon0
          CFI (cfiCond353) Function MT_ZdoAddrRspCB
          CFI (cfiCond353) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond353) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond353) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond353) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond353) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond353) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond353) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond353) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond353) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond353) CFA_SP SP+-2
          CFI (cfiCond353) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker354 Using cfiCommon1
          CFI (cfiPicker354) NoFunction
          CFI (cfiPicker354) Picker
        LCALL     ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_152:
        INC       DPTR
        RET
          CFI EndBlock cfiCond352
          CFI EndBlock cfiCond353
          CFI EndBlock cfiPicker354
// 2304 
// 2305 /***************************************************************************************************
// 2306  * @fn      MT_ZdoEndDevAnnceCB
// 2307  *
// 2308  * @brief   Handle end device announce OSAL message from ZDO.
// 2309  *
// 2310  * @param   pMsg  - Message data
// 2311  *
// 2312  * @return  void
// 2313  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2314 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
MT_ZdoEndDevAnnceCB:
          CFI Block cfiBlock355 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnceCB
        CODE
// 2315 {
        FUNCALL MT_ZdoEndDevAnnceCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnceCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnceCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnceCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2316   uint8 *pBuf;
// 2317 
// 2318   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xd
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??MT_ZdoEndDevAnnceCB_0
// 2319   {
// 2320     uint8 *pTmp = pBuf;
// 2321 
// 2322     *pTmp++ = LO_UINT16(srcAddr);
        MOV       A,R6
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
// 2323     *pTmp++ = HI_UINT16(srcAddr);
        MOV       A,R7
        INC       DPTR
        MOVX      @DPTR,A
// 2324 
// 2325     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine25 & 0xFFFF
// 2326     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
??CrossCallReturnLabel_39:
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_224:
        MOV       A,R2
        ADD       A,#0x4
        MOV       R6,A
        CLR       A
        ADDC      A,?V1
        MOV       R7,A
// 2327 
// 2328     osal_cpyExtAddr(pTmp, pMsg->extAddr);
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,?V2
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,?V3
        MOV       R5,A
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2329     pTmp += Z_EXTADDR_LEN;
// 2330 
// 2331     *pTmp = pMsg->capabilities;
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
// 2332 
// 2333     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2334                                          MT_ZDO_END_DEVICE_ANNCE_IND,
// 2335                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
??CrossCallReturnLabel_33:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,#0xd
        MOV       R2,#-0x3f
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2336     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2337   }
// 2338 }
??MT_ZdoEndDevAnnceCB_0:
        SJMP      ??Subroutine103_0
          CFI EndBlock cfiBlock355

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond356 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond357 Using cfiCommon0
          CFI (cfiCond357) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond357) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond357) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond357) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond357) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond357) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond357) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond357) CFA_SP SP+-2
          CFI (cfiCond357) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond358 Using cfiCommon0
          CFI (cfiCond358) Function MT_ZdoSendMsgCB
          CFI (cfiCond358) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond358) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond358) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond358) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond358) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond358) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond358) CFA_SP SP+-2
          CFI (cfiCond358) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker359 Using cfiCommon1
          CFI (cfiPicker359) NoFunction
          CFI (cfiPicker359) Picker
        LCALL     ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_226:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond356
          CFI EndBlock cfiCond357
          CFI EndBlock cfiCond358
          CFI EndBlock cfiPicker359

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine75:
          CFI Block cfiCond360 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_223
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_224
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+-4
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond362 Using cfiCommon0
          CFI (cfiCond362) Function MT_ZdoSendMsgCB
          CFI (cfiCond362) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_222
          CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond362) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond362) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond362) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond362) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond362) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond362) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond362) CFA_SP SP+-4
          CFI (cfiCond362) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond363 Using cfiCommon0
          CFI (cfiCond363) Function MT_ZdoBeaconIndCB
          CFI (cfiCond363) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_38
          CFI (cfiCond363) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond363) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond363) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond363) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond363) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond363) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond363) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond363) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond363) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond363) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond363) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond363) CFA_SP SP+-4
          CFI (cfiCond363) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_39
          CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond364) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond364) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond364) CFA_SP SP+-4
          CFI (cfiCond364) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond365 Using cfiCommon0
          CFI (cfiCond365) Function MT_ZdoSendMsgCB
          CFI (cfiCond365) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_40
          CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond365) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond365) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond365) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond365) CFA_SP SP+-4
          CFI (cfiCond365) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond366 Using cfiCommon0
          CFI (cfiCond366) Function MT_ZdoSrcRtgCB
          CFI (cfiCond366) Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_20
          CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond366) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond366) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond366) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond366) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond366) CFA_SP SP+-4
          CFI (cfiCond366) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond367 Using cfiCommon0
          CFI (cfiCond367) Function MT_ZdoSendMsgCB
          CFI (cfiCond367) Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_21
          CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond367) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond367) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond367) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond367) CFA_SP SP+-4
          CFI (cfiCond367) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker368 Using cfiCommon1
          CFI (cfiPicker368) NoFunction
          CFI (cfiPicker368) Picker
        LCALL     ?Subroutine86 & 0xFFFF
??CrossCallReturnLabel_231:
        INC       DPTR
        RET
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiCond362
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiCond365
          CFI EndBlock cfiCond366
          CFI EndBlock cfiCond367
          CFI EndBlock cfiPicker368

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond369 Using cfiCommon0
          CFI Function MT_ZdoAddrRspCB
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond370 Using cfiCommon0
          CFI (cfiCond370) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond370) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond370) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond370) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond370) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond370) CFA_SP SP+-2
          CFI (cfiCond370) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker371 Using cfiCommon1
          CFI (cfiPicker371) NoFunction
          CFI (cfiPicker371) Picker
        LCALL     ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_151:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond369
          CFI EndBlock cfiCond370
          CFI EndBlock cfiPicker371

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine70:
          CFI Block cfiCond372 Using cfiCommon0
          CFI Function MT_ZdoAddrRspCB
          CFI Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond373 Using cfiCommon0
          CFI (cfiCond373) Function MT_ZdoAddrRspCB
          CFI (cfiCond373) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_35
          CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond373) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond373) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond373) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond373) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond373) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond373) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond373) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond373) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond373) CFA_SP SP+-4
          CFI (cfiCond373) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond374 Using cfiCommon0
          CFI (cfiCond374) Function MT_ZdoAddrRspCB
          CFI (cfiCond374) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_32
          CFI (cfiCond374) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond374) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond374) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond374) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond374) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond374) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond374) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond374) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond374) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond374) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond374) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond374) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond374) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond374) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond374) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond374) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond374) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond374) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond374) CFA_SP SP+-4
          CFI (cfiCond374) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond375 Using cfiCommon0
          CFI (cfiCond375) Function MT_ZdoEndDevAnnceCB
          CFI (cfiCond375) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_33
          CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond375) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond375) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond375) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond375) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond375) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond375) CFA_SP SP+-4
          CFI (cfiCond375) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker376 Using cfiCommon1
          CFI (cfiPicker376) NoFunction
          CFI (cfiPicker376) Picker
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond372
          CFI EndBlock cfiCond373
          CFI EndBlock cfiCond374
          CFI EndBlock cfiCond375
          CFI EndBlock cfiPicker376

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock377 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock377
        REQUIRE ??Subroutine103_0
        ; // Fall through to label ??Subroutine103_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine103_0:
          CFI Block cfiBlock378 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock378
// 2339 
// 2340 /***************************************************************************************************
// 2341  * @fn      MT_ZdoSrcRtgCB
// 2342  *
// 2343  * @brief   Handle Src Route from ZDO.
// 2344  *
// 2345  * @param   pStr  - pointer to the data structure for the src route
// 2346  *
// 2347  * @return  void*
// 2348  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2349 void* MT_ZdoSrcRtgCB( void *pStr )
MT_ZdoSrcRtgCB:
          CFI Block cfiBlock379 Using cfiCommon0
          CFI Function MT_ZdoSrcRtgCB
        CODE
// 2350 {
        FUNCALL MT_ZdoSrcRtgCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSrcRtgCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSrcRtgCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2351   uint8 len, *pBuf;
// 2352   zdoSrcRtg_t *pSrcRtg = pStr;
// 2353 
// 2354   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 2355   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        CLR       C
        RLC       A
        ADD       A,#0x3
        MOV       ?V2,A
// 2356 
// 2357   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
        MOV       A,R6
        ORL       A,R7
        JZ        ??MT_ZdoSrcRtgCB_0
// 2358   {
// 2359     uint8 idx, *pTmp = pBuf;
// 2360     uint16 *pRelay;
// 2361 
// 2362     // Packet payload
// 2363     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
        LCALL     ?Subroutine39 & 0xFFFF
// 2364     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
??CrossCallReturnLabel_244:
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL     ?Subroutine59 & 0xFFFF
// 2365     *pTmp++ = pSrcRtg->relayCnt;
??CrossCallReturnLabel_130:
        LCALL     ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_62:
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
// 2366 
// 2367     // Relay List
// 2368     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_235:
        JZ        ??MT_ZdoSrcRtgCB_1
// 2369     {
// 2370       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
        MOV       ?V3,#0x0
        SJMP      ??MT_ZdoSrcRtgCB_2
// 2371       {
// 2372         *pTmp++ = LO_UINT16(*pRelay);
??MT_ZdoSrcRtgCB_3:
        LCALL     ?Subroutine13 & 0xFFFF
// 2373         *pTmp++ = HI_UINT16(*pRelay);
??CrossCallReturnLabel_20:
        MOV       A,R2
        ADD       A,#0x2
        MOV       R2,A
        JNC       ??MT_ZdoSrcRtgCB_4
        INC       R3
// 2374         pRelay++;
??MT_ZdoSrcRtgCB_4:
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??MT_ZdoSrcRtgCB_5
        INC       R1
// 2375       }
??MT_ZdoSrcRtgCB_5:
        INC       ?V3
??MT_ZdoSrcRtgCB_2:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,?V3
        CLR       C
        SUBB      A,R4
        JC        ??MT_ZdoSrcRtgCB_3
// 2376     }
// 2377     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2378                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
??MT_ZdoSrcRtgCB_1:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,?V2
        MOV       R2,#-0x3c
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2379     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2380   }
// 2381 
// 2382   return NULL;
??MT_ZdoSrcRtgCB_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ??Subroutine103_0 & 0xFFFF
// 2383 }
          CFI EndBlock cfiBlock379

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine59:
          CFI Block cfiCond380 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_131
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond381 Using cfiCommon0
          CFI (cfiCond381) Function MT_ZdoSrcRtgCB
          CFI (cfiCond381) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond381) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond381) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond381) CFA_SP SP+-2
          CFI (cfiCond381) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker382 Using cfiCommon1
          CFI (cfiPicker382) NoFunction
          CFI (cfiPicker382) Picker
        LCALL     ?Subroutine81 & 0xFFFF
??CrossCallReturnLabel_172:
        RET
          CFI EndBlock cfiCond380
          CFI EndBlock cfiCond381
          CFI EndBlock cfiPicker382

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine81:
          CFI Block cfiCond383 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond384 Using cfiCommon0
          CFI (cfiCond384) Function MT_ZdoCommandProcessing
          CFI (cfiCond384) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_77
          CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond384) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond384) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond384) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond384) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond384) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond384) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond384) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond384) CFA_SP SP+-4
          CFI (cfiCond384) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond385 Using cfiCommon0
          CFI (cfiCond385) Function MT_ZdoCommandProcessing
          CFI (cfiCond385) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_78
          CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond385) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond385) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond385) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond385) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond385) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond385) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond385) CFA_SP SP+-4
          CFI (cfiCond385) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond386 Using cfiCommon0
          CFI (cfiCond386) Function MT_ZdoCommandProcessing
          CFI (cfiCond386) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_79
          CFI (cfiCond386) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond386) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond386) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond386) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond386) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond386) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond386) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond386) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond386) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond386) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond386) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond386) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond386) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond386) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond386) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond386) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond386) CFA_SP SP+-4
          CFI (cfiCond386) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond387 Using cfiCommon0
          CFI (cfiCond387) Function MT_ZdoCommandProcessing
          CFI (cfiCond387) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_80
          CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond387) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond387) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond387) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond387) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond387) CFA_SP SP+-4
          CFI (cfiCond387) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond388 Using cfiCommon0
          CFI (cfiCond388) Function MT_ZdoCommandProcessing
          CFI (cfiCond388) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_131
          CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond388) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond388) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond388) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond388) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond388) CFA_SP SP+-4
          CFI (cfiCond388) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond389 Using cfiCommon0
          CFI (cfiCond389) Function MT_ZdoSrcRtgCB
          CFI (cfiCond389) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_130
          CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond389) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond389) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond389) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond389) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond389) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond389) CFA_SP SP+-4
          CFI (cfiCond389) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker390 Using cfiCommon1
          CFI (cfiPicker390) NoFunction
          CFI (cfiPicker390) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        RET
          CFI EndBlock cfiCond383
          CFI EndBlock cfiCond384
          CFI EndBlock cfiCond385
          CFI EndBlock cfiCond386
          CFI EndBlock cfiCond387
          CFI EndBlock cfiCond388
          CFI EndBlock cfiCond389
          CFI EndBlock cfiPicker390

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond391 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond392 Using cfiCommon0
          CFI (cfiCond392) Function MT_ZdoSrcRtgCB
          CFI (cfiCond392) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond392) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond392) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond392) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond392) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond392) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond392) CFA_SP SP+-2
          CFI (cfiCond392) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond393 Using cfiCommon0
          CFI (cfiCond393) Function MT_ZdoSrcRtgCB
          CFI (cfiCond393) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond393) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond393) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond393) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond393) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond393) CFA_SP SP+-2
          CFI (cfiCond393) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker394 Using cfiCommon1
          CFI (cfiPicker394) NoFunction
          CFI (cfiPicker394) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        RET
          CFI EndBlock cfiCond391
          CFI EndBlock cfiCond392
          CFI EndBlock cfiCond393
          CFI EndBlock cfiPicker394
// 2384 
// 2385 /***************************************************************************************************
// 2386  * @fn          MT_ZdoConcentratorIndCB
// 2387  *
// 2388  * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
// 2389  *
// 2390  * @param       pStr - pointer to a parameter and a structure of parameters
// 2391  *
// 2392  * @return      NULL
// 2393  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2394 void *MT_ZdoConcentratorIndCB(void *pStr)
MT_ZdoConcentratorIndCB:
          CFI Block cfiBlock395 Using cfiCommon0
          CFI Function MT_ZdoConcentratorIndCB
        CODE
// 2395 {
        FUNCALL MT_ZdoConcentratorIndCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoConcentratorIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        LCALL     ?Subroutine9 & 0xFFFF
// 2396   uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
// 2397   zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
// 2398 
// 2399   *pTmp++ = LO_UINT16(pInd->nwkAddr);
// 2400   *pTmp++ = HI_UINT16(pInd->nwkAddr);
??CrossCallReturnLabel_12:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine79 & 0xFFFF
// 2401   pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
??CrossCallReturnLabel_167:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
// 2402   *pTmp = pInd->pktCost;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine41 & 0xFFFF
// 2403 
// 2404   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2405                                     MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
??CrossCallReturnLabel_63:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0xb
        MOV       R2,#-0x38
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2406   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,#0xb
        LJMP      ?Subroutine7 & 0xFFFF
// 2407 }
          CFI EndBlock cfiBlock395

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine79:
          CFI Block cfiCond396 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_166
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond397 Using cfiCommon0
          CFI (cfiCond397) Function MT_ZdoConcentratorIndCB
          CFI (cfiCond397) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond397) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond397) CFA_SP SP+-2
          CFI (cfiCond397) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond398 Using cfiCommon0
          CFI (cfiCond398) Function MT_ZdoLeaveInd
          CFI (cfiCond398) Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_98
          CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond398) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond398) CFA_SP SP+-4
          CFI (cfiCond398) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond399 Using cfiCommon0
          CFI (cfiCond399) Function MT_ZdoTcDeviceInd
          CFI (cfiCond399) Conditional ??CrossCallReturnLabel_168, ??CrossCallReturnLabel_99
          CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond399) CFA_SP SP+-4
          CFI (cfiCond399) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker400 Using cfiCommon1
          CFI (cfiPicker400) NoFunction
          CFI (cfiPicker400) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        RET
          CFI EndBlock cfiCond396
          CFI EndBlock cfiCond397
          CFI EndBlock cfiCond398
          CFI EndBlock cfiCond399
          CFI EndBlock cfiPicker400
// 2408 
// 2409 /***************************************************************************************************
// 2410  * @fn          MT_ZdoLeaveInd
// 2411  *
// 2412  * @brief       Handle the ZDO Leave Indication callback from the ZDO.
// 2413  *
// 2414  * @param       vPtr - Pointer to the received Leave Indication message.
// 2415  *
// 2416  * @return      NULL
// 2417  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2418 static void *MT_ZdoLeaveInd(void *vPtr)
MT_ZdoLeaveInd:
          CFI Block cfiBlock401 Using cfiCommon0
          CFI Function MT_ZdoLeaveInd
        CODE
// 2419 {
        FUNCALL MT_ZdoLeaveInd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoLeaveInd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        LCALL     ?Subroutine9 & 0xFFFF
// 2420   NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
// 2421   uint8 buf[sizeof(NLME_LeaveInd_t)];
// 2422 
// 2423   buf[0] = LO_UINT16(pInd->srcAddr);
// 2424   buf[1] = HI_UINT16(pInd->srcAddr);
??CrossCallReturnLabel_13:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine48 & 0xFFFF
// 2425   (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
??CrossCallReturnLabel_98:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
// 2426   buf[2+Z_EXTADDR_LEN] = pInd->request;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine53 & 0xFFFF
// 2427   buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
??CrossCallReturnLabel_112:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine54 & 0xFFFF
// 2428   buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
??CrossCallReturnLabel_114:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine57 & 0xFFFF
// 2429 
// 2430   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2431                                        MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
??CrossCallReturnLabel_121:
        MOV       R3,#0xd
        MOV       R2,#-0x37
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2432   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,#0xd
        LJMP      ?Subroutine7 & 0xFFFF
// 2433 }
          CFI EndBlock cfiBlock401

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond402 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_113
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond403 Using cfiCommon0
          CFI (cfiCond403) Function MT_ZdoLeaveInd
          CFI (cfiCond403) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond403) CFA_SP SP+-2
          CFI (cfiCond403) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker404 Using cfiCommon1
          CFI (cfiPicker404) NoFunction
          CFI (cfiPicker404) Picker
        MOVX      @DPTR,A
        LCALL     ?Subroutine82 & 0xFFFF
??CrossCallReturnLabel_173:
        RET
          CFI EndBlock cfiCond402
          CFI EndBlock cfiCond403
          CFI EndBlock cfiPicker404

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine82:
          CFI Block cfiCond405 Using cfiCommon0
          CFI Function MT_ZdoDirectCB
          CFI Conditional ??CrossCallReturnLabel_174, ??CrossCallReturnLabel_139
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond406 Using cfiCommon0
          CFI (cfiCond406) Function MT_ZdoDirectCB
          CFI (cfiCond406) Conditional ??CrossCallReturnLabel_174, ??CrossCallReturnLabel_140
          CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond406) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond406) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond406) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond406) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond406) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond406) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond406) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond406) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond406) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond406) CFA_SP SP+-4
          CFI (cfiCond406) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond407 Using cfiCommon0
          CFI (cfiCond407) Function MT_ZdoBeaconIndCB
          CFI (cfiCond407) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_113
          CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond407) CFA_SP SP+-4
          CFI (cfiCond407) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond408 Using cfiCommon0
          CFI (cfiCond408) Function MT_ZdoLeaveInd
          CFI (cfiCond408) Conditional ??CrossCallReturnLabel_173, ??CrossCallReturnLabel_114
          CFI (cfiCond408) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond408) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond408) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond408) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond408) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond408) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond408) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond408) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond408) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond408) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond408) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond408) CFA_SP SP+-4
          CFI (cfiCond408) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker409 Using cfiCommon1
          CFI (cfiPicker409) NoFunction
          CFI (cfiPicker409) Picker
        MOV       A,R6
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond405
          CFI EndBlock cfiCond406
          CFI EndBlock cfiCond407
          CFI EndBlock cfiCond408
          CFI EndBlock cfiPicker409

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond410 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond411 Using cfiCommon0
          CFI (cfiCond411) Function MT_ZdoLeaveInd
          CFI (cfiCond411) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond411) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond411) CFA_SP SP+-2
          CFI (cfiCond411) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker412 Using cfiCommon1
          CFI (cfiPicker412) NoFunction
          CFI (cfiPicker412) Picker
        MOVX      @DPTR,A
        LCALL     ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_175:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond410
          CFI EndBlock cfiCond411
          CFI EndBlock cfiPicker412

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond413 Using cfiCommon0
          CFI Function MT_ZdoConcentratorIndCB
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond414 Using cfiCommon0
          CFI (cfiCond414) Function MT_ZdoLeaveInd
          CFI (cfiCond414) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond414) CFA_SP SP+-2
          CFI (cfiCond414) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond415 Using cfiCommon0
          CFI (cfiCond415) Function MT_ZdoTcDeviceInd
          CFI (cfiCond415) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond415) CFA_SP SP+-2
          CFI (cfiCond415) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker416 Using cfiCommon1
          CFI (cfiPicker416) NoFunction
          CFI (cfiPicker416) Picker
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_189:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond413
          CFI EndBlock cfiCond414
          CFI EndBlock cfiCond415
          CFI EndBlock cfiPicker416
// 2434 
// 2435 /***************************************************************************************************
// 2436  * @fn          MT_ZdoTcDeviceInd
// 2437  *
// 2438  * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
// 2439  *
// 2440  * @param       params - pointer to Trust Center joining device information
// 2441  *
// 2442  * @return      NULL
// 2443  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2444 void *MT_ZdoTcDeviceInd( void *params )
MT_ZdoTcDeviceInd:
          CFI Block cfiBlock417 Using cfiCommon0
          CFI Function MT_ZdoTcDeviceInd
        CODE
// 2445 {
        FUNCALL MT_ZdoTcDeviceInd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoTcDeviceInd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL     ?Subroutine9 & 0xFFFF
// 2446   ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
// 2447   uint8 buf[12];
// 2448 
// 2449   buf[0] = LO_UINT16( pDev->nwkAddr );
// 2450   buf[1] = HI_UINT16( pDev->nwkAddr );
??CrossCallReturnLabel_14:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine48 & 0xFFFF
// 2451   (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
??CrossCallReturnLabel_99:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
// 2452   buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
        MOV       A,R6
        ADD       A,#0xa
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_136:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine50 & 0xFFFF
// 2453   buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
??CrossCallReturnLabel_108:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine57 & 0xFFFF
// 2454 
// 2455   MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2456                                        MT_ZDO_TC_DEVICE_IND, 12, buf );
??CrossCallReturnLabel_122:
        MOV       R3,#0xc
        MOV       R2,#-0x36
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2457 
// 2458   return ( NULL );
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,#0xc
        LJMP      ?Subroutine7 & 0xFFFF
// 2459 }
          CFI EndBlock cfiBlock417

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine62:
          CFI Block cfiCond418 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond419 Using cfiCommon0
          CFI (cfiCond419) Function MT_ZdoJoinCnfCB
          CFI (cfiCond419) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond419) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond419) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond419) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond419) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond419) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond419) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond419) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond419) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond419) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond419) CFA_SP SP+-2
          CFI (cfiCond419) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond420 Using cfiCommon0
          CFI (cfiCond420) Function MT_ZdoTcDeviceInd
          CFI (cfiCond420) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond420) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond420) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond420) CFA_SP SP+-2
          CFI (cfiCond420) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond421 Using cfiCommon0
          CFI (cfiCond421) Function MT_ZdoSendMsgCB
          CFI (cfiCond421) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond421) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond421) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond421) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond421) CFA_SP SP+-2
          CFI (cfiCond421) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond422 Using cfiCommon0
          CFI (cfiCond422) Function MT_ZdoSendMsgCB
          CFI (cfiCond422) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond422) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond422) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond422) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond422) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond422) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond422) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond422) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond422) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond422) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond422) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond422) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond422) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond422) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond422) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond422) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond422) CFA_SP SP+-2
          CFI (cfiCond422) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker423 Using cfiCommon1
          CFI (cfiPicker423) NoFunction
          CFI (cfiPicker423) Picker
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond418
          CFI EndBlock cfiCond419
          CFI EndBlock cfiCond420
          CFI EndBlock cfiCond421
          CFI EndBlock cfiCond422
          CFI EndBlock cfiPicker423

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine57:
          CFI Block cfiCond424 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
          CFI Conditional ??CrossCallReturnLabel_120
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond425 Using cfiCommon0
          CFI (cfiCond425) Function MT_ZdoLeaveInd
          CFI (cfiCond425) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond425) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond425) CFA_SP SP+-2
          CFI (cfiCond425) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond426 Using cfiCommon0
          CFI (cfiCond426) Function MT_ZdoTcDeviceInd
          CFI (cfiCond426) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond426) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond426) CFA_SP SP+-2
          CFI (cfiCond426) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond427 Using cfiCommon0
          CFI (cfiCond427) Function MT_ZdoExtNwkInfo
          CFI (cfiCond427) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond427) CFA_SP SP+-2
          CFI (cfiCond427) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker428 Using cfiCommon1
          CFI (cfiPicker428) NoFunction
          CFI (cfiPicker428) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        RET
          CFI EndBlock cfiCond424
          CFI EndBlock cfiCond425
          CFI EndBlock cfiCond426
          CFI EndBlock cfiCond427
          CFI EndBlock cfiPicker428

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond429 Using cfiCommon0
          CFI Function MT_ZdoLeaveInd
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond430 Using cfiCommon0
          CFI (cfiCond430) Function MT_ZdoTcDeviceInd
          CFI (cfiCond430) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond430) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond430) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond430) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond430) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond430) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond430) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond430) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond430) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond430) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond430) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond430) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond430) CFA_SP SP+-2
          CFI (cfiCond430) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker431 Using cfiCommon1
          CFI (cfiPicker431) NoFunction
          CFI (cfiPicker431) Picker
        LCALL     ?Subroutine79 & 0xFFFF
??CrossCallReturnLabel_168:
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond429
          CFI EndBlock cfiCond430
          CFI EndBlock cfiPicker431
// 2460 
// 2461 /***************************************************************************************************
// 2462  * @fn          MT_ZdoPermitJoinInd
// 2463  *
// 2464  * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
// 2465  *
// 2466  * @param       duration - permit join duration
// 2467  *
// 2468  * @return      NULL
// 2469  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2470 void *MT_ZdoPermitJoinInd( void *duration )
MT_ZdoPermitJoinInd:
          CFI Block cfiBlock432 Using cfiCommon0
          CFI Function MT_ZdoPermitJoinInd
        CODE
// 2471 {
        FUNCALL MT_ZdoPermitJoinInd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2472   if ( ignoreIndication == FALSE )
        MOV       DPTR,#ignoreIndication
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoPermitJoinInd_0
// 2473   {
// 2474     MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2475                                        MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       R3,#0x1
        MOV       R2,#-0x35
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2476   }
// 2477 
// 2478   return ( NULL );
??MT_ZdoPermitJoinInd_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
        LJMP      ?Subroutine0 & 0xFFFF
// 2479 }
          CFI EndBlock cfiBlock432
// 2480 #endif // MT_ZDO_CB_FUNC
// 2481 
// 2482 /***************************************************************************************************
// 2483  * @fn      MT_ZdoSendMsgCB
// 2484  *
// 2485  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 2486  *
// 2487  * @param   pMsg  - Message data
// 2488  *
// 2489  * @return  void
// 2490  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2491 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
MT_ZdoSendMsgCB:
          CFI Block cfiBlock433 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
        CODE
// 2492 {
        FUNCALL MT_ZdoSendMsgCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2493   uint8 len = pMsg->asduLen + 9;
        LCALL     ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_143:
        ADD       A,#0x9
        MOV       ?V2,A
// 2494   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2495 
// 2496   if (pBuf != NULL)
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??MT_ZdoSendMsgCB_0 & 0xFFFF
// 2497   {
// 2498     uint8 *pTmp = pBuf;
// 2499 
// 2500     // Assuming exclusive use of network short addresses.
// 2501     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
        MOV       A,R6
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        LCALL     ?Subroutine13 & 0xFFFF
// 2502     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
// 2503     *pTmp++ = pMsg->wasBroadcast;
??CrossCallReturnLabel_21:
        LCALL     ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL     ?Subroutine25 & 0xFFFF
// 2504     *pTmp++ = LO_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_40:
        MOV       A,R6
        ADD       A,#0xc
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_137:
        LCALL     ??Subroutine99_0 & 0xFFFF
// 2505     *pTmp++ = HI_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_222:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine33 & 0xFFFF
// 2506     *pTmp++ = pMsg->SecurityUse;
??CrossCallReturnLabel_55:
        MOV       A,R6
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine31 & 0xFFFF
// 2507     *pTmp++ = pMsg->TransSeq;
??CrossCallReturnLabel_53:
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine27 & 0xFFFF
// 2508     // Skipping asduLen since it can be deduced from the RPC packet length.
// 2509     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_44:
        MOV       A,R6
        ADD       A,#0x11
        LCALL     ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_138:
        LCALL     ?Subroutine26 & 0xFFFF
// 2510     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_42:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine18 & 0xFFFF
// 2511     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
??CrossCallReturnLabel_29:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL     ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_144:
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0x9
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2512 
// 2513     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2514                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,?V2
        MOV       R2,#-0x1
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2515 
// 2516     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2517   }
// 2518 }
??MT_ZdoSendMsgCB_0:
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock433

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine66:
          CFI Block cfiCond434 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_143
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond435 Using cfiCommon0
          CFI (cfiCond435) Function MT_ZdoSendMsgCB
          CFI (cfiCond435) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond435) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond435) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond435) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond435) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond435) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond435) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond435) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond435) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond435) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond435) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond435) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond435) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond435) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond435) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond435) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond435) CFA_SP SP+-2
          CFI (cfiCond435) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker436 Using cfiCommon1
          CFI (cfiPicker436) NoFunction
          CFI (cfiPicker436) Picker
        MOV       A,R6
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond434
          CFI EndBlock cfiCond435
          CFI EndBlock cfiPicker436

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine61:
          CFI Block cfiCond437 Using cfiCommon0
          CFI Function MT_ZdoAddrRspCB
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond438 Using cfiCommon0
          CFI (cfiCond438) Function MT_ZdoSendMsgCB
          CFI (cfiCond438) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond438) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond438) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond438) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond438) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond438) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond438) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond438) CFA_SP SP+-2
          CFI (cfiCond438) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker439 Using cfiCommon1
          CFI (cfiPicker439) NoFunction
          CFI (cfiPicker439) Picker
        LCALL     ?Subroutine83 & 0xFFFF
??CrossCallReturnLabel_176:
        RET
          CFI EndBlock cfiCond437
          CFI EndBlock cfiCond438
          CFI EndBlock cfiPicker439

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine83:
          CFI Block cfiCond440 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond441 Using cfiCommon0
          CFI (cfiCond441) Function MT_ZdoLeaveInd
          CFI (cfiCond441) Conditional ??CrossCallReturnLabel_175, ??CrossCallReturnLabel_112
          CFI (cfiCond441) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond441) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond441) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond441) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond441) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond441) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond441) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond441) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond441) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond441) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond441) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond441) CFA_SP SP+-4
          CFI (cfiCond441) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond442 Using cfiCommon0
          CFI (cfiCond442) Function MT_ZdoAddrRspCB
          CFI (cfiCond442) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_132
          CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond442) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond442) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond442) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond442) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond442) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond442) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond442) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond442) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond442) CFA_SP SP+-4
          CFI (cfiCond442) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond443 Using cfiCommon0
          CFI (cfiCond443) Function MT_ZdoSendMsgCB
          CFI (cfiCond443) Conditional ??CrossCallReturnLabel_176, ??CrossCallReturnLabel_133
          CFI (cfiCond443) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond443) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond443) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond443) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond443) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond443) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond443) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond443) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond443) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond443) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond443) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond443) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond443) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond443) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond443) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond443) CFA_SP SP+-4
          CFI (cfiCond443) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker444 Using cfiCommon1
          CFI (cfiPicker444) NoFunction
          CFI (cfiPicker444) Picker
        MOV       A,R6
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond440
          CFI EndBlock cfiCond441
          CFI EndBlock cfiCond442
          CFI EndBlock cfiCond443
          CFI EndBlock cfiPicker444

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond445 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond446 Using cfiCommon0
          CFI (cfiCond446) Function MT_ZdoSendMsgCB
          CFI (cfiCond446) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond446) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond446) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond446) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond446) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond446) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond446) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond446) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond446) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond446) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond446) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond446) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond446) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond446) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond446) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond446) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond446) CFA_SP SP+-2
          CFI (cfiCond446) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker447 Using cfiCommon1
          CFI (cfiPicker447) NoFunction
          CFI (cfiPicker447) Picker
        INC       DPTR
        LCALL     ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_160:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond445
          CFI EndBlock cfiCond446
          CFI EndBlock cfiPicker447

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond448 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond449 Using cfiCommon0
          CFI (cfiCond449) Function MT_ZdoSendMsgCB
          CFI (cfiCond449) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond449) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond449) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond449) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond449) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond449) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond449) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond449) CFA_SP SP+-2
          CFI (cfiCond449) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker450 Using cfiCommon1
          CFI (cfiPicker450) NoFunction
          CFI (cfiPicker450) Picker
        LCALL     ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_159:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond448
          CFI EndBlock cfiCond449
          CFI EndBlock cfiPicker450

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine74:
          CFI Block cfiCond451 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond452 Using cfiCommon0
          CFI (cfiCond452) Function MT_ZdoSendMsgCB
          CFI (cfiCond452) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_55
          CFI (cfiCond452) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond452) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond452) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond452) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond452) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond452) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond452) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond452) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond452) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond452) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond452) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond452) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond452) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond452) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond452) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond452) CFA_SP SP+-4
          CFI (cfiCond452) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond453 Using cfiCommon0
          CFI (cfiCond453) Function MT_ZdoBeaconIndCB
          CFI (cfiCond453) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_52
          CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond453) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond453) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond453) CFA_SP SP+-4
          CFI (cfiCond453) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond454 Using cfiCommon0
          CFI (cfiCond454) Function MT_ZdoSendMsgCB
          CFI (cfiCond454) Conditional ??CrossCallReturnLabel_159, ??CrossCallReturnLabel_53
          CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond454) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond454) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond454) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond454) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond454) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond454) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond454) CFA_SP SP+-4
          CFI (cfiCond454) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker455 Using cfiCommon1
          CFI (cfiPicker455) NoFunction
          CFI (cfiPicker455) Picker
        LCALL     ?Subroutine86 & 0xFFFF
??CrossCallReturnLabel_229:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond451
          CFI EndBlock cfiCond452
          CFI EndBlock cfiCond453
          CFI EndBlock cfiCond454
          CFI EndBlock cfiPicker455

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond456 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond457 Using cfiCommon0
          CFI (cfiCond457) Function MT_ZdoSendMsgCB
          CFI (cfiCond457) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond457) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond457) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond457) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond457) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond457) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond457) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond457) CFA_SP SP+-2
          CFI (cfiCond457) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker458 Using cfiCommon1
          CFI (cfiPicker458) NoFunction
          CFI (cfiPicker458) Picker
        LCALL     ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_156:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond456
          CFI EndBlock cfiCond457
          CFI EndBlock cfiPicker458

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond459 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond460 Using cfiCommon0
          CFI (cfiCond460) Function MT_ZdoSendMsgCB
          CFI (cfiCond460) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond460) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond460) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond460) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond460) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond460) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond460) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond460) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond460) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond460) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond460) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond460) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond460) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond460) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond460) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond460) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond460) CFA_SP SP+-2
          CFI (cfiCond460) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker461 Using cfiCommon1
          CFI (cfiPicker461) NoFunction
          CFI (cfiPicker461) Picker
        LCALL     ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_155:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond459
          CFI EndBlock cfiCond460
          CFI EndBlock cfiPicker461

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine72:
          CFI Block cfiCond462 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond463 Using cfiCommon0
          CFI (cfiCond463) Function MT_ZdoSendMsgCB
          CFI (cfiCond463) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_44
          CFI (cfiCond463) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond463) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond463) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond463) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond463) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond463) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond463) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond463) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond463) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond463) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond463) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond463) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond463) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond463) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond463) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond463) CFA_SP SP+-4
          CFI (cfiCond463) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond464 Using cfiCommon0
          CFI (cfiCond464) Function MT_ZdoBeaconIndCB
          CFI (cfiCond464) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_41
          CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond464) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond464) CFA_SP SP+-4
          CFI (cfiCond464) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond465 Using cfiCommon0
          CFI (cfiCond465) Function MT_ZdoSendMsgCB
          CFI (cfiCond465) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_42
          CFI (cfiCond465) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond465) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond465) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond465) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond465) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond465) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond465) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond465) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond465) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond465) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond465) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond465) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond465) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond465) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond465) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond465) CFA_SP SP+-4
          CFI (cfiCond465) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker466 Using cfiCommon1
          CFI (cfiPicker466) NoFunction
          CFI (cfiPicker466) Picker
        LCALL     ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_178:
        RET
          CFI EndBlock cfiCond462
          CFI EndBlock cfiCond463
          CFI EndBlock cfiCond464
          CFI EndBlock cfiCond465
          CFI EndBlock cfiPicker466

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine84:
          CFI Block cfiCond467 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond468 Using cfiCommon0
          CFI (cfiCond468) Function MT_ZdoSendMsgCB
          CFI (cfiCond468) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_44
          CFI (cfiCond468) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond468) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond468) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond468) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond468) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond468) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond468) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond468) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond468) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond468) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond468) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond468) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond468) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond468) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond468) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond468) CFA_SP SP+-6
          CFI (cfiCond468) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond469 Using cfiCommon0
          CFI (cfiCond469) Function MT_ZdoBeaconIndCB
          CFI (cfiCond469) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_41
          CFI (cfiCond469) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond469) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond469) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond469) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond469) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond469) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond469) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond469) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond469) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond469) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond469) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond469) CFA_SP SP+-6
          CFI (cfiCond469) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond470 Using cfiCommon0
          CFI (cfiCond470) Function MT_ZdoSendMsgCB
          CFI (cfiCond470) Conditional ??CrossCallReturnLabel_178, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_42
          CFI (cfiCond470) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond470) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond470) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond470) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond470) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond470) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond470) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond470) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond470) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond470) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond470) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond470) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond470) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond470) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond470) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond470) CFA_SP SP+-6
          CFI (cfiCond470) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond471 Using cfiCommon0
          CFI (cfiCond471) Function MT_ZdoBeaconIndCB
          CFI (cfiCond471) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_30
          CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond471) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond471) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond471) CFA_SP SP+-6
          CFI (cfiCond471) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond472 Using cfiCommon0
          CFI (cfiCond472) Function MT_ZdoBeaconIndCB
          CFI (cfiCond472) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_31
          CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond472) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond472) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond472) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond472) CFA_SP SP+-6
          CFI (cfiCond472) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond473 Using cfiCommon0
          CFI (cfiCond473) Function MT_ZdoBeaconIndCB
          CFI (cfiCond473) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_28
          CFI (cfiCond473) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond473) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond473) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond473) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond473) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond473) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond473) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond473) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond473) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond473) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond473) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond473) CFA_SP SP+-6
          CFI (cfiCond473) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond474 Using cfiCommon0
          CFI (cfiCond474) Function MT_ZdoSendMsgCB
          CFI (cfiCond474) Conditional ??CrossCallReturnLabel_177, ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_29
          CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond474) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond474) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond474) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond474) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond474) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond474) CFA_SP SP+-6
          CFI (cfiCond474) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker475 Using cfiCommon1
          CFI (cfiPicker475) NoFunction
          CFI (cfiPicker475) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond467
          CFI EndBlock cfiCond468
          CFI EndBlock cfiCond469
          CFI EndBlock cfiCond470
          CFI EndBlock cfiCond471
          CFI EndBlock cfiCond472
          CFI EndBlock cfiCond473
          CFI EndBlock cfiCond474
          CFI EndBlock cfiPicker475

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond476 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond477 Using cfiCommon0
          CFI (cfiCond477) Function MT_ZdoSendMsgCB
          CFI (cfiCond477) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond477) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond477) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond477) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond477) CFA_SP SP+-2
          CFI (cfiCond477) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker478 Using cfiCommon1
          CFI (cfiPicker478) NoFunction
          CFI (cfiPicker478) Picker
        LCALL     ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_149:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond476
          CFI EndBlock cfiCond477
          CFI EndBlock cfiPicker478

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine69:
          CFI Block cfiCond479 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond480 Using cfiCommon0
          CFI (cfiCond480) Function MT_ZdoBeaconIndCB
          CFI (cfiCond480) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_31
          CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond480) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond480) CFA_SP SP+-4
          CFI (cfiCond480) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond481 Using cfiCommon0
          CFI (cfiCond481) Function MT_ZdoBeaconIndCB
          CFI (cfiCond481) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_28
          CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond481) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond481) CFA_SP SP+-4
          CFI (cfiCond481) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond482 Using cfiCommon0
          CFI (cfiCond482) Function MT_ZdoSendMsgCB
          CFI (cfiCond482) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_29
          CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond482) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond482) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond482) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond482) CFA_SP SP+-4
          CFI (cfiCond482) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker483 Using cfiCommon1
          CFI (cfiPicker483) NoFunction
          CFI (cfiPicker483) Picker
        INC       DPTR
        LCALL     ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_177:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond479
          CFI EndBlock cfiCond480
          CFI EndBlock cfiCond481
          CFI EndBlock cfiCond482
          CFI EndBlock cfiPicker483

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond484 Using cfiCommon0
          CFI Function MT_ZdoSrcRtgCB
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond485 Using cfiCommon0
          CFI (cfiCond485) Function MT_ZdoSendMsgCB
          CFI (cfiCond485) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond485) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond485) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond485) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond485) CFA_SP SP+-2
          CFI (cfiCond485) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker486 Using cfiCommon1
          CFI (cfiPicker486) NoFunction
          CFI (cfiPicker486) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine86 & 0xFFFF
??CrossCallReturnLabel_228:
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        LCALL     ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_225:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond484
          CFI EndBlock cfiCond485
          CFI EndBlock cfiPicker486
// 2519 
// 2520 
// 2521 #if defined ( MT_ZDO_EXTENSIONS )
// 2522 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2523 /***************************************************************************************************
// 2524  * @fn          MT_ZdoSecUpdateNwkKey
// 2525  *
// 2526  * @brief       Handle the ZDO Security Update Network Key extension message
// 2527  *
// 2528  * @param       pBuf - Pointer to the received message data.
// 2529  *
// 2530  * @return      NULL
// 2531  ***************************************************************************************************/
// 2532 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
// 2533 {
// 2534   uint16 dstAddr;
// 2535   uint8 keySeqNum;
// 2536   uint8 status;
// 2537 
// 2538   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2539 
// 2540   dstAddr = osal_build_uint16( pBuf );
// 2541   pBuf += 2;
// 2542   keySeqNum = *pBuf++;
// 2543 
// 2544   status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
// 2545 
// 2546   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2547                                        MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
// 2548 }
// 2549 
// 2550 /***************************************************************************************************
// 2551  * @fn          MT_ZdoSecSwitchNwkKey
// 2552  *
// 2553  * @brief       Handle the ZDO Security Switch Network Key extension message
// 2554  *
// 2555  * @param       pBuf - Pointer to the received message data.
// 2556  *
// 2557  * @return      NULL
// 2558  ***************************************************************************************************/
// 2559 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
// 2560 {
// 2561   uint16 dstAddr;
// 2562   uint8 keySeqNum;
// 2563   uint8 status;
// 2564 
// 2565   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2566 
// 2567   dstAddr = osal_build_uint16( pBuf );
// 2568   pBuf += 2;
// 2569   keySeqNum = *pBuf++;
// 2570 
// 2571   status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
// 2572 
// 2573   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2574                                        MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
// 2575 }
// 2576 #endif // ZG_BUILD_COORDINATOR_TYPE
// 2577 
// 2578 /***************************************************************************************************
// 2579  * @fn          MT_ZdoSecAddLinkKey
// 2580  *
// 2581  * @brief       Handle the ZDO Security Add Link Key extension message
// 2582  *
// 2583  * @param       pBuf - Pointer to the received message data.
// 2584  *
// 2585  * @return      NULL
// 2586  ***************************************************************************************************/
// 2587 static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
// 2588 {
// 2589   uint16 shortAddr;
// 2590   uint8 *pExtAddr;
// 2591   uint8 status;
// 2592 
// 2593   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2594 
// 2595   shortAddr = osal_build_uint16( pBuf );
// 2596   pBuf += 2;
// 2597   pExtAddr = pBuf;
// 2598   pBuf += Z_EXTADDR_LEN;
// 2599 
// 2600   status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
// 2601 
// 2602   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2603                                        MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
// 2604 }
// 2605 
// 2606 /***************************************************************************************************
// 2607  * @fn          MT_ZdoSecEntryLookupExt
// 2608  *
// 2609  * @brief       Handle the ZDO Security Entry Lookup Extended extension message
// 2610  *
// 2611  * @param       pBuf - Pointer to the received message data.
// 2612  *
// 2613  * @return      NULL
// 2614  ***************************************************************************************************/
// 2615 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
// 2616 {
// 2617   ZDSecMgrEntry_t *pEntry = NULL;
// 2618   uint8 buf[6] = {0};
// 2619 
// 2620   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2621 
// 2622   // lookup entry index for specified EXT address
// 2623   buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
// 2624   if ( pEntry )
// 2625   {
// 2626     buf[1] = LO_UINT16( pEntry->ami );
// 2627     buf[2] = HI_UINT16( pEntry->ami );
// 2628     buf[3] = LO_UINT16( pEntry->keyNvId );
// 2629     buf[4] = HI_UINT16( pEntry->keyNvId );
// 2630     buf[5] = (uint8)pEntry->authenticateOption;
// 2631   }
// 2632 
// 2633   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2634                                        MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
// 2635 }
// 2636 
// 2637 /***************************************************************************************************
// 2638  * @fn          MT_ZdoSecDeviceRemove
// 2639  *
// 2640  * @brief       Handle the ZDO Security Remove Device extension message
// 2641  *
// 2642  * @param       pBuf - Pointer to the received message data.
// 2643  *
// 2644  * @return      NULL
// 2645  ***************************************************************************************************/
// 2646 static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
// 2647 {
// 2648   ZStatus_t status;
// 2649 
// 2650   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2651 
// 2652   // lookup entry index for specified EXT address
// 2653   status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
// 2654 
// 2655   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2656                                        MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
// 2657 }
// 2658 
// 2659 /***************************************************************************************************
// 2660  * @fn          MT_ZdoExtRouteDisc
// 2661  *
// 2662  * @brief       Handle the ZDO Route Discovery extension message
// 2663  *
// 2664  * @param       pBuf - Pointer to the received message data.
// 2665  *
// 2666  * @return      NULL
// 2667  ***************************************************************************************************/
// 2668 static void MT_ZdoExtRouteDisc( uint8 *pBuf )
// 2669 {
// 2670   ZStatus_t status;
// 2671   uint16 dstAddr;
// 2672 
// 2673   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2674 
// 2675   dstAddr = osal_build_uint16( pBuf );
// 2676 
// 2677   status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
// 2678 
// 2679 
// 2680   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2681                                        MT_ZDO_EXT_ROUTE_DISC, 1, &status );
// 2682 }
// 2683 
// 2684 /***************************************************************************************************
// 2685  * @fn          MT_ZdoExtRouteCheck
// 2686  *
// 2687  * @brief       Handle the ZDO Route Check extension message
// 2688  *
// 2689  * @param       pBuf - Pointer to the received message data.
// 2690  *
// 2691  * @return      NULL
// 2692  ***************************************************************************************************/
// 2693 static void MT_ZdoExtRouteCheck( uint8 *pBuf )
// 2694 {
// 2695   ZStatus_t status;
// 2696   uint16 dstAddr;
// 2697 
// 2698   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2699 
// 2700   dstAddr = osal_build_uint16( pBuf );
// 2701 
// 2702   status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
// 2703 
// 2704   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2705                                        MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
// 2706 }
// 2707 
// 2708 /***************************************************************************************************
// 2709  * @fn          MT_ZdoExtRemoveGroup
// 2710  *
// 2711  * @brief       Handle the ZDO extension Remove Group message
// 2712  *
// 2713  * @param       pBuf - Pointer to the received message data.
// 2714  *
// 2715  * @return      NULL
// 2716  ***************************************************************************************************/
// 2717 static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
// 2718 {
// 2719   ZStatus_t status;
// 2720   uint8 endpoint;
// 2721   uint16 groupID;
// 2722 
// 2723   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2724 
// 2725   endpoint = *pBuf++;
// 2726   groupID = osal_build_uint16( pBuf );
// 2727 
// 2728   if ( aps_RemoveGroup( endpoint, groupID ) )
// 2729   {
// 2730     status = ZSuccess;
// 2731   }
// 2732   else
// 2733   {
// 2734     status = ZFailure;
// 2735   }
// 2736 
// 2737   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2738                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2739 }
// 2740 
// 2741 /***************************************************************************************************
// 2742  * @fn          MT_ZdoExtRemoveAllGroup
// 2743  *
// 2744  * @brief       Handle the ZDO extension Remove All Groups message
// 2745  *
// 2746  * @param       pBuf - Pointer to the received message data.
// 2747  *
// 2748  * @return      NULL
// 2749  ***************************************************************************************************/
// 2750 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
// 2751 {
// 2752   ZStatus_t status = ZSuccess;
// 2753 
// 2754   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2755 
// 2756   aps_RemoveAllGroup( *pBuf );
// 2757 
// 2758   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2759                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2760 }
// 2761 
// 2762 /***************************************************************************************************
// 2763  * @fn          MT_ZdoExtFindAllGroupsEndpoint
// 2764  *
// 2765  * @brief       Handle the ZDO extension Find All Groups for Endpoint message
// 2766  *
// 2767  * @param       pBuf - Pointer to the received message data.
// 2768  *
// 2769  * @return      NULL
// 2770  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2771 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
MT_ZdoExtFindAllGroupsEndpoint:
          CFI Block cfiBlock487 Using cfiCommon0
          CFI Function MT_ZdoExtFindAllGroupsEndpoint
        CODE
// 2772 {
        FUNCALL MT_ZdoExtFindAllGroupsEndpoint, aps_FindAllGroupsForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtFindAllGroupsEndpoint, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtFindAllGroupsEndpoint, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtFindAllGroupsEndpoint, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtFindAllGroupsEndpoint, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 33
        MOV       A,#-0x21
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       DPL,R2
        MOV       DPH,R3
// 2773   uint16 groupList[ APS_MAX_GROUPS ];
// 2774   uint8 groups;
// 2775   uint8 msgLen;
// 2776   uint8 *pMsg;
// 2777 
// 2778   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2779 
// 2780   groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
        ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2781 
// 2782   msgLen = 1 + (2 * groups);
        CLR       C
        RLC       A
        INC       A
        MOV       ?V0,A
// 2783   pMsg = osal_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
// 2784   if ( pMsg )
        MOV       A,R6
        ORL       A,R7
        JZ        ??MT_ZdoExtFindAllGroupsEndpoint_0
// 2785   {
// 2786     uint8 x;
// 2787     uint8 *pBuf = pMsg;
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
// 2788 
// 2789     *pBuf++ = groups;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_64:
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
// 2790     for ( x = 0; x < groups; x++ )
        MOV       R4,#0x0
        SJMP      ??MT_ZdoExtFindAllGroupsEndpoint_1
// 2791     {
// 2792       *pBuf++ = LO_UINT16( groupList[x] );
??MT_ZdoExtFindAllGroupsEndpoint_2:
        MOV       A,R4
        ADD       A,0xE0 /* A   */
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R2
        MOV       R2,A
        MOV       A,DPH
        ADDC      A,R3
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ?Subroutine41 & 0xFFFF
// 2793       *pBuf++ = HI_UINT16( groupList[x] );
??CrossCallReturnLabel_65:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??MT_ZdoExtFindAllGroupsEndpoint_3
        INC       R1
// 2794     }
??MT_ZdoExtFindAllGroupsEndpoint_3:
        INC       R4
??MT_ZdoExtFindAllGroupsEndpoint_1:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R4
        CLR       C
        SUBB      A,R2
        JC        ??MT_ZdoExtFindAllGroupsEndpoint_2
// 2795 
// 2796     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2797                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,?V0
        MOV       R2,#0x49
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2798     osal_mem_free( pMsg );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??MT_ZdoExtFindAllGroupsEndpoint_4
// 2799   }
// 2800   else
// 2801   {
// 2802     groups = 0;
??MT_ZdoExtFindAllGroupsEndpoint_0:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        LCALL     ??Subroutine104_0 & 0xFFFF
// 2803     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2804                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
// 2805   }
??CrossCallReturnLabel_254:
        MOV       R2,#0x49
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2806 }
??MT_ZdoExtFindAllGroupsEndpoint_4:
        MOV       A,#0x21
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock487

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond488 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_245
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond489 Using cfiCommon0
          CFI (cfiCond489) Function MT_ZdoCommandProcessing
          CFI (cfiCond489) Conditional ??CrossCallReturnLabel_246
          CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond489) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond489) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond489) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond489) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond489) CFA_SP SP+-2
          CFI (cfiCond489) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond490 Using cfiCommon0
          CFI (cfiCond490) Function MT_ZdoCommandProcessing
          CFI (cfiCond490) Conditional ??CrossCallReturnLabel_247
          CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond490) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond490) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond490) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond490) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond490) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond490) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond490) CFA_SP SP+-2
          CFI (cfiCond490) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond491 Using cfiCommon0
          CFI (cfiCond491) Function MT_ZdoCommandProcessing
          CFI (cfiCond491) Conditional ??CrossCallReturnLabel_248
          CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond491) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond491) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond491) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond491) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond491) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond491) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond491) CFA_SP SP+-2
          CFI (cfiCond491) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond492 Using cfiCommon0
          CFI (cfiCond492) Function MT_ZdoCommandProcessing
          CFI (cfiCond492) Conditional ??CrossCallReturnLabel_249
          CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond492) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond492) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond492) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond492) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond492) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond492) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond492) CFA_SP SP+-2
          CFI (cfiCond492) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond493 Using cfiCommon0
          CFI (cfiCond493) Function MT_ZdoCommandProcessing
          CFI (cfiCond493) Conditional ??CrossCallReturnLabel_250
          CFI (cfiCond493) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond493) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond493) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond493) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond493) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond493) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond493) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond493) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond493) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond493) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond493) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond493) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond493) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond493) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond493) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond493) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond493) CFA_SP SP+-2
          CFI (cfiCond493) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond494 Using cfiCommon0
          CFI (cfiCond494) Function MT_ZdoCommandProcessing
          CFI (cfiCond494) Conditional ??CrossCallReturnLabel_251
          CFI (cfiCond494) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond494) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond494) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond494) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond494) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond494) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond494) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond494) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond494) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond494) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond494) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond494) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond494) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond494) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond494) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond494) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond494) CFA_SP SP+-2
          CFI (cfiCond494) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond495 Using cfiCommon0
          CFI (cfiCond495) Function MT_ZdoCommandProcessing
          CFI (cfiCond495) Conditional ??CrossCallReturnLabel_252
          CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond495) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond495) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond495) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond495) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond495) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond495) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond495) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond495) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond495) CFA_SP SP+-2
          CFI (cfiCond495) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker496 Using cfiCommon1
          CFI (cfiPicker496) NoFunction
          CFI (cfiPicker496) Picker
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond488
          CFI EndBlock cfiCond489
          CFI EndBlock cfiCond490
          CFI EndBlock cfiCond491
          CFI EndBlock cfiCond492
          CFI EndBlock cfiCond493
          CFI EndBlock cfiCond494
          CFI EndBlock cfiCond495
          CFI EndBlock cfiPicker496
        REQUIRE ??Subroutine104_0
        ; // Fall through to label ??Subroutine104_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine104_0:
          CFI Block cfiCond497 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_253
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond498 Using cfiCommon0
          CFI (cfiCond498) Function MT_ZdoExtFindAllGroupsEndpoint
          CFI (cfiCond498) Conditional ??CrossCallReturnLabel_254
          CFI (cfiCond498) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond498) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond498) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond498) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond498) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond498) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond498) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond498) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond498) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond498) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond498) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond498) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond498) CFA_SP SP+-2
          CFI (cfiCond498) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond499 Using cfiCommon0
          CFI (cfiCond499) Function MT_ZdoCommandProcessing
          CFI (cfiCond499) Conditional ??CrossCallReturnLabel_245
          CFI (cfiCond499) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond499) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond499) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond499) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond499) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond499) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond499) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond499) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond499) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond499) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond499) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond499) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond499) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond499) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond499) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond499) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond499) CFA_SP SP+-2
          CFI (cfiCond499) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond500 Using cfiCommon0
          CFI (cfiCond500) Function MT_ZdoCommandProcessing
          CFI (cfiCond500) Conditional ??CrossCallReturnLabel_246
          CFI (cfiCond500) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond500) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond500) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond500) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond500) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond500) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond500) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond500) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond500) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond500) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond500) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond500) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond500) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond500) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond500) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond500) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond500) CFA_SP SP+-2
          CFI (cfiCond500) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond501 Using cfiCommon0
          CFI (cfiCond501) Function MT_ZdoCommandProcessing
          CFI (cfiCond501) Conditional ??CrossCallReturnLabel_247
          CFI (cfiCond501) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond501) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond501) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond501) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond501) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond501) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond501) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond501) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond501) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond501) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond501) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond501) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond501) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond501) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond501) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond501) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond501) CFA_SP SP+-2
          CFI (cfiCond501) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond502 Using cfiCommon0
          CFI (cfiCond502) Function MT_ZdoCommandProcessing
          CFI (cfiCond502) Conditional ??CrossCallReturnLabel_248
          CFI (cfiCond502) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond502) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond502) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond502) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond502) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond502) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond502) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond502) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond502) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond502) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond502) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond502) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond502) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond502) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond502) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond502) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond502) CFA_SP SP+-2
          CFI (cfiCond502) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond503 Using cfiCommon0
          CFI (cfiCond503) Function MT_ZdoCommandProcessing
          CFI (cfiCond503) Conditional ??CrossCallReturnLabel_249
          CFI (cfiCond503) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond503) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond503) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond503) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond503) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond503) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond503) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond503) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond503) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond503) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond503) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond503) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond503) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond503) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond503) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond503) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond503) CFA_SP SP+-2
          CFI (cfiCond503) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond504 Using cfiCommon0
          CFI (cfiCond504) Function MT_ZdoCommandProcessing
          CFI (cfiCond504) Conditional ??CrossCallReturnLabel_250
          CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond504) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond504) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond504) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond504) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond504) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond504) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond504) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond504) CFA_SP SP+-2
          CFI (cfiCond504) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond505 Using cfiCommon0
          CFI (cfiCond505) Function MT_ZdoCommandProcessing
          CFI (cfiCond505) Conditional ??CrossCallReturnLabel_251
          CFI (cfiCond505) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond505) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond505) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond505) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond505) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond505) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond505) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond505) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond505) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond505) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond505) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond505) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond505) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond505) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond505) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond505) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond505) CFA_SP SP+-2
          CFI (cfiCond505) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond506 Using cfiCommon0
          CFI (cfiCond506) Function MT_ZdoCommandProcessing
          CFI (cfiCond506) Conditional ??CrossCallReturnLabel_252
          CFI (cfiCond506) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond506) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond506) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond506) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond506) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond506) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond506) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond506) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond506) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond506) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond506) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond506) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond506) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond506) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond506) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond506) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond506) CFA_SP SP+-2
          CFI (cfiCond506) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiPicker507 Using cfiCommon1
          CFI (cfiPicker507) NoFunction
          CFI (cfiPicker507) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        RET
          CFI EndBlock cfiCond497
          CFI EndBlock cfiCond498
          CFI EndBlock cfiCond499
          CFI EndBlock cfiCond500
          CFI EndBlock cfiCond501
          CFI EndBlock cfiCond502
          CFI EndBlock cfiCond503
          CFI EndBlock cfiCond504
          CFI EndBlock cfiCond505
          CFI EndBlock cfiCond506
          CFI EndBlock cfiPicker507

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond508 Using cfiCommon0
          CFI Function MT_ZdoConcentratorIndCB
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond509 Using cfiCommon0
          CFI (cfiCond509) Function MT_ZdoExtFindAllGroupsEndpoint
          CFI (cfiCond509) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond509) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond509) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond509) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond509) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond509) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond509) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond509) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond509) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond509) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond509) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond509) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond509) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond509) CFA_SP SP+-2
          CFI (cfiCond509) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiCond510 Using cfiCommon0
          CFI (cfiCond510) Function MT_ZdoExtFindAllGroupsEndpoint
          CFI (cfiCond510) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond510) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond510) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond510) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond510) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond510) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond510) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond510) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond510) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond510) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond510) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond510) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond510) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond510) CFA_SP SP+-2
          CFI (cfiCond510) CFA_XSP16 add(XSP16, 45)
          CFI Block cfiPicker511 Using cfiCommon1
          CFI (cfiPicker511) NoFunction
          CFI (cfiPicker511) Picker
        MOVX      A,@DPTR
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond508
          CFI EndBlock cfiCond509
          CFI EndBlock cfiCond510
          CFI EndBlock cfiPicker511
// 2807 
// 2808 /***************************************************************************************************
// 2809  * @fn          MT_ZdoExtFindGroup
// 2810  *
// 2811  * @brief       Handle the ZDO extension Find Group message
// 2812  *
// 2813  * @param       pBuf - Pointer to the received message data.
// 2814  *
// 2815  * @return      NULL
// 2816  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2817 static void MT_ZdoExtFindGroup( uint8 *pBuf )
MT_ZdoExtFindGroup:
          CFI Block cfiBlock512 Using cfiCommon0
          CFI Function MT_ZdoExtFindGroup
        CODE
// 2818 {
        FUNCALL MT_ZdoExtFindGroup, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtFindGroup, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtFindGroup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtFindGroup, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 2819   uint8 endpoint;
// 2820   uint16 groupID;
// 2821   aps_Group_t *pGroup;
// 2822   uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x13
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 2823 
// 2824   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2825 
// 2826   endpoint = *pBuf++;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
// 2827   groupID = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R2
        ADD       A,#0x4
        MOV       R2,A
        JNC       ??MT_ZdoExtFindGroup_0
        INC       R3
??MT_ZdoExtFindGroup_0:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
// 2828 
// 2829   pGroup = aps_FindGroup( endpoint, groupID );
        ; Setup parameters for call to function aps_FindGroup
        MOV       A,R6
        MOV       R1,A
        LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
// 2830   if ( pGroup  )
        MOV       A,R2
        ORL       A,R3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JZ        ??MT_ZdoExtFindGroup_1
// 2831   {
// 2832     buf[0] = ZSuccess;
        CLR       A
        MOVX      @DPTR,A
// 2833     buf[1] = LO_UINT16( pGroup->ID );
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine78 & 0xFFFF
// 2834     buf[2] = HI_UINT16( pGroup->ID );
// 2835     buf[3] = pGroup->name[0];
// 2836     osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
// 2837   }
??CrossCallReturnLabel_164:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_118:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_119:
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        SJMP      ??MT_ZdoExtFindGroup_2
// 2838   else
// 2839   {
// 2840     buf[0] = ZFailure;
??MT_ZdoExtFindGroup_1:
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2841   }
// 2842 
// 2843   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2844                       MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
??MT_ZdoExtFindGroup_2:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x13
        MOV       R2,#0x4a
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2845 }
        MOV       A,#0x13
          CFI EndBlock cfiBlock512
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock513 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock513
        REQUIRE ??Subroutine105_0
        ; // Fall through to label ??Subroutine105_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine105_0:
          CFI Block cfiBlock514 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock514

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine78:
          CFI Block cfiCond515 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond516 Using cfiCommon0
          CFI (cfiCond516) Function MT_ZdoCommandProcessing
          CFI (cfiCond516) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_116
          CFI (cfiCond516) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond516) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond516) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond516) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond516) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond516) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond516) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond516) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond516) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond516) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond516) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond516) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond516) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond516) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond516) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond516) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond516) CFA_SP SP+-4
          CFI (cfiCond516) CFA_XSP16 add(XSP16, 70)
          CFI Block cfiCond517 Using cfiCommon0
          CFI (cfiCond517) Function MT_ZdoExtFindGroup
          CFI (cfiCond517) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond517) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond517) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond517) CFA_SP SP+-2
          CFI (cfiCond517) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond518 Using cfiCommon0
          CFI (cfiCond518) Function MT_ZdoNWKAddressRequest
          CFI (cfiCond518) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_117
          CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond518) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond518) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond518) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond518) CFA_SP SP+-4
          CFI (cfiCond518) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond519 Using cfiCommon0
          CFI (cfiCond519) Function MT_ZdoExtFindGroup
          CFI (cfiCond519) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_118
          CFI (cfiCond519) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond519) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond519) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond519) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond519) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond519) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond519) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond519) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond519) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond519) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond519) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond519) CFA_SP SP+-4
          CFI (cfiCond519) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond520 Using cfiCommon0
          CFI (cfiCond520) Function MT_ZdoExtFindGroup
          CFI (cfiCond520) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_119
          CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond520) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond520) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond520) CFA_SP SP+-4
          CFI (cfiCond520) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker521 Using cfiCommon1
          CFI (cfiPicker521) NoFunction
          CFI (cfiPicker521) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function aps_RemoveAllGroup
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond515
          CFI EndBlock cfiCond516
          CFI EndBlock cfiCond517
          CFI EndBlock cfiCond518
          CFI EndBlock cfiCond519
          CFI EndBlock cfiCond520
          CFI EndBlock cfiPicker521

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond522 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond523 Using cfiCommon0
          CFI (cfiCond523) Function MT_ZdoExtFindGroup
          CFI (cfiCond523) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond523) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond523) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond523) CFA_SP SP+-2
          CFI (cfiCond523) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond524 Using cfiCommon0
          CFI (cfiCond524) Function MT_ZdoExtFindGroup
          CFI (cfiCond524) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond524) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond524) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond524) CFA_SP SP+-2
          CFI (cfiCond524) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker525 Using cfiCommon1
          CFI (cfiPicker525) NoFunction
          CFI (cfiPicker525) Picker
        LCALL     ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_165:
        INC       DPTR
        RET
          CFI EndBlock cfiCond522
          CFI EndBlock cfiCond523
          CFI EndBlock cfiCond524
          CFI EndBlock cfiPicker525
// 2846 
// 2847 /***************************************************************************************************
// 2848  * @fn          MT_ZdoExtAddGroup
// 2849  *
// 2850  * @brief       Handle the ZDO extension Add Group message
// 2851  *
// 2852  * @param       pBuf - Pointer to the received message data.
// 2853  *
// 2854  * @return      NULL
// 2855  ***************************************************************************************************/
// 2856 static void MT_ZdoExtAddGroup( uint8 *pBuf )
// 2857 {
// 2858   ZStatus_t status = ZSuccess;
// 2859   aps_Group_t group = {0};
// 2860   uint8 endpoint;
// 2861 
// 2862   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2863 
// 2864   endpoint = *pBuf++;
// 2865   group.ID = osal_build_uint16( pBuf );
// 2866   group.name[0] = pBuf[2];
// 2867   if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
// 2868   {
// 2869     group.name[0] = (APS_GROUP_NAME_LEN-1);
// 2870   }
// 2871 
// 2872   if (group.name[0] > 0 )
// 2873   {
// 2874     osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
// 2875   }
// 2876 
// 2877   status = aps_AddGroup( endpoint, &group );
// 2878 
// 2879   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2880                                        MT_ZDO_EXT_ADD_GROUP, 1, &status );
// 2881 }
// 2882 
// 2883 /***************************************************************************************************
// 2884  * @fn          MT_ZdoExtCountAllGroups
// 2885  *
// 2886  * @brief       Handle the ZDO extension Count All Groups message
// 2887  *
// 2888  * @param       pBuf - Pointer to the received message data.
// 2889  *
// 2890  * @return      NULL
// 2891  ***************************************************************************************************/
// 2892 static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
// 2893 {
// 2894   ZStatus_t status = 0;
// 2895 
// 2896   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2897 
// 2898   status = (ZStatus_t)aps_CountAllGroups();
// 2899 
// 2900   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2901                                        MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
// 2902 }
// 2903 
// 2904 
// 2905 /***************************************************************************************************
// 2906  * @fn          MT_ZdoExtRxIdle
// 2907  *
// 2908  * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
// 2909  *
// 2910  * @param       pBuf - Pointer to the received message data.
// 2911  *
// 2912  * @return      NULL
// 2913  ***************************************************************************************************/
// 2914 static void MT_ZdoExtRxIdle( uint8 *pBuf )
// 2915 {
// 2916   uint8 setFlag;
// 2917   uint8 setValue;
// 2918 
// 2919   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2920 
// 2921   setFlag = *pBuf++;
// 2922   setValue = *pBuf++;
// 2923 
// 2924   if ( setFlag )
// 2925   {
// 2926     ZMacSetReq( ZMacRxOnIdle, &setValue );
// 2927   }
// 2928   else
// 2929   {
// 2930     ZMacGetReq( ZMacRxOnIdle, &setValue );
// 2931   }
// 2932 
// 2933   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2934                                        MT_ZDO_EXT_RX_IDLE, 1, &setValue );
// 2935 }
// 2936 
// 2937 /***************************************************************************************************
// 2938  * @fn          MT_ZdoExtNwkInfo
// 2939  *
// 2940  * @brief       Handle the ZDO extension Network Info Request message
// 2941  *
// 2942  * @param       pBuf - Pointer to the received message data.
// 2943  *
// 2944  * @return      NULL
// 2945  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2946 static void MT_ZdoExtNwkInfo( uint8 *pBuf )
MT_ZdoExtNwkInfo:
          CFI Block cfiBlock526 Using cfiCommon0
          CFI Function MT_ZdoExtNwkInfo
        CODE
// 2947 {
        FUNCALL MT_ZdoExtNwkInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtNwkInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoExtNwkInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 24
        MOV       A,#-0x18
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 2948   uint8 buf[24];
// 2949   uint8 *pMsg;
// 2950 
// 2951   pMsg = buf;
// 2952 
// 2953   *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
        LCALL     ??Subroutine95_0 & 0xFFFF
??CrossCallReturnLabel_214:
        MOV       A,R0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2954   *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2955 
// 2956   *pMsg++ = devState;
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2957   *pMsg++ = LO_UINT16( _NIB.nwkPanId );
        MOV       DPTR,#_NIB + 33
        LCALL     ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_212:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
// 2958   *pMsg++ = HI_UINT16( _NIB.nwkPanId );
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2959   *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
        MOV       DPTR,#_NIB + 23
        LCALL     ??Subroutine96_0 & 0xFFFF
??CrossCallReturnLabel_213:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
// 2960   *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2961   osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#(_NIB + 53) & 0xff
        MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 2962   pMsg += 8;
// 2963   osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#(_NIB + 25) & 0xff
        MOV       ?V1,#((_NIB + 25) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 2964   pMsg += 8;
// 2965   *pMsg++ = _NIB.nwkLogicalChannel;
        MOV       DPTR,#_NIB + 22
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine57 & 0xFFFF
// 2966 
// 2967   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2968                                        MT_ZDO_EXT_NWK_INFO, 24, buf );
??CrossCallReturnLabel_123:
        MOV       R3,#0x18
        MOV       R2,#0x50
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2969 }
        MOV       A,#0x18
        LJMP      ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock526

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNWKAddressRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNWKAddressRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoMatchDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoMatchDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoEndDevBindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoBindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoUnbindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUnbindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoMgmtNwkUpdateRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoMgmtNwkUpdateRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoSendData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNwkAddrOfInterestReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkAddrOfInterestReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNwkDiscoveryCnfCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkDiscoveryCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoBeaconIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBeaconIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoJoinCnfCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoStateChangeCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoStateChangeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoDirectCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoDirectCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoAddrRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoAddrRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoEndDevAnnceCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevAnnceCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoSrcRtgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSrcRtgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoConcentratorIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoConcentratorIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoLeaveInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoLeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoTcDeviceInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoTcDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoPermitJoinInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoPermitJoinInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoSendMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoExtFindAllGroupsEndpoint::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoExtFindAllGroupsEndpoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoExtFindGroup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoExtFindGroup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoExtNwkInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoExtNwkInfo

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `:
        DATA16
        DW 0
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        END
// 2970 
// 2971 /***************************************************************************************************
// 2972  * @fn          MT_ZdoExtSecApsRemoveReq
// 2973  *
// 2974  * @brief       Handle the ZDO extension Security Manager APS Remove Request message
// 2975  *
// 2976  * @param       pBuf - Pointer to the received message data.
// 2977  *
// 2978  * @return      NULL
// 2979  ***************************************************************************************************/
// 2980 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
// 2981 {
// 2982   ZStatus_t status = 0;
// 2983   uint16 parentAddr;
// 2984   uint16 nwkAddr;
// 2985 
// 2986   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2987 
// 2988   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 2989   {
// 2990     parentAddr = osal_build_uint16( pBuf );
// 2991     pBuf += 2;
// 2992 
// 2993     nwkAddr = osal_build_uint16( pBuf );
// 2994     pBuf += 2;
// 2995 
// 2996     status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
// 2997   }
// 2998   else
// 2999   {
// 3000     status = ZUnsupportedMode;
// 3001   }
// 3002 
// 3003   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3004                                        MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
// 3005 }
// 3006 
// 3007 /***************************************************************************************************
// 3008  * @fn          MT_ZdoExtSetParams
// 3009  *
// 3010  * @brief       Set Parameters not settable through NV.
// 3011  *
// 3012  * @param       pBuf - Pointer to the received message data.
// 3013  *
// 3014  * @return      NULL
// 3015  ***************************************************************************************************/
// 3016 static void MT_ZdoExtSetParams( uint8 *pBuf )
// 3017 {
// 3018   ZStatus_t status = ZSuccess;
// 3019   uint8 useMultiCast;
// 3020 
// 3021   pBuf += MT_RPC_FRAME_HDR_SZ;
// 3022 
// 3023   // Is the useMulticast in this message
// 3024   useMultiCast = *pBuf++;
// 3025   if ( useMultiCast & 0x80 )
// 3026   {
// 3027     if ( useMultiCast & 0x7F )
// 3028     {
// 3029       _NIB.nwkUseMultiCast = TRUE;
// 3030     }
// 3031     else
// 3032     {
// 3033       _NIB.nwkUseMultiCast = FALSE;
// 3034     }
// 3035   }
// 3036 
// 3037   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3038                                        MT_ZDO_EXT_SET_PARAMS, 1, &status );
// 3039 }
// 3040 #endif // MT_ZDO_EXTENSIONS
// 3041 
// 3042 #endif   /*ZDO Command Processing in MT*/
// 3043 /***************************************************************************************************
// 3044 ***************************************************************************************************/
// 
// 7 557 bytes in segment BANKED_CODE
//   156 bytes in segment BANK_RELAYS
//    43 bytes in segment XDATA_ROM_C
//     7 bytes in segment XDATA_Z
// 
//   156 bytes of CODE     memory
//    43 bytes of CONST    memory
// 7 557 bytes of HUGECODE memory
//     7 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
