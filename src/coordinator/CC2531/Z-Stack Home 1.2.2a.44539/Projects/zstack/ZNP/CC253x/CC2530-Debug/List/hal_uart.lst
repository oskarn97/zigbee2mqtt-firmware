###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:39:21
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530ZNP\hal_uart.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW5C5C.tmp ("C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Components\hal\target\CC2530ZNP\hal_uart.c" -D
#        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\hal_uart.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\hal_uart.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\hal\target\CC2530ZNP\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-12-31 18:28:34 -0800 (Thu, 31 Dec 2009) $
      4            Revision:       $Revision: 21422 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 1038
   \   00040E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL       0xff,#0x3f
   \   000007   85FFFF       MOV       0xff,0xff
   \   00000A   53F1FE       ANL       0xf1,#0xfe
   \   00000D   43F30C       ORL       0xf3,#0xc
   \   000010   53F2F3       ANL       0xf2,#0xf3
   \   000013   758680       MOV       0x86,#-0x80
   \   000016   75C480       MOV       0xc4,#-0x80
   \   000019   90....       MOV       DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV       A,#0x70
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   74C1         MOV       A,#-0x3f
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   541F         ANL       A,#0x1f
   \   000027   F0           MOVX      @DPTR,A
   \   000028   90....       MOV       DPTR,#dmaCh1234 + 30
   \   00002B   740F         MOV       A,#0xf
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   744A         MOV       A,#0x4a
   \   000031   F0           MOVX      @DPTR,A
   \   000032   90....       MOV       DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV       A,#0x70
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   74C1         MOV       A,#-0x3f
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   90....       MOV       DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   541F         ANL       A,#0x1f
   \   000042   F0           MOVX      @DPTR,A
   \   000043   90....       MOV       DPTR,#dmaCh1234 + 22
   \   000046   74CE         MOV       A,#-0x32
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   540F         ANL       A,#0xf
   \   00004D   4410         ORL       A,#0x10
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000052   90....       MOV       DPTR,#dmaCh1234 + 18
   \   000055   F0           MOVX      @DPTR,A
   \   000056   74..         MOV       A,#dmaCfg & 0xff
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   90....       MOV       DPTR,#dmaCh1234 + 21
   \   00005D   E4           CLR       A
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   90....       MOV       DPTR,#dmaCh1234 + 20
   \   000062   04           INC       A
   \   000063   F0           MOVX      @DPTR,A
   \   000064   90....       MOV       DPTR,#dmaCh1234 + 23
   \   000067   7412         MOV       A,#0x12
   \   000069   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00006C                REQUIRE P2DIR
   \   00006C                REQUIRE PERCFG
   \   00006C                REQUIRE P0SEL
   \   00006C                REQUIRE ADCCFG
   \   00006C                REQUIRE U0CSR
   \   00006C                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                REQUIRE ??Subroutine15_0
   \   000001                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   241B         ADD       A,#0x1b
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   90....       MOV       DPTR,#dmaCfg + 1036
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6403         XRL       A,#0x3
   \   000022   600A         JZ        ??HalUARTOpenDMA_0
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6404         XRL       A,#0x4
   \   00002C   7005         JNZ       ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002E   75C2D8       MOV       0xc2,#-0x28
   \   000031   8003         SJMP      ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000033   75C23B       MOV       0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   600B         JZ        ??HalUARTOpenDMA_3
   \   00003E   14           DEC       A
   \   00003F   6012         JZ        ??HalUARTOpenDMA_4
   \   000041   14           DEC       A
   \   000042   6019         JZ        ??HalUARTOpenDMA_5
   \   000044   14           DEC       A
   \   000045   6020         JZ        ??HalUARTOpenDMA_6
   \   000047   8028         SJMP      ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000049   75C508       MOV       0xc5,#0x8
   \   00004C   90....       MOV       DPTR,#dmaCfg + 1032
   \   00004F   7423         MOV       A,#0x23
   \   000051   8026         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   000053   75C509       MOV       0xc5,#0x9
   \   000056   90....       MOV       DPTR,#dmaCfg + 1032
   \   000059   7412         MOV       A,#0x12
   \   00005B   801C         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   00005D   75C50A       MOV       0xc5,#0xa
   \   000060   90....       MOV       DPTR,#dmaCfg + 1032
   \   000063   7409         MOV       A,#0x9
   \   000065   8012         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   000067   75C50A       MOV       0xc5,#0xa
   \   00006A   90....       MOV       DPTR,#dmaCfg + 1032
   \   00006D   7406         MOV       A,#0x6
   \   00006F   8008         SJMP      ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000071   75C50B       MOV       0xc5,#0xb
   \   000074   90....       MOV       DPTR,#dmaCfg + 1032
   \   000077   7403         MOV       A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   6015         JZ        ??HalUARTOpenDMA_9
   \   000083   75C442       MOV       0xc4,#0x42
   \   000086   43F310       ORL       0xf3,#0x10
   \   000089   C285         CLR       0x80.5
   \   00008B   43FD20       ORL       0xfd,#0x20
   \   00008E   5389EF       ANL       0x89,#0xef
   \   000091   53ABEF       ANL       0xab,#0xef
   \   000094   D2BD         SETB      0xb8.5
   \   000096   8003         SJMP      ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000098   75C402       MOV       0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00009B   9070C1       MOV       DPTR,#0x70c1
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   90....       MOV       DPTR,#dmaCfg
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E4           CLR       A
   \   0000A5   F0           MOVX      @DPTR,A
   \   0000A6   75D1F7       MOV       0xd1,#-0x9
   \   0000A9   75D608       MOV       0xd6,#0x8
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   FC           MOV       R4,A
   \   0000AD   7D02         MOV       R5,#0x2
   \   0000AF   E5C2         MOV       A,0xc2
   \   0000B1   F4           CPL       A
   \   0000B2   F9           MOV       R1,A
   \   0000B3   7A..         MOV       R2,#dmaCfg & 0xff
   \   0000B5   7B..         MOV       R3,#(dmaCfg >> 8) & 0xff
   \   0000B7   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000BA   438640       ORL       0x86,#0x40
   \   0000BD   90....       MOV       DPTR,#dmaCfg + 1035
   \   0000C0   E4           CLR       A
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   90....       MOV       DPTR,#dmaCfg + 1034
   \   0000C5   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   0000C8                REQUIRE U0BAUD
   \   0000C8                REQUIRE U0GCR
   \   0000C8                REQUIRE U0UCR
   \   0000C8                REQUIRE P0SEL
   \   0000C8                REQUIRE _A_P0
   \   0000C8                REQUIRE P0DIR
   \   0000C8                REQUIRE P0IFG
   \   0000C8                REQUIRE P0IEN
   \   0000C8                REQUIRE _A_IEN1
   \   0000C8                REQUIRE DMAIRQ
   \   0000C8                REQUIRE DMAARM
   \   0000C8                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(uint8 *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
   \   000009   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00000C   FA           MOV       R2,A
   \   00000D   EC           MOV       A,R4
   \   00000E   2A           ADD       A,R2
   \   00000F   FA           MOV       R2,A
   \   000010   E4           CLR       A
   \   000011   3D           ADDC      A,R5
   \   000012   FB           MOV       R3,A
   \   000013   C3           CLR       C
   \   000014   EA           MOV       A,R2
   \   000015   9401         SUBB      A,#0x1
   \   000017   EB           MOV       A,R3
   \   000018   9401         SUBB      A,#0x1
   \   00001A   4007         JC        ??HalUARTWriteDMA_0
   \   00001C   7A00         MOV       R2,#0x0
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   02....       LJMP      ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000023   AAA8         MOV       R2,0xa8+0x0
   \   000025   C2AF         CLR       0xa8.7
   \   000027   90....       MOV       DPTR,#dmaCfg + 1030
   \   00002A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00002D   EA           MOV       A,R2
   \   00002E   A2E7         MOV       C,0xE0 /* A   */.7
   \   000030   92AF         MOV       0xa8.7,C
   \   000032   7A00         MOV       R2,#0x0
   \   000034   7B00         MOV       R3,#0x0
   \   000036   8011         SJMP      ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   000038   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00003B   C0E0         PUSH      A
   \   00003D   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000040   D0E0         POP       A
   \   000042   F0           MOVX      @DPTR,A
   \   000043   0E           INC       R6
   \   000044   0A           INC       R2
   \   000045   EA           MOV       A,R2
   \   000046   7001         JNZ       ??HalUARTWriteDMA_2
   \   000048   0B           INC       R3
   \                     ??HalUARTWriteDMA_2:
   \   000049   C3           CLR       C
   \   00004A   EA           MOV       A,R2
   \   00004B   9C           SUBB      A,R4
   \   00004C   EB           MOV       A,R3
   \   00004D   9D           SUBB      A,R5
   \   00004E   40E8         JC        ??HalUARTWriteDMA_3
   \   000050   A2AF         MOV       C,0xa8.7
   \   000052   E4           CLR       A
   \   000053   33           RLC       A
   \   000054   F5..         MOV       ?V0,A
   \   000056   C2AF         CLR       0xa8.7
   \   000058   90....       MOV       DPTR,#dmaCfg + 1030
   \   00005B   E0           MOVX      A,@DPTR
   \   00005C   6F           XRL       A,R7
   \   00005D   602F         JZ        ??HalUARTWriteDMA_4
   \   00005F   E5..         MOV       A,?V0
   \   000061   A2E0         MOV       C,0xE0 /* A   */.0
   \   000063   92AF         MOV       0xa8.7,C
   \   000065   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000068   7A00         MOV       R2,#0x0
   \   00006A   7B00         MOV       R3,#0x0
   \   00006C   8011         SJMP      ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   00006E   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000071   C0E0         PUSH      A
   \   000073   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000076   D0E0         POP       A
   \   000078   F0           MOVX      @DPTR,A
   \   000079   0E           INC       R6
   \   00007A   0A           INC       R2
   \   00007B   EA           MOV       A,R2
   \   00007C   7001         JNZ       ??HalUARTWriteDMA_5
   \   00007E   0B           INC       R3
   \                     ??HalUARTWriteDMA_5:
   \   00007F   C3           CLR       C
   \   000080   EA           MOV       A,R2
   \   000081   9C           SUBB      A,R4
   \   000082   EB           MOV       A,R3
   \   000083   9D           SUBB      A,R5
   \   000084   40E8         JC        ??HalUARTWriteDMA_6
   \   000086   A2AF         MOV       C,0xa8.7
   \   000088   E4           CLR       A
   \   000089   33           RLC       A
   \   00008A   F5..         MOV       ?V0,A
   \   00008C   C2AF         CLR       0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   00008E   EF           MOV       A,R7
   \   00008F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000092   EE           MOV       A,R6
   \   000093   F0           MOVX      @DPTR,A
   \   000094   7401         MOV       A,#0x1
   \   000096   6F           XRL       A,R7
   \   000097   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   7006         JNZ       ??HalUARTWriteDMA_7
   \   00009D   90....       MOV       DPTR,#dmaCfg + 1035
   \   0000A0   7401         MOV       A,#0x1
   \   0000A2   F0           MOVX      @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000A3   E5..         MOV       A,?V0
   \   0000A5   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000A7   92AF         MOV       0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000A9                REQUIRE ?Subroutine1
   \   0000A9                REQUIRE _A_IEN0
   \   0000A9                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EF           MOV       A,R7
   \   000001   F5..         MOV       ?V3,A
   \   000003   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000005   2E           ADD       A,R6
   \   000006   F5..         MOV       ?V0,A
   \   000008   E4           CLR       A
   \   000009   34..         ADDC      A,#((dmaCfg + 516) >> 8) & 0xff
   \   00000B   F5..         MOV       ?V1,A
   \   00000D   E5..         MOV       A,?V0
   \   00000F   2400         ADD       A,#0x0
   \   000011   F582         MOV       DPL,A
   \   000013   E5..         MOV       A,?V1
   \   000015   35..         ADDC      A,?V3
   \   000017   F583         MOV       DPH,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV       A,R0
   \   000001   2A           ADD       A,R2
   \   000002   F582         MOV       DPL,A
   \   000004   E9           MOV       A,R1
   \   000005   3B           ADDC      A,R3
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FF           MOV       R7,A
   \   000002   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000004   2F           ADD       A,R7
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   34..         ADDC      A,#((dmaCfg + 1028) >> 8) & 0xff
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FE           MOV       R6,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#dmaCfg + 1030
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000007   2A           ADD       A,R2
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   34..         ADDC      A,#((dmaCfg + 1028) >> 8) & 0xff
   \   00000D   F583         MOV       DPH,A
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F8           MOV       R0,A
   \   000001   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   34..         ADDC      A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   E5C2         MOV       A,0xc2
   \   00000E   FA           MOV       R2,A
   \   00000F   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000012   6A           XRL       A,R2
   \   000013   7001         JNZ       ??HalUARTPollDMA_0
   \   000015   E4           CLR       A
   \                     ??HalUARTPollDMA_0:
   \   000016   706B         JNZ       ??HalUARTPollDMA_1
   \   000018   90....       MOV       DPTR,#dmaCfg + 512
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FA           MOV       R2,A
   \                     ??HalUARTPollDMA_2:
   \   00001D   E5C2         MOV       A,0xc2
   \   00001F   FC           MOV       R4,A
   \   000020   EA           MOV       A,R2
   \   000021   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000024   6C           XRL       A,R4
   \   000025   7001         JNZ       ??HalUARTPollDMA_3
   \   000027   E4           CLR       A
   \                     ??HalUARTPollDMA_3:
   \   000028   7008         JNZ       ??HalUARTPollDMA_4
   \   00002A   0A           INC       R2
   \   00002B   90....       MOV       DPTR,#dmaCfg + 512
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6A           XRL       A,R2
   \   000030   70EB         JNZ       ??HalUARTPollDMA_2
   \                     ??HalUARTPollDMA_4:
   \   000032   90....       MOV       DPTR,#dmaCfg + 513
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6A           XRL       A,R2
   \   000037   6011         JZ        ??HalUARTPollDMA_5
   \   000039   EA           MOV       A,R2
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   7004         JNZ       ??HalUARTPollDMA_6
   \   00003F   E595         MOV       A,0x95
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_6:
   \   000043   90....       MOV       DPTR,#dmaCfg + 514
   \   000046   7421         MOV       A,#0x21
   \   000048   8020         SJMP      ??HalUARTPollDMA_7
   \                     ??HalUARTPollDMA_5:
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   601D         JZ        ??HalUARTPollDMA_8
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   F8           MOV       R0,A
   \   000051   E595         MOV       A,0x95
   \   000053   C3           CLR       C
   \   000054   98           SUBB      A,R0
   \   000055   F8           MOV       R0,A
   \   000056   90....       MOV       DPTR,#dmaCfg + 514
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   E8           MOV       A,R0
   \   00005C   C3           CLR       C
   \   00005D   99           SUBB      A,R1
   \   00005E   5009         JNC       ??HalUARTPollDMA_9
   \   000060   E0           MOVX      A,@DPTR
   \   000061   C3           CLR       C
   \   000062   98           SUBB      A,R0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   E595         MOV       A,0x95
   \   000066   A3           INC       DPTR
   \   000067   8001         SJMP      ??HalUARTPollDMA_7
   \                     ??HalUARTPollDMA_9:
   \   000069   E4           CLR       A
   \                     ??HalUARTPollDMA_7:
   \   00006A   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_8:
   \   00006B                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   00006B   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00006E   8A..         MOV       ?V0,R2
   \   000070   8B..         MOV       ?V1,R3
   \   000072   A8..         MOV       R0,?V0
   \   000074   A9..         MOV       R1,?V1
   \   000076   C3           CLR       C
   \   000077   E8           MOV       A,R0
   \   000078   94F0         SUBB      A,#-0x10
   \   00007A   E9           MOV       A,R1
   \   00007B   9400         SUBB      A,#0x0
   \   00007D   400B         JC        ??HalUARTPollDMA_10
   \   00007F   7E01         MOV       R6,#0x1
   \   000081   8022         SJMP      ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_1:
   \   000083   90....       MOV       DPTR,#dmaCfg + 514
   \   000086   E4           CLR       A
   \   000087   F0           MOVX      @DPTR,A
   \   000088   801B         SJMP      ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_10:
   \   00008A   C3           CLR       C
   \   00008B   E8           MOV       A,R0
   \   00008C   9470         SUBB      A,#0x70
   \   00008E   E9           MOV       A,R1
   \   00008F   9400         SUBB      A,#0x0
   \   000091   4006         JC        ??HalUARTPollDMA_12
   \   000093   7E02         MOV       R6,#0x2
   \   000095   D285         SETB      0x80.5
   \   000097   800C         SJMP      ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_12:
   \   000099   E8           MOV       A,R0
   \   00009A   49           ORL       A,R1
   \   00009B   6008         JZ        ??HalUARTPollDMA_11
   \   00009D   90....       MOV       DPTR,#dmaCfg + 514
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   7002         JNZ       ??HalUARTPollDMA_11
   \   0000A3   7E04         MOV       R6,#0x4
   \                     ??HalUARTPollDMA_11:
   \   0000A5   90....       MOV       DPTR,#dmaCfg + 1031
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   6006         JZ        ??HalUARTPollDMA_13
   \   0000AB   E4           CLR       A
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD   EE           MOV       A,R6
   \   0000AE   D2E4         SETB      0xE0 /* A   */.4
   \   0000B0   FE           MOV       R6,A
   \                     ??HalUARTPollDMA_13:
   \   0000B1   90....       MOV       DPTR,#dmaCfg + 1034
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   6018         JZ        ??HalUARTPollDMA_14
   \   0000B7   A895         MOV       R0,0x95+0x0
   \   0000B9   90....       MOV       DPTR,#dmaCfg + 1033
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   F9           MOV       R1,A
   \   0000BE   E8           MOV       A,R0
   \   0000BF   C3           CLR       C
   \   0000C0   99           SUBB      A,R1
   \   0000C1   F8           MOV       R0,A
   \   0000C2   90....       MOV       DPTR,#dmaCfg + 1032
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   C3           CLR       C
   \   0000C7   98           SUBB      A,R0
   \   0000C8   5005         JNC       ??HalUARTPollDMA_14
   \   0000CA   90....       MOV       DPTR,#dmaCfg + 1034
   \   0000CD   E4           CLR       A
   \   0000CE   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollDMA_14:
   \   0000CF   90....       MOV       DPTR,#dmaCfg + 1035
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   604D         JZ        ??HalUARTPollDMA_15
   \   0000D5   90....       MOV       DPTR,#dmaCfg + 1034
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   7047         JNZ       ??HalUARTPollDMA_15
   \   0000DB   A3           INC       DPTR
   \   0000DC   E4           CLR       A
   \   0000DD   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000E0   F8           MOV       R0,A
   \   0000E1   E4           CLR       A
   \   0000E2   C8           XCH       A,R0
   \   0000E3   F9           MOV       R1,A
   \   0000E4   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   0000E6   28           ADD       A,R0
   \   0000E7   74..         MOV       A,#((dmaCfg + 516) >> 8) & 0xff
   \   0000E9   39           ADDC      A,R1
   \   0000EA   90....       MOV       DPTR,#dmaCh1234 + 24
   \   0000ED   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000F0   74..         MOV       A,#(dmaCfg + 4) & 0xff
   \   0000F2   90....       MOV       DPTR,#dmaCh1234 + 25
   \   0000F5   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F8   90....       MOV       DPTR,#dmaCh1234 + 29
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   90....       MOV       DPTR,#dmaCh1234 + 28
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   54E0         ANL       A,#0xe0
   \   000102   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000105   E0           MOVX      A,@DPTR
   \   000106   6401         XRL       A,#0x1
   \   000108   F0           MOVX      @DPTR,A
   \   000109   A2AF         MOV       C,0xa8.7
   \   00010B   E4           CLR       A
   \   00010C   33           RLC       A
   \   00010D   F8           MOV       R0,A
   \   00010E   C2AF         CLR       0xa8.7
   \   000110   75D610       MOV       0xd6,#0x10
   \                     ??HalUARTPollDMA_16:
   \   000113   00           NOP
   \   000114   E5D6         MOV       A,0xd6
   \   000116   A2E4         MOV       C,0xE0 /* A   */.4
   \   000118   50F9         JNC       ??HalUARTPollDMA_16
   \   00011A   75D1EF       MOV       0xd1,#-0x11
   \   00011D   75D710       MOV       0xd7,#0x10
   \   000120   8022         SJMP      ??HalUARTPollDMA_17
   \                     ??HalUARTPollDMA_15:
   \   000122   A2AF         MOV       C,0xa8.7
   \   000124   E4           CLR       A
   \   000125   33           RLC       A
   \   000126   F8           MOV       R0,A
   \   000127   C2AF         CLR       0xa8.7
   \   000129   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00012C   6016         JZ        ??HalUARTPollDMA_17
   \   00012E   E5D6         MOV       A,0xd6
   \   000130   A2E4         MOV       C,0xE0 /* A   */.4
   \   000132   4010         JC        ??HalUARTPollDMA_17
   \   000134   E5D1         MOV       A,0xd1
   \   000136   A2E4         MOV       C,0xE0 /* A   */.4
   \   000138   400A         JC        ??HalUARTPollDMA_17
   \   00013A   E8           MOV       A,R0
   \   00013B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00013D   92AF         MOV       0xa8.7,C
   \   00013F                ; Setup parameters for call to function HalUARTIsrDMA
   \   00013F   12....       LCALL     `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   000142   8005         SJMP      ??HalUARTPollDMA_18
   \                     ??HalUARTPollDMA_17:
   \   000144   E8           MOV       A,R0
   \   000145   A2E0         MOV       C,0xE0 /* A   */.0
   \   000147   92AF         MOV       0xa8.7,C
   \                     ??HalUARTPollDMA_18:
   \   000149   EE           MOV       A,R6
   \   00014A   6018         JZ        ??HalUARTPollDMA_19
   \   00014C   90....       MOV       DPTR,#dmaCfg + 1036
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   F8           MOV       R0,A
   \   000151   A3           INC       DPTR
   \   000152   E0           MOVX      A,@DPTR
   \   000153   F9           MOV       R1,A
   \   000154   E8           MOV       A,R0
   \   000155   49           ORL       A,R1
   \   000156   600C         JZ        ??HalUARTPollDMA_19
   \   000158                ; Setup parameters for indirect call
   \   000158   EE           MOV       A,R6
   \   000159   FA           MOV       R2,A
   \   00015A   7900         MOV       R1,#0x0
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F583         MOV       DPH,A
   \   00015F   8882         MOV       DPL,R0
   \   000161   12....       LCALL     ?CALL_IND
   \                     ??HalUARTPollDMA_19:
   \   000164   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000167   E0           MOVX      A,@DPTR
   \   000168   6402         XRL       A,#0x2
   \   00016A   704F         JNZ       ??HalUARTPollDMA_20
   \   00016C   E586         MOV       A,0x86
   \   00016E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000170   4049         JC        ??HalUARTPollDMA_20
   \   000172   A284         MOV       C,0x80.4
   \   000174   5045         JNC       ??HalUARTPollDMA_20
   \   000176   90....       MOV       DPTR,#??znpUartActiveShdw
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   606A         JZ        ??HalUARTPollDMA_21
   \   00017C                ; Setup parameters for call to function ZMacGetReq
   \   00017C   AA..         MOV       R2,?XSP + 0
   \   00017E   AB..         MOV       R3,?XSP + 1
   \   000180   7952         MOV       R1,#0x52
   \   000182   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000185   85..82       MOV       DPL,?XSP + 0
   \   000188   85..83       MOV       DPH,?XSP + 1
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   7058         JNZ       ??HalUARTPollDMA_21
   \   00018E   90....       MOV       DPTR,#??znpUartActiveShdw
   \   000191   E4           CLR       A
   \   000192   F0           MOVX      @DPTR,A
   \   000193                ; Setup parameters for call to function osal_start_timerEx
   \   000193   90....       MOV       DPTR,#__Constant_a
   \   000196   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000199   7A80         MOV       R2,#-0x80
   \   00019B   7B00         MOV       R3,#0x0
   \   00019D   90....       MOV       DPTR,#MT_TaskID
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   F9           MOV       R1,A
   \   0001A2   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001A5   7404         MOV       A,#0x4
   \   0001A7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AA   E9           MOV       A,R1
   \   0001AB   6039         JZ        ??HalUARTPollDMA_21
   \   0001AD                ; Setup parameters for call to function osal_set_event
   \   0001AD   7A80         MOV       R2,#-0x80
   \   0001AF   7B00         MOV       R3,#0x0
   \   0001B1   90....       MOV       DPTR,#MT_TaskID
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   F9           MOV       R1,A
   \   0001B6   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0001B9   802B         SJMP      ??HalUARTPollDMA_21
   \                     ??HalUARTPollDMA_20:
   \   0001BB   90....       MOV       DPTR,#??znpUartActiveShdw
   \   0001BE   E0           MOVX      A,@DPTR
   \   0001BF   7025         JNZ       ??HalUARTPollDMA_21
   \   0001C1   7401         MOV       A,#0x1
   \   0001C3   F0           MOVX      @DPTR,A
   \   0001C4                ; Setup parameters for call to function osal_stop_timerEx
   \   0001C4   7A80         MOV       R2,#-0x80
   \   0001C6   7B00         MOV       R3,#0x0
   \   0001C8   90....       MOV       DPTR,#MT_TaskID
   \   0001CB   E0           MOVX      A,@DPTR
   \   0001CC   F9           MOV       R1,A
   \   0001CD   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0001D0                ; Setup parameters for call to function osal_clear_event
   \   0001D0   7A80         MOV       R2,#-0x80
   \   0001D2   7B00         MOV       R3,#0x0
   \   0001D4   90....       MOV       DPTR,#MT_TaskID
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   F9           MOV       R1,A
   \   0001D9   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   0001DC                ; Setup parameters for call to function osal_pwrmgr_task_state
   \   0001DC   7A01         MOV       R2,#0x1
   \   0001DE   90....       MOV       DPTR,#MT_TaskID
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   F9           MOV       R1,A
   \   0001E3   12....       LCALL     `??osal_pwrmgr_task_state::?relay`; Banked call to: osal_pwrmgr_task_state
   \                     ??HalUARTPollDMA_21:
   \   0001E6   7401         MOV       A,#0x1
   \   0001E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EB   7F02         MOV       R7,#0x2
   \   0001ED   02....       LJMP      ?BANKED_LEAVE_XDATA
   \   0001F0                REQUIRE U0BAUD
   \   0001F0                REQUIRE ST0
   \   0001F0                REQUIRE _A_P0
   \   0001F0                REQUIRE _A_IEN0
   \   0001F0                REQUIRE DMAARM
   \   0001F0                REQUIRE DMAIRQ
   \   0001F0                REQUIRE DMAREQ
   \   0001F0                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV       DPTR,#dmaCfg + 512
   \   000003   E0           MOVX      A,@DPTR
   \   000004   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#dmaCfg & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F583         MOV       DPH,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#dmaCfg + 1030
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   uint8 HalUARTPollDMA::znpUartActiveShdw
   \                     ??znpUartActiveShdw:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV       R2,#0x0
   \   000007   7B00         MOV       R3,#0x0
   \   000009   E5C2         MOV       A,0xc2
   \   00000B   FC           MOV       R4,A
   \   00000C   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000F   F9           MOV       R1,A
   \   000010   E4           CLR       A
   \   000011   C9           XCH       A,R1
   \   000012   6C           XRL       A,R4
   \   000013   7001         JNZ       ??HalUARTRxAvailDMA_0
   \   000015   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_0:
   \   000016   7031         JNZ       ??HalUARTRxAvailDMA_1
   \   000018   7800         MOV       R0,#0x0
   \                     ??HalUARTRxAvailDMA_2:
   \   00001A   E5C2         MOV       A,0xc2
   \   00001C   FE           MOV       R6,A
   \   00001D   E8           MOV       A,R0
   \   00001E   FC           MOV       R4,A
   \   00001F   E9           MOV       A,R1
   \   000020   FD           MOV       R5,A
   \   000021   EC           MOV       A,R4
   \   000022   2C           ADD       A,R4
   \   000023   FC           MOV       R4,A
   \   000024   ED           MOV       A,R5
   \   000025   33           RLC       A
   \   000026   FD           MOV       R5,A
   \   000027   74..         MOV       A,#dmaCfg & 0xff
   \   000029   2C           ADD       A,R4
   \   00002A   F582         MOV       DPL,A
   \   00002C   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   00002E   3D           ADDC      A,R5
   \   00002F   F583         MOV       DPH,A
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   6E           XRL       A,R6
   \   000034   7001         JNZ       ??HalUARTRxAvailDMA_3
   \   000036   E4           CLR       A
   \                     ??HalUARTRxAvailDMA_3:
   \   000037   7005         JNZ       ??HalUARTRxAvailDMA_4
   \   000039   0A           INC       R2
   \   00003A   EA           MOV       A,R2
   \   00003B   7001         JNZ       ??HalUARTRxAvailDMA_4
   \   00003D   0B           INC       R3
   \                     ??HalUARTRxAvailDMA_4:
   \   00003E   08           INC       R0
   \   00003F   E8           MOV       A,R0
   \   000040   7001         JNZ       ??HalUARTRxAvailDMA_5
   \   000042   09           INC       R1
   \                     ??HalUARTRxAvailDMA_5:
   \   000043   C3           CLR       C
   \   000044   E9           MOV       A,R1
   \   000045   9401         SUBB      A,#0x1
   \   000047   40D1         JC        ??HalUARTRxAvailDMA_2
   \                     ??HalUARTRxAvailDMA_1:
   \   000049   02....       LJMP      ?Subroutine2 & 0xFFFF
   \   00004C                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV       0xd1,#-0x11
   \   000007   90....       MOV       DPTR,#dmaCfg + 1030
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6401         XRL       A,#0x1
   \   00000D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   90....       MOV       DPTR,#dmaCfg + 1031
   \   000015   04           INC       A
   \   000016   F0           MOVX      @DPTR,A
   \   000017   E595         MOV       A,0x95
   \   000019   90....       MOV       DPTR,#dmaCfg + 1033
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000023   6006         JZ        ??HalUARTIsrDMA_0
   \   000025   90....       MOV       DPTR,#dmaCfg + 1035
   \   000028   7401         MOV       A,#0x1
   \   00002A   F0           MOVX      @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002B   80..         SJMP      ??Subroutine15_0
   \   00002D                REQUIRE DMAIRQ
   \   00002D                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98            if (ZNP_CFG1_SPI == znpCfg1)
   \   000004   90....       MOV       DPTR,#znpCfg1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6003         JZ        ??HalUARTInit_0
     99            {
    100              return;
    101            }
    102          
    103          #if HAL_UART_DMA
    104            HalUARTInitDMA();
   \   00000C                ; Setup parameters for call to function HalUARTInitDMA
   \   00000C   12....       LCALL     `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    105          #endif
    106          #if HAL_UART_ISR
    107            HalUARTInitISR();
    108          #endif
    109          #if HAL_UART_USB
    110            HalUARTInitUSB();
    111          #endif
    112          }
   \                     ??HalUARTInit_0:
   \   00000F   80..         SJMP      ??Subroutine15_0
    113          
    114          /******************************************************************************
    115           * @fn      HalUARTOpen
    116           *
    117           * @brief   Open a port according tp the configuration specified by parameter.
    118           *
    119           * @param   port   - UART port
    120           *          config - contains configuration information
    121           *
    122           * @return  Status of the function call
    123           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    125          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    126            (void)port;
    127            (void)config;
    128          
    129          #if (HAL_UART_DMA == 1)
    130            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ       ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL     `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    131          #endif
    132          #if (HAL_UART_DMA == 2)
    133            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    134          #endif
    135          #if (HAL_UART_ISR == 1)
    136            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    137          #endif
    138          #if (HAL_UART_ISR == 2)
    139            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    140          #endif
    141          #if (HAL_UART_USB)
    142            HalUARTOpenUSB(config);
    143          #endif
    144            
    145            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   02....       LJMP      ?Subroutine2 & 0xFFFF
    146          }
    147          
    148          /*****************************************************************************
    149           * @fn      HalUARTRead
    150           *
    151           * @brief   Read a buffer from the UART
    152           *
    153           * @param   port - USART module designation
    154           *          buf  - valid data buffer at least 'len' bytes in size
    155           *          len  - max length number of bytes to copy to 'buf'
    156           *
    157           * @return  length of buffer that was read
    158           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    159          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    160          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   F8           MOV       R0,A
   \   000009   EB           MOV       A,R3
   \   00000A   F9           MOV       R1,A
    161            (void)port;
    162            (void)buf;
    163            (void)len;
    164          
    165          #if (HAL_UART_DMA == 1)
    166            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   00000B   E5..         MOV       A,?V0
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   7043         JNZ       ??HalUARTRead_0
   \   000013   8028         SJMP      ??HalUARTRead_1
   \                     ??HalUARTRead_2:
   \   000015   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000018   E0           MOVX      A,@DPTR
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   A882         MOV       R0,DPL
   \   000021   A983         MOV       R1,DPH
   \   000023   AFC2         MOV       R7,0xc2
   \   000025   EF           MOV       A,R7
   \   000026   F4           CPL       A
   \   000027   F5..         MOV       ?V3,A
   \   000029   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   E5..         MOV       A,?V3
   \   000031   F0           MOVX      @DPTR,A
   \   000032   90....       MOV       DPTR,#dmaCfg + 512
   \   000035   E0           MOVX      A,@DPTR
   \   000036   04           INC       A
   \   000037   F0           MOVX      @DPTR,A
   \   000038   0A           INC       R2
   \   000039   EA           MOV       A,R2
   \   00003A   7001         JNZ       ??HalUARTRead_1
   \   00003C   0B           INC       R3
   \                     ??HalUARTRead_1:
   \   00003D   C3           CLR       C
   \   00003E   EA           MOV       A,R2
   \   00003F   9C           SUBB      A,R4
   \   000040   EB           MOV       A,R3
   \   000041   9D           SUBB      A,R5
   \   000042   5010         JNC       ??HalUARTRead_3
   \   000044   E5C2         MOV       A,0xc2
   \   000046   F5..         MOV       ?V2,A
   \   000048   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00004B   A3           INC       DPTR
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   65..         XRL       A,?V2
   \   00004F   7001         JNZ       ??HalUARTRead_4
   \   000051   E4           CLR       A
   \                     ??HalUARTRead_4:
   \   000052   60C1         JZ        ??HalUARTRead_2
   \                     ??HalUARTRead_3:
   \   000054   C285         CLR       0x80.5
    167          #endif
    168          #if (HAL_UART_DMA == 2)
    169            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    170          #endif
    171          #if (HAL_UART_ISR == 1)
    172            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    173          #endif
    174          #if (HAL_UART_ISR == 2)
    175            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    176          #endif
    177          
    178          #if HAL_UART_USB
    179            return HalUARTRx(buf, len);
    180          #else
    181            return 0;
   \                     ??HalUARTRead_0:
   \   000056   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   000059                REQUIRE U0BAUD
   \   000059                REQUIRE _A_P0
    182          #endif
    183          }
    184          
    185          /******************************************************************************
    186           * @fn      HalUARTWrite
    187           *
    188           * @brief   Write a buffer to the UART.
    189           *
    190           * @param   port - UART port
    191           *          buf  - pointer to the buffer that will be written, not freed
    192           *          len  - length of
    193           *
    194           * @return  length of the buffer that was sent
    195           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    196          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    197          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    198            (void)port;
    199            (void)buf;
    200            (void)len;
    201          
    202          #if (HAL_UART_DMA == 1)
    203            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ       ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL     `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP      ??HalUARTWrite_1
    204          #endif
    205          #if (HAL_UART_DMA == 2)
    206            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    207          #endif
    208          #if (HAL_UART_ISR == 1)
    209            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    210          #endif
    211          #if (HAL_UART_ISR == 2)
    212            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    213          #endif
    214          
    215          #if HAL_UART_USB
    216            HalUARTTx(buf, len);
    217            return len;
    218          #else
    219            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011                REQUIRE ?Subroutine2
   \   000011                ; // Fall through to label ?Subroutine2
    220          #endif
    221          }
    222          
    223          /******************************************************************************
    224           * @fn      HalUARTSuspend
    225           *
    226           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    227           *
    228           * @param   None
    229           *
    230           * @return  None
    231           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    233          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    234          #if HAL_UART_DMA
    235            HalUARTSuspendDMA();
   \   000000   D285         SETB      0x80.5
   \   000002   5386BF       ANL       0x86,#0xbf
   \   000005   43AB10       ORL       0xab,#0x10
    236          #endif
    237          #if HAL_UART_ISR
    238            HalUARTSuspendISR();
    239          #endif
    240          }
   \   000008   02....       LJMP      ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    241          
    242          /******************************************************************************
    243           * @fn      HalUARTResume
    244           *
    245           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    246           *
    247           * @param   None
    248           *
    249           * @return  None
    250           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void HalUARTResume( void )
   \                     HalUARTResume:
    252          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    253          #if HAL_UART_DMA
    254            HalUARTResumeDMA();
   \   000000   53ABEF       ANL       0xab,#0xef
   \   000003   43C480       ORL       0xc4,#0x80
   \   000006   438640       ORL       0x86,#0x40
   \   000009   C285         CLR       0x80.5
    255          #endif
    256          #if HAL_UART_ISR
    257            HalUARTResumeISR();
    258          #endif
    259          }
   \   00000B   02....       LJMP      ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    260          
    261          /***************************************************************************************************
    262           * @fn      HalUARTPoll
    263           *
    264           * @brief   Poll the UART.
    265           *
    266           * @param   none
    267           *
    268           * @return  none
    269           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    270          void HalUARTPoll(void)
   \                     HalUARTPoll:
    271          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    272            if (ZNP_CFG1_SPI == znpCfg1)
   \   000004   90....       MOV       DPTR,#znpCfg1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6003         JZ        ??HalUARTPoll_0
    273            {
    274              return;
    275            }
    276          
    277          #if HAL_UART_DMA
    278            HalUARTPollDMA();
   \   00000C                ; Setup parameters for call to function HalUARTPollDMA
   \   00000C   12....       LCALL     `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    279          #endif
    280          #if HAL_UART_ISR
    281            HalUARTPollISR();
    282          #endif
    283          #if HAL_UART_USB
    284            HalUARTPollUSB();
    285          #endif
    286          }
   \                     ??HalUARTPoll_0:
   \   00000F   02....       LJMP      ??Subroutine15_0 & 0xFFFF
    287          
    288          /**************************************************************************************************
    289           * @fn      Hal_UART_RxBufLen()
    290           *
    291           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    292           *
    293           * @param   port - UART port
    294           *
    295           * @return  length of current Rx Buffer
    296           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    298          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    299            (void)port;
    300          
    301          #if (HAL_UART_DMA == 1)
    302            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ       ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL     `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP      ??Hal_UART_RxBufLen_1
    303          #endif
    304          #if (HAL_UART_DMA == 2)
    305            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    306          #endif
    307          #if (HAL_UART_ISR == 1)
    308            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    309          #endif
    310          #if (HAL_UART_ISR == 2)
    311            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    312          #endif
    313          #if HAL_UART_USB
    314            return HalUARTRxAvailUSB();
    315          #else
    316            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV       R2,#0x0
   \   00000F   7B00         MOV       R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP      ?Subroutine2
    317          #endif
    318          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#dmaCfg + 512
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25E0         ADD       A,0xE0 /* A   */
   \   000006   FE           MOV       R6,A
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   FF           MOV       R7,A
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   74..         MOV       A,#dmaCfg & 0xff
   \   000002   2E           ADD       A,R6
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#(dmaCfg >> 8) & 0xff
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    319          
    320          /******************************************************************************
    321          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     11   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     15   HalUARTPollDMA
        0     11   -> HalUARTIsrDMA
        0     11   -> HalUARTRxAvailDMA
        0     11   -> ZMacGetReq
        0     11   -> osal_clear_event
        0     11   -> osal_pwrmgr_task_state
        0     11   -> osal_set_event
        0     15   -> osal_start_timerEx
        0     11   -> osal_stop_timerEx
      1     12   HalUARTRead
      0      0   HalUARTResume
      0     20   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     21   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine15_0
       1  ?Subroutine0
       5  ?Subroutine1
       4  ?Subroutine10
       6  ?Subroutine11
      11  ?Subroutine12
      19  ?Subroutine13
      12  ?Subroutine14
       5  ?Subroutine2
       8  ?Subroutine3
       8  ?Subroutine4
      14  ?Subroutine5
      15  ?Subroutine6
      17  ?Subroutine7
      10  ?Subroutine8
      26  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
      17  HalUARTInit
       6  HalUARTInit::?relay
     108  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      45  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
      16  HalUARTOpen
       6  HalUARTOpen::?relay
     200  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
      18  HalUARTPoll
       6  HalUARTPoll::?relay
     496  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
      89  HalUARTRead
       6  HalUARTRead::?relay
      14  HalUARTResume
       6  HalUARTResume::?relay
      76  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
      11  HalUARTSuspend
       6  HalUARTSuspend::?relay
      17  HalUARTWrite
       6  HalUARTWrite::?relay
     169  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
      19  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  P0DIR
       1  P0IEN
       1  P0IFG
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_IEN1
       1  _A_P0
       4  __Constant_a
    1038  dmaCfg
       1  znpUartActiveShdw

 
 1 463 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    18 bytes in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
 1 039 bytes in segment XDATA_Z
 
    84 bytes of CODE     memory
     0 bytes of CONST    memory (+  4 bytes shared)
     0 bytes of DATA     memory (+ 18 bytes shared)
 1 463 bytes of HUGECODE memory
 1 039 bytes of XDATA    memory

Errors: none
Warnings: none
