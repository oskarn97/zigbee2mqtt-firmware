###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:39:27
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EW7025.tmp ("C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Components\osal\mcu\cc2530\OSAL_Nv.c" -D
#        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\OSAL_Nv.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\OSAL_Nv.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2014-12-19 13:07:30 -0800 (Fri, 19 Dec 2014) $
      4            Revision:       $Revision: 41556 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          #ifdef HAL_MCU_CC2533
     56          #include "hal_batmon.h"
     57          #endif
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     64          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     65          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     66          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     67          
     68          #define OSAL_NV_ACTIVE          0x00
     69          #define OSAL_NV_ERASED          0xFF
     70          #define OSAL_NV_ERASED_ID       0xFFFF
     71          #define OSAL_NV_ZEROED_ID       0x0000
     72          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     73          #define OSAL_NV_SOURCE_ID       0x8000
     74          
     75          // In case pages 0-1 are ever used, define a null page value.
     76          #define OSAL_NV_PAGE_NULL       0
     77          
     78          // In case item Id 0 is ever used, define a null item value.
     79          #define OSAL_NV_ITEM_NULL       0
     80          
     81          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     82          
     83          #define OSAL_NV_PAGE_HDR_OFFSET 0
     84          
     85          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     86          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     87            ZCD_NV_NWKKEY,
     88            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     89            ZCD_NV_NWK_ALTERN_KEY_INFO,
     90          };
     91          
     92          /*********************************************************************
     93           * MACROS
     94           */
     95          
     96          #if (defined HAL_MCU_CC2530 || defined HAL_MCU_CC2531)
     97          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     98          #elif defined HAL_MCU_CC2533
     99          # define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalBatMonRead( HAL_BATMON_MIN_FLASH ))
    100          #else
    101          # warning No implementation of a low Vdd check.
    102          # define  OSAL_NV_CHECK_BUS_VOLTAGE
    103          #endif
    104          
    105          #define OSAL_NV_DATA_SIZE( LEN )                      \
    106            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
    107                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
    108                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
    109          
    110          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    111            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    112                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    113            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    114          
    115          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    116            /* In order to recover from a page compaction that is interrupted,\
    117             * the logic in osal_nv_init() depends upon the following order:\
    118             * 1. State of the target of compaction is changed to ePgInUse.\
    119             * 2. Compacted page is erased.\
    120             */\
    121            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    122            erasePage( (COM_PG) ); \
    123            \
    124            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    125          )
    126          
    127          /*********************************************************************
    128           * TYPEDEFS
    129           */
    130          
    131          typedef struct
    132          {
    133            uint16 id;
    134            uint16 len;   // Enforce Flash-WORD size on len.
    135            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    136            uint16 stat;  // Item status.
    137          } osalNvHdr_t;
    138          // Struct member offsets.
    139          #define OSAL_NV_HDR_ID    0
    140          #define OSAL_NV_HDR_LEN   2
    141          #define OSAL_NV_HDR_CHK   4
    142          #define OSAL_NV_HDR_STAT  6
    143          
    144          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    145          #define OSAL_NV_HDR_SIZE  8
    146          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    147          
    148          typedef struct
    149          {
    150            uint16 active;
    151            uint16 inUse;
    152            uint16 xfer;
    153            uint16 spare;
    154          } osalNvPgHdr_t;
    155          // Struct member offsets.
    156          #define OSAL_NV_PG_ACTIVE 0
    157          #define OSAL_NV_PG_INUSE  2
    158          #define OSAL_NV_PG_XFER   4
    159          #define OSAL_NV_PG_SPARE  6
    160          
    161          #define OSAL_NV_PAGE_HDR_SIZE  8
    162          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    163          
    164          typedef enum
    165          {
    166            eNvXfer,
    167            eNvZero
    168          } eNvHdrEnum;
    169          
    170          typedef enum
    171          {
    172            ePgActive,
    173            ePgInUse,
    174            ePgXfer,
    175            ePgSpare
    176          } ePgHdrEnum;
    177          
    178          /*********************************************************************
    179           * GLOBAL VARIABLES
    180           */
    181          
    182          #ifndef OAD_KEEP_NV_PAGES
    183          // When NV pages are to remain intact during OAD download,
    184          // the image itself should not include NV pages.
    185          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    186          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    187          #pragma required=_nvBuf
    188          #endif // OAD_KEEP_NV_PAGES
    189          
    190          /*********************************************************************
    191           * LOCAL VARIABLES
    192           */
    193          
    194          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    196          
    197          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    199          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    201          
    202          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          
    205          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    208          
    209          /*********************************************************************
    210           * LOCAL FUNCTIONS
    211           */
    212          
    213          static uint8  initNV( void );
    214          
    215          static void   setPageUse( uint8 pg, uint8 inUse );
    216          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    217          static void   erasePage( uint8 pg );
    218          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    219          
    220          static uint16 findItem( uint16 id );
    221          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    222          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    223          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    224          
    225          static uint16 calcChkB( uint16 len, uint8 *buf );
    226          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    227          
    228          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    229          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    230          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    231          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    232          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    233          
    234          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    235          static uint8  hotItem(uint16 id);
    236          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    237          
    238          /*********************************************************************
    239           * @fn      initNV
    240           *
    241           * @brief   Initialize the NV flash pages.
    242           *
    243           * @param   none
    244           *
    245           * @return  TRUE
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          static uint8 initNV( void )
   \                     initNV:
    248          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    249            osalNvPgHdr_t pgHdr;
    250            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV       ?V0,#0x0
    251            uint8 findDups = FALSE;
   \   00000D   7F00         MOV       R7,#0x0
    252            uint8 pg;
    253          
    254            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV       DPTR,#pgRes
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
    255          
    256            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000014   7E79         MOV       R6,#0x79
    257            {
    258              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..08       MOV       ?V2,#0x8
   \   000019   8F..         MOV       ?V3,R7
   \   00001B   78..         MOV       R0,#?V2
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP102_8
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \   000029   EE           MOV       A,R6
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
    259          
    260              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F4           CPL       A
   \   00003B   7003         JNZ       ??initNV_1
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F4           CPL       A
   \                     ??initNV_1:
   \   000040   7013         JNZ       ??initNV_2
    261              {
    262                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000042   90....       MOV       DPTR,#pgRes
   \   000045   E0           MOVX      A,@DPTR
   \   000046   7004         JNZ       ??initNV_3
    263                {
    264                  pgRes = pg;
   \   000048   EE           MOV       A,R6
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   8019         SJMP      ??initNV_4
    265                }
    266                else
    267                {
    268                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004C                ; Setup parameters for call to function setPageUse
   \   00004C   7A01         MOV       R2,#0x1
   \   00004E   EE           MOV       A,R6
   \   00004F   F9           MOV       R1,A
   \   000050   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000053   8010         SJMP      ??initNV_4
    269                }
    270              }
    271              // An Xfer from this page was in progress.
    272              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F4           CPL       A
   \   00005C   7003         JNZ       ??initNV_5
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F4           CPL       A
   \                     ??initNV_5:
   \   000061   6002         JZ        ??initNV_4
    273              {
    274                oldPg = pg;
   \   000063   8E..         MOV       ?V0,R6
    275              }
    276            }
   \                     ??initNV_4:
   \   000065   0E           INC       R6
   \   000066   EE           MOV       A,R6
   \   000067   C3           CLR       C
   \   000068   947F         SUBB      A,#0x7f
   \   00006A   40AA         JC        ??initNV_0
    277          
    278            // If a page compaction was interrupted before the old page was erased.
    279            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00006C   E5..         MOV       A,?V0
   \   00006E   90....       MOV       DPTR,#pgRes
   \   000071   601F         JZ        ??initNV_6
    280            {
    281              /* Interrupted compaction before the target of compaction was put in use;
    282               * so erase the target of compaction and start again.
    283               */
    284              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000073   E0           MOVX      A,@DPTR
   \   000074   600F         JZ        ??initNV_7
    285              {
    286                erasePage( pgRes );
   \   000076                ; Setup parameters for call to function erasePage
   \   000076   F9           MOV       R1,A
   \   000077   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    287                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   00007A                ; Setup parameters for call to function compactPage
   \   00007A   7A00         MOV       R2,#0x0
   \   00007C   7B00         MOV       R3,#0x0
   \   00007E   A9..         MOV       R1,?V0
   \   000080   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   000083   8014         SJMP      ??initNV_8
    288              }
    289              /* Interrupted compaction after the target of compaction was put in use,
    290               * but before the old page was erased; so erase it now and create a new reserve page.
    291               */
    292              else
    293              {
    294                erasePage( oldPg );
   \                     ??initNV_7:
   \   000085                ; Setup parameters for call to function erasePage
   \   000085   A9..         MOV       R1,?V0
   \   000087   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    295                pgRes = oldPg;
   \   00008A   E5..         MOV       A,?V0
   \   00008C   90....       MOV       DPTR,#pgRes
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   8007         SJMP      ??initNV_8
    296              }
    297            }
    298            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   000092   E0           MOVX      A,@DPTR
   \   000093   6004         JZ        ??initNV_8
    299            {
    300              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   000095                ; Setup parameters for call to function erasePage
   \   000095   F9           MOV       R1,A
   \   000096   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    301            }
    302            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    303             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    304             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    305             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    306             * size less the page header.
    307             */
    308          
    309            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   000099   7E79         MOV       R6,#0x79
    310            {
    311              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    312              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   00009B                ; Setup parameters for call to function initPage
   \   00009B   EF           MOV       A,R7
   \   00009C   FC           MOV       R4,A
   \   00009D   7A00         MOV       R2,#0x0
   \   00009F   7B00         MOV       R3,#0x0
   \   0000A1   EE           MOV       A,R6
   \   0000A2   F9           MOV       R1,A
   \   0000A3   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   0000A6   8B..         MOV       ?V3,R3
   \   0000A8   EA           MOV       A,R2
   \   0000A9   45..         ORL       A,?V3
   \   0000AB   6004         JZ        ??initNV_10
    313              {
    314                findDups = TRUE;
   \   0000AD   7F01         MOV       R7,#0x1
    315                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000AF   7E78         MOV       R6,#0x78
    316                continue;
    317              }
    318            }
   \                     ??initNV_10:
   \   0000B1   0E           INC       R6
   \   0000B2   EE           MOV       A,R6
   \   0000B3   C3           CLR       C
   \   0000B4   947F         SUBB      A,#0x7f
   \   0000B6   40E3         JC        ??initNV_9
    319          
    320            if (findDups)
   \   0000B8   EF           MOV       A,R7
   \   0000B9   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BB   5014         JNC       ??initNV_11
    321            {
    322              // Final pass to calculate page lost after invalidating duplicate items.
    323              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000BD   7E79         MOV       R6,#0x79
    324              {
    325                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000BF                ; Setup parameters for call to function initPage
   \   0000BF   7C00         MOV       R4,#0x0
   \   0000C1   7A00         MOV       R2,#0x0
   \   0000C3   7B00         MOV       R3,#0x0
   \   0000C5   EE           MOV       A,R6
   \   0000C6   F9           MOV       R1,A
   \   0000C7   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
    326              }
   \   0000CA   0E           INC       R6
   \   0000CB   EE           MOV       A,R6
   \   0000CC   C3           CLR       C
   \   0000CD   947F         SUBB      A,#0x7f
   \   0000CF   40EE         JC        ??initNV_12
    327            }
    328          
    329            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   0000D1   90....       MOV       DPTR,#pgRes
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   7047         JNZ       ??initNV_13
    330            {
    331              uint8 idx, mostLost = 0;
   \   0000D7   7E00         MOV       R6,#0x0
    332          
    333              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000D9   7A00         MOV       R2,#0x0
    334              {
    335                // Is this the page that was compacted?
    336                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   0000DB   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000DE   64F8         XRL       A,#0xf8
   \   0000E0   7004         JNZ       ??initNV_15
   \   0000E2   A3           INC       DPTR
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   6407         XRL       A,#0x7
   \                     ??initNV_15:
   \   0000E6   7004         JNZ       ??initNV_16
    337                {
    338                  mostLost = idx;
   \   0000E8   EA           MOV       A,R2
   \   0000E9   FE           MOV       R6,A
    339                  break;
   \   0000EA   8027         SJMP      ??initNV_17
    340                }
    341                /* This check is not expected to be necessary because the above test should always succeed
    342                 * with an early loop exit.
    343                 */
    344                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   0000EC   EE           MOV       A,R6
   \   0000ED   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000F0   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000F3   C082         PUSH      DPL
   \   0000F5   C083         PUSH      DPH
   \   0000F7   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000FA   F8           MOV       R0,A
   \   0000FB   A3           INC       DPTR
   \   0000FC   E0           MOVX      A,@DPTR
   \   0000FD   F9           MOV       R1,A
   \   0000FE   D083         POP       DPH
   \   000100   D082         POP       DPL
   \   000102   C3           CLR       C
   \   000103   E0           MOVX      A,@DPTR
   \   000104   98           SUBB      A,R0
   \   000105   A3           INC       DPTR
   \   000106   E0           MOVX      A,@DPTR
   \   000107   99           SUBB      A,R1
   \   000108   5002         JNC       ??initNV_18
    345                {
    346                  mostLost = idx;
   \   00010A   EA           MOV       A,R2
   \   00010B   FE           MOV       R6,A
    347                }
    348              }
   \                     ??initNV_18:
   \   00010C   0A           INC       R2
   \   00010D   EA           MOV       A,R2
   \   00010E   C3           CLR       C
   \   00010F   9406         SUBB      A,#0x6
   \   000111   40C8         JC        ??initNV_14
    349          
    350              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   000113   7479         MOV       A,#0x79
   \   000115   2E           ADD       A,R6
   \   000116   90....       MOV       DPTR,#pgRes
   \   000119   F0           MOVX      @DPTR,A
    351              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   00011A                ; Setup parameters for call to function erasePage
   \   00011A   F9           MOV       R1,A
   \   00011B   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    352            }
    353          
    354            return TRUE;
   \                     ??initNV_13:
   \   00011E   7901         MOV       R1,#0x1
   \   000120   7408         MOV       A,#0x8
   \   000122   80..         SJMP      ??Subroutine40_0
    355          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000004   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine41_0
   \   000003                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   74..         MOV       A,#pgLost & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET
    356          
    357          /*********************************************************************
    358           * @fn      setPageUse
    359           *
    360           * @brief   Set page header active/inUse state according to 'inUse'.
    361           *
    362           * @param   pg - Valid NV page to verify and init.
    363           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    364           *
    365           * @return  none
    366           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    367          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    368          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FF           MOV       R7,A
    369            osalNvPgHdr_t pgHdr;
    370          
    371            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    372          
    373            if ( inUse )
   \   000016   EF           MOV       A,R7
   \   000017   6008         JZ        ??setPageUse_0
    374            {
    375              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E4           CLR       A
   \   00001F   8007         SJMP      ??setPageUse_1
    376            }
    377            else
    378            {
    379              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   74FF         MOV       A,#-0x1
    380            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    381          
    382            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_77:
   \   00002B   7A00         MOV       R2,#0x0
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    383          }
   \   000032   7408         MOV       A,#0x8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   22           RET
    384          
    385          /*********************************************************************
    386           * @fn      initPage
    387           *
    388           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    389           *
    390           * @param   pg - Valid NV page to verify and init.
    391           * @param   id - Valid NV item Id to use function as a "findItem".
    392           *               If set to NULL then just perform the page initialization.
    393           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    394           *                     left from a write that is interrupted by a reset/power-cycle.
    395           *                     FALSE otherwise.
    396           *
    397           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    398           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    401          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   \   000010   8C..         MOV       ?V5,R4
    402            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   75..08       MOV       ?V0,#0x8
   \   000015   75..00       MOV       ?V1,#0x0
    403            uint16 sz, lost = 0;
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   75..00       MOV       ?V3,#0x0
    404            osalNvHdr_t hdr;
    405          
    406            do
    407            {
    408              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001E                ; Setup parameters for call to function HalFlashRead
   \   00001E   75..08       MOV       ?V8,#0x8
   \   000021   75..00       MOV       ?V9,#0x0
   \   000024   78..         MOV       R0,#?V8
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?XSTACK_DISP102_8
   \   00002E   AA..         MOV       R2,?V0
   \   000030   AB..         MOV       R3,?V1
   \   000032   A9..         MOV       R1,?V4
   \   000034   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
    409          
    410              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003C   85..82       MOV       DPL,?XSP + 0
   \   00003F   85..83       MOV       DPH,?XSP + 1
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F4           CPL       A
   \   000044   7003         JNZ       ??initPage_1
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F4           CPL       A
   \                     ??initPage_1:
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??initPage_2 & 0xFFFF
    411              {
    412                break;
    413              }
    414          
    415              // Get the actual size in bytes which is the ceiling(hdr.len)
    416              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000056   4006         JC        ??initPage_3
   \   000058   7EFC         MOV       R6,#-0x4
   \   00005A   7FFF         MOV       R7,#-0x1
   \   00005C   800B         SJMP      ??initPage_4
   \                     ??initPage_3:
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000066   FE           MOV       R6,A
   \   000067   E9           MOV       A,R1
   \   000068   FF           MOV       R7,A
    417          
    418              // A bad 'len' write has blown away the rest of the page.
    419              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   000069   74F8         MOV       A,#-0x8
   \   00006B   C3           CLR       C
   \   00006C   95..         SUBB      A,?V0
   \   00006E   F8           MOV       R0,A
   \   00006F   7407         MOV       A,#0x7
   \   000071   95..         SUBB      A,?V1
   \   000073   F9           MOV       R1,A
   \   000074   C3           CLR       C
   \   000075   E8           MOV       A,R0
   \   000076   9E           SUBB      A,R6
   \   000077   E9           MOV       A,R1
   \   000078   9F           SUBB      A,R7
   \   000079   5020         JNC       ??initPage_5
    420              {
    421                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   00007B   E5..         MOV       A,?V2
   \   00007D   2400         ADD       A,#0x0
   \   00007F   E5..         MOV       A,?V3
   \   000081   3408         ADDC      A,#0x8
   \   000083   F5..         MOV       ?V3,A
   \   000085   C3           CLR       C
   \   000086   E5..         MOV       A,?V2
   \   000088   95..         SUBB      A,?V0
   \   00008A   F5..         MOV       ?V2,A
   \   00008C   E5..         MOV       A,?V3
   \   00008E   95..         SUBB      A,?V1
   \   000090   F5..         MOV       ?V3,A
    422                offset = OSAL_NV_PAGE_SIZE;
   \   000092   75..00       MOV       ?V0,#0x0
   \   000095   75..08       MOV       ?V1,#0x8
    423                break;
   \   000098   02....       LJMP      ??initPage_2 & 0xFFFF
    424              }
    425          
    426              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   00009B   E5..         MOV       A,?V0
   \   00009D   2408         ADD       A,#0x8
   \   00009F   F5..         MOV       ?V0,A
   \   0000A1   E4           CLR       A
   \   0000A2   35..         ADDC      A,?V1
   \   0000A4   F5..         MOV       ?V1,A
    427          
    428              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   0000A6   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0000A9   E8           MOV       A,R0
   \   0000AA   49           ORL       A,R1
   \   0000AB   7003         JNZ       $+5
   \   0000AD   02....       LJMP      ??initPage_6 & 0xFFFF
    429              {
    430                /* This trick allows function to do double duty for findItem() without
    431                 * compromising its essential functionality at powerup initialization.
    432                 */
    433                if ( id != OSAL_NV_ITEM_NULL )
   \   0000B0   E5..         MOV       A,?V6
   \   0000B2   45..         ORL       A,?V7
   \   0000B4   604A         JZ        ??initPage_7
    434                {
    435                  /* This trick allows asking to find the old/transferred item in case
    436                   * of a successful new item write that gets interrupted before the
    437                   * old item can be zeroed out.
    438                   */
    439                  if ( (id & 0x7fff) == hdr.id )
   \   0000B6   A8..         MOV       R0,?V6
   \   0000B8   E5..         MOV       A,?V7
   \   0000BA   547F         ANL       A,#0x7f
   \   0000BC   F9           MOV       R1,A
   \   0000BD   85..82       MOV       DPL,?XSP + 0
   \   0000C0   85..83       MOV       DPH,?XSP + 1
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   68           XRL       A,R0
   \   0000C5   7003         JNZ       ??initPage_8
   \   0000C7   A3           INC       DPTR
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   69           XRL       A,R1
   \                     ??initPage_8:
   \   0000CA   6003         JZ        $+5
   \   0000CC   02....       LJMP      ??CrossCallReturnLabel_51 & 0xFFFF
    440                  {
    441                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    442                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000CF   E5..         MOV       A,?V7
   \   0000D1   5480         ANL       A,#0x80
   \   0000D3   7013         JNZ       ??initPage_9
   \   0000D5   7406         MOV       A,#0x6
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F4           CPL       A
   \   0000DC   7003         JNZ       ??initPage_10
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   F4           CPL       A
   \                     ??initPage_10:
   \   0000E1   6003         JZ        $+5
   \   0000E3   02....       LJMP      ??CrossCallReturnLabel_51 & 0xFFFF
   \   0000E6   8011         SJMP      ??initPage_11
   \                     ??initPage_9:
   \   0000E8   7406         MOV       A,#0x6
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F4           CPL       A
   \   0000EF   7003         JNZ       ??initPage_12
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   F4           CPL       A
   \                     ??initPage_12:
   \   0000F4   7003         JNZ       $+5
   \   0000F6   02....       LJMP      ??CrossCallReturnLabel_51 & 0xFFFF
    443                    {
    444                      return offset;
   \                     ??initPage_11:
   \   0000F9   AA..         MOV       R2,?V0
   \   0000FB   AB..         MOV       R3,?V1
   \   0000FD   02....       LJMP      ??initPage_13 & 0xFFFF
    445                    }
    446                  }
    447                }
    448                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    449                else
    450                {
    451                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   000100                ; Setup parameters for call to function calcChkF
   \   000100   7402         MOV       A,#0x2
   \   000102   12....       LCALL     ?XSTACK_DISP0_8
   \   000105   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000108   AA..         MOV       R2,?V0
   \   00010A   AB..         MOV       R3,?V1
   \   00010C   A9..         MOV       R1,?V4
   \   00010E   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000111   8A..         MOV       ?V8,R2
   \   000113   8B..         MOV       ?V9,R3
   \   000115   A8..         MOV       R0,?V8
   \   000117   A9..         MOV       R1,?V9
   \   000119   7404         MOV       A,#0x4
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   68           XRL       A,R0
   \   000120   7003         JNZ       ??initPage_14
   \   000122   A3           INC       DPTR
   \   000123   E0           MOVX      A,@DPTR
   \   000124   69           XRL       A,R1
   \                     ??initPage_14:
   \   000125   7046         JNZ       ??initPage_15
    452                  {
    453                    if ( findDups )
   \   000127   E5..         MOV       A,?V5
   \   000129   602E         JZ        ??initPage_16
    454                    {
    455                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00012B   7406         MOV       A,#0x6
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   E0           MOVX      A,@DPTR
   \   000131   F4           CPL       A
   \   000132   7003         JNZ       ??initPage_17
   \   000134   A3           INC       DPTR
   \   000135   E0           MOVX      A,@DPTR
   \   000136   F4           CPL       A
   \                     ??initPage_17:
   \   000137   7049         JNZ       ??CrossCallReturnLabel_51
    456                      {
    457                        /* The trick of setting the MSB of the item Id causes the logic
    458                         * immediately above to return a valid page only if the header 'stat'
    459                         * indicates that it was the older item being transferred.
    460                         */
    461                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000139                ; Setup parameters for call to function findItem
   \   000139   85..82       MOV       DPL,?XSP + 0
   \   00013C   85..83       MOV       DPH,?XSP + 1
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   FA           MOV       R2,A
   \   000141   A3           INC       DPTR
   \   000142   E0           MOVX      A,@DPTR
   \   000143   4480         ORL       A,#0x80
   \   000145   FB           MOV       R3,A
   \   000146   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
    462          
    463                        if ( off != OSAL_NV_ITEM_NULL )
   \   000149   EA           MOV       A,R2
   \   00014A   4B           ORL       A,R3
   \   00014B   6035         JZ        ??CrossCallReturnLabel_51
    464                        {
    465                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   00014D                ; Setup parameters for call to function setItem
   \   00014D   7C01         MOV       R4,#0x1
   \   00014F   90....       MOV       DPTR,#findPg
   \   000152   E0           MOVX      A,@DPTR
   \   000153   F9           MOV       R1,A
   \   000154   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   000157   8029         SJMP      ??CrossCallReturnLabel_51
    466                        }
    467                      }
    468                    }
    469                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    470                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_16:
   \   000159   7406         MOV       A,#0x6
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   F4           CPL       A
   \   000160   7003         JNZ       ??initPage_18
   \   000162   A3           INC       DPTR
   \   000163   E0           MOVX      A,@DPTR
   \   000164   F4           CPL       A
   \                     ??initPage_18:
   \   000165   601B         JZ        ??CrossCallReturnLabel_51
    471                    {
    472                      return OSAL_NV_ERASED_ID;
   \   000167   7AFF         MOV       R2,#-0x1
   \   000169   7BFF         MOV       R3,#-0x1
   \   00016B   8048         SJMP      ??initPage_13
    473                    }
    474                  }
    475                  else
    476                  {
    477                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_15:
   \   00016D                ; Setup parameters for call to function setItem
   \   00016D   7C01         MOV       R4,#0x1
   \   00016F   AA..         MOV       R2,?V0
   \   000171   AB..         MOV       R3,?V1
   \   000173   A9..         MOV       R1,?V4
   \   000175   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    478                    lost += (OSAL_NV_HDR_SIZE + sz);
    479                  }
    480                }
    481              }
    482              else
    483              {
    484                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   000178   EE           MOV       A,R6
   \   000179   2408         ADD       A,#0x8
   \   00017B   F8           MOV       R0,A
   \   00017C   E4           CLR       A
   \   00017D   3F           ADDC      A,R7
   \   00017E   F9           MOV       R1,A
   \   00017F   12....       LCALL     ?Subroutine28 & 0xFFFF
    485              }
    486              offset += sz;
   \                     ??CrossCallReturnLabel_51:
   \   000182   E5..         MOV       A,?V0
   \   000184   2E           ADD       A,R6
   \   000185   F5..         MOV       ?V0,A
   \   000187   E5..         MOV       A,?V1
   \   000189   3F           ADDC      A,R7
   \   00018A   F5..         MOV       ?V1,A
    487          
    488            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   00018C   C3           CLR       C
   \   00018D   E5..         MOV       A,?V0
   \   00018F   94F8         SUBB      A,#-0x8
   \   000191   E5..         MOV       A,?V1
   \   000193   9407         SUBB      A,#0x7
   \   000195   5003         JNC       $+5
   \   000197   02....       LJMP      ??initPage_0 & 0xFFFF
    489          
    490            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   00019A   A8..         MOV       R0,?V4
   \   00019C   E8           MOV       A,R0
   \   00019D   28           ADD       A,R0
   \   00019E   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0001A1   E5..         MOV       A,?V0
   \   0001A3   F0           MOVX      @DPTR,A
   \   0001A4   A3           INC       DPTR
   \   0001A5   E5..         MOV       A,?V1
   \   0001A7   12....       LCALL     ?Subroutine10 & 0xFFFF
    491            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_4:
   \   0001AA   E5..         MOV       A,?V2
   \   0001AC   F0           MOVX      @DPTR,A
   \   0001AD   A3           INC       DPTR
   \   0001AE   E5..         MOV       A,?V3
   \   0001B0   F0           MOVX      @DPTR,A
    492          
    493            return OSAL_NV_ITEM_NULL;
   \   0001B1   7A00         MOV       R2,#0x0
   \   0001B3   7B00         MOV       R3,#0x0
   \                     ??initPage_13:
   \   0001B5   7408         MOV       A,#0x8
   \   0001B7   80..         SJMP      ??Subroutine44_0
    494          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine43_0
   \   000006                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV       R7,#0xa
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000008   39           ADDC      A,R1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   C3           CLR       C
   \   000001   E0           MOVX      A,@DPTR
   \   000002   94FC         SUBB      A,#-0x4
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   94FF         SUBB      A,#-0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   E8           MOV       A,R0
   \   00000A   54FC         ANL       A,#0xfc
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E5..         MOV       A,?V2
   \   000002   28           ADD       A,R0
   \   000003   F5..         MOV       ?V2,A
   \   000005   E5..         MOV       A,?V3
   \   000007   39           ADDC      A,R1
   \   000008   F5..         MOV       ?V3,A
   \   00000A   22           RET
    495          
    496          /*********************************************************************
    497           * @fn      erasePage
    498           *
    499           * @brief   Erases a page in Flash.
    500           *
    501           * @param   pg - Valid NV page to erase.
    502           *
    503           * @return  none
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          static void erasePage( uint8 pg )
   \                     erasePage:
    506          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    507            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL     `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    508          
    509            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV       A,R6
   \   00000B   2E           ADD       A,R6
   \   00000C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00000F   7408         MOV       A,#0x8
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E4           CLR       A
   \   000014   12....       LCALL     ?Subroutine10 & 0xFFFF
    510            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_5:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    511          }
   \   00001B   02....       LJMP      ??Subroutine42_0 & 0xFFFF
    512          
    513          /*********************************************************************
    514           * @fn      compactPage
    515           *
    516           * @brief   Compacts the page specified.
    517           *
    518           * @param   srcPg - Valid NV page to erase.
    519           * @param   skipId - Item Id to not compact.
    520           *
    521           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    522           *          FALSE otherwise.
    523           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    524           *          the risk of infinitely looping on HAL flash failure.
    525           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    526           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    527           *          NV_OPER_FAILED.
    528           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    529           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    530           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    531           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    532           *          or written, the last value written with a return value of SUCCESS can continue to be
    533           *          read successfully.
    534           *          If eventually HAL flash starts working again, all of the pages marked as
    535           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    536           *          deterministically clean-up one page pending compaction per power-cycle
    537           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    538           *          through such a scenario.
    539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
    542            uint16 srcOff;
    543            uint8 rtrn;
    544          
    545            // To minimize code size, only check for a clean page here where it's absolutely required.
    546            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   7E00         MOV       R6,#0x0
   \   000012   7F00         MOV       R7,#0x0
    547            {
    548              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   000014                ; Setup parameters for call to function HalFlashRead
   \   000014   75..01       MOV       ?V4,#0x1
   \   000017   75..00       MOV       ?V5,#0x0
   \   00001A   78..         MOV       R0,#?V4
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP102_8
   \   000024   EE           MOV       A,R6
   \   000025   FA           MOV       R2,A
   \   000026   EF           MOV       A,R7
   \   000027   FB           MOV       R3,A
   \   000028   90....       MOV       DPTR,#pgRes
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
    549              if (rtrn != OSAL_NV_ERASED)
   \   000035   85..82       MOV       DPL,?XSP + 0
   \   000038   85..83       MOV       DPH,?XSP + 1
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F4           CPL       A
   \   00003D   600D         JZ        ??compactPage_1
    550              {
    551                erasePage(pgRes);
   \   00003F                ; Setup parameters for call to function erasePage
   \   00003F   90....       MOV       DPTR,#pgRes
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    552                return FALSE;
   \   000047   7900         MOV       R1,#0x0
   \   000049   02....       LJMP      ??compactPage_2 & 0xFFFF
    553              }
    554            }
   \                     ??compactPage_1:
   \   00004C   0E           INC       R6
   \   00004D   EE           MOV       A,R6
   \   00004E   7001         JNZ       ??compactPage_3
   \   000050   0F           INC       R7
   \                     ??compactPage_3:
   \   000051   C3           CLR       C
   \   000052   EF           MOV       A,R7
   \   000053   9408         SUBB      A,#0x8
   \   000055   40BD         JC        ??compactPage_0
    555          
    556            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000057   7E08         MOV       R6,#0x8
   \   000059   7F00         MOV       R7,#0x0
    557            rtrn = TRUE;
   \   00005B   7401         MOV       A,#0x1
   \   00005D   F0           MOVX      @DPTR,A
    558          
    559            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    560            {
    561              osalNvHdr_t hdr;
    562              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_4:
   \   00005E   90....       MOV       DPTR,#pgRes
   \   000061   E0           MOVX      A,@DPTR
   \   000062   25E0         ADD       A,0xE0 /* A   */
   \   000064   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000067   12....       LCALL     ?Subroutine19 & 0xFFFF
    563          
    564              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_30:
   \   00006A                ; Setup parameters for call to function HalFlashRead
   \   00006A   75..08       MOV       ?V6,#0x8
   \   00006D   75..00       MOV       ?V7,#0x0
   \   000070   78..         MOV       R0,#?V6
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   7403         MOV       A,#0x3
   \   000077   12....       LCALL     ?XSTACK_DISP102_8
   \   00007A   EE           MOV       A,R6
   \   00007B   FA           MOV       R2,A
   \   00007C   EF           MOV       A,R7
   \   00007D   FB           MOV       R3,A
   \   00007E   A9..         MOV       R1,?V0
   \   000080   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000083   7402         MOV       A,#0x2
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
    565          
    566              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   000088   7401         MOV       A,#0x1
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   F4           CPL       A
   \   00008F   7003         JNZ       ??compactPage_5
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   F4           CPL       A
   \                     ??compactPage_5:
   \   000094   7003         JNZ       $+5
   \   000096   02....       LJMP      ??compactPage_6 & 0xFFFF
    567              {
    568                break;
    569              }
    570          
    571              // Get the actual size in bytes which is the ceiling(hdr.len)
    572              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   000099   7403         MOV       A,#0x3
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A1   4008         JC        ??compactPage_7
   \   0000A3   75..FC       MOV       ?V6,#-0x4
   \   0000A6   75..FF       MOV       ?V7,#-0x1
   \   0000A9   800D         SJMP      ??compactPage_8
   \                     ??compactPage_7:
   \   0000AB   7403         MOV       A,#0x3
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000B3   F5..         MOV       ?V6,A
   \   0000B5   E9           MOV       A,R1
   \   0000B6   F5..         MOV       ?V7,A
    573          
    574              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_8:
   \   0000B8   74F8         MOV       A,#-0x8
   \   0000BA   C3           CLR       C
   \   0000BB   9E           SUBB      A,R6
   \   0000BC   F8           MOV       R0,A
   \   0000BD   7407         MOV       A,#0x7
   \   0000BF   9F           SUBB      A,R7
   \   0000C0   F9           MOV       R1,A
   \   0000C1   C3           CLR       C
   \   0000C2   E8           MOV       A,R0
   \   0000C3   95..         SUBB      A,?V6
   \   0000C5   E9           MOV       A,R1
   \   0000C6   95..         SUBB      A,?V7
   \   0000C8   5003         JNC       $+5
   \   0000CA   02....       LJMP      ??compactPage_6 & 0xFFFF
    575              {
    576                break;
    577              }
    578          
    579              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000CD   74F8         MOV       A,#-0x8
   \   0000CF   C3           CLR       C
   \   0000D0   95..         SUBB      A,?V4
   \   0000D2   F8           MOV       R0,A
   \   0000D3   7407         MOV       A,#0x7
   \   0000D5   95..         SUBB      A,?V5
   \   0000D7   F9           MOV       R1,A
   \   0000D8   C3           CLR       C
   \   0000D9   E8           MOV       A,R0
   \   0000DA   95..         SUBB      A,?V6
   \   0000DC   E9           MOV       A,R1
   \   0000DD   95..         SUBB      A,?V7
   \   0000DF   5003         JNC       $+5
   \   0000E1   02....       LJMP      ??compactPage_9 & 0xFFFF
    580              {
    581                rtrn = FALSE;
    582                break;
    583              }
    584          
    585              srcOff += OSAL_NV_HDR_SIZE;
   \   0000E4   EE           MOV       A,R6
   \   0000E5   2408         ADD       A,#0x8
   \   0000E7   FE           MOV       R6,A
   \   0000E8   E4           CLR       A
   \   0000E9   3F           ADDC      A,R7
   \   0000EA   FF           MOV       R7,A
    586          
    587              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   0000EB   7401         MOV       A,#0x1
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000F3   E8           MOV       A,R0
   \   0000F4   49           ORL       A,R1
   \   0000F5   7003         JNZ       $+5
   \   0000F7   02....       LJMP      ??compactPage_10 & 0xFFFF
   \   0000FA   7401         MOV       A,#0x1
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   E0           MOVX      A,@DPTR
   \   000100   65..         XRL       A,?V2
   \   000102   7004         JNZ       ??compactPage_11
   \   000104   A3           INC       DPTR
   \   000105   E0           MOVX      A,@DPTR
   \   000106   65..         XRL       A,?V3
   \                     ??compactPage_11:
   \   000108   7003         JNZ       $+5
   \   00010A   02....       LJMP      ??compactPage_10 & 0xFFFF
    588              {
    589                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   00010D                ; Setup parameters for call to function calcChkF
   \   00010D   7403         MOV       A,#0x3
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000115   EE           MOV       A,R6
   \   000116   FA           MOV       R2,A
   \   000117   EF           MOV       A,R7
   \   000118   FB           MOV       R3,A
   \   000119   A9..         MOV       R1,?V0
   \   00011B   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00011E   8A..         MOV       ?V8,R2
   \   000120   8B..         MOV       ?V9,R3
   \   000122   A8..         MOV       R0,?V8
   \   000124   A9..         MOV       R1,?V9
   \   000126   7405         MOV       A,#0x5
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   68           XRL       A,R0
   \   00012D   7003         JNZ       ??compactPage_12
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   69           XRL       A,R1
   \                     ??compactPage_12:
   \   000132   6003         JZ        $+5
   \   000134   02....       LJMP      ??compactPage_10 & 0xFFFF
    590                {
    591                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    592                   * OSAL_Nv interruptions caused by resets.
    593                   */
    594                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000137   7407         MOV       A,#0x7
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   E0           MOVX      A,@DPTR
   \   00013D   F4           CPL       A
   \   00013E   7003         JNZ       ??compactPage_13
   \   000140   A3           INC       DPTR
   \   000141   E0           MOVX      A,@DPTR
   \   000142   F4           CPL       A
   \                     ??compactPage_13:
   \   000143   700B         JNZ       ??compactPage_14
    595                  {
    596                    setItem( srcPg, srcOff, eNvXfer );
   \   000145                ; Setup parameters for call to function setItem
   \   000145   7C00         MOV       R4,#0x0
   \   000147   EE           MOV       A,R6
   \   000148   FA           MOV       R2,A
   \   000149   EF           MOV       A,R7
   \   00014A   FB           MOV       R3,A
   \   00014B   A9..         MOV       R1,?V0
   \   00014D   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    597                  }
    598          
    599                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   000150                ; Setup parameters for call to function writeItem
   \   000150   75..00       MOV       ?V1,#0x0
   \   000153   78..         MOV       R0,#?V1
   \   000155   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000158   E4           CLR       A
   \   000159   F5..         MOV       ?V8,A
   \   00015B   F5..         MOV       ?V9,A
   \   00015D   78..         MOV       R0,#?V8
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000162   7406         MOV       A,#0x6
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00016A   7404         MOV       A,#0x4
   \   00016C   12....       LCALL     ?XSTACK_DISP0_8
   \   00016F   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000172   90....       MOV       DPTR,#pgRes
   \   000175   E0           MOVX      A,@DPTR
   \   000176   F9           MOV       R1,A
   \   000177   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00017A   7403         MOV       A,#0x3
   \   00017C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00017F   E9           MOV       A,R1
   \   000180   7003         JNZ       $+5
   \   000182   02....       LJMP      ??compactPage_9 & 0xFFFF
    600                  {
    601                    dstOff += OSAL_NV_HDR_SIZE;
   \   000185   E5..         MOV       A,?V4
   \   000187   2408         ADD       A,#0x8
   \   000189   F5..         MOV       ?V4,A
   \   00018B   E4           CLR       A
   \   00018C   35..         ADDC      A,?V5
   \   00018E   F5..         MOV       ?V5,A
    602                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   000190                ; Setup parameters for call to function xferBuf
   \   000190   78..         MOV       R0,#?V6
   \   000192   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000195   78..         MOV       R0,#?V4
   \   000197   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019A   90....       MOV       DPTR,#pgRes
   \   00019D   E0           MOVX      A,@DPTR
   \   00019E   FC           MOV       R4,A
   \   00019F   EE           MOV       A,R6
   \   0001A0   FA           MOV       R2,A
   \   0001A1   EF           MOV       A,R7
   \   0001A2   FB           MOV       R3,A
   \   0001A3   A9..         MOV       R1,?V0
   \   0001A5   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   0001A8   7404         MOV       A,#0x4
   \   0001AA   12....       LCALL     ?DEALLOC_XSTACK8
    603                    // Calculate and write the new checksum.
    604                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   0001AD                ; Setup parameters for call to function calcChkF
   \   0001AD   7403         MOV       A,#0x3
   \   0001AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B2   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001B5   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   0001B8   8A..         MOV       ?V8,R2
   \   0001BA   8B..         MOV       ?V9,R3
   \   0001BC   A8..         MOV       R0,?V8
   \   0001BE   A9..         MOV       R1,?V9
   \   0001C0   7405         MOV       A,#0x5
   \   0001C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   68           XRL       A,R0
   \   0001C7   7003         JNZ       ??compactPage_15
   \   0001C9   A3           INC       DPTR
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   69           XRL       A,R1
   \                     ??compactPage_15:
   \   0001CC   7053         JNZ       ??compactPage_9
    605                    {
    606                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001CE                ; Setup parameters for call to function setChk
   \   0001CE   7405         MOV       A,#0x5
   \   0001D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D3   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001D6   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   0001D9   8A..         MOV       ?V8,R2
   \   0001DB   8B..         MOV       ?V9,R3
   \   0001DD   A8..         MOV       R0,?V8
   \   0001DF   A9..         MOV       R1,?V9
   \   0001E1   7405         MOV       A,#0x5
   \   0001E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   68           XRL       A,R0
   \   0001E8   7003         JNZ       ??compactPage_16
   \   0001EA   A3           INC       DPTR
   \   0001EB   E0           MOVX      A,@DPTR
   \   0001EC   69           XRL       A,R1
   \                     ??compactPage_16:
   \   0001ED   7032         JNZ       ??compactPage_9
    607                      {
    608                        rtrn = FALSE;
    609                        break;
    610                      }
    611                      else
    612                      {
    613                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001EF                ; Setup parameters for call to function hotItemUpdate
   \   0001EF   7401         MOV       A,#0x1
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   12....       LCALL     ?Subroutine12 & 0xFFFF
    614                      }
    615                    }
    616                    else
    617                    {
    618                      rtrn = FALSE;
    619                      break;
    620                    }
    621                  }
   \                     ??CrossCallReturnLabel_11:
   \   0001F7   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
    622                  else
    623                  {
    624                    rtrn = FALSE;
    625                    break;
    626                  }
    627                }
    628              }
    629          
    630              srcOff += sz;
   \                     ??compactPage_10:
   \   0001FA   EE           MOV       A,R6
   \   0001FB   25..         ADD       A,?V6
   \   0001FD   FE           MOV       R6,A
   \   0001FE   EF           MOV       A,R7
   \   0001FF   35..         ADDC      A,?V7
   \   000201   FF           MOV       R7,A
   \   000202   C3           CLR       C
   \   000203   EE           MOV       A,R6
   \   000204   94F8         SUBB      A,#-0x8
   \   000206   EF           MOV       A,R7
   \   000207   9407         SUBB      A,#0x7
   \   000209   5003         JNC       $+5
   \   00020B   02....       LJMP      ??compactPage_4 & 0xFFFF
    631            }
    632          
    633            if (rtrn == FALSE)
   \                     ??compactPage_6:
   \   00020E   85..82       MOV       DPL,?XSP + 0
   \   000211   85..83       MOV       DPH,?XSP + 1
   \   000214   E0           MOVX      A,@DPTR
   \   000215   7014         JNZ       ??compactPage_17
    634            {
    635              erasePage(pgRes);
   \                     ??compactPage_18:
   \   000217                ; Setup parameters for call to function erasePage
   \   000217   90....       MOV       DPTR,#pgRes
   \   00021A   E0           MOVX      A,@DPTR
   \   00021B   F9           MOV       R1,A
   \   00021C   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   00021F   8025         SJMP      ??compactPage_19
    636            }
   \                     ??compactPage_9:
   \   000221   85..82       MOV       DPL,?XSP + 0
   \   000224   85..83       MOV       DPH,?XSP + 1
   \   000227   E4           CLR       A
   \   000228   F0           MOVX      @DPTR,A
   \   000229   80EC         SJMP      ??compactPage_18
    637            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_17:
   \   00022B   E5..         MOV       A,?V2
   \   00022D   45..         ORL       A,?V3
   \   00022F   7015         JNZ       ??compactPage_19
    638            {
    639              COMPACT_PAGE_CLEANUP(srcPg);
   \   000231                ; Setup parameters for call to function setPageUse
   \   000231   7A01         MOV       R2,#0x1
   \   000233   90....       MOV       DPTR,#pgRes
   \   000236   E0           MOVX      A,@DPTR
   \   000237   F9           MOV       R1,A
   \   000238   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   00023B                ; Setup parameters for call to function erasePage
   \   00023B   A9..         MOV       R1,?V0
   \   00023D   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000240   E5..         MOV       A,?V0
   \   000242   90....       MOV       DPTR,#pgRes
   \   000245   F0           MOVX      @DPTR,A
    640            }
    641            // else invoking function must cleanup.
    642          
    643            return rtrn;
   \                     ??compactPage_19:
   \   000246   85..82       MOV       DPL,?XSP + 0
   \   000249   85..83       MOV       DPH,?XSP + 1
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   F9           MOV       R1,A
   \                     ??compactPage_2:
   \   00024E   7409         MOV       A,#0x9
   \   000250   02....       LJMP      ??Subroutine44_0 & 0xFFFF
    644          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   AA..         MOV       R2,?V4
   \   000005   AB..         MOV       R3,?V5
   \   000007   90....       MOV       DPTR,#pgRes
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET
    645          
    646          /*********************************************************************
    647           * @fn      findItem
    648           *
    649           * @brief   Find an item Id in NV and return the page and offset to its data.
    650           *
    651           * @param   id - Valid NV item Id.
    652           *
    653           * @return  Offset of data corresponding to item Id, if found;
    654           *          otherwise OSAL_NV_ITEM_NULL.
    655           *
    656           *          The page containing the item, if found;
    657           *          otherwise no valid assignment made - left equal to item Id.
    658           *
    659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          static uint16 findItem( uint16 id )
   \                     findItem:
    661          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   8003         SJMP      ??findItem_0
    662            uint16 off;
    663            uint8 pg;
    664          
    665            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    666            {
    667              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    668              {
    669                findPg = pg;
    670                return off;
    671              }
    672            }
    673          
    674            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    675            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    676            {
    677              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV       A,#-0x80
   \   00000C   4F           ORL       A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV       R7,A
    678            }
   \   00000E   75..79       MOV       ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV       R4,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6008         JZ        ??findItem_3
   \   000020   E5..         MOV       A,?V0
   \   000022   90....       MOV       DPTR,#findPg
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8015         SJMP      ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC       ?V0
   \   00002A   E5..         MOV       A,?V0
   \   00002C   C3           CLR       C
   \   00002D   947F         SUBB      A,#0x7f
   \   00002F   40E0         JC        ??findItem_2
   \   000031   EF           MOV       A,R7
   \   000032   5480         ANL       A,#0x80
   \   000034   60D4         JZ        ??findItem_1
    679            else
    680            {
    681              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV       DPTR,#findPg
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    682              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV       R2,A
   \   00003C   FB           MOV       R3,A
    683            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP      ??Subroutine41_0 & 0xFFFF
    684          }
    685          
    686          /*********************************************************************
    687           * @fn      initItem
    688           *
    689           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    690           *
    691           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    692           *                 (i.e. if invoked from osal_nv_item_init() ).
    693           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    694           *                 is ok to use as a return value of the page number to be cleaned with
    695           *                 COMPACT_PAGE_CLEANUP().
    696           *                 (i.e. if invoked from osal_nv_write() ).
    697           * @param   id  - Valid NV item Id.
    698           * @param   len - Item data length.
    699           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    700           *
    701           * @return  The OSAL Nv page number if item write and read back checksums ok;
    702           *          OSAL_NV_PAGE_NULL otherwise.
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    705          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    706            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR       C
   \   000015   EC           MOV       A,R4
   \   000016   94F4         SUBB      A,#-0xc
   \   000018   ED           MOV       A,R5
   \   000019   94FF         SUBB      A,#-0x1
   \   00001B   400E         JC        ??initItem_0
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   74FC         MOV       A,#-0x4
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   74FF         MOV       A,#-0x1
   \   000029   8019         SJMP      ??initItem_1
   \                     ??initItem_0:
   \   00002B   EC           MOV       A,R4
   \   00002C   2403         ADD       A,#0x3
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   54FC         ANL       A,#0xfc
   \   000036   2408         ADD       A,#0x8
   \   000038   5001         JNC       ??initItem_2
   \   00003A   09           INC       R1
   \                     ??initItem_2:
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \                     ??initItem_1:
   \   000044   F0           MOVX      @DPTR,A
    707            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000045   7F00         MOV       R7,#0x0
    708            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000047   7C06         MOV       R4,#0x6
    709            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000049   90....       MOV       DPTR,#pgRes
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   04           INC       A
   \   00004E   FE           MOV       R6,A
    710          
    711            do {
    712              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_3:
   \   00004F   EE           MOV       A,R6
   \   000050   C3           CLR       C
   \   000051   947F         SUBB      A,#0x7f
   \   000053   4002         JC        ??initItem_4
    713              {
    714                pg = OSAL_NV_PAGE_BEG;
   \   000055   7E79         MOV       R6,#0x79
    715              }
    716              if ( pg != pgRes )
   \                     ??initItem_4:
   \   000057   90....       MOV       DPTR,#pgRes
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   6E           XRL       A,R6
   \   00005C   6029         JZ        ??initItem_5
    717              {
    718                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   00005E   7487         MOV       A,#-0x79
   \   000060   2E           ADD       A,R6
    719                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000061   12....       LCALL     ?Subroutine37 & 0xFFFF
    720                {
    721                  break;
    722                }
    723              }
   \                     ??CrossCallReturnLabel_69:
   \   000064   74..         MOV       A,#pgOff & 0xff
   \   000066   28           ADD       A,R0
   \   000067   F582         MOV       DPL,A
   \   000069   74..         MOV       A,#(pgOff >> 8) & 0xff
   \   00006B   39           ADDC      A,R1
   \   00006C   F583         MOV       DPH,A
   \   00006E   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000071   E4           CLR       A
   \   000072   C3           CLR       C
   \   000073   9A           SUBB      A,R2
   \   000074   FA           MOV       R2,A
   \   000075   7408         MOV       A,#0x8
   \   000077   9B           SUBB      A,R3
   \   000078   FB           MOV       R3,A
   \   000079   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   2A           ADD       A,R2
   \   00007E   FA           MOV       R2,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   3B           ADDC      A,R3
   \   000082   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000085   5008         JNC       ??initItem_6
    724              pg++;
   \                     ??initItem_5:
   \   000087   0E           INC       R6
    725            } while (--cnt);
   \   000088   1C           DEC       R4
   \   000089   EC           MOV       A,R4
   \   00008A   70C3         JNZ       ??initItem_3
   \   00008C   02....       LJMP      ??initItem_7 & 0xFFFF
    726          
    727            if (cnt)
   \                     ??initItem_6:
   \   00008F   EC           MOV       A,R4
   \   000090   7003         JNZ       $+5
   \   000092   02....       LJMP      ??initItem_7 & 0xFFFF
   \   000095   741C         MOV       A,#0x1c
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   F5..         MOV       ?V6,A
   \   00009D   A3           INC       DPTR
   \   00009E   E0           MOVX      A,@DPTR
   \   00009F   F5..         MOV       ?V7,A
    728            {
    729              // Item fits if an old page is compacted.
    730              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   0000A1   EE           MOV       A,R6
   \   0000A2   25E0         ADD       A,0xE0 /* A   */
   \   0000A4   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000A7   FA           MOV       R2,A
   \   0000A8   7408         MOV       A,#0x8
   \   0000AA   99           SUBB      A,R1
   \   0000AB   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000AE   4003         JC        $+5
   \   0000B0   02....       LJMP      ??initItem_8 & 0xFFFF
    731              {
    732                osalNvPgHdr_t pgHdr;
    733          
    734                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    735                 * OSAL_Nv interruptions caused by resets.
    736                 */
    737                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000B3                ; Setup parameters for call to function HalFlashRead
   \   0000B3   75..08       MOV       ?V8,#0x8
   \   0000B6   8F..         MOV       ?V9,R7
   \   0000B8   78..         MOV       R0,#?V8
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   7404         MOV       A,#0x4
   \   0000BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C2   7A00         MOV       R2,#0x0
   \   0000C4   7B00         MOV       R3,#0x0
   \   0000C6   EE           MOV       A,R6
   \   0000C7   F9           MOV       R1,A
   \   0000C8   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000CB   7402         MOV       A,#0x2
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
    738                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000D0   7406         MOV       A,#0x6
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F4           CPL       A
   \   0000D7   7003         JNZ       ??initItem_9
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F4           CPL       A
   \                     ??initItem_9:
   \   0000DC   700B         JNZ       ??initItem_10
    739                {
    740                  // Mark the old page as being in process of compaction.
    741                  sz = OSAL_NV_ZEROED_ID;
   \   0000DE   12....       LCALL     ?Subroutine9 & 0xFFFF
    742                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    743                }
   \                     ??CrossCallReturnLabel_75:
   \   0000E1   7A04         MOV       R2,#0x4
   \   0000E3   FB           MOV       R3,A
   \   0000E4   EE           MOV       A,R6
   \   0000E5   F9           MOV       R1,A
   \   0000E6   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    744          
    745                /* First the old page is compacted, then the new item will be the last one written to what
    746                 * had been the reserved page.
    747                 */
    748                if (compactPage( pg, id ))
   \                     ??initItem_10:
   \   0000E9                ; Setup parameters for call to function compactPage
   \   0000E9   AA..         MOV       R2,?V4
   \   0000EB   AB..         MOV       R3,?V5
   \   0000ED   EE           MOV       A,R6
   \   0000EE   F9           MOV       R1,A
   \   0000EF   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0000F2   E9           MOV       A,R1
   \   0000F3   6071         JZ        ??initItem_7
    749                {
    750                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0000F5                ; Setup parameters for call to function writeItem
   \   0000F5   E5..         MOV       A,?V2
   \   0000F7   F5..         MOV       ?V3,A
   \   0000F9   78..         MOV       R0,#?V3
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FE   78..         MOV       R0,#?V6
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   AC..         MOV       R4,?V0
   \   000105   AD..         MOV       R5,?V1
   \   000107   AA..         MOV       R2,?V4
   \   000109   AB..         MOV       R3,?V5
   \   00010B   90....       MOV       DPTR,#pgRes
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   F9           MOV       R1,A
   \   000110   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000113   7403         MOV       A,#0x3
   \   000115   12....       LCALL     ?DEALLOC_XSTACK8
   \   000118   E9           MOV       A,R1
   \   000119   6005         JZ        ??initItem_11
    751                  {
    752                    rtrn = pgRes;
   \   00011B   90....       MOV       DPTR,#pgRes
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   FF           MOV       R7,A
    753                  }
    754          
    755                  if ( flag == FALSE )
   \                     ??initItem_11:
   \   000120   E5..         MOV       A,?V2
   \   000122   7009         JNZ       ??initItem_12
    756                  {
    757                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    758                     * the old page to be cleaned up.
    759                     */
    760                    *(uint8 *)buf = pg;
   \   000124   EE           MOV       A,R6
   \   000125   85..82       MOV       DPL,?V6
   \   000128   85..83       MOV       DPH,?V7
   \   00012B   8013         SJMP      ??initItem_13
    761                  }
    762                  else
    763                  {
    764                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    765                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    766                     */
    767                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_12:
   \   00012D                ; Setup parameters for call to function setPageUse
   \   00012D   7A01         MOV       R2,#0x1
   \   00012F   90....       MOV       DPTR,#pgRes
   \   000132   E0           MOVX      A,@DPTR
   \   000133   F9           MOV       R1,A
   \   000134   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000137                ; Setup parameters for call to function erasePage
   \   000137   EE           MOV       A,R6
   \   000138   F9           MOV       R1,A
   \   000139   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   00013C   EE           MOV       A,R6
   \   00013D   90....       MOV       DPTR,#pgRes
   \                     ??initItem_13:
   \   000140   F0           MOVX      @DPTR,A
   \   000141   8023         SJMP      ??initItem_7
    768                  }
    769                }
    770              }
    771              else
    772              {
    773                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_8:
   \   000143                ; Setup parameters for call to function writeItem
   \   000143   E5..         MOV       A,?V2
   \   000145   F5..         MOV       ?V3,A
   \   000147   78..         MOV       R0,#?V3
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014C   78..         MOV       R0,#?V6
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000151   AC..         MOV       R4,?V0
   \   000153   AA..         MOV       R2,?V4
   \   000155   AB..         MOV       R3,?V5
   \   000157   EE           MOV       A,R6
   \   000158   F9           MOV       R1,A
   \   000159   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00015C   7403         MOV       A,#0x3
   \   00015E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000161   E9           MOV       A,R1
   \   000162   6002         JZ        ??initItem_7
    774                {
    775                  rtrn = pg;
   \   000164   EE           MOV       A,R6
   \   000165   FF           MOV       R7,A
    776                }
    777              }
    778            }
    779          
    780            return rtrn;
   \                     ??initItem_7:
   \   000166   EF           MOV       A,R7
   \   000167   F9           MOV       R1,A
   \   000168   740A         MOV       A,#0xa
   \   00016A   02....       LJMP      ??Subroutine44_0 & 0xFFFF
    781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000004   C3           CLR       C
   \   000005   EA           MOV       A,R2
   \   000006   98           SUBB      A,R0
   \   000007   EB           MOV       A,R3
   \   000008   99           SUBB      A,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine45_0
   \   000007                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000006   E4           CLR       A
   \   000007   C3           CLR       C
   \   000008   98           SUBB      A,R0
   \   000009   22           RET
    782          
    783          /*********************************************************************
    784           * @fn      setItem
    785           *
    786           * @brief   Set an item Id or status to mark its state.
    787           *
    788           * @param   pg - Valid NV page.
    789           * @param   offset - Valid offset into the page of the item data - the header
    790           *                   offset is calculated from this.
    791           * @param   stat - Valid enum value for the item status.
    792           *
    793           * @return  none
    794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    795          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    796          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8C..         MOV       ?V0,R4
    797            osalNvHdr_t hdr;
    798          
    799            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV       A,R2
   \   00000F   24F8         ADD       A,#-0x8
   \   000011   F5..         MOV       ?V2,A
   \   000013   EB           MOV       A,R3
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F5..         MOV       ?V3,A
    800            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV       ?V4,#0x8
   \   00001B   75..00       MOV       ?V5,#0x0
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP102_8
   \   000028   AA..         MOV       R2,?V2
   \   00002A   AB..         MOV       R3,?V3
   \   00002C   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
    801          
    802            if ( stat == eNvXfer )
   \   000034   E5..         MOV       A,?V0
   \   000036   7022         JNZ       ??setItem_0
    803            {
    804              hdr.stat = OSAL_NV_ACTIVE;
   \   000038   7406         MOV       A,#0x6
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   E4           CLR       A
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   F0           MOVX      @DPTR,A
    805              /* Write status to flash. Total of 4 bytes written to Flash 
    806               * ( 2 bytes of checksum and 2 bytes of status) 
    807               */
    808              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000041                ; Setup parameters for call to function writeWord
   \   000041   7404         MOV       A,#0x4
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   AC82         MOV       R4,DPL
   \   000048   AD83         MOV       R5,DPH
   \   00004A   E5..         MOV       A,?V2
   \   00004C   2404         ADD       A,#0x4
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   35..         ADDC      A,?V3
   \   000052   FB           MOV       R3,A
   \   000053   A9..         MOV       R1,?V1
   \   000055   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000058   8019         SJMP      ??CrossCallReturnLabel_79
    809            }
    810            else // if ( stat == eNvZero )
    811            {
    812              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    813                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005A   7402         MOV       A,#0x2
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine11 & 0xFFFF
    814              hdr.id = 0;
   \                     ??CrossCallReturnLabel_6:
   \   000062   12....       LCALL     ?Subroutine9 & 0xFFFF
    815              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_76:
   \   000065   AA..         MOV       R2,?V2
   \   000067   AB..         MOV       R3,?V3
   \   000069   A9..         MOV       R1,?V1
   \   00006B   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    816              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   00006E   A8..         MOV       R0,?V1
   \   000070   12....       LCALL     ?Subroutine20 & 0xFFFF
    817            }
    818          }
   \                     ??CrossCallReturnLabel_79:
   \   000073   7408         MOV       A,#0x8
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   \   000078                REQUIRE ?Subroutine3
   \   000078                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   00000D                REQUIRE ??Subroutine46_0
   \   00000D                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   2408         ADD       A,#0x8
   \   000005   FE           MOV       R6,A
   \   000006   E4           CLR       A
   \   000007   39           ADDC      A,R1
   \   000008   FF           MOV       R7,A
   \   000009   22           RET
    819          
    820          /*********************************************************************
    821           * @fn      setChk
    822           *
    823           * @brief   Set the item header checksum given the data buffer offset.
    824           *
    825           * @param   pg - Valid NV page.
    826           * @param   offset - Valid offset into the page of the item data - the header
    827           *                   offset is calculated from this.
    828           * @param   chk - The checksum to set.
    829           *
    830           * @return  The checksum read back.
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V0,R1
   \   000017   EA           MOV       A,R2
   \   000018   FE           MOV       R6,A
   \   000019   EB           MOV       A,R3
   \   00001A   FF           MOV       R7,A
    834            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV       A,R6
   \   00001C   24FC         ADD       A,#-0x4
   \   00001E   FE           MOV       R6,A
   \   00001F   EF           MOV       A,R7
   \   000020   34FF         ADDC      A,#-0x1
   \   000022   FF           MOV       R7,A
    835            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   AC..         MOV       R4,?XSP + 0
   \   000025   AD..         MOV       R5,?XSP + 1
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    836            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   75..02       MOV       ?V2,#0x2
   \   000031   75..00       MOV       ?V3,#0x0
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?XSTACK_DISP102_8
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   FB           MOV       R3,A
   \   000042   A9..         MOV       R1,?V0
   \   000044   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
    837          
    838            return chk;
   \   00004C   85..82       MOV       DPL,?XSP + 0
   \   00004F   85..83       MOV       DPH,?XSP + 1
   \   000052   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000055   02....       LJMP      ?Subroutine0 & 0xFFFF
    839          }
    840          
    841          /*********************************************************************
    842           * @fn      calcChkB
    843           *
    844           * @brief   Calculates the data checksum over the 'buf' parameter.
    845           *
    846           * @param   len - Byte count of the data to be checksummed.
    847           * @param   buf - Data buffer to be checksummed.
    848           *
    849           * @return  Calculated checksum of the data bytes.
    850           */
    851          static uint16 calcChkB( uint16 len, uint8 *buf )
    852          {
    853            uint8 fill = len % OSAL_NV_WORD_SIZE;
    854            uint16 chk;
    855          
    856            if ( !buf )
    857            {
    858              chk = len * OSAL_NV_ERASED;
    859            }
    860            else
    861            {
    862              chk = 0;
    863              while ( len-- )
    864              {
    865                chk += *buf++;
    866              }
    867            }
    868          
    869            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    870            if ( fill )
    871            {
    872              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    873            }
    874          
    875            return chk;
    876          }
    877          
    878          /*********************************************************************
    879           * @fn      calcChkF
    880           *
    881           * @brief   Calculates the data checksum by reading the data bytes from NV.
    882           *
    883           * @param   pg - A valid NV Flash page.
    884           * @param   offset - A valid offset into the page.
    885           * @param   len - Byte count of the data to be checksummed.
    886           *
    887           * @return  Calculated checksum of the data bytes.
    888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    889          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    890          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
    891            uint16 chk = 0;
   \   000014   75..00       MOV       ?V0,#0x0
   \   000017   75..00       MOV       ?V1,#0x0
    892          
    893            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV       A,R6
   \   00001B   2403         ADD       A,#0x3
   \   00001D   F5..         MOV       ?V6,A
   \   00001F   E4           CLR       A
   \   000020   3F           ADDC      A,R7
   \   000021   F5..         MOV       ?V7,A
   \   000023   7402         MOV       A,#0x2
   \   000025   78..         MOV       R0,#?V6
   \   000027   12....       LCALL     ?US_SHR
   \   00002A   AE..         MOV       R6,?V6
   \   00002C   AF..         MOV       R7,?V7
    894          
    895            while ( len-- )
   \                     ??calcChkF_0:
   \   00002E   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000031   6052         JZ        ??calcChkF_1
    896            {
    897              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    898          
    899              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000033                ; Setup parameters for call to function HalFlashRead
   \   000033   75..04       MOV       ?V6,#0x4
   \   000036   75..00       MOV       ?V7,#0x0
   \   000039   78..         MOV       R0,#?V6
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003E   7402         MOV       A,#0x2
   \   000040   12....       LCALL     ?XSTACK_DISP102_8
   \   000043   AA..         MOV       R2,?V2
   \   000045   AB..         MOV       R3,?V3
   \   000047   A9..         MOV       R1,?V4
   \   000049   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
    900              offset += OSAL_NV_WORD_SIZE;
   \   000051   E5..         MOV       A,?V2
   \   000053   2404         ADD       A,#0x4
   \   000055   F5..         MOV       ?V2,A
   \   000057   E4           CLR       A
   \   000058   35..         ADDC      A,?V3
   \   00005A   F5..         MOV       ?V3,A
    901          
    902              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   00005C   7800         MOV       R0,#0x0
    903              {
    904                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   00005E   E8           MOV       A,R0
   \   00005F   FA           MOV       R2,A
   \   000060   85..82       MOV       DPL,?XSP + 0
   \   000063   85..83       MOV       DPH,?XSP + 1
   \   000066   E582         MOV       A,DPL
   \   000068   2A           ADD       A,R2
   \   000069   F582         MOV       DPL,A
   \   00006B   E4           CLR       A
   \   00006C   3583         ADDC      A,DPH
   \   00006E   F583         MOV       DPH,A
   \   000070   E0           MOVX      A,@DPTR
   \   000071   FA           MOV       R2,A
   \   000072   E5..         MOV       A,?V0
   \   000074   2A           ADD       A,R2
   \   000075   F5..         MOV       ?V0,A
   \   000077   E4           CLR       A
   \   000078   35..         ADDC      A,?V1
   \   00007A   F5..         MOV       ?V1,A
    905              }
   \   00007C   08           INC       R0
   \   00007D   E8           MOV       A,R0
   \   00007E   C3           CLR       C
   \   00007F   9404         SUBB      A,#0x4
   \   000081   50AB         JNC       ??calcChkF_0
   \   000083   80D9         SJMP      ??calcChkF_2
    906            }
    907          
    908            return chk;
   \                     ??calcChkF_1:
   \   000085   AA..         MOV       R2,?V0
   \   000087   AB..         MOV       R3,?V1
   \   000089   7404         MOV       A,#0x4
   \   00008B                REQUIRE ?Subroutine4
   \   00008B                ; // Fall through to label ?Subroutine4
    909          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine47_0
   \   000003                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1E           DEC       R6
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FF           MOV       R7,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   22           RET
    910          
    911          /*********************************************************************
    912           * @fn      writeWord
    913           *
    914           * @brief   Writes a Flash-WORD to NV.
    915           *
    916           * @param   pg - A valid NV Flash page.
    917           * @param   offset - A valid offset into the page.
    918           * @param   buf - Pointer to source buffer.
    919           *
    920           * @return  none
    921           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    922          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    923          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    924            offset = (offset / HAL_FLASH_WORD_SIZE) +
    925                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    926          
    927            HalFlashWrite(offset, buf, 1);
   \   000007                ; Setup parameters for call to function HalFlashWrite
   \   000007   75..01       MOV       ?V0,#0x1
   \   00000A   75..00       MOV       ?V1,#0x0
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   7402         MOV       A,#0x2
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SHR
   \   00001D   EE           MOV       A,R6
   \   00001E   F5..         MOV       ?V2,A
   \   000020   75..00       MOV       ?V3,#0x0
   \   000023   7409         MOV       A,#0x9
   \   000025   78..         MOV       R0,#?V2
   \   000027   12....       LCALL     ?S_SHL
   \   00002A   E5..         MOV       A,?V0
   \   00002C   2400         ADD       A,#0x0
   \   00002E   FA           MOV       R2,A
   \   00002F   E5..         MOV       A,?V1
   \   000031   35..         ADDC      A,?V3
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000037   02....       LJMP      ?Subroutine0 & 0xFFFF
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      writeWordM
    932           *
    933           * @brief   Writes multiple Flash-WORDs to NV.
    934           *
    935           * @param   pg - A valid NV Flash page.
    936           * @param   offset - A valid offset into the page.
    937           * @param   buf - Pointer to source buffer.
    938           * @param   cnt - Number of 4-byte blocks to write.
    939           *
    940           * @return  none
    941           */
    942          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    943          {
    944            offset = (offset / HAL_FLASH_WORD_SIZE) +
    945                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    946            HalFlashWrite(offset, buf, cnt);
    947          }
    948          
    949          /*********************************************************************
    950           * @fn      writeWordH
    951           *
    952           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    953           *
    954           * @param   pg - A valid NV Flash page.
    955           * @param   offset - A valid offset into the page.
    956           * @param   buf - Pointer to source buffer.
    957           *
    958           * @return  none
    959           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    960          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    961          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    962            uint8 tmp[4];
    963          
    964            tmp[0] = buf[0];
   \   00000A   8C82         MOV       DPL,R4
   \   00000C   8D83         MOV       DPH,R5
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    965            tmp[1] = buf[1];
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    966            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    967            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
    968          
    969            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV       R4,?XSP + 0
   \   000038   AD..         MOV       R5,?XSP + 1
   \   00003A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    970          }
   \   00003D   7404         MOV       A,#0x4
   \   00003F   02....       LJMP      ?Subroutine1 & 0xFFFF
    971          
    972          /*********************************************************************
    973           * @fn      writeBuf
    974           *
    975           * @brief   Writes a data buffer to NV.
    976           *
    977           * @param   dstPg - A valid NV Flash page.
    978           * @param   offset - A valid offset into the page.
    979           * @param   len  - Byte count of the data to write.
    980           * @param   buf  - The data to write.
    981           *
    982           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
    986            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EE           MOV       A,R6
   \   000015   5403         ANL       A,#0x3
   \   000017   F5..         MOV       ?V0,A
   \   000019   7416         MOV       A,#0x16
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V3,A
    987            uint8 tmp[OSAL_NV_WORD_SIZE];
    988          
    989            if ( rem )
   \   000025   E5..         MOV       A,?V0
   \   000027   6060         JZ        ??writeBuf_0
    990            {
    991              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000029   74FC         MOV       A,#-0x4
   \   00002B   5E           ANL       A,R6
   \   00002C   FE           MOV       R6,A
    992              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00002D                ; Setup parameters for call to function HalFlashRead
   \   00002D   75..04       MOV       ?V6,#0x4
   \   000030   75..00       MOV       ?V7,#0x0
   \   000033   78..         MOV       R0,#?V6
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP102_8
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeBuf_1:
   \   000047   E5..         MOV       A,?V4
   \   000049   45..         ORL       A,?V5
   \   00004B   6028         JZ        ??writeBuf_2
    993          
    994              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    995              {
    996                tmp[rem++] = *buf++;
   \   00004D   85..82       MOV       DPL,?V2
   \   000050   85..83       MOV       DPH,?V3
   \   000053   E0           MOVX      A,@DPTR
   \   000054   C0E0         PUSH      A
   \   000056   A8..         MOV       R0,?V0
   \   000058   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00005B   D0E0         POP       A
   \   00005D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000060   05..         INC       ?V0
    997                len--;
   \   000062   E5..         MOV       A,?V4
   \   000064   24FF         ADD       A,#-0x1
   \   000066   F5..         MOV       ?V4,A
   \   000068   E5..         MOV       A,?V5
   \   00006A   34FF         ADDC      A,#-0x1
   \   00006C   F5..         MOV       ?V5,A
    998              }
   \   00006E   E5..         MOV       A,?V0
   \   000070   C3           CLR       C
   \   000071   9404         SUBB      A,#0x4
   \   000073   40D2         JC        ??writeBuf_1
    999          
   1000              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   000075                ; Setup parameters for call to function writeWord
   \   000075   AC..         MOV       R4,?XSP + 0
   \   000077   AD..         MOV       R5,?XSP + 1
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   A9..         MOV       R1,?V1
   \   00007F   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1001              dstOff += OSAL_NV_WORD_SIZE;
   \   000082   EE           MOV       A,R6
   \   000083   2404         ADD       A,#0x4
   \   000085   FE           MOV       R6,A
   \   000086   E4           CLR       A
   \   000087   3F           ADDC      A,R7
   \   000088   FF           MOV       R7,A
   1002            }
   1003          
   1004            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   000089   E5..         MOV       A,?V4
   \   00008B   5403         ANL       A,#0x3
   \   00008D   F5..         MOV       ?V0,A
   1005            len /= OSAL_NV_WORD_SIZE;
   \   00008F   85....       MOV       ?V6,?V4
   \   000092   85....       MOV       ?V7,?V5
   \   000095   7402         MOV       A,#0x2
   \   000097   78..         MOV       R0,#?V6
   \   000099   12....       LCALL     ?US_SHR
   \   00009C   85....       MOV       ?V4,?V6
   \   00009F   85....       MOV       ?V5,?V7
   1006          
   1007            if ( len )
   \   0000A2   E5..         MOV       A,?V4
   \   0000A4   45..         ORL       A,?V5
   \   0000A6   6048         JZ        ??CrossCallReturnLabel_52
   1008            {
   1009              writeWordM( dstPg, dstOff, buf, len );
   \   0000A8                ; Setup parameters for call to function HalFlashWrite
   \   0000A8   78..         MOV       R0,#?V4
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   AC..         MOV       R4,?V2
   \   0000AF   AD..         MOV       R5,?V3
   \   0000B1   8E..         MOV       ?V6,R6
   \   0000B3   8F..         MOV       ?V7,R7
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   78..         MOV       R0,#?V6
   \   0000B9   12....       LCALL     ?US_SHR
   \   0000BC   E5..         MOV       A,?V1
   \   0000BE   F5..         MOV       ?V8,A
   \   0000C0   75..00       MOV       ?V9,#0x0
   \   0000C3   7409         MOV       A,#0x9
   \   0000C5   78..         MOV       R0,#?V8
   \   0000C7   12....       LCALL     ?S_SHL
   \   0000CA   E5..         MOV       A,?V6
   \   0000CC   2400         ADD       A,#0x0
   \   0000CE   FA           MOV       R2,A
   \   0000CF   E5..         MOV       A,?V7
   \   0000D1   35..         ADDC      A,?V9
   \   0000D3   FB           MOV       R3,A
   \   0000D4   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000D7   7402         MOV       A,#0x2
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   1010              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   78..         MOV       R0,#?V4
   \   0000E0   12....       LCALL     ?S_SHL
   \   0000E3   A8..         MOV       R0,?V4
   \   0000E5   A9..         MOV       R1,?V5
   \   0000E7   EE           MOV       A,R6
   \   0000E8   28           ADD       A,R0
   \   0000E9   FE           MOV       R6,A
   \   0000EA   EF           MOV       A,R7
   \   0000EB   39           ADDC      A,R1
   \   0000EC   FF           MOV       R7,A
   1011              buf += OSAL_NV_WORD_SIZE * len;
   \   0000ED   12....       LCALL     ?Subroutine28 & 0xFFFF
   1012            }
   1013          
   1014            if ( rem )
   \                     ??CrossCallReturnLabel_52:
   \   0000F0   E5..         MOV       A,?V0
   \   0000F2   6051         JZ        ??writeBuf_3
   1015            {
   1016              uint8 idx = 0;
   \   0000F4   75..00       MOV       ?V4,#0x0
   1017              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000F7                ; Setup parameters for call to function HalFlashRead
   \   0000F7   75..04       MOV       ?V6,#0x4
   \   0000FA   75..00       MOV       ?V7,#0x0
   \   0000FD   78..         MOV       R0,#?V6
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000102   7402         MOV       A,#0x2
   \   000104   12....       LCALL     ?XSTACK_DISP102_8
   \   000107   EE           MOV       A,R6
   \   000108   FA           MOV       R2,A
   \   000109   EF           MOV       A,R7
   \   00010A   FB           MOV       R3,A
   \   00010B   A9..         MOV       R1,?V1
   \   00010D   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000110   7402         MOV       A,#0x2
   \   000112   12....       LCALL     ?DEALLOC_XSTACK8
   \   000115   8015         SJMP      ??writeBuf_4
   1018              while ( rem-- )
   1019              {
   1020                tmp[idx++] = *buf++;
   \                     ??writeBuf_5:
   \   000117   85..82       MOV       DPL,?V2
   \   00011A   85..83       MOV       DPH,?V3
   \   00011D   E0           MOVX      A,@DPTR
   \   00011E   C0E0         PUSH      A
   \   000120   A8..         MOV       R0,?V4
   \   000122   12....       LCALL     ?Subroutine29 & 0xFFFF
   1021              }
   \                     ??CrossCallReturnLabel_54:
   \   000125   D0E0         POP       A
   \   000127   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00012A   05..         INC       ?V4
   \                     ??writeBuf_4:
   \   00012C   85....       MOV       ?V5,?V0
   \   00012F   74FF         MOV       A,#-0x1
   \   000131   25..         ADD       A,?V5
   \   000133   F5..         MOV       ?V0,A
   \   000135   04           INC       A
   \   000136   70DF         JNZ       ??writeBuf_5
   1022              writeWord( dstPg, dstOff, tmp );
   \   000138                ; Setup parameters for call to function writeWord
   \   000138   AC..         MOV       R4,?XSP + 0
   \   00013A   AD..         MOV       R5,?XSP + 1
   \   00013C   EE           MOV       A,R6
   \   00013D   FA           MOV       R2,A
   \   00013E   EF           MOV       A,R7
   \   00013F   FB           MOV       R3,A
   \   000140   A9..         MOV       R1,?V1
   \   000142   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1023            }
   1024          }
   \                     ??writeBuf_3:
   \   000145   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   8582..       MOV       ?V2,DPL
   \   00000B   8583..       MOV       ?V3,DPH
   \   00000E   22           RET
   1025          
   1026          /*********************************************************************
   1027           * @fn      xferBuf
   1028           *
   1029           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V6,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V3,R4
   \   000012   7416         MOV       A,#0x16
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V1,A
   1035            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   00001E   E5..         MOV       A,?V0
   \   000020   5403         ANL       A,#0x3
   \   000022   F5..         MOV       ?V2,A
   \   000024   7418         MOV       A,#0x18
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   FE           MOV       R6,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FF           MOV       R7,A
   1036            uint8 tmp[OSAL_NV_WORD_SIZE];
   1037          
   1038            if ( rem )
   \   00002E   E5..         MOV       A,?V2
   \   000030   6072         JZ        ??CrossCallReturnLabel_58
   1039            {
   1040              dstOff -= rem;
   \   000032   F8           MOV       R0,A
   \   000033   C3           CLR       C
   \   000034   E5..         MOV       A,?V0
   \   000036   98           SUBB      A,R0
   \   000037   F5..         MOV       ?V0,A
   \   000039   E5..         MOV       A,?V1
   \   00003B   9400         SUBB      A,#0x0
   \   00003D   F5..         MOV       ?V1,A
   1041              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00003F                ; Setup parameters for call to function HalFlashRead
   \   00003F   75..04       MOV       ?V8,#0x4
   \   000042   75..00       MOV       ?V9,#0x0
   \   000045   78..         MOV       R0,#?V8
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP102_8
   \   00004F   AA..         MOV       R2,?V0
   \   000051   AB..         MOV       R3,?V1
   \   000053   A9..         MOV       R1,?V3
   \   000055   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   00005D   EE           MOV       A,R6
   \   00005E   4F           ORL       A,R7
   \   00005F   6033         JZ        ??xferBuf_1
   1042          
   1043              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1044              {
   1045                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   000061                ; Setup parameters for call to function HalFlashRead
   \   000061   75..01       MOV       ?V8,#0x1
   \   000064   78..         MOV       R0,#?V8
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   A8..         MOV       R0,?V2
   \   00006B   7402         MOV       A,#0x2
   \   00006D   12....       LCALL     ?XSTACK_DISP0_8
   \   000070   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000073   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000076   7402         MOV       A,#0x2
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   1046                srcOff++;
   \   00007B   05..         INC       ?V4
   \   00007D   E5..         MOV       A,?V4
   \   00007F   7002         JNZ       ??xferBuf_2
   \   000081   05..         INC       ?V5
   1047                rem++;
   \                     ??xferBuf_2:
   \   000083   05..         INC       ?V2
   1048                len--;
   \   000085   EE           MOV       A,R6
   \   000086   24FF         ADD       A,#-0x1
   \   000088   1E           DEC       R6
   \   000089   EF           MOV       A,R7
   \   00008A   34FF         ADDC      A,#-0x1
   \   00008C   FF           MOV       R7,A
   1049              }
   \   00008D   E5..         MOV       A,?V2
   \   00008F   C3           CLR       C
   \   000090   9404         SUBB      A,#0x4
   \   000092   40C9         JC        ??xferBuf_0
   1050          
   1051              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   000094                ; Setup parameters for call to function writeWord
   \   000094   AC..         MOV       R4,?XSP + 0
   \   000096   AD..         MOV       R5,?XSP + 1
   \   000098   AA..         MOV       R2,?V0
   \   00009A   AB..         MOV       R3,?V1
   \   00009C   A9..         MOV       R1,?V3
   \   00009E   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1052              dstOff += OSAL_NV_WORD_SIZE;
   \   0000A1   12....       LCALL     ?Subroutine31 & 0xFFFF
   1053            }
   1054          
   1055            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_58:
   \   0000A4   EE           MOV       A,R6
   \   0000A5   5403         ANL       A,#0x3
   \   0000A7   F5..         MOV       ?V2,A
   1056            len /= OSAL_NV_WORD_SIZE;
   \   0000A9   8E..         MOV       ?V8,R6
   \   0000AB   8F..         MOV       ?V9,R7
   \   0000AD   7402         MOV       A,#0x2
   \   0000AF   78..         MOV       R0,#?V8
   \   0000B1   12....       LCALL     ?US_SHR
   \   0000B4   AE..         MOV       R6,?V8
   \   0000B6   AF..         MOV       R7,?V9
   \   0000B8   8039         SJMP      ??CrossCallReturnLabel_59
   1057          
   1058            while ( len-- )
   1059            {
   1060              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000BA                ; Setup parameters for call to function HalFlashRead
   \   0000BA   75..04       MOV       ?V8,#0x4
   \   0000BD   75..00       MOV       ?V9,#0x0
   \   0000C0   78..         MOV       R0,#?V8
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   7402         MOV       A,#0x2
   \   0000C7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CA   AA..         MOV       R2,?V4
   \   0000CC   AB..         MOV       R3,?V5
   \   0000CE   A9..         MOV       R1,?V6
   \   0000D0   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   1061              srcOff += OSAL_NV_WORD_SIZE;
   \   0000D8   E5..         MOV       A,?V4
   \   0000DA   2404         ADD       A,#0x4
   \   0000DC   F5..         MOV       ?V4,A
   \   0000DE   E4           CLR       A
   \   0000DF   35..         ADDC      A,?V5
   \   0000E1   F5..         MOV       ?V5,A
   1062              writeWord( dstPg, dstOff, tmp );
   \   0000E3                ; Setup parameters for call to function writeWord
   \   0000E3   AC..         MOV       R4,?XSP + 0
   \   0000E5   AD..         MOV       R5,?XSP + 1
   \   0000E7   AA..         MOV       R2,?V0
   \   0000E9   AB..         MOV       R3,?V1
   \   0000EB   A9..         MOV       R1,?V3
   \   0000ED   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1063              dstOff += OSAL_NV_WORD_SIZE;
   \   0000F0   12....       LCALL     ?Subroutine31 & 0xFFFF
   1064            }
   \                     ??CrossCallReturnLabel_59:
   \   0000F3   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000F6   70C2         JNZ       ??xferBuf_3
   1065          
   1066            if ( rem )
   \   0000F8   E5..         MOV       A,?V2
   \   0000FA   605B         JZ        ??xferBuf_4
   1067            {
   1068              uint8 idx = 0;
   \   0000FC   7E00         MOV       R6,#0x0
   1069              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000FE                ; Setup parameters for call to function HalFlashRead
   \   0000FE   75..04       MOV       ?V8,#0x4
   \   000101   8E..         MOV       ?V9,R6
   \   000103   78..         MOV       R0,#?V8
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   7402         MOV       A,#0x2
   \   00010A   12....       LCALL     ?XSTACK_DISP102_8
   \   00010D   AA..         MOV       R2,?V0
   \   00010F   AB..         MOV       R3,?V1
   \   000111   A9..         MOV       R1,?V3
   \   000113   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000116   7402         MOV       A,#0x2
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011B   8023         SJMP      ??xferBuf_5
   1070              while ( rem-- )
   1071              {
   1072                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   00011D                ; Setup parameters for call to function HalFlashRead
   \   00011D   75..01       MOV       ?V8,#0x1
   \   000120   78..         MOV       R0,#?V8
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000125   EE           MOV       A,R6
   \   000126   F8           MOV       R0,A
   \   000127   7402         MOV       A,#0x2
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00012F   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000132   7402         MOV       A,#0x2
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
   1073                srcOff++;
   \   000137   05..         INC       ?V4
   \   000139   E5..         MOV       A,?V4
   \   00013B   7002         JNZ       ??xferBuf_7
   \   00013D   05..         INC       ?V5
   1074                idx++;
   \                     ??xferBuf_7:
   \   00013F   0E           INC       R6
   1075              }
   \                     ??xferBuf_5:
   \   000140   AF..         MOV       R7,?V2
   \   000142   74FF         MOV       A,#-0x1
   \   000144   2F           ADD       A,R7
   \   000145   F5..         MOV       ?V2,A
   \   000147   04           INC       A
   \   000148   70D3         JNZ       ??xferBuf_6
   1076              writeWord( dstPg, dstOff, tmp );
   \   00014A                ; Setup parameters for call to function writeWord
   \   00014A   AC..         MOV       R4,?XSP + 0
   \   00014C   AD..         MOV       R5,?XSP + 1
   \   00014E   AA..         MOV       R2,?V0
   \   000150   AB..         MOV       R3,?V1
   \   000152   A9..         MOV       R1,?V3
   \   000154   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1077            }
   1078          }
   \                     ??xferBuf_4:
   \   000157   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E5..         MOV       A,?V0
   \   000002   2404         ADD       A,#0x4
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F5..         MOV       ?V1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FD           MOV       R5,A
   \   000008   AA..         MOV       R2,?V4
   \   00000A   AB..         MOV       R3,?V5
   \   00000C   A9..         MOV       R1,?V6
   \   00000E   22           RET
   1079          
   1080          /*********************************************************************
   1081           * @fn      writeItem
   1082           *
   1083           * @brief   Writes an item header/data combo to the specified NV page.
   1084           *
   1085           * @param   pg - Valid NV Flash page.
   1086           * @param   id - Valid NV item Id.
   1087           * @param   len  - Byte count of the data to write.
   1088           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1089           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1090           *
   1091           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   1095            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000014   E9           MOV       A,R1
   \   000015   29           ADD       A,R1
   \   000016   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V2,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V3,A
   1096            uint8 rtrn = FALSE;
   \   000020   75..00       MOV       ?V1,#0x0
   1097            osalNvHdr_t hdr;
   1098          
   1099            hdr.id = id;
   \   000023   85..82       MOV       DPL,?XSP + 0
   \   000026   85..83       MOV       DPH,?XSP + 1
   \   000029   EA           MOV       A,R2
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EB           MOV       A,R3
   \   00002D   F0           MOVX      @DPTR,A
   1100            hdr.len = len;
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   EE           MOV       A,R6
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EF           MOV       A,R7
   \   000037   F0           MOVX      @DPTR,A
   1101          
   1102            writeWord( pg, offset, (uint8 *)&hdr );
   \   000038                ; Setup parameters for call to function writeWord
   \   000038   AC..         MOV       R4,?XSP + 0
   \   00003A   AD..         MOV       R5,?XSP + 1
   \   00003C   AA..         MOV       R2,?V2
   \   00003E   AB..         MOV       R3,?V3
   \   000040   A9..         MOV       R1,?V0
   \   000042   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1103            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000045                ; Setup parameters for call to function HalFlashRead
   \   000045   75..08       MOV       ?V6,#0x8
   \   000048   75..00       MOV       ?V7,#0x0
   \   00004B   78..         MOV       R0,#?V6
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?XSTACK_DISP102_8
   \   000055   AA..         MOV       R2,?V2
   \   000057   AB..         MOV       R3,?V3
   \   000059   A9..         MOV       R1,?V0
   \   00005B   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00005E   7402         MOV       A,#0x2
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   1104          
   1105            if ( (hdr.id == id) && (hdr.len == len) )
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   65..         XRL       A,?V4
   \   00006C   7004         JNZ       ??writeItem_0
   \   00006E   A3           INC       DPTR
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   65..         XRL       A,?V5
   \                     ??writeItem_0:
   \   000072   6003         JZ        $+5
   \   000074   02....       LJMP      ??writeItem_1 & 0xFFFF
   \   000077   7402         MOV       A,#0x2
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   6E           XRL       A,R6
   \   00007E   7003         JNZ       ??writeItem_2
   \   000080   A3           INC       DPTR
   \   000081   E0           MOVX      A,@DPTR
   \   000082   6F           XRL       A,R7
   \                     ??writeItem_2:
   \   000083   6003         JZ        $+5
   \   000085   02....       LJMP      ??writeItem_1 & 0xFFFF
   1106            {
   1107              if ( flag )
   \   000088   741A         MOV       A,#0x1a
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   7003         JNZ       $+5
   \   000090   02....       LJMP      ??writeItem_3 & 0xFFFF
   \   000093   7418         MOV       A,#0x18
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine19 & 0xFFFF
   1108              {
   1109                hdr.chk = calcChkB( len, buf );
   \                     ??CrossCallReturnLabel_31:
   \   00009B   85..82       MOV       DPL,?V4
   \   00009E   F583         MOV       DPH,A
   \   0000A0   EE           MOV       A,R6
   \   0000A1   F8           MOV       R0,A
   \   0000A2   EF           MOV       A,R7
   \   0000A3   F9           MOV       R1,A
   \   0000A4   E8           MOV       A,R0
   \   0000A5   5403         ANL       A,#0x3
   \   0000A7   F5..         MOV       ?V6,A
   \   0000A9   E582         MOV       A,DPL
   \   0000AB   4583         ORL       A,DPH
   \   0000AD   7015         JNZ       ??writeItem_4
   \   0000AF   E8           MOV       A,R0
   \   0000B0   75F0FF       MOV       B,#-0x1
   \   0000B3   A4           MUL       AB
   \   0000B4   F8           MOV       R0,A
   \   0000B5   AAF0         MOV       R2,B
   \   0000B7   75F0FF       MOV       B,#-0x1
   \   0000BA   E9           MOV       A,R1
   \   0000BB   A4           MUL       AB
   \   0000BC   2A           ADD       A,R2
   \   0000BD   F9           MOV       R1,A
   \   0000BE   E8           MOV       A,R0
   \   0000BF   FA           MOV       R2,A
   \   0000C0   E9           MOV       A,R1
   \   0000C1   FB           MOV       R3,A
   \   0000C2   801F         SJMP      ??writeItem_5
   \                     ??writeItem_4:
   \   0000C4   7A00         MOV       R2,#0x0
   \   0000C6   7B00         MOV       R3,#0x0
   \   0000C8   8009         SJMP      ??writeItem_6
   \                     ??writeItem_7:
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   FC           MOV       R4,A
   \   0000CC   EA           MOV       A,R2
   \   0000CD   2C           ADD       A,R4
   \   0000CE   FA           MOV       R2,A
   \   0000CF   E4           CLR       A
   \   0000D0   3B           ADDC      A,R3
   \   0000D1   FB           MOV       R3,A
   \   0000D2   A3           INC       DPTR
   \                     ??writeItem_6:
   \   0000D3   E8           MOV       A,R0
   \   0000D4   FC           MOV       R4,A
   \   0000D5   E9           MOV       A,R1
   \   0000D6   FD           MOV       R5,A
   \   0000D7   EC           MOV       A,R4
   \   0000D8   24FF         ADD       A,#-0x1
   \   0000DA   18           DEC       R0
   \   0000DB   ED           MOV       A,R5
   \   0000DC   34FF         ADDC      A,#-0x1
   \   0000DE   F9           MOV       R1,A
   \   0000DF   EC           MOV       A,R4
   \   0000E0   4D           ORL       A,R5
   \   0000E1   70E7         JNZ       ??writeItem_7
   \                     ??writeItem_5:
   \   0000E3   E5..         MOV       A,?V6
   \   0000E5   601E         JZ        ??writeItem_8
   \   0000E7   F8           MOV       R0,A
   \   0000E8   7404         MOV       A,#0x4
   \   0000EA   C3           CLR       C
   \   0000EB   98           SUBB      A,R0
   \   0000EC   F8           MOV       R0,A
   \   0000ED   95E0         SUBB      A,0xE0 /* A   */
   \   0000EF   F9           MOV       R1,A
   \   0000F0   E8           MOV       A,R0
   \   0000F1   75F0FF       MOV       B,#-0x1
   \   0000F4   A4           MUL       AB
   \   0000F5   F8           MOV       R0,A
   \   0000F6   ACF0         MOV       R4,B
   \   0000F8   75F0FF       MOV       B,#-0x1
   \   0000FB   E9           MOV       A,R1
   \   0000FC   A4           MUL       AB
   \   0000FD   2C           ADD       A,R4
   \   0000FE   F9           MOV       R1,A
   \   0000FF   EA           MOV       A,R2
   \   000100   28           ADD       A,R0
   \   000101   FA           MOV       R2,A
   \   000102   EB           MOV       A,R3
   \   000103   39           ADDC      A,R1
   \   000104   FB           MOV       R3,A
   1110          
   1111                offset += OSAL_NV_HDR_SIZE;
   1112                if ( buf != NULL )
   1113                {
   1114                  writeBuf( pg, offset, len, buf );
   1115                }
   1116          
   1117                if ( hdr.chk == calcChkF( pg, offset, len ) )
   1118                {
   1119                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   1120                  {
   1121                    hotItemUpdate(pg, offset, hdr.id);
   1122                    rtrn = TRUE;
   1123                  }
   1124                }
   1125              }
   1126              else
   1127              {
   1128                rtrn = TRUE;
   1129              }
   1130          
   1131              len = OSAL_NV_ITEM_SIZE( hdr.len );
   1132            }
   \                     ??writeItem_8:
   \   000105   7404         MOV       A,#0x4
   \   000107   12....       LCALL     ?XSTACK_DISP0_8
   \   00010A   EA           MOV       A,R2
   \   00010B   F0           MOVX      @DPTR,A
   \   00010C   A3           INC       DPTR
   \   00010D   EB           MOV       A,R3
   \   00010E   F0           MOVX      @DPTR,A
   \   00010F   E5..         MOV       A,?V2
   \   000111   2408         ADD       A,#0x8
   \   000113   F5..         MOV       ?V2,A
   \   000115   E4           CLR       A
   \   000116   35..         ADDC      A,?V3
   \   000118   F5..         MOV       ?V3,A
   \   00011A   E5..         MOV       A,?V4
   \   00011C   45..         ORL       A,?V5
   \   00011E   6017         JZ        ??writeItem_9
   \   000120                ; Setup parameters for call to function writeBuf
   \   000120   78..         MOV       R0,#?V4
   \   000122   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000125   EE           MOV       A,R6
   \   000126   FC           MOV       R4,A
   \   000127   EF           MOV       A,R7
   \   000128   FD           MOV       R5,A
   \   000129   AA..         MOV       R2,?V2
   \   00012B   AB..         MOV       R3,?V3
   \   00012D   A9..         MOV       R1,?V0
   \   00012F   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   000132   7402         MOV       A,#0x2
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeItem_9:
   \   000137                ; Setup parameters for call to function calcChkF
   \   000137   EE           MOV       A,R6
   \   000138   FC           MOV       R4,A
   \   000139   EF           MOV       A,R7
   \   00013A   FD           MOV       R5,A
   \   00013B   AA..         MOV       R2,?V2
   \   00013D   AB..         MOV       R3,?V3
   \   00013F   A9..         MOV       R1,?V0
   \   000141   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000144   8A..         MOV       ?V4,R2
   \   000146   8B..         MOV       ?V5,R3
   \   000148   A8..         MOV       R0,?V4
   \   00014A   A9..         MOV       R1,?V5
   \   00014C   7404         MOV       A,#0x4
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   E0           MOVX      A,@DPTR
   \   000152   68           XRL       A,R0
   \   000153   7003         JNZ       ??writeItem_10
   \   000155   A3           INC       DPTR
   \   000156   E0           MOVX      A,@DPTR
   \   000157   69           XRL       A,R1
   \                     ??writeItem_10:
   \   000158   7030         JNZ       ??writeItem_11
   \   00015A                ; Setup parameters for call to function setChk
   \   00015A   7404         MOV       A,#0x4
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000162   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   000165   8A..         MOV       ?V4,R2
   \   000167   8B..         MOV       ?V5,R3
   \   000169   A8..         MOV       R0,?V4
   \   00016B   A9..         MOV       R1,?V5
   \   00016D   7404         MOV       A,#0x4
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   E0           MOVX      A,@DPTR
   \   000173   68           XRL       A,R0
   \   000174   7003         JNZ       ??writeItem_12
   \   000176   A3           INC       DPTR
   \   000177   E0           MOVX      A,@DPTR
   \   000178   69           XRL       A,R1
   \                     ??writeItem_12:
   \   000179   700F         JNZ       ??writeItem_11
   \   00017B                ; Setup parameters for call to function hotItemUpdate
   \   00017B   85..82       MOV       DPL,?XSP + 0
   \   00017E   85..83       MOV       DPH,?XSP + 1
   \   000181   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000184   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \                     ??writeItem_3:
   \   000187   75..01       MOV       ?V1,#0x1
   \                     ??writeItem_11:
   \   00018A   7402         MOV       A,#0x2
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   C3           CLR       C
   \   000190   E0           MOVX      A,@DPTR
   \   000191   94F4         SUBB      A,#-0xc
   \   000193   A3           INC       DPTR
   \   000194   E0           MOVX      A,@DPTR
   \   000195   94FF         SUBB      A,#-0x1
   \   000197   4006         JC        ??writeItem_13
   \   000199   7EFC         MOV       R6,#-0x4
   \   00019B   7FFF         MOV       R7,#-0x1
   \   00019D   8043         SJMP      ??CrossCallReturnLabel_80
   \                     ??writeItem_13:
   \   00019F   7402         MOV       A,#0x2
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001A7   8039         SJMP      ??CrossCallReturnLabel_80
   1133            else
   1134            {
   1135              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001A9   7402         MOV       A,#0x2
   \   0001AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AE   C3           CLR       C
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   94F4         SUBB      A,#-0xc
   \   0001B2   A3           INC       DPTR
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   94FF         SUBB      A,#-0x1
   \   0001B6   4006         JC        ??writeItem_14
   \   0001B8   7EFC         MOV       R6,#-0x4
   \   0001BA   7FFF         MOV       R7,#-0x1
   \   0001BC   8008         SJMP      ??CrossCallReturnLabel_8
   \                     ??writeItem_14:
   \   0001BE   7402         MOV       A,#0x2
   \   0001C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C3   12....       LCALL     ?Subroutine11 & 0xFFFF
   1136          
   1137              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_8:
   \   0001C6   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0001C9   F8           MOV       R0,A
   \   0001CA   7408         MOV       A,#0x8
   \   0001CC   99           SUBB      A,R1
   \   0001CD   F9           MOV       R1,A
   \   0001CE   C3           CLR       C
   \   0001CF   E8           MOV       A,R0
   \   0001D0   9E           SUBB      A,R6
   \   0001D1   E9           MOV       A,R1
   \   0001D2   9F           SUBB      A,R7
   \   0001D3   5008         JNC       ??writeItem_15
   1138              {
   1139                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001D5   12....       LCALL     ?Subroutine16 & 0xFFFF
   1140              }
   \                     ??CrossCallReturnLabel_83:
   \   0001D8   FE           MOV       R6,A
   \   0001D9   7408         MOV       A,#0x8
   \   0001DB   99           SUBB      A,R1
   \   0001DC   FF           MOV       R7,A
   1141          
   1142              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_15:
   \   0001DD   A8..         MOV       R0,?V0
   \   0001DF   12....       LCALL     ?Subroutine20 & 0xFFFF
   1143            }
   1144            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_80:
   \   0001E2   A8..         MOV       R0,?V0
   \   0001E4   E8           MOV       A,R0
   \   0001E5   28           ADD       A,R0
   \   0001E6   F8           MOV       R0,A
   \   0001E7   E4           CLR       A
   \   0001E8   33           RLC       A
   \   0001E9   F9           MOV       R1,A
   \   0001EA   74..         MOV       A,#(pgOff + 14) & 0xff
   \   0001EC   28           ADD       A,R0
   \   0001ED   F582         MOV       DPL,A
   \   0001EF   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   0001F1   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   1145          
   1146            return rtrn;
   \                     ??CrossCallReturnLabel_78:
   \   0001F4   A9..         MOV       R1,?V1
   \   0001F6   7408         MOV       A,#0x8
   \   0001F8   02....       LJMP      ?Subroutine4 & 0xFFFF
   1147          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   AA..         MOV       R2,?V2
   \   000005   AB..         MOV       R3,?V3
   \   000007   A9..         MOV       R1,?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A8..         MOV       R0,?V0
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0
   1148          
   1149          /*********************************************************************
   1150           * @fn      hotItem
   1151           *
   1152           * @brief   Look for the parameter 'id' in the hot items array.
   1153           *
   1154           * @param   id - A valid NV item Id.
   1155           *
   1156           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1158          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1159          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1160            uint8 hotIdx;
   1161          
   1162            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV       R1,#0x0
   1163            {
   1164              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV       A,R1
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   FD           MOV       R5,A
   \   00000D   74..         MOV       A,#hotIds & 0xff
   \   00000F   2C           ADD       A,R4
   \   000010   F582         MOV       DPL,A
   \   000012   74..         MOV       A,#(hotIds >> 8) & 0xff
   \   000014   3D           ADDC      A,R5
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6A           XRL       A,R2
   \   000019   7003         JNZ       ??hotItem_1
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6B           XRL       A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ        ??hotItem_2
   1165              {
   1166                break;
   1167              }
   1168            }
   \   000020   09           INC       R1
   \   000021   E9           MOV       A,R1
   \   000022   C3           CLR       C
   \   000023   9403         SUBB      A,#0x3
   \   000025   40DF         JC        ??hotItem_0
   1169          
   1170            return hotIdx;
   \                     ??hotItem_2:
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1171          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1172          
   1173          /*********************************************************************
   1174           * @fn      hotItemUpdate
   1175           *
   1176           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1177           *
   1178           * @param   pg - The new NV page corresponding to the hot item.
   1179           * @param   off - The new NV page offset corresponding to the hot item.
   1180           * @param   id - A valid NV item Id.
   1181           *
   1182           * @return  none
   1183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1184          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FA           MOV       R2,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FB           MOV       R3,A
   1186            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000012   E9           MOV       A,R1
   \   000013   F8           MOV       R0,A
   1187          
   1188            if (hotIdx < OSAL_NV_MAX_HOT)
   \   000014   C3           CLR       C
   \   000015   9403         SUBB      A,#0x3
   \   000017   500E         JNC       ??hotItemUpdate_0
   1189            {
   1190              {
   1191                hotPg[hotIdx] = pg;
   \   000019   12....       LCALL     ?Subroutine32 & 0xFFFF
   1192                hotOff[hotIdx] = off;
   1193              }
   1194            }
   \                     ??CrossCallReturnLabel_60:
   \   00001C   EE           MOV       A,R6
   \   00001D   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000020   E5..         MOV       A,?V0
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   E5..         MOV       A,?V1
   \   000026   F0           MOVX      @DPTR,A
   1195          }
   \                     ??hotItemUpdate_0:
   \   000027                REQUIRE ?Subroutine6
   \   000027                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   74..         MOV       A,#hotPg & 0xff
   \   000002   29           ADD       A,R1
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E8           MOV       A,R0
   \   000002   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   29           ADD       A,R1
   \   000001   F8           MOV       R0,A
   \   000002   E4           CLR       A
   \   000003   33           RLC       A
   \   000004   F9           MOV       R1,A
   \   000005   74..         MOV       A,#hotOff & 0xff
   \   000007   28           ADD       A,R0
   \   000008   F582         MOV       DPL,A
   \   00000A   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   00000C   39           ADDC      A,R1
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET
   1196          
   1197          /*********************************************************************
   1198           * @fn      osal_nv_init
   1199           *
   1200           * @brief   Initialize NV service.
   1201           *
   1202           * @param   p - Not used.
   1203           *
   1204           * @return  none
   1205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1206          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1207          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1208            (void)p;  // Suppress Lint warning.
   1209            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1210          }
   \   000007   80..         SJMP      ?Subroutine5
   1211          
   1212          /*********************************************************************
   1213           * @fn      osal_nv_item_init
   1214           *
   1215           * @brief   If the NV item does not already exist, it is created and
   1216           *          initialized with the data passed to the function, if any.
   1217           *          This function must be called before calling osal_nv_read() or
   1218           *          osal_nv_write().
   1219           *
   1220           * @param   id  - Valid NV item Id.
   1221           * @param   len - Item length.
   1222           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1223           *
   1224           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1225           *          SUCCESS        - Id already existed, no action taken.
   1226           *          NV_OPER_FAILED - Failure to find or create Id.
   1227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1228          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1229          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1230            uint16 offset;
   1231          
   1232            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV       R1,#0x4e
   \   00000F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV       A,R1
   \   000013   603C         JZ        ??osal_nv_item_init_0
   1233            {
   1234              return NV_OPER_FAILED;
   1235            }
   1236            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \   000015                ; Setup parameters for call to function findItem
   \   000015   EE           MOV       A,R6
   \   000016   FA           MOV       R2,A
   \   000017   EF           MOV       A,R7
   \   000018   FB           MOV       R3,A
   \   000019   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6010         JZ        ??osal_nv_item_init_1
   1237            {
   1238              // Re-populate the NV hot item data if the corresponding items are already established.
   1239              hotItemUpdate(findPg, offset, id);
   \   000020                ; Setup parameters for call to function hotItemUpdate
   \   000020   EE           MOV       A,R6
   \   000021   FC           MOV       R4,A
   \   000022   EF           MOV       A,R7
   \   000023   FD           MOV       R5,A
   \   000024   90....       MOV       DPTR,#findPg
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1240          
   1241              return SUCCESS;
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   8023         SJMP      ??osal_nv_item_init_2
   1242            }
   1243            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_1:
   \   000030                ; Setup parameters for call to function initItem
   \   000030   740C         MOV       A,#0xc
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000038   AC..         MOV       R4,?V0
   \   00003A   AD..         MOV       R5,?V1
   \   00003C   EE           MOV       A,R6
   \   00003D   FA           MOV       R2,A
   \   00003E   EF           MOV       A,R7
   \   00003F   FB           MOV       R3,A
   \   000040   7901         MOV       R1,#0x1
   \   000042   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   E9           MOV       A,R1
   \   00004B   6004         JZ        ??osal_nv_item_init_0
   1244            {
   1245              return NV_ITEM_UNINIT;
   \   00004D   7909         MOV       R1,#0x9
   \   00004F   8002         SJMP      ??osal_nv_item_init_2
   1246            }
   1247            else
   1248            {
   1249              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_0:
   \   000051   790A         MOV       R1,#0xa
   1250            }
   \                     ??osal_nv_item_init_2:
   \   000053   02....       LJMP      ??Subroutine41_0 & 0xFFFF
   1251          }
   1252          
   1253          /*********************************************************************
   1254           * @fn      osal_nv_item_len
   1255           *
   1256           * @brief   Get the data length of the item stored in NV memory.
   1257           *
   1258           * @param   id  - Valid NV item Id.
   1259           *
   1260           * @return  Item length, if found; zero otherwise.
   1261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1262          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1264            osalNvHdr_t hdr;
   1265            uint16 offset;
   1266            uint8 hotIdx;
   1267          
   1268            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000011   E9           MOV       A,R1
   \   000012   F8           MOV       R0,A
   \   000013   C3           CLR       C
   \   000014   9403         SUBB      A,#0x3
   \   000016   5042         JNC       ??osal_nv_item_len_0
   1269            {
   1270              findPg = hotPg[hotIdx];
   \   000018   12....       LCALL     ?Subroutine32 & 0xFFFF
   1271              offset = hotOff[hotIdx];
   1272            }
   \                     ??CrossCallReturnLabel_61:
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   90....       MOV       DPTR,#findPg
   \   00001F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000022   12....       LCALL     ?Subroutine15 & 0xFFFF
   1273            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1274            {
   1275              return 0;
   1276            }
   1277          
   1278            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_21:
   \   000025                ; Setup parameters for call to function HalFlashRead
   \   000025   75..08       MOV       ?V0,#0x8
   \   000028   75..00       MOV       ?V1,#0x0
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   7402         MOV       A,#0x2
   \   000032   12....       LCALL     ?XSTACK_DISP102_8
   \   000035   EA           MOV       A,R2
   \   000036   24F8         ADD       A,#-0x8
   \   000038   FA           MOV       R2,A
   \   000039   EB           MOV       A,R3
   \   00003A   34FF         ADDC      A,#-0x1
   \   00003C   FB           MOV       R3,A
   \   00003D   90....       MOV       DPTR,#findPg
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   1279            return hdr.len;
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000052   7408         MOV       A,#0x8
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057   02....       LJMP      ?Subroutine6 & 0xFFFF
   \                     ??osal_nv_item_len_0:
   \   00005A                ; Setup parameters for call to function findItem
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000061   8B..         MOV       ?V1,R3
   \   000063   A9..         MOV       R1,?V1
   \   000065   EA           MOV       A,R2
   \   000066   49           ORL       A,R1
   \   000067   70BC         JNZ       ??CrossCallReturnLabel_21
   \   000069   7A00         MOV       R2,#0x0
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   80E3         SJMP      ??CrossCallReturnLabel_22
   1280          }
   1281          
   1282          /*********************************************************************
   1283           * @fn      osal_nv_write
   1284           *
   1285           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1286           *          an element of an item by indexing into the item with an offset.
   1287           *
   1288           * @param   id  - Valid NV item Id.
   1289           * @param   ndx - Index offset into item
   1290           * @param   len - Length of data to write.
   1291           * @param  *buf - Data to write.
   1292           *
   1293           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1294           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1296          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7409         MOV       A,#0x9
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8C..         MOV       ?V2,R4
   \   000016   8D..         MOV       ?V3,R5
   1298            uint8 rtrn = SUCCESS;
   \   000018   75..00       MOV       ?V9,#0x0
   1299          
   1300            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001B                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001B   794E         MOV       R1,#0x4e
   \   00001D   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000020   E9           MOV       A,R1
   \   000021   606D         JZ        ??osal_nv_write_0
   \   000023   7423         MOV       A,#0x23
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V10,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V11,A
   1301            {
   1302              return NV_OPER_FAILED;
   1303            }
   1304            else if ( len != 0 )
   \   00002F   E5..         MOV       A,?V10
   \   000031   45..         ORL       A,?V11
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1305            {
   1306              osalNvHdr_t hdr;
   1307              uint16 origOff, srcOff;
   1308              uint16 cnt, chk;
   1309              uint8 *ptr, srcPg;
   1310          
   1311              origOff = srcOff = findItem( id );
   \   000038                ; Setup parameters for call to function findItem
   \   000038   7409         MOV       A,#0x9
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000040   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000043   8A..         MOV       ?V14,R2
   \   000045   8B..         MOV       ?V15,R3
   1312              srcPg = findPg;
   \   000047   90....       MOV       DPTR,#findPg
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F5..         MOV       ?V8,A
   1313              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   00004D   EA           MOV       A,R2
   \   00004E   45..         ORL       A,?V15
   \   000050   7005         JNZ       ??osal_nv_write_2
   1314              {
   1315                return NV_ITEM_UNINIT;
   \   000052   7909         MOV       R1,#0x9
   \   000054   02....       LJMP      ??osal_nv_write_3 & 0xFFFF
   1316              }
   1317          
   1318              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_2:
   \   000057                ; Setup parameters for call to function HalFlashRead
   \   000057   75..08       MOV       ?V0,#0x8
   \   00005A   75..00       MOV       ?V1,#0x0
   \   00005D   78..         MOV       R0,#?V0
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7403         MOV       A,#0x3
   \   000064   12....       LCALL     ?XSTACK_DISP102_8
   \   000067   EA           MOV       A,R2
   \   000068   24F8         ADD       A,#-0x8
   \   00006A   FA           MOV       R2,A
   \   00006B   EB           MOV       A,R3
   \   00006C   34FF         ADDC      A,#-0x1
   \   00006E   FB           MOV       R3,A
   \   00006F   A9..         MOV       R1,?V8
   \   000071   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000074   7402         MOV       A,#0x2
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   1319              if ( hdr.len < (ndx + len) )
   \   000079   7403         MOV       A,#0x3
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   E5..         MOV       A,?V2
   \   000080   25..         ADD       A,?V10
   \   000082   F8           MOV       R0,A
   \   000083   E5..         MOV       A,?V3
   \   000085   35..         ADDC      A,?V11
   \   000087   F9           MOV       R1,A
   \   000088   C3           CLR       C
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   98           SUBB      A,R0
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   99           SUBB      A,R1
   \   00008E   5005         JNC       ??osal_nv_write_4
   1320              {
   1321                return NV_OPER_FAILED;
   \                     ??osal_nv_write_0:
   \   000090   790A         MOV       R1,#0xa
   \   000092   02....       LJMP      ??osal_nv_write_3 & 0xFFFF
   1322              }
   1323          
   1324              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   000095   E5..         MOV       A,?V14
   \   000097   25..         ADD       A,?V2
   \   000099   F5..         MOV       ?V4,A
   \   00009B   E5..         MOV       A,?V15
   \   00009D   35..         ADDC      A,?V3
   \   00009F   F5..         MOV       ?V5,A
   1325              ptr = buf;
   \   0000A1   7425         MOV       A,#0x25
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F5..         MOV       ?V6,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F5..         MOV       ?V7,A
   1326              cnt = len;
   \   0000AD   AE..         MOV       R6,?V10
   \   0000AF   AF..         MOV       R7,?V11
   1327              chk = 0;
   \   0000B1   75..00       MOV       ?V0,#0x0
   \   0000B4   806B         SJMP      ??osal_nv_write_5
   1328              while ( cnt-- )
   1329              {
   1330                uint8 tmp;
   1331                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_6:
   \   0000B6                ; Setup parameters for call to function HalFlashRead
   \   0000B6   75..01       MOV       ?V12,#0x1
   \   0000B9   75..00       MOV       ?V13,#0x0
   \   0000BC   78..         MOV       R0,#?V12
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C6   AA..         MOV       R2,?V4
   \   0000C8   AB..         MOV       R3,?V5
   \   0000CA   A9..         MOV       R1,?V8
   \   0000CC   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000CF   7402         MOV       A,#0x2
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
   1332                if ( tmp != *ptr )
   \   0000D4   85..82       MOV       DPL,?XSP + 0
   \   0000D7   85..83       MOV       DPH,?XSP + 1
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F8           MOV       R0,A
   \   0000DC   85..82       MOV       DPL,?V6
   \   0000DF   85..83       MOV       DPH,?V7
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   68           XRL       A,R0
   \   0000E4   6026         JZ        ??osal_nv_write_7
   1333                {
   1334                  chk = 1;  // Mark that at least one byte is different.
   \   0000E6   75..01       MOV       ?V0,#0x1
   1335                  // Calculate expected checksum after transferring old data and writing new data.
   1336                  hdr.chk -= tmp;
   \   0000E9   7405         MOV       A,#0x5
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   C3           CLR       C
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   98           SUBB      A,R0
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   A3           INC       DPTR
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   9400         SUBB      A,#0x0
   \   0000F6   F0           MOVX      @DPTR,A
   1337                  hdr.chk += *ptr;
   \   0000F7   85..82       MOV       DPL,?V6
   \   0000FA   85..83       MOV       DPH,?V7
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F8           MOV       R0,A
   \   0000FF   7405         MOV       A,#0x5
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   E0           MOVX      A,@DPTR
   \   000105   28           ADD       A,R0
   \   000106   F0           MOVX      @DPTR,A
   \   000107   A3           INC       DPTR
   \   000108   E0           MOVX      A,@DPTR
   \   000109   3400         ADDC      A,#0x0
   \   00010B   F0           MOVX      @DPTR,A
   1338                }
   1339                srcOff++;
   \                     ??osal_nv_write_7:
   \   00010C   05..         INC       ?V4
   \   00010E   E5..         MOV       A,?V4
   \   000110   7002         JNZ       ??osal_nv_write_8
   \   000112   05..         INC       ?V5
   1340                ptr++;
   \                     ??osal_nv_write_8:
   \   000114   85..82       MOV       DPL,?V6
   \   000117   85..83       MOV       DPH,?V7
   \   00011A   A3           INC       DPTR
   \   00011B   8582..       MOV       ?V6,DPL
   \   00011E   8583..       MOV       ?V7,DPH
   1341              }
   \                     ??osal_nv_write_5:
   \   000121   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000124   7090         JNZ       ??osal_nv_write_6
   1342          
   1343              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   000126   E5..         MOV       A,?V0
   \   000128   A2E0         MOV       C,0xE0 /* A   */.0
   \   00012A   4003         JC        $+5
   \   00012C   02....       LJMP      ??osal_nv_write_1 & 0xFFFF
   1344              {
   1345                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   00012F   85..82       MOV       DPL,?XSP + 0
   \   000132   85..83       MOV       DPH,?XSP + 1
   \   000135   E4           CLR       A
   \   000136   F0           MOVX      @DPTR,A
   1346                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000137                ; Setup parameters for call to function initItem
   \   000137   A8..         MOV       R0,?XSP + 0
   \   000139   A9..         MOV       R1,?XSP + 1
   \   00013B   88..         MOV       ?V0,R0
   \   00013D   89..         MOV       ?V1,R1
   \   00013F   78..         MOV       R0,#?V0
   \   000141   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000144   7405         MOV       A,#0x5
   \   000146   12....       LCALL     ?XSTACK_DISP0_8
   \   000149   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00014C   740B         MOV       A,#0xb
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000154   7900         MOV       R1,#0x0
   \   000156   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   000159   7402         MOV       A,#0x2
   \   00015B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015E   E9           MOV       A,R1
   \   00015F   F5..         MOV       ?V4,A
   1347          
   1348                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000161   7003         JNZ       $+5
   \   000163   02....       LJMP      ??osal_nv_write_9 & 0xFFFF
   1349                {
   1350                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000166   7403         MOV       A,#0x3
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00016E   4008         JC        ??osal_nv_write_10
   \   000170   75..FC       MOV       ?V0,#-0x4
   \   000173   75..FF       MOV       ?V1,#-0x1
   \   000176   800D         SJMP      ??osal_nv_write_11
   \                     ??osal_nv_write_10:
   \   000178   7403         MOV       A,#0x3
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000180   F5..         MOV       ?V0,A
   \   000182   E9           MOV       A,R1
   \   000183   F5..         MOV       ?V1,A
   1351                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_11:
   \   000185   12....       LCALL     ?Subroutine22 & 0xFFFF
   1352                  srcOff = origOff;
   1353          
   1354                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1355                   * OSAL_Nv interruptions caused by resets.
   1356                   */
   1357                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_35:
   \   000188   7407         MOV       A,#0x7
   \   00018A   12....       LCALL     ?XSTACK_DISP0_8
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   F4           CPL       A
   \   00018F   7003         JNZ       ??osal_nv_write_12
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   F4           CPL       A
   \                     ??osal_nv_write_12:
   \   000194   700B         JNZ       ??osal_nv_write_13
   1358                  {
   1359                    setItem( srcPg, srcOff, eNvXfer );
   \   000196                ; Setup parameters for call to function setItem
   \   000196   7C00         MOV       R4,#0x0
   \   000198   AA..         MOV       R2,?V14
   \   00019A   AB..         MOV       R3,?V15
   \   00019C   A9..         MOV       R1,?V8
   \   00019E   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1360                  }
   1361          
   1362                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_13:
   \   0001A1                ; Setup parameters for call to function xferBuf
   \   0001A1   78..         MOV       R0,#?V2
   \   0001A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A6   8E..         MOV       ?V6,R6
   \   0001A8   8F..         MOV       ?V7,R7
   \   0001AA   78..         MOV       R0,#?V6
   \   0001AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AF   AC..         MOV       R4,?V4
   \   0001B1   AA..         MOV       R2,?V14
   \   0001B3   AB..         MOV       R3,?V15
   \   0001B5   A9..         MOV       R1,?V8
   \   0001B7   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   0001BA   7404         MOV       A,#0x4
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
   1363                  srcOff += ndx;
   1364                  dstOff += ndx;
   \   0001BF   EE           MOV       A,R6
   \   0001C0   25..         ADD       A,?V2
   \   0001C2   FE           MOV       R6,A
   \   0001C3   EF           MOV       A,R7
   \   0001C4   35..         ADDC      A,?V3
   \   0001C6   FF           MOV       R7,A
   1365          
   1366                  writeBuf( dstPg, dstOff, len, buf );
   \   0001C7                ; Setup parameters for call to function writeBuf
   \   0001C7   7425         MOV       A,#0x25
   \   0001C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001CF   AC..         MOV       R4,?V10
   \   0001D1   AD..         MOV       R5,?V11
   \   0001D3   EE           MOV       A,R6
   \   0001D4   FA           MOV       R2,A
   \   0001D5   EF           MOV       A,R7
   \   0001D6   FB           MOV       R3,A
   \   0001D7   A9..         MOV       R1,?V4
   \   0001D9   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   0001DC   7402         MOV       A,#0x2
   \   0001DE   12....       LCALL     ?DEALLOC_XSTACK8
   1367                  srcOff += len;
   1368                  dstOff += len;
   1369          
   1370                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001E1                ; Setup parameters for call to function xferBuf
   \   0001E1   7403         MOV       A,#0x3
   \   0001E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   C3           CLR       C
   \   0001E8   95..         SUBB      A,?V2
   \   0001EA   F8           MOV       R0,A
   \   0001EB   A3           INC       DPTR
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   95..         SUBB      A,?V3
   \   0001EF   F9           MOV       R1,A
   \   0001F0   E8           MOV       A,R0
   \   0001F1   C3           CLR       C
   \   0001F2   95..         SUBB      A,?V10
   \   0001F4   F5..         MOV       ?V6,A
   \   0001F6   E9           MOV       A,R1
   \   0001F7   95..         SUBB      A,?V11
   \   0001F9   F5..         MOV       ?V7,A
   \   0001FB   78..         MOV       R0,#?V6
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000200   EE           MOV       A,R6
   \   000201   25..         ADD       A,?V10
   \   000203   F5..         MOV       ?V6,A
   \   000205   EF           MOV       A,R7
   \   000206   35..         ADDC      A,?V11
   \   000208   F5..         MOV       ?V7,A
   \   00020A   78..         MOV       R0,#?V6
   \   00020C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020F   AC..         MOV       R4,?V4
   \   000211   E5..         MOV       A,?V14
   \   000213   25..         ADD       A,?V2
   \   000215   F8           MOV       R0,A
   \   000216   E5..         MOV       A,?V15
   \   000218   35..         ADDC      A,?V3
   \   00021A   F9           MOV       R1,A
   \   00021B   E8           MOV       A,R0
   \   00021C   25..         ADD       A,?V10
   \   00021E   FA           MOV       R2,A
   \   00021F   E9           MOV       A,R1
   \   000220   35..         ADDC      A,?V11
   \   000222   FB           MOV       R3,A
   \   000223   A9..         MOV       R1,?V8
   \   000225   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000228   7404         MOV       A,#0x4
   \   00022A   12....       LCALL     ?DEALLOC_XSTACK8
   1371          
   1372                  // Calculate and write the new checksum.
   1373                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   00022D   12....       LCALL     ?Subroutine22 & 0xFFFF
   1374          
   1375                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_36:
   \   000230                ; Setup parameters for call to function calcChkF
   \   000230   7403         MOV       A,#0x3
   \   000232   12....       LCALL     ?XSTACK_DISP0_8
   \   000235   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000238   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00023B   8A..         MOV       ?V0,R2
   \   00023D   8B..         MOV       ?V1,R3
   \   00023F   A8..         MOV       R0,?V0
   \   000241   A9..         MOV       R1,?V1
   \   000243   7405         MOV       A,#0x5
   \   000245   12....       LCALL     ?XSTACK_DISP0_8
   \   000248   E0           MOVX      A,@DPTR
   \   000249   68           XRL       A,R0
   \   00024A   7003         JNZ       ??osal_nv_write_14
   \   00024C   A3           INC       DPTR
   \   00024D   E0           MOVX      A,@DPTR
   \   00024E   69           XRL       A,R1
   \                     ??osal_nv_write_14:
   \   00024F   702E         JNZ       ??osal_nv_write_9
   1376                  {
   1377                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   000251                ; Setup parameters for call to function setChk
   \   000251   7405         MOV       A,#0x5
   \   000253   12....       LCALL     ?XSTACK_DISP0_8
   \   000256   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000259   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   00025C   8A..         MOV       ?V0,R2
   \   00025E   8B..         MOV       ?V1,R3
   \   000260   A8..         MOV       R0,?V0
   \   000262   A9..         MOV       R1,?V1
   \   000264   7405         MOV       A,#0x5
   \   000266   12....       LCALL     ?XSTACK_DISP0_8
   \   000269   E0           MOVX      A,@DPTR
   \   00026A   68           XRL       A,R0
   \   00026B   7003         JNZ       ??osal_nv_write_15
   \   00026D   A3           INC       DPTR
   \   00026E   E0           MOVX      A,@DPTR
   \   00026F   69           XRL       A,R1
   \                     ??osal_nv_write_15:
   \   000270   700D         JNZ       ??osal_nv_write_9
   1378                    {
   1379                      rtrn = NV_OPER_FAILED;
   1380                    }
   1381                    else
   1382                    {
   1383                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \   000272                ; Setup parameters for call to function hotItemUpdate
   \   000272   7401         MOV       A,#0x1
   \   000274   12....       LCALL     ?XSTACK_DISP0_8
   \   000277   12....       LCALL     ?Subroutine14 & 0xFFFF
   1384                    }
   1385                  }
   1386                  else
   1387                  {
   1388                    rtrn = NV_OPER_FAILED;
   1389                  }
   1390                }
   \                     ??CrossCallReturnLabel_17:
   \   00027A   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   00027D   8003         SJMP      ??osal_nv_write_16
   1391                else
   1392                {
   1393                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   00027F   75..0A       MOV       ?V9,#0xa
   1394                }
   1395          
   1396                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_16:
   \   000282   85..82       MOV       DPL,?XSP + 0
   \   000285   85..83       MOV       DPH,?XSP + 1
   \   000288   E0           MOVX      A,@DPTR
   \   000289   6034         JZ        ??osal_nv_write_17
   1397                {
   1398                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1399                   * page and writing the new value failed, then the compaction must be aborted.
   1400                   */
   1401                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   00028B   65..         XRL       A,?V8
   \   00028D   7010         JNZ       ??osal_nv_write_18
   \   00028F   740A         MOV       A,#0xa
   \   000291   65..         XRL       A,?V9
   \   000293   700A         JNZ       ??osal_nv_write_18
   1402                  {
   1403                    erasePage( pgRes );
   \   000295                ; Setup parameters for call to function erasePage
   \   000295   90....       MOV       DPTR,#pgRes
   \   000298   E0           MOVX      A,@DPTR
   \   000299   F9           MOV       R1,A
   \   00029A   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   00029D   803C         SJMP      ??osal_nv_write_1
   1404                  }
   1405                  else
   1406                  {
   1407                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_18:
   \   00029F                ; Setup parameters for call to function setPageUse
   \   00029F   7A01         MOV       R2,#0x1
   \   0002A1   90....       MOV       DPTR,#pgRes
   \   0002A4   E0           MOVX      A,@DPTR
   \   0002A5   F9           MOV       R1,A
   \   0002A6   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   0002A9                ; Setup parameters for call to function erasePage
   \   0002A9   85..82       MOV       DPL,?XSP + 0
   \   0002AC   85..83       MOV       DPH,?XSP + 1
   \   0002AF   E0           MOVX      A,@DPTR
   \   0002B0   F9           MOV       R1,A
   \   0002B1   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   0002B4   85..82       MOV       DPL,?XSP + 0
   \   0002B7   85..83       MOV       DPH,?XSP + 1
   \   0002BA   E0           MOVX      A,@DPTR
   \   0002BB   90....       MOV       DPTR,#pgRes
   \   0002BE   F0           MOVX      @DPTR,A
   1408                  }
   1409                }
   1410          
   1411                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1412                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1413                 */
   1414                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_17:
   \   0002BF   85..82       MOV       DPL,?XSP + 0
   \   0002C2   85..83       MOV       DPH,?XSP + 1
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   65..         XRL       A,?V8
   \   0002C8   6011         JZ        ??osal_nv_write_1
   \   0002CA   740A         MOV       A,#0xa
   \   0002CC   65..         XRL       A,?V9
   \   0002CE   600B         JZ        ??osal_nv_write_1
   1415                {
   1416                  setItem( srcPg, origOff, eNvZero );
   \   0002D0                ; Setup parameters for call to function setItem
   \   0002D0   7C01         MOV       R4,#0x1
   \   0002D2   AA..         MOV       R2,?V14
   \   0002D4   AB..         MOV       R3,?V15
   \   0002D6   A9..         MOV       R1,?V8
   \   0002D8   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1417                }
   1418              }
   1419            }
   1420          
   1421            return rtrn;
   \                     ??osal_nv_write_1:
   \   0002DB   A9..         MOV       R1,?V9
   \                     ??osal_nv_write_3:
   \   0002DD   740B         MOV       A,#0xb
   \   0002DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002E2   7F10         MOV       R7,#0x10
   \   0002E4   02....       LJMP      ?BANKED_LEAVE_XDATA
   1422          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A8..         MOV       R0,?V4
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000007   E0           MOVX      A,@DPTR
   \   000008   C3           CLR       C
   \   000009   95..         SUBB      A,?V0
   \   00000B   FE           MOV       R6,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   95..         SUBB      A,?V1
   \   000010   FF           MOV       R7,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   EE           MOV       A,R6
   \   000004   FA           MOV       R2,A
   \   000005   EF           MOV       A,R7
   \   000006   FB           MOV       R3,A
   \   000007   A9..         MOV       R1,?V4
   \   000009   22           RET
   1423          
   1424          /*********************************************************************
   1425           * @fn      osal_nv_read
   1426           *
   1427           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1428           *          an element of an item by indexing into the item with an offset.
   1429           *          Read data is copied into *buf.
   1430           *
   1431           * @param   id  - Valid NV item Id.
   1432           * @param   ndx - Index offset into item
   1433           * @param   len - Length of data to read.
   1434           * @param  *buf - Data is read into this buffer.
   1435           *
   1436           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1437           *          Otherwise, NV_OPER_FAILED for failure.
   1438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1439          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1441            uint16 offset;
   1442            uint8 hotIdx;
   1443          
   1444            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000010   E9           MOV       A,R1
   \   000011   F8           MOV       R0,A
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00001A   7412         MOV       A,#0x12
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V0,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V1,A
   \   000026   E8           MOV       A,R0
   \   000027   C3           CLR       C
   \   000028   9403         SUBB      A,#0x3
   \   00002A   5024         JNC       ??osal_nv_read_0
   1445            {
   1446              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002C   E8           MOV       A,R0
   \   00002D   FE           MOV       R6,A
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   78..         MOV       R0,#?V4
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
   \   000037   EE           MOV       A,R6
   \   000038   12....       LCALL     ?Subroutine39 & 0xFFFF
   1447              return SUCCESS;
   1448            }
   \                     ??CrossCallReturnLabel_73:
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   25..         ADD       A,?V2
   \   00003E   FA           MOV       R2,A
   \   00003F   A3           INC       DPTR
   \   000040   E0           MOVX      A,@DPTR
   \   000041   35..         ADDC      A,?V3
   \   000043   FB           MOV       R3,A
   \   000044   74..         MOV       A,#hotPg & 0xff
   \   000046   2E           ADD       A,R6
   \   000047   F582         MOV       DPL,A
   \   000049   E4           CLR       A
   \   00004A   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   00004C   F583         MOV       DPH,A
   \   00004E   8023         SJMP      ??osal_nv_read_1
   1449          
   1450            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000050                ; Setup parameters for call to function findItem
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000057   EA           MOV       A,R2
   \   000058   4B           ORL       A,R3
   \   000059   7004         JNZ       ??osal_nv_read_2
   1451            {
   1452              return NV_OPER_FAILED;
   \   00005B   790A         MOV       R1,#0xa
   \   00005D   8020         SJMP      ??osal_nv_read_3
   1453            }
   1454            else
   1455            {
   1456              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   00005F                ; Setup parameters for call to function HalFlashRead
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   AC..         MOV       R4,?V0
   \   000066   AD..         MOV       R5,?V1
   \   000068   EA           MOV       A,R2
   \   000069   25..         ADD       A,?V2
   \   00006B   FA           MOV       R2,A
   \   00006C   EB           MOV       A,R3
   \   00006D   35..         ADDC      A,?V3
   \   00006F   FB           MOV       R3,A
   \   000070   90....       MOV       DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000078   7402         MOV       A,#0x2
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   1457              return SUCCESS;
   \   00007D   7900         MOV       R1,#0x0
   1458            }
   \                     ??osal_nv_read_3:
   \   00007F   02....       LJMP      ??Subroutine47_0 & 0xFFFF
   1459          }
   1460          
   1461          /*********************************************************************
   1462           * @fn      osal_nv_delete
   1463           *
   1464           * @brief   Delete item from NV. This function will fail if the length
   1465           *          parameter does not match the length of the item in NV.
   1466           *
   1467           * @param   id  - Valid NV item Id.
   1468           * @param   len - Length of item to delete.
   1469           *
   1470           * @return  SUCCESS if item was deleted,
   1471           *          NV_ITEM_UNINIT if item did not exist in NV,
   1472           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1473           *          NV_OPER_FAILED if attempted deletion failed.
   1474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1475          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1477            uint16 length;
   1478            uint16 offset;
   1479          
   1480            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   1481            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V1
   \   000017   7004         JNZ       ??osal_nv_delete_0
   1482            {
   1483              // NV item does not exist
   1484              return NV_ITEM_UNINIT;
   \   000019   7909         MOV       R1,#0x9
   \   00001B   803D         SJMP      ??osal_nv_delete_1
   1485            }
   1486          
   1487            length = osal_nv_item_len( id );
   1488            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001D                ; Setup parameters for call to function osal_nv_item_len
   \   00001D   EE           MOV       A,R6
   \   00001E   FA           MOV       R2,A
   \   00001F   EF           MOV       A,R7
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000024   8A..         MOV       ?V4,R2
   \   000026   8B..         MOV       ?V5,R3
   \   000028   E5..         MOV       A,?V2
   \   00002A   65..         XRL       A,?V4
   \   00002C   7004         JNZ       ??osal_nv_delete_2
   \   00002E   E5..         MOV       A,?V3
   \   000030   65..         XRL       A,?V5
   \                     ??osal_nv_delete_2:
   \   000032   6004         JZ        ??osal_nv_delete_3
   1489            {
   1490              // NV item has different length
   1491              return NV_BAD_ITEM_LEN;
   \   000034   790C         MOV       R1,#0xc
   \   000036   8022         SJMP      ??osal_nv_delete_1
   1492            }
   1493          
   1494            // Set item header ID to zero to 'delete' the item
   1495            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000038                ; Setup parameters for call to function setItem
   \   000038   7C01         MOV       R4,#0x1
   \   00003A   AA..         MOV       R2,?V0
   \   00003C   AB..         MOV       R3,?V1
   \   00003E   90....       MOV       DPTR,#findPg
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1496          
   1497            // Verify that item has been removed
   1498            offset = findItem( id );
   1499            if ( offset != OSAL_NV_ITEM_NULL )
   \   000046                ; Setup parameters for call to function findItem
   \   000046   EE           MOV       A,R6
   \   000047   FA           MOV       R2,A
   \   000048   EF           MOV       A,R7
   \   000049   FB           MOV       R3,A
   \   00004A   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00004D   8B..         MOV       ?V1,R3
   \   00004F   EA           MOV       A,R2
   \   000050   45..         ORL       A,?V1
   \   000052   6004         JZ        ??osal_nv_delete_4
   1500            {
   1501              // Still there
   1502              return NV_OPER_FAILED;
   \   000054   790A         MOV       R1,#0xa
   \   000056   8002         SJMP      ??osal_nv_delete_1
   1503            }
   1504            else
   1505            {
   1506              // Yes, it's gone
   1507              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000058   7900         MOV       R1,#0x0
   1508            }
   \                     ??osal_nv_delete_1:
   \   00005A   02....       LJMP      ?Subroutine3 & 0xFFFF
   1509          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setPageUse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setChk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWord::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItemUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_delete
   1510          
   1511          /*********************************************************************
   1512           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     57   calcChkF
        0     22   -> HalFlashRead
      0     59   compactPage
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> erasePage
        0     27   -> hotItemUpdate
        0     27   -> setChk
        0     27   -> setItem
        0     27   -> setPageUse
        0     30   -> writeItem
        0     31   -> xferBuf
      0     44   erasePage
        0      9   -> HalFlashErase
      0     47   findItem
        0     12   -> initPage
      2     18   hotItem
      1     45   hotItemUpdate
        0     10   -> hotItem
      1     68   initItem
        0     30   -> HalFlashRead
        0     28   -> compactPage
        0     28   -> erasePage
        0     28   -> setPageUse
        0     31   -> writeItem
        0     28   -> writeWordH
      2     22   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     34   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     22   osal_nv_read
        0     18   -> HalFlashRead
        0     16   -> findItem
        0     16   -> hotItem
      0     43   osal_nv_write
        0     35   -> HalAdcCheckVdd
        0     37   -> HalFlashRead
        0     35   -> calcChkF
        0     35   -> erasePage
        0     35   -> findItem
        0     35   -> hotItemUpdate
        0     37   -> initItem
        0     35   -> setChk
        0     35   -> setItem
        0     35   -> setPageUse
        0     37   -> writeBuf
        0     39   -> xferBuf
      0     51   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     59   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     52   setPageUse
        0     17   -> writeWord
      1     61   writeBuf
        0     24   -> HalFlashRead
        0     24   -> HalFlashWrite
        0     22   -> writeWord
      0     57   writeItem
        0     26   -> HalFlashRead
        0     24   -> calcChkF
        0     24   -> hotItemUpdate
        0     24   -> setChk
        0     26   -> writeBuf
        0     24   -> writeWord
      0     38   writeWord
        0     14   -> HalFlashWrite
      1     41   writeWordH
        0     13   -> writeWord
      0     63   xferBuf
        0     24   -> HalFlashRead
        0     22   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ??Subroutine40_0
       5  ??Subroutine41_0
       5  ??Subroutine42_0
       6  ??Subroutine43_0
       8  ??Subroutine44_0
       8  ??Subroutine45_0
      11  ??Subroutine46_0
       5  ??Subroutine47_0
      10  ??Subroutine48_0
       2  ?Subroutine0
       3  ?Subroutine1
      12  ?Subroutine10
      10  ?Subroutine11
      13  ?Subroutine12
       4  ?Subroutine13
      10  ?Subroutine14
       6  ?Subroutine15
       4  ?Subroutine16
       9  ?Subroutine17
      10  ?Subroutine18
       8  ?Subroutine19
       2  ?Subroutine2
      13  ?Subroutine20
      10  ?Subroutine21
      18  ?Subroutine22
       4  ?Subroutine23
       4  ?Subroutine24
       9  ?Subroutine25
      15  ?Subroutine26
       4  ?Subroutine27
      11  ?Subroutine28
      17  ?Subroutine29
       5  ?Subroutine3
      15  ?Subroutine30
      12  ?Subroutine31
      11  ?Subroutine32
      13  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
      15  ?Subroutine36
       7  ?Subroutine37
      11  ?Subroutine38
      16  ?Subroutine39
       3  ?Subroutine4
       7  ?Subroutine5
       5  ?Subroutine6
       6  ?Subroutine7
      15  ?Subroutine8
       7  ?Subroutine9
   12288  _nvBuf
     139  calcChkF
       6  calcChkF::?relay
     595  compactPage
       6  compactPage::?relay
      30  erasePage
       6  erasePage::?relay
      64  findItem
       6  findItem::?relay
       1  findPg
       6  hotIds
      39  hotItem
       6  hotItem::?relay
      39  hotItemUpdate
       6  hotItemUpdate::?relay
       6  hotOff
       3  hotPg
     365  initItem
       6  initItem::?relay
     292  initNV
       6  initNV::?relay
     441  initPage
       6  initPage::?relay
      93  osal_nv_delete
       6  osal_nv_delete::?relay
       9  osal_nv_init
       6  osal_nv_init::?relay
      86  osal_nv_item_init
       6  osal_nv_item_init::?relay
     111  osal_nv_item_len
       6  osal_nv_item_len::?relay
     130  osal_nv_read
       6  osal_nv_read::?relay
     743  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
      88  setChk
       6  setChk::?relay
     120  setItem
       6  setItem::?relay
      52  setPageUse
       6  setPageUse::?relay
     328  writeBuf
       6  writeBuf::?relay
     507  writeItem
       6  writeItem::?relay
      58  writeWord
       6  writeWord::?relay
      66  writeWordH
       6  writeWordH::?relay
     346  xferBuf
       6  xferBuf::?relay

 
  5 160 bytes in segment BANKED_CODE
    138 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
    138 bytes of CODE     memory
      6 bytes of CONST    memory
  5 160 bytes of HUGECODE memory
 12 323 bytes of XDATA    memory

Errors: none
Warnings: none
