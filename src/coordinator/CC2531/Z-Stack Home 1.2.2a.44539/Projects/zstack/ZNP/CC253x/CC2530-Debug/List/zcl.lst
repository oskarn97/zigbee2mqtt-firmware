###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:06
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EWA90.tmp ("C:\Texas
#        Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl.c" -D
#        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\zcl.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\zcl.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52          
     53          /*********************************************************************
     54           * MACROS
     55           */
     56          /*** Frame Control ***/
     57          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     58          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     59          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     60          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     61          
     62          /*** Attribute Access Control ***/
     63          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     64          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     65          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     66          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     67          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     68          
     69          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     70          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     71          
     72          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     73                                                  (zclHdr).fc.manuSpecific == 0          && \
     74                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     75          
     76          // Commands that have corresponding responses
     77          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     78                                                  (cmd) == ZCL_CMD_WRITE                  || \
     79                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     80                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     81                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     82                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     83                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     84                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     85                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     86                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     87          #define  ZCL_VALID_MIN_HEADER_LEN  3
     88          
     89          /*********************************************************************
     90           * CONSTANTS
     91           */
     92          
     93          /*********************************************************************
     94           * TYPEDEFS
     95           */
     96          typedef struct zclLibPlugin
     97          {
     98            struct zclLibPlugin *next;
     99            uint16              startClusterID;    // starting cluster ID
    100            uint16              endClusterID;      // ending cluster ID
    101            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    102          } zclLibPlugin_t;
    103          
    104          // Command record list
    105          typedef struct zclCmdRecsList
    106          {
    107            struct zclCmdRecsList *pNext;
    108            uint8                 endpoint;
    109            uint8                 numCommands;
    110            CONST zclCommandRec_t *pCmdRecs;
    111          } zclCmdRecsList_t;
    112          
    113          // Attribute record list item
    114          typedef struct zclAttrRecsList
    115          {
    116            struct zclAttrRecsList *next;
    117            uint8                  endpoint;      // Used to link it into the endpoint descriptor
    118            zclReadWriteCB_t       pfnReadWriteCB;// Read or Write attribute value callback function
    119            zclAuthorizeCB_t       pfnAuthorizeCB;// Authorize Read or Write operation
    120            uint8                  numAttributes; // Number of the following records
    121            CONST zclAttrRec_t     *attrs;        // attribute records
    122          } zclAttrRecsList;
    123          
    124          // Cluster option list item
    125          typedef struct zclClusterOptionList
    126          {
    127            struct zclClusterOptionList *next;
    128            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    129            uint8                       numOptions; // Number of the following records
    130            zclOptionRec_t              *options;   // option records
    131          } zclClusterOptionList;
    132          
    133          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    134          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    135          
    136          typedef struct
    137          {
    138            zclParseInProfileCmd_t   pfnParseInProfile;
    139            zclProcessInProfileCmd_t pfnProcessInProfile;
    140          } zclCmdItems_t;
    141          
    142          
    143          // List record for external handler for unhandled ZCL Foundation commands/rsps
    144          typedef struct zclExternalFoundationHandlerList
    145          {
    146              struct zclExternalFoundationHandlerList *next;
    147              uint8 zcl_ExternalTaskID;
    148              uint8 zcl_ExternalEndPoint;
    149          } zclExternalFoundationHandlerList;
    150          
    151          
    152          /*********************************************************************
    153           * GLOBAL VARIABLES
    154           */
    155          
    156          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    158          #endif
    159          
    160          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          // ZCL Sequence number

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 zcl_SeqNum = 0x00;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
   \                     zcl_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    167          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    169          
    170          /*********************************************************************
    171           * EXTERNAL VARIABLES
    172           */
    173          
    174          /*********************************************************************
    175           * EXTERNAL FUNCTIONS
    176           */
    177          
    178          /*********************************************************************
    179           * LOCAL VARIABLES
    180           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    182          
    183          #if defined ( ZCL_DISCOVER )
    184            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
    185          #endif
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    191          
    192          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    194          #endif
    195          
    196          /*********************************************************************
    197           * LOCAL FUNCTIONS
    198           */
    199          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    200          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    201          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    202          
    203          #if !defined ( ZCL_STANDALONE )
    204          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    205          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    206          #endif // !defined ( ZCL_STANDALONE )
    207          
    208          #if defined ( ZCL_DISCOVER )
    209            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    210          #endif
    211          
    212          static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    213          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    214          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    215          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    216          
    217          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    218          
    219          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    220          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    221          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    222          #endif // ZCL_READ || ZCL_WRITE
    223          
    224          #ifdef ZCL_READ
    225          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    226          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    227          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    228                                                   uint8 *pAttrData, uint16 *pDataLen );
    229          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    230          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    231          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    232          #endif // ZCL_READ
    233          
    234          #ifdef ZCL_WRITE
    235          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    236                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    237          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    238                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    239          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    240          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    241          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    242          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    243          #endif // ZCL_WRITE
    244          
    245          #ifdef ZCL_REPORT
    246          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    247          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    248          #endif // ZCL_REPORT
    249          
    250          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    251          
    252          #ifdef ZCL_DISCOVER
    253          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    254          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    255          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    256          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    257          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    258          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    259          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    260          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    261          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    262          #endif // ZCL_DISCOVER
    263          
    264          /*********************************************************************
    265           * Parse Profile Command Function Table
    266           */
    267          

   \                                 In  segment CODE_C, align 1
    268          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   0000         DW 0H
   \   00002A   0000         DW 0H
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   0000         DW 0H
   \   000032   0000         DW 0H
   \   000034   0000         DW 0H
   \   000036   0000         DW 0H
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   0000         DW 0H
   \   000046   0000         DW 0H
   \   000048   0000         DW 0H
   \   00004A   0000         DW 0H
   \   00004C   0000         DW 0H
   \   00004E   0000         DW 0H
   \   000050   0000         DW 0H
   \   000052   0000         DW 0H
   \   000054   0000         DW 0H
   \   000056   0000         DW 0H
   \   000058   0000         DW 0H
   \   00005A   0000         DW 0H
    269          {
    270          #ifdef ZCL_READ
    271            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    272            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    273          #else
    274            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    275            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    276          #endif // ZCL_READ
    277          
    278          #ifdef ZCL_WRITE
    279            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    280            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    281            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    282            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    283          #else
    284            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    285            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    286            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    287            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288          #endif // ZCL_WRITE
    289          
    290          #ifdef ZCL_REPORT
    291            /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    292            /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    293            /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    294            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    295            /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    296          #else
    297            /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    298            /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    299            /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    300            /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    301            /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    302          #endif // ZCL_REPORT
    303          
    304            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    305          
    306          #ifdef ZCL_DISCOVER
    307            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    308            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    309            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    310            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    311            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    312            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    313            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    314            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    315            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    316            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    317            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    318          #else
    319            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    320            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    321            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    322            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    323            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    324            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    325            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    326            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    327            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    328            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    329            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    330          #endif // ZCL_DISCOVER
    331          };
    332          
    333          /*********************************************************************
    334           * PUBLIC FUNCTIONS
    335           *********************************************************************/
    336          
    337          #if !defined ( ZCL_STANDALONE )
    338          /*********************************************************************
    339           * @fn          zcl_Init
    340           *
    341           * @brief       Initialization function for the zcl layer.
    342           *
    343           * @param       task_id - ZCL task id
    344           *
    345           * @return      none
    346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    348          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    349            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    350          }
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    351          #endif
    352          
    353          #if !defined ( ZCL_STANDALONE )
    354          /*********************************************************************
    355           * @fn          zcl_event_loop
    356           *
    357           * @brief       Event Loop Processor for zcl.
    358           *
    359           * @param       task_id - task id
    360           * @param       events - event bitmap
    361           *
    362           * @return      unprocessed events
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    366            uint8 *msgPtr;
    367          
    368            (void)task_id;  // Intentionally unreferenced parameter
    369          
    370            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV       A,R3
   \   00000A   5480         ANL       A,#0x80
   \   00000C   604D         JZ        ??zcl_event_loop_0
    371            {
    372              msgPtr = osal_msg_receive( zcl_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800E         SJMP      ??zcl_event_loop_1
    373              while ( msgPtr != NULL )
    374              {
    375                uint8 dealloc = TRUE;
    376          
    377                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    378                {
    379                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000010                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000010   EE           MOV       A,R6
   \   000011   FA           MOV       R2,A
   \   000012   EF           MOV       A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
    380                }
    381                else
    382                {
    383                  uint8 taskID;
    384                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
    385          
    386                  if ( taskID != TASK_NO_TASK )
    387                  {
    388                    // send it to another task to process.
    389                    osal_msg_send( taskID, msgPtr );
    390                    dealloc = FALSE;
    391                  }
    392                }
    393          
    394                // Release the memory
    395                if ( dealloc )
    396                {
    397                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   EE           MOV       A,R6
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    398                }
    399          
    400                // Next
    401                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   90....       MOV       DPTR,#zcl_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV       ?V2,R2
   \   000028   8B..         MOV       ?V3,R3
   \   00002A   AE..         MOV       R6,?V2
   \   00002C   AF..         MOV       R7,?V3
   \   00002E   EE           MOV       A,R6
   \   00002F   4F           ORL       A,R7
   \   000030   6020         JZ        ??zcl_event_loop_4
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   641A         XRL       A,#0x1a
   \   000039   60D5         JZ        ??zcl_event_loop_2
   \   00003B                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   00003B   EE           MOV       A,R6
   \   00003C   FA           MOV       R2,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000042   E9           MOV       A,R1
   \   000043   F9           MOV       R1,A
   \   000044   74FF         MOV       A,#-0x1
   \   000046   69           XRL       A,R1
   \   000047   60CE         JZ        ??zcl_event_loop_3
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000050   80CC         SJMP      ??zcl_event_loop_1
    402              }
    403          
    404              // return unprocessed events
    405              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   000052   AA..         MOV       R2,?V0
   \   000054   E5..         MOV       A,?V1
   \   000056   6480         XRL       A,#0x80
   \   000058   FB           MOV       R3,A
   \   000059   8004         SJMP      ??zcl_event_loop_5
    406            }
    407          
    408            // Discard unknown events
    409            return 0;
   \                     ??zcl_event_loop_0:
   \   00005B   7A00         MOV       R2,#0x0
   \   00005D   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   00005F   02....       LJMP      ??Subroutine52_0 & 0xFFFF
    410          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    411          #endif
    412          
    413          #if !defined ( ZCL_STANDALONE )
    414          /*********************************************************************
    415           * @fn      zcl_registerForMsg
    416           *
    417           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    418           *          messages that aren't processed to one task (if a task is
    419           *          registered).
    420           *
    421           * @param   taskId - task Id of the Application where commands will be sent to
    422           *
    423           * @return  TRUE if task registeration successful, FALSE otherwise
    424           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    426          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    427            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
    428          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000003                REQUIRE ??Subroutine58_0
   \   000003                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    429          
    430          /*********************************************************************
    431           * @fn      zcl_registerForMsgExt
    432           *
    433           * @brief   This function enables a Task to register to recieve all
    434           *          incoming Foundation Command/Response messages, for a particular
    435           *          End Point, that aren't processed by ZCL.
    436           *
    437           *          NOTE: Any Task registered for a unique end point will take
    438           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    439           *          value.  ie. If task A registers for End Point 1, task B registers
    440           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    441           *          sent to Task A and NOT Task B.
    442           *
    443           * @param   taskId - task Id of the Application where commands will be sent to
    444           * @param   endPointId - end point Id of interest
    445           *
    446           * @return  TRUE if task registeration successful, FALSE otherwise
    447           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    449          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    450            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   02....       LJMP      ?Subroutine2 & 0xFFFF
    451          }
    452          
    453          /*********************************************************************
    454           * @fn      zcl_addExternalFoundationHandler
    455           *
    456           * @brief   This function adds a record to the internal list of external
    457           *          handlers of unhandled incoming Foundation Command/Response messages.
    458           *
    459           * @param   taskId - task Id of the Application where commands will be sent to
    460           * @param   endPointId - end point Id of interest
    461           *
    462           * @return  TRUE if task registeration successful, FALSE otherwise
    463           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    464          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    466            zclExternalFoundationHandlerList *pNewItem;
    467            zclExternalFoundationHandlerList *pLoop;
    468            zclExternalFoundationHandlerList *pLoopPrev;
    469          
    470            // Fill in the new endpoint registrant list
    471            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   A8..         MOV       R0,?V0
   \   000016   A9..         MOV       R1,?V1
    472            if ( pNewItem == NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6031         JZ        ??zcl_addExternalFoundationHandler_0
    473            {
    474              return ( false );
    475            }
    476          
    477            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   00001C   EF           MOV       A,R7
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    478            pNewItem->zcl_ExternalTaskID = taskId;
   \   000025   EE           MOV       A,R6
   \   000026   8882         MOV       DPL,R0
   \   000028   8983         MOV       DPH,R1
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   12....       LCALL     ?Subroutine10 & 0xFFFF
    479            pNewItem->next = NULL;
    480          
    481            // Add to the list
    482            if ( externalEndPointHandlerList == NULL )
   \                     ??CrossCallReturnLabel_10:
   \   00002F   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000032   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000035   7009         JNZ       ??zcl_addExternalFoundationHandler_1
    483            {
    484              externalEndPointHandlerList = pNewItem;
   \   000037   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00003A   E8           MOV       A,R0
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   E9           MOV       A,R1
   \   00003E   803F         SJMP      ??zcl_addExternalFoundationHandler_2
    485            }
    486            else
    487            {
    488              // make sure no one else tried to register for this endpoint
    489              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FB           MOV       R3,A
    490              pLoopPrev = externalEndPointHandlerList;
    491          
    492              while ( pLoop != NULL )
    493              {
    494                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
   \                     ??zcl_addExternalFoundationHandler_3:
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   6F           XRL       A,R7
   \   00004B   7004         JNZ       ??zcl_addExternalFoundationHandler_4
    495                {
    496                  return ( false );
   \                     ??zcl_addExternalFoundationHandler_0:
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   8031         SJMP      ??zcl_addExternalFoundationHandler_5
    497                }
    498                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   000051   EA           MOV       A,R2
   \   000052   FC           MOV       R4,A
   \   000053   EB           MOV       A,R3
   \   000054   FD           MOV       R5,A
    499                pLoop = pLoop->next;
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   12....       LCALL     ?Subroutine20 & 0xFFFF
    500              }
   \                     ??CrossCallReturnLabel_29:
   \   00005C   70E4         JNZ       ??zcl_addExternalFoundationHandler_3
    501          
    502              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \   00005E   74FF         MOV       A,#-0x1
   \   000060   6F           XRL       A,R7
   \   000061   700C         JNZ       ??zcl_addExternalFoundationHandler_6
    503              {
    504                // put new registration at the end of the list
    505                pLoopPrev->next = pNewItem;
   \   000063   8C82         MOV       DPL,R4
   \   000065   8D83         MOV       DPH,R5
   \   000067   12....       LCALL     ?Subroutine16 & 0xFFFF
    506                pNewItem->next = NULL;
    507              }
   \                     ??CrossCallReturnLabel_24:
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   8010         SJMP      ??zcl_addExternalFoundationHandler_2
    508              else
    509              {
    510                // put new registration at the front of the list
    511                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_6:
   \   00006F   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000072   12....       LCALL     ??Subroutine51_0 & 0xFFFF
    512                externalEndPointHandlerList = pNewItem;
   \                     ??CrossCallReturnLabel_101:
   \   000075   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000078   12....       LCALL     ?Subroutine16 & 0xFFFF
    513                pNewItem->next = temp;
    514              }
    515            }
   \                     ??CrossCallReturnLabel_25:
   \   00007B   EA           MOV       A,R2
   \   00007C   F0           MOVX      @DPTR,A
   \   00007D   A3           INC       DPTR
   \   00007E   EB           MOV       A,R3
   \                     ??zcl_addExternalFoundationHandler_2:
   \   00007F   F0           MOVX      @DPTR,A
    516          
    517            return ( true );
   \   000080   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000082   02....       LJMP      ?Subroutine3 & 0xFFFF
    518          
    519          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    520          
    521          /*********************************************************************
    522           * @fn      zcl_getExternalFoundationHandler
    523           *
    524           * @brief   This function retrieves the Task ID of the task registered
    525           *          to received unhandled incoming Foundation Command/Response messages
    526           *          for a particular End Point ID.
    527           *
    528           * @param   pInMsg - recevied ZCL command
    529           *
    530           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    531           *          TASK_NO_TASK.
    532           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    534          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    535            zclExternalFoundationHandlerList *pLoop;
    536            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   2414         ADD       A,#0x14
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FA           MOV       R2,A
    537          
    538            // make sure no one else tried to register for this endpoint
    539            pLoop = externalEndPointHandlerList;
   \   00000F   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000012   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    540          
    541            while ( pLoop != NULL )
    542            {
    543              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    544                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    545              {
    546                return ( pLoop->zcl_ExternalTaskID );
    547              }
    548              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000018   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00001B   6020         JZ        ??zcl_getExternalFoundationHandler_2
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6A           XRL       A,R2
   \   000026   600B         JZ        ??zcl_getExternalFoundationHandler_3
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F4           CPL       A
   \   000031   70E1         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   000033   8882         MOV       DPL,R0
   \   000035   8983         MOV       DPH,R1
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    549            }
    550          
    551            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   00003D   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   00003F   02....       LJMP      ?Subroutine0 & 0xFFFF
    552          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    553          #endif
    554          
    555          #if !defined ( ZCL_STANDALONE )
    556          /*********************************************************************
    557           * @fn      zcl_HandleExternal
    558           *
    559           * @brief
    560           *
    561           * @param   pInMsg - incoming message to process
    562           *
    563           * @return  TRUE
    564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    566          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    567            zclIncomingMsg_t *pCmd;
    568            uint8 taskID;
    569          
    570            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000010   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000013   E9           MOV       A,R1
   \   000014   F5..         MOV       ?V0,A
    571          
    572            if ( taskID == TASK_NO_TASK )
   \   000016   74FF         MOV       A,#-0x1
   \   000018   65..         XRL       A,?V0
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    573            {
    574              return ( TRUE );
    575            }
    576          
    577            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   00001F                ; Setup parameters for call to function osal_msg_allocate
   \   00001F   7A19         MOV       R2,#0x19
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    578            if ( pCmd != NULL )
   \   000026   EA           MOV       A,R2
   \   000027   4B           ORL       A,R3
   \   000028   607A         JZ        ??zcl_HandleExternal_0
    579            {
    580              // fill in the message
    581              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   7434         MOV       A,#0x34
   \   000030   12....       LCALL     ?Subroutine13 & 0xFFFF
    582              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_18:
   \   000033   A3           INC       DPTR
   \   000034   EA           MOV       A,R2
   \   000035   2402         ADD       A,#0x2
   \   000037   FC           MOV       R4,A
   \   000038   E4           CLR       A
   \   000039   3B           ADDC      A,R3
   \   00003A   FD           MOV       R5,A
   \   00003B   7406         MOV       A,#0x6
   \   00003D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    583              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000047   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   EC           MOV       A,R4
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \   000059   ED           MOV       A,R5
   \   00005A   12....       LCALL     ?Subroutine9 & 0xFFFF
    584              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_8:
   \   00005D   A3           INC       DPTR
   \   00005E   EA           MOV       A,R2
   \   00005F   240A         ADD       A,#0xa
   \   000061   FC           MOV       R4,A
   \   000062   E4           CLR       A
   \   000063   3B           ADDC      A,R3
   \   000064   FD           MOV       R5,A
   \   000065   740C         MOV       A,#0xc
   \   000067   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    585              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000073   C0E0         PUSH      A
   \   000075   EA           MOV       A,R2
   \   000076   2416         ADD       A,#0x16
   \   000078   F582         MOV       DPL,A
   \   00007A   E4           CLR       A
   \   00007B   3B           ADDC      A,R3
   \   00007C   F583         MOV       DPH,A
   \   00007E   D0E0         POP       A
   \   000080   F0           MOVX      @DPTR,A
    586              pCmd->attrCmd   = pInMsg->attrCmd;
   \   000081   EE           MOV       A,R6
   \   000082   240C         ADD       A,#0xc
   \   000084   F8           MOV       R0,A
   \   000085   E4           CLR       A
   \   000086   3F           ADDC      A,R7
   \   000087   F9           MOV       R1,A
   \   000088   8882         MOV       DPL,R0
   \   00008A   8983         MOV       DPH,R1
   \   00008C   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00008F   EA           MOV       A,R2
   \   000090   2417         ADD       A,#0x17
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   3B           ADDC      A,R3
   \   000096   F583         MOV       DPH,A
   \   000098   EC           MOV       A,R4
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   A3           INC       DPTR
   \   00009B   ED           MOV       A,R5
   \   00009C   12....       LCALL     ?Subroutine10 & 0xFFFF
    587          
    588              // Application will free the attrCmd buffer
    589              pInMsg->attrCmd = NULL;
    590          
    591              /* send message through task message */
    592              osal_msg_send( taskID, (uint8 *)pCmd );
   \                     ??CrossCallReturnLabel_11:
   \   00009F                ; Setup parameters for call to function osal_msg_send
   \   00009F   A9..         MOV       R1,?V0
   \   0000A1   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    593            }
    594          
    595            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   0000A4   7901         MOV       R1,#0x1
   \   0000A6   02....       LJMP      ??Subroutine52_0 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine54_0
   \   000004                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   2414         ADD       A,#0x14
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET
    597          #endif
    598          
    599          
    600          /*********************************************************************
    601           * @fn          zcl_getRawAFMsg
    602           *
    603           * @brief       Call to get original unprocessed AF message
    604           *              (not parsed by ZCL).
    605           *
    606           *   NOTE:  This function can only be called during a ZCL callback function
    607           *          and the calling function must NOT change any data in the message.
    608           *
    609           * @param       none
    610           *
    611           * @return      pointer to original AF message, NULL if not processing
    612           *              AF message.
    613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    615          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    616            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00000A   80..         SJMP      ?Subroutine0
    617          }
    618          
    619          /*********************************************************************
    620           * @fn          zcl_getParsedTransSeqNum
    621           *
    622           * @brief       Call to the get the transaction sequence number from
    623           *              the incoming message.
    624           *
    625           *   NOTE:  This function can only be called during a ZCL callback function
    626           *          and the calling function must NOT change any data in the message.
    627           *
    628           * @param       none
    629           *
    630           * @return      transaction sequence number.
    631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    632          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    633          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    634            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0
    635          }
    636          
    637          /*********************************************************************
    638           * @fn          zcl_registerPlugin
    639           *
    640           * @brief       Add a Cluster Library handler
    641           *
    642           * @param       startClusterID - starting cluster ID
    643           * @param       endClusterID - ending cluster ID
    644           * @param       pfnHdlr - function pointer to incoming message handler
    645           *
    646           * @return      ZSuccess if OK
    647           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    648          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    649                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    650          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    651            zclLibPlugin_t *pNewItem;
    652            zclLibPlugin_t *pLoop;
    653          
    654            // Fill in the new profile list
    655            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    656            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerPlugin_0
    657            {
    658              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8041         SJMP      ??CrossCallReturnLabel_12
    659            }
    660          
    661            // Fill in the plugin record.
    662            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine12 & 0xFFFF
    663            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_15:
   \   00002E   A3           INC       DPTR
   \   00002F   E5..         MOV       A,?V0
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   12....       LCALL     ?Subroutine6 & 0xFFFF
    664            pNewItem->endClusterID = endClusterID;
    665            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \                     ??CrossCallReturnLabel_2:
   \   000036   740C         MOV       A,#0xc
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   EA           MOV       A,R2
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   EB           MOV       A,R3
   \   00004C   F0           MOVX      @DPTR,A
    666          
    667            // Find spot in list
    668            if (  plugins == NULL )
   \   00004D   90....       MOV       DPTR,#plugins
   \   000050   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000053   7008         JNZ       ??zcl_registerPlugin_1
    669            {
    670              plugins = pNewItem;
   \   000055   90....       MOV       DPTR,#plugins
   \   000058   8008         SJMP      ??zcl_registerPlugin_2
    671            }
    672            else
    673            {
    674              // Look for end of list
    675              pLoop = plugins;
    676              while ( pLoop->next != NULL )
    677              {
    678                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FA           MOV       R2,A
   \   00005C   A3           INC       DPTR
    679              }
   \                     ??zcl_registerPlugin_1:
   \   00005D   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000060   70F8         JNZ       ??zcl_registerPlugin_3
    680          
    681              // Put new item at end of list
    682              pLoop->next = pNewItem;
    683            }
   \                     ??zcl_registerPlugin_2:
   \   000062   12....       LCALL     ?Subroutine11 & 0xFFFF
    684          
    685            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_12:
   \   000065   80..         SJMP      ??Subroutine52_0
    686          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FB           MOV       R3,A
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   EC           MOV       A,R4
   \   00000C   4D           ORL       A,R5
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   8B83         MOV       DPH,R3
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E5..         MOV       A,?V1
   \   000002   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000005   A3           INC       DPTR
   \   000006   EE           MOV       A,R6
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EF           MOV       A,R7
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
    687          
    688          #ifdef ZCL_DISCOVER
    689          /*********************************************************************
    690           * @fn          zcl_registerCmdList
    691           *
    692           * @brief       Register a Command List with ZCL Foundation
    693           *
    694           * @param       endpoint - endpoint the attribute list belongs to
    695           * @param       newCmdList - array of command records
    696           *
    697           * @return      ZSuccess if OK
    698           */
    699          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
    700          {
    701            zclCmdRecsList_t *pNewItem;
    702            zclCmdRecsList_t *pLoop;
    703          
    704            // Fill in the new profile list
    705            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
    706            if ( pNewItem == NULL )
    707            {
    708              return (ZMemError);
    709            }
    710          
    711            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
    712            pNewItem->endpoint = endpoint;
    713            pNewItem->numCommands = cmdListSize;
    714            pNewItem->pCmdRecs = newCmdList;
    715          
    716            // Find spot in list
    717            if ( gpCmdList == NULL )
    718            {
    719              gpCmdList = pNewItem;
    720            }
    721            else
    722            {
    723              // Look for end of list
    724              pLoop = gpCmdList;
    725              while ( pLoop->pNext != NULL )
    726              {
    727                pLoop = pLoop->pNext;
    728              }
    729          
    730              // Put new item at end of list
    731              pLoop->pNext = pNewItem;
    732            }
    733          
    734            return ( ZSuccess );
    735          }
    736          #endif  // ZCL_DISCOVER
    737          
    738          /*********************************************************************
    739           * @fn          zcl_registerAttrList
    740           *
    741           * @brief       Register an Attribute List with ZCL Foundation
    742           *
    743           * @param       endpoint - endpoint the attribute list belongs to
    744           * @param       numAttr - number of attributes in list
    745           * @param       newAttrList - array of Attribute records.
    746           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    747           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    748           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    749           *
    750           * @return      ZSuccess if OK
    751           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    752          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    753          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    754            zclAttrRecsList *pNewItem;
    755            zclAttrRecsList *pLoop;
    756          
    757            // Fill in the new profile list
    758            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    759            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerAttrList_0
    760            {
    761              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   802C         SJMP      ??CrossCallReturnLabel_13
    762            }
    763          
    764            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000024   12....       LCALL     ?Subroutine5 & 0xFFFF
    765            pNewItem->endpoint = endpoint;
    766            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_0:
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ?Subroutine8 & 0xFFFF
    767            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_6:
   \   00002D   E5..         MOV       A,?V1
   \   00002F   12....       LCALL     ?Subroutine8 & 0xFFFF
    768            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_7:
   \   000032   A3           INC       DPTR
   \   000033   EE           MOV       A,R6
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EF           MOV       A,R7
   \   000037   F0           MOVX      @DPTR,A
    769          
    770            // Find spot in list
    771            if ( attrList == NULL )
   \   000038   90....       MOV       DPTR,#attrList
   \   00003B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00003E   7008         JNZ       ??zcl_registerAttrList_1
    772            {
    773              attrList = pNewItem;
   \   000040   90....       MOV       DPTR,#attrList
   \   000043   8008         SJMP      ??zcl_registerAttrList_2
    774            }
    775            else
    776            {
    777              // Look for end of list
    778              pLoop = attrList;
    779              while ( pLoop->next != NULL )
    780              {
    781                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   FA           MOV       R2,A
   \   000047   A3           INC       DPTR
    782              }
   \                     ??zcl_registerAttrList_1:
   \   000048   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00004B   70F8         JNZ       ??zcl_registerAttrList_3
    783          
    784              // Put new item at end of list
    785              pLoop->next = pNewItem;
    786            }
   \                     ??zcl_registerAttrList_2:
   \   00004D   12....       LCALL     ?Subroutine11 & 0xFFFF
    787          
    788            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_13:
   \   000050   80..         SJMP      ??Subroutine52_0
    789          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E5..         MOV       A,?V0
   \   00000E   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000011   22           RET
    790          
    791          /*********************************************************************
    792           * @fn          zcl_registerClusterOptionList
    793           *
    794           * @brief       Register a Cluster Option List with ZCL Foundation
    795           *
    796           * @param       endpoint - endpoint the option list belongs to
    797           * @param       numOption - number of options in list
    798           * @param       optionList - array of cluster option records.
    799           *
    800           *              NOTE: This API should be called to enable 'Application
    801           *                    Link Key' security and/or 'APS ACK' for a specific
    802           *                    Cluster. The 'Application Link Key' is discarded
    803           *                    if security isn't enabled on the device.
    804           *                    The default behavior is 'Network Key' when security
    805           *                    is enabled and no 'APS ACK' for the ZCL messages.
    806           *
    807           * @return      ZSuccess if OK
    808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    809          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    811            zclClusterOptionList *pNewItem;
    812            zclClusterOptionList *pLoop;
    813          
    814            // Fill in the new profile list
    815            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    816            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerClusterOptionList_0
    817            {
    818              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   801E         SJMP      ??CrossCallReturnLabel_14
    819            }
    820          
    821            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   000024   12....       LCALL     ?Subroutine5 & 0xFFFF
    822            pNewItem->endpoint = endpoint;
    823            pNewItem->numOptions = numOption;
   \                     ??CrossCallReturnLabel_1:
   \   000027   12....       LCALL     ?Subroutine6 & 0xFFFF
    824            pNewItem->options = optionList;
    825          
    826            // Find spot in list
    827            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_3:
   \   00002A   90....       MOV       DPTR,#clusterOptionList
   \   00002D   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000030   7008         JNZ       ??zcl_registerClusterOptionList_1
    828            {
    829              clusterOptionList = pNewItem;
   \   000032   90....       MOV       DPTR,#clusterOptionList
   \   000035   8008         SJMP      ??zcl_registerClusterOptionList_2
    830            }
    831            else
    832            {
    833              // Look for end of list
    834              pLoop = clusterOptionList;
    835              while ( pLoop->next != NULL )
    836              {
    837                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FA           MOV       R2,A
   \   000039   A3           INC       DPTR
    838              }
   \                     ??zcl_registerClusterOptionList_1:
   \   00003A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00003D   70F8         JNZ       ??zcl_registerClusterOptionList_3
    839          
    840              // Put new item at end of list
    841              pLoop->next = pNewItem;
    842            }
   \                     ??zcl_registerClusterOptionList_2:
   \   00003F   12....       LCALL     ?Subroutine11 & 0xFFFF
    843          
    844            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_14:
   \   000042   02....       LJMP      ??Subroutine52_0 & 0xFFFF
    845          }
    846          
    847          /*********************************************************************
    848           * @fn          zcl_registerValidateAttrData
    849           *
    850           * @brief       Add a validation function for attribute data
    851           *
    852           * @param       pfnValidateAttrData - function pointer to validate routine
    853           *
    854           * @return      ZSuccess if OK
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    857          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    858            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   EA           MOV       A,R2
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   EB           MOV       A,R3
   \   00000B   F0           MOVX      @DPTR,A
    859          
    860            return ( ZSuccess );
   \   00000C   7900         MOV       R1,#0x0
   \   00000E   02....       LJMP      ?Subroutine0 & 0xFFFF
    861          }
    862          
    863          /*********************************************************************
    864           * @fn          zcl_registerReadWriteCB
    865           *
    866           * @brief       Register the application's callback function to read/write
    867           *              attribute data, and authorize read/write operation.
    868           *
    869           *              Note: The pfnReadWriteCB callback function is only required
    870           *                    when the attribute data format is unknown to ZCL. The
    871           *                    callback function gets called when the pointer 'dataPtr'
    872           *                    to the attribute value is NULL in the attribute database
    873           *                    registered with the ZCL.
    874           *
    875           *              Note: The pfnAuthorizeCB callback function is only required
    876           *                    when the Read/Write operation on an attribute requires
    877           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
    878           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
    879           *
    880           * @param       endpoint - application's endpoint
    881           * @param       pfnReadWriteCB - function pointer to read/write routine
    882           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
    883           *
    884           * @return      ZSuccess if successful. ZFailure, otherwise.
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
    887                                             zclAuthorizeCB_t pfnAuthorizeCB )
    888          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    889            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   A8..         MOV       R0,?V4
   \   000016   A9..         MOV       R1,?V5
    890          
    891            if ( pRec != NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6019         JZ        ??zcl_registerReadWriteCB_0
    892            {
    893              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   EE           MOV       A,R6
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EF           MOV       A,R7
   \   000027   12....       LCALL     ?Subroutine9 & 0xFFFF
    894              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_9:
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V1
   \   000030   F0           MOVX      @DPTR,A
    895          
    896              return ( ZSuccess );
   \   000031   7900         MOV       R1,#0x0
   \   000033   8002         SJMP      ??zcl_registerReadWriteCB_1
    897            }
    898          
    899            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   000035   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   000037                REQUIRE ?Subroutine4
   \   000037                ; // Fall through to label ?Subroutine4
    900          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    901          
    902          /*********************************************************************
    903           * @fn      zcl_DeviceOperational
    904           *
    905           * @brief   Used to see whether or not the device can send or respond
    906           *          to application level commands.
    907           *
    908           * @param   srcEP - source endpoint
    909           * @param   clusterID - cluster ID
    910           * @param   frameType - command type
    911           * @param   cmd - command ID
    912           *
    913           * @return  TRUE if device is operational, FALSE otherwise
    914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    915          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
    916                                              uint8 frameType, uint8 cmd, uint16 profileID )
    917          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
    918            zclAttrRec_t attrRec;
    919            uint8 deviceEnabled = DEVICE_ENABLED; // default value
    920          
    921            (void)profileID;  // Intentionally unreferenced parameter
    922          
    923            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
    924            // cannot send or respond to application level commands, other than commands
    925            // to read or write attributes. Note that the Identify cluster cannot be
    926            // disabled, and remains functional regardless of this setting.
    927            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   00000D   7006         JNZ       ??zcl_DeviceOperational_0
   \   00000F   ED           MOV       A,R5
   \   000010   C3           CLR       C
   \   000011   9406         SUBB      A,#0x6
   \   000013   4006         JC        ??zcl_DeviceOperational_1
    928            {
    929              return ( TRUE );
    930            }
    931          
    932            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000015   7403         MOV       A,#0x3
   \   000017   6A           XRL       A,R2
   \   000018   4B           ORL       A,R3
   \   000019   7007         JNZ       ??zcl_DeviceOperational_2
    933            {
    934              return ( TRUE );
   \                     ??zcl_DeviceOperational_1:
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   7408         MOV       A,#0x8
   \   00001F   02....       LJMP      ?Subroutine1 & 0xFFFF
    935            }
    936          
    937            // Is device enabled?
    938            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
    939                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \                     ??zcl_DeviceOperational_2:
   \   000022                ; Setup parameters for call to function zclFindAttrRec
   \   000022   A8..         MOV       R0,?XSP + 0
   \   000024   A9..         MOV       R1,?XSP + 1
   \   000026   88..         MOV       ?V2,R0
   \   000028   89..         MOV       ?V3,R1
   \   00002A   78..         MOV       R0,#?V2
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   7C12         MOV       R4,#0x12
   \   000031   7D00         MOV       R5,#0x0
   \   000033   7A00         MOV       R2,#0x0
   \   000035   7B00         MOV       R3,#0x0
   \   000037   EE           MOV       A,R6
   \   000038   F9           MOV       R1,A
   \   000039   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   80D8         SJMP      ??zcl_DeviceOperational_1
    940            {
    941          #ifdef ZCL_READ
    942              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
    943          #endif
    944            }
    945          
    946            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
    947          }
    948          
    949          /*********************************************************************
    950           * @fn      zcl_SendCommand
    951           *
    952           * @brief   Used to send Profile and Cluster Specific Command messages.
    953           *
    954           *          NOTE: The calling application is responsible for incrementing
    955           *                the Sequence Number.
    956           *
    957           * @param   srcEp - source endpoint
    958           * @param   destAddr - destination address
    959           * @param   clusterID - cluster ID
    960           * @param   cmd - command ID
    961           * @param   specific - whether the command is Cluster Specific
    962           * @param   direction - client/server direction of the command
    963           * @param   disableDefaultRsp - disable Default Response command
    964           * @param   manuCode - manufacturer code for proprietary extensions to a profile
    965           * @param   seqNumber - identification number for the transaction
    966           * @param   cmdFormatLen - length of the command to be sent
    967           * @param   cmdFormat - command to be sent
    968           *
    969           * @return  ZSuccess if OK
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
    972                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
    973                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
    974                                     uint16 cmdFormatLen, uint8 *cmdFormat )
    975          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V14,R2
   \   00000E   8B..         MOV       ?V15,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    976            endPointDesc_t *epDesc;
    977            zclFrameHdr_t hdr;
    978            uint8 *msgBuf;
    979            uint16 msgLen;
    980            uint8 *pBuf;
    981            uint8 options;
    982            ZStatus_t status;
    983          
    984            epDesc = afFindEndPointDesc( srcEP );
   \   000014                ; Setup parameters for call to function afFindEndPointDesc
   \   000014   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000017   8A..         MOV       ?V12,R2
   \   000019   8B..         MOV       ?V13,R3
    985            if ( epDesc == NULL )
   \   00001B   EA           MOV       A,R2
   \   00001C   45..         ORL       A,?V13
   \   00001E   7005         JNZ       ??zcl_SendCommand_0
    986            {
    987              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   000020   7902         MOV       R1,#0x2
   \   000022   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
    988            }
    989          
    990          #if defined ( INTER_PAN )
    991            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   \                     ??zcl_SendCommand_0:
   \   000025                ; Setup parameters for call to function StubAPS_InterPan
   \   000025   85..82       MOV       DPL,?V14
   \   000028   85..83       MOV       DPH,?V15
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F9           MOV       R1,A
   \   000036   85..82       MOV       DPL,?V14
   \   000039   85..83       MOV       DPH,?V15
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000049   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   00004C   E9           MOV       A,R1
   \   00004D   6005         JZ        ??zcl_SendCommand_2
    992            {
    993              options = AF_TX_OPTIONS_NONE;
   \   00004F   75..00       MOV       ?V2,#0x0
   \   000052   802C         SJMP      ??zcl_SendCommand_3
    994            }
    995            else
    996          #endif
    997            {
    998              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_2:
   \   000054                ; Setup parameters for call to function zclGetClusterOption
   \   000054   AA..         MOV       R2,?V0
   \   000056   AB..         MOV       R3,?V1
   \   000058   A9..         MOV       R1,?V3
   \   00005A   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00005D   E9           MOV       A,R1
   \   00005E   F5..         MOV       ?V2,A
    999          
   1000              // The cluster might not have been defined to use security but if this message
   1001              // is in response to another message that was using APS security this message
   1002              // will be sent with APS security
   1003              if ( !( options & AF_EN_SECURITY ) )
   \   000060   A2E6         MOV       C,0xE0 /* A   */.6
   \   000062   401C         JC        ??zcl_SendCommand_3
   1004              {
   1005                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000064   90....       MOV       DPTR,#rawAFMsg
   \   000067   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   1006          
   1007                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   1008                {
   1009                  options |= AF_EN_SECURITY;
   1010                }
   1011              }
   1012            }
   \                     ??CrossCallReturnLabel_126:
   \   00006A   6014         JZ        ??zcl_SendCommand_3
   \   00006C   E8           MOV       A,R0
   \   00006D   2419         ADD       A,#0x19
   \   00006F   F582         MOV       DPL,A
   \   000071   E4           CLR       A
   \   000072   39           ADDC      A,R1
   \   000073   F583         MOV       DPH,A
   \   000075   E0           MOVX      A,@DPTR
   \   000076   6401         XRL       A,#0x1
   \   000078   7006         JNZ       ??zcl_SendCommand_3
   \   00007A   E5..         MOV       A,?V2
   \   00007C   D2E6         SETB      0xE0 /* A   */.6
   \   00007E   F5..         MOV       ?V2,A
   1013          
   1014            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_3:
   \   000080                ; Setup parameters for call to function osal_memset
   \   000080   7C06         MOV       R4,#0x6
   \   000082   7D00         MOV       R5,#0x0
   \   000084   7900         MOV       R1,#0x0
   \   000086   AA..         MOV       R2,?XSP + 0
   \   000088   AB..         MOV       R3,?XSP + 1
   \   00008A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1015          
   1016            // Not Profile wide command (like READ, WRITE)
   1017            if ( specific )
   \   00008D   741F         MOV       A,#0x1f
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000095   6009         JZ        ??zcl_SendCommand_4
   1018            {
   1019              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   000097   E0           MOVX      A,@DPTR
   \   000098   54FC         ANL       A,#0xfc
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   4401         ORL       A,#0x1
   \   00009E   8003         SJMP      ??zcl_SendCommand_5
   1020            }
   1021            else
   1022            {
   1023              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_4:
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   54FC         ANL       A,#0xfc
   \                     ??zcl_SendCommand_5:
   \   0000A3   F0           MOVX      @DPTR,A
   1024            }
   1025          
   1026            if ( ( epDesc->simpleDesc == NULL ) ||
   1027                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1028                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \   0000A4   85..82       MOV       DPL,?V12
   \   0000A7   85..83       MOV       DPH,?V13
   \   0000AA   A3           INC       DPTR
   \   0000AB   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000AE   6036         JZ        ??zcl_SendCommand_6
   \   0000B0   741E         MOV       A,#0x1e
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   FE           MOV       R6,A
   \   0000B7                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000B7   85..82       MOV       DPL,?V12
   \   0000BA   85..83       MOV       DPH,?V13
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F583         MOV       DPH,A
   \   0000C4   8882         MOV       DPL,R0
   \   0000C6   A3           INC       DPTR
   \   0000C7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000CA   EE           MOV       A,R6
   \   0000CB   FD           MOV       R5,A
   \   0000CC   7402         MOV       A,#0x2
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   5403         ANL       A,#0x3
   \   0000D4   FC           MOV       R4,A
   \   0000D5   AA..         MOV       R2,?V0
   \   0000D7   AB..         MOV       R3,?V1
   \   0000D9   A9..         MOV       R1,?V3
   \   0000DB   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000DE   7402         MOV       A,#0x2
   \   0000E0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E3   E9           MOV       A,R1
   \   0000E4   7005         JNZ       ??zcl_SendCommand_7
   1029            {
   1030              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_6:
   \   0000E6   7901         MOV       R1,#0x1
   \   0000E8   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1031            }
   \                     ??zcl_SendCommand_7:
   \   0000EB   7422         MOV       A,#0x22
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   1032          
   1033            // Fill in the Maufacturer Code
   1034            if ( manuCode != 0 )
   \                     ??CrossCallReturnLabel_127:
   \   0000F3   6012         JZ        ??CrossCallReturnLabel_114
   1035            {
   1036              hdr.fc.manuSpecific = 1;
   \   0000F5   85..82       MOV       DPL,?XSP + 0
   \   0000F8   85..83       MOV       DPH,?XSP + 1
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   4404         ORL       A,#0x4
   \   0000FE   F0           MOVX      @DPTR,A
   1037              hdr.manuCode = manuCode;
   \   0000FF   7402         MOV       A,#0x2
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ?Subroutine17 & 0xFFFF
   1038            }
   1039          
   1040            // Set the Command Direction
   1041            if ( direction )
   \                     ??CrossCallReturnLabel_114:
   \   000107   7420         MOV       A,#0x20
   \   000109   12....       LCALL     ?XSTACK_DISP0_8
   \   00010C   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00010F   6005         JZ        ??zcl_SendCommand_8
   1042            {
   1043              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000111   E0           MOVX      A,@DPTR
   \   000112   4408         ORL       A,#0x8
   \   000114   8003         SJMP      ??zcl_SendCommand_9
   1044            }
   1045            else
   1046            {
   1047              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_8:
   \   000116   E0           MOVX      A,@DPTR
   \   000117   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_9:
   \   000119   F0           MOVX      @DPTR,A
   1048            }
   1049          
   1050            // Set the Disable Default Response field
   1051            if ( disableDefaultRsp )
   \   00011A   7421         MOV       A,#0x21
   \   00011C   12....       LCALL     ?XSTACK_DISP0_8
   \   00011F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000122   6005         JZ        ??zcl_SendCommand_10
   1052            {
   1053              hdr.fc.disableDefaultRsp = 1;
   \   000124   E0           MOVX      A,@DPTR
   \   000125   4410         ORL       A,#0x10
   \   000127   8003         SJMP      ??zcl_SendCommand_11
   1054            }
   1055            else
   1056            {
   1057              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_10:
   \   000129   E0           MOVX      A,@DPTR
   \   00012A   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_11:
   \   00012C   F0           MOVX      @DPTR,A
   1058            }
   1059          
   1060            // Fill in the Transaction Sequence Number
   1061            hdr.transSeqNum = seqNum;
   \   00012D   7424         MOV       A,#0x24
   \   00012F   12....       LCALL     ?XSTACK_DISP0_8
   \   000132   E0           MOVX      A,@DPTR
   \   000133   C0E0         PUSH      A
   \   000135   7404         MOV       A,#0x4
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   D0E0         POP       A
   \   00013C   F0           MOVX      @DPTR,A
   1062          
   1063            // Fill in the command
   1064            hdr.commandID = cmd;
   \   00013D   7405         MOV       A,#0x5
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   EE           MOV       A,R6
   \   000143   F0           MOVX      @DPTR,A
   1065          
   1066            // calculate the needed buffer size
   1067            msgLen = zclCalcHdrSize( &hdr );
   \   000144   7803         MOV       R0,#0x3
   \   000146   85..82       MOV       DPL,?XSP + 0
   \   000149   85..83       MOV       DPH,?XSP + 1
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   5404         ANL       A,#0x4
   \   00014F   6002         JZ        ??zcl_SendCommand_12
   \   000151   7805         MOV       R0,#0x5
   \                     ??zcl_SendCommand_12:
   \   000153   7425         MOV       A,#0x25
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   E0           MOVX      A,@DPTR
   \   000159   F5..         MOV       ?V10,A
   \   00015B   A3           INC       DPTR
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F5..         MOV       ?V11,A
   1068            msgLen += cmdFormatLen;
   \   00015F   E8           MOV       A,R0
   \   000160   25..         ADD       A,?V10
   \   000162   FE           MOV       R6,A
   \   000163   E4           CLR       A
   \   000164   35..         ADDC      A,?V11
   \   000166   FF           MOV       R7,A
   1069          
   1070            // Allocate the buffer needed
   1071            msgBuf = zcl_mem_alloc( msgLen );
   \   000167                ; Setup parameters for call to function osal_mem_alloc
   \   000167   EE           MOV       A,R6
   \   000168   FA           MOV       R2,A
   \   000169   EF           MOV       A,R7
   \   00016A   FB           MOV       R3,A
   \   00016B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00016E   8A..         MOV       ?V8,R2
   \   000170   8B..         MOV       ?V9,R3
   1072            if ( msgBuf != NULL )
   \   000172   EA           MOV       A,R2
   \   000173   45..         ORL       A,?V9
   \   000175   606E         JZ        ??zcl_SendCommand_13
   1073            {
   1074              // Fill in the ZCL Header
   1075              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   000177                ; Setup parameters for call to function zclBuildHdr
   \   000177   AC..         MOV       R4,?V8
   \   000179   AD..         MOV       R5,?V9
   \   00017B   AA..         MOV       R2,?XSP + 0
   \   00017D   AB..         MOV       R3,?XSP + 1
   \   00017F   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1076          
   1077              // Fill in the command frame
   1078              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   000182                ; Setup parameters for call to function osal_memcpy
   \   000182   7427         MOV       A,#0x27
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   E0           MOVX      A,@DPTR
   \   000188   F5..         MOV       ?V4,A
   \   00018A   A3           INC       DPTR
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   F5..         MOV       ?V5,A
   \   00018E   75..00       MOV       ?V6,#0x0
   \   000191   78..         MOV       R0,#?V4
   \   000193   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000196   AC..         MOV       R4,?V10
   \   000198   AD..         MOV       R5,?V11
   \   00019A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00019D   7403         MOV       A,#0x3
   \   00019F   12....       LCALL     ?DEALLOC_XSTACK8
   1079          
   1080              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1081                                       &zcl_TransID, options, AF_DEFAULT_RADIUS );
   \   0001A2                ; Setup parameters for call to function AF_DataRequest
   \   0001A2   75..1E       MOV       ?V4,#0x1e
   \   0001A5   78..         MOV       R0,#?V4
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AA   75....       MOV       ?V4,#zcl_TransID & 0xff
   \   0001AD   75....       MOV       ?V5,#(zcl_TransID >> 8) & 0xff
   \   0001B0   78..         MOV       R0,#?V4
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   78..         MOV       R0,#?V8
   \   0001B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BA   8E..         MOV       ?V4,R6
   \   0001BC   8F..         MOV       ?V5,R7
   \   0001BE   78..         MOV       R0,#?V4
   \   0001C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C3   78..         MOV       R0,#?V0
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C8   A9..         MOV       R1,?V2
   \   0001CA   AC..         MOV       R4,?V12
   \   0001CC   AD..         MOV       R5,?V13
   \   0001CE   AA..         MOV       R2,?V14
   \   0001D0   AB..         MOV       R3,?V15
   \   0001D2   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001D5   7409         MOV       A,#0x9
   \   0001D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DA   E9           MOV       A,R1
   \   0001DB   FE           MOV       R6,A
   1082              zcl_mem_free ( msgBuf );
   \   0001DC                ; Setup parameters for call to function osal_mem_free
   \   0001DC   AA..         MOV       R2,?V8
   \   0001DE   AB..         MOV       R3,?V9
   \   0001E0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001E3   8002         SJMP      ??zcl_SendCommand_14
   1083            }
   1084            else
   1085            {
   1086              status = ZMemError;
   \                     ??zcl_SendCommand_13:
   \   0001E5   7E10         MOV       R6,#0x10
   1087            }
   1088          
   1089            return ( status );
   \                     ??zcl_SendCommand_14:
   \   0001E7   EE           MOV       A,R6
   \   0001E8   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   0001E9   7406         MOV       A,#0x6
   \   0001EB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EE   7F10         MOV       R7,#0x10
   \   0001F0   02....       LJMP      ?BANKED_LEAVE_XDATA
   1090          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine53_0
   \   000001                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0
   1091          
   1092          #ifdef ZCL_READ
   1093          /*********************************************************************
   1094           * @fn      zcl_SendRead
   1095           *
   1096           * @brief   Send a Read command
   1097           *
   1098           * @param   srcEP - Application's endpoint
   1099           * @param   dstAddr - destination address
   1100           * @param   clusterID - cluster ID
   1101           * @param   readCmd - read command to be sent
   1102           * @param   direction - direction of the command
   1103           * @param   seqNum - transaction sequence number
   1104           *
   1105           * @return  ZSuccess if OK
   1106           */
   1107          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   1108                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1109                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1110          {
   1111            uint16 dataLen;
   1112            uint8 *buf;
   1113            uint8 *pBuf;
   1114            ZStatus_t status;
   1115          
   1116            dataLen = readCmd->numAttr * 2; // Attribute ID
   1117          
   1118            buf = zcl_mem_alloc( dataLen );
   1119            if ( buf != NULL )
   1120            {
   1121              uint8 i;
   1122          
   1123              // Load the buffer - serially
   1124              pBuf = buf;
   1125              for (i = 0; i < readCmd->numAttr; i++)
   1126              {
   1127                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   1128                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   1129              }
   1130          
   1131              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1132                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1133              zcl_mem_free( buf );
   1134            }
   1135            else
   1136            {
   1137              status = ZMemError;
   1138            }
   1139          
   1140            return ( status );
   1141          }
   1142          
   1143          /*********************************************************************
   1144           * @fn      zcl_SendReadRsp
   1145           *
   1146           * @brief   Send a Read Response command.
   1147           *
   1148           * @param   srcEP - Application's endpoint
   1149           * @param   dstAddr - destination address
   1150           * @param   clusterID - cluster ID
   1151           * @param   readRspCmd - read response command to be sent
   1152           * @param   direction - direction of the command
   1153           * @param   seqNum - transaction sequence number
   1154           *
   1155           * @return  ZSuccess if OK
   1156           */
   1157          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   1158                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1159                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1160          {
   1161            uint8 *buf;
   1162            uint16 len = 0;
   1163            ZStatus_t status;
   1164            uint8 i;
   1165          
   1166            // calculate the size of the command
   1167            for ( i = 0; i < readRspCmd->numAttr; i++ )
   1168            {
   1169              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1170          
   1171              len += 2 + 1; // Attribute ID + Status
   1172          
   1173              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1174              {
   1175                len++; // Attribute Data Type length
   1176          
   1177                // Attribute Data length
   1178                if ( statusRec->data != NULL )
   1179                {
   1180                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1181                }
   1182                else
   1183                {
   1184                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   1185                }
   1186              }
   1187            }
   1188          
   1189            buf = zcl_mem_alloc( len );
   1190            if ( buf != NULL )
   1191            {
   1192              // Load the buffer - serially
   1193              uint8 *pBuf = buf;
   1194          
   1195              for ( i = 0; i < readRspCmd->numAttr; i++ )
   1196              {
   1197                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1198          
   1199                *pBuf++ = LO_UINT16( statusRec->attrID );
   1200                *pBuf++ = HI_UINT16( statusRec->attrID );
   1201                *pBuf++ = statusRec->status;
   1202          
   1203                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1204                {
   1205                  *pBuf++ = statusRec->dataType;
   1206          
   1207                  if ( statusRec->data != NULL )
   1208                  {
   1209                    // Copy attribute data to the buffer to be sent out
   1210                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1211                  }
   1212                  else
   1213                  {
   1214                    uint16 dataLen;
   1215          
   1216                    // Read attribute data directly into the buffer to be sent out
   1217                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   1218                    pBuf += dataLen;
   1219                  }
   1220                }
   1221              } // for loop
   1222          
   1223              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1224                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   1225              zcl_mem_free( buf );
   1226            }
   1227            else
   1228            {
   1229              status = ZMemError;
   1230            }
   1231          
   1232            return ( status );
   1233          }
   1234          #endif // ZCL_READ
   1235          
   1236          #ifdef ZCL_WRITE
   1237          /*********************************************************************
   1238           * @fn      sendWriteRequest
   1239           *
   1240           * @brief   Send a Write command
   1241           *
   1242           * @param   dstAddr - destination address
   1243           * @param   clusterID - cluster ID
   1244           * @param   writeCmd - write command to be sent
   1245           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1246           * @param   direction - direction of the command
   1247           * @param   seqNum - transaction sequence number
   1248           *
   1249           * @return  ZSuccess if OK
   1250           */
   1251          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   1252                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1253                                          uint8 disableDefaultRsp, uint8 seqNum )
   1254          {
   1255            uint8 *buf;
   1256            uint16 dataLen = 0;
   1257            ZStatus_t status;
   1258            uint8 i;
   1259          
   1260            for ( i = 0; i < writeCmd->numAttr; i++ )
   1261            {
   1262              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   1263          
   1264              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1265          
   1266              // Attribute Data
   1267              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   1268            }
   1269          
   1270            buf = zcl_mem_alloc( dataLen );
   1271            if ( buf != NULL )
   1272            {
   1273              // Load the buffer - serially
   1274              uint8 *pBuf = buf;
   1275              for ( i = 0; i < writeCmd->numAttr; i++ )
   1276              {
   1277                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   1278          
   1279                *pBuf++ = LO_UINT16( statusRec->attrID );
   1280                *pBuf++ = HI_UINT16( statusRec->attrID );
   1281                *pBuf++ = statusRec->dataType;
   1282          
   1283                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   1284              }
   1285          
   1286              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1287                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1288              zcl_mem_free( buf );
   1289            }
   1290            else
   1291            {
   1292              status = ZMemError;
   1293            }
   1294          
   1295            return ( status);
   1296          }
   1297          
   1298          /*********************************************************************
   1299           * @fn      zcl_SendWriteRsp
   1300           *
   1301           * @brief   Send a Write Response command
   1302           *
   1303           * @param   dstAddr - destination address
   1304           * @param   clusterID - cluster ID
   1305           * @param   wrtieRspCmd - write response command to be sent
   1306           * @param   direction - direction of the command
   1307           * @param   seqNum - transaction sequence number
   1308           *
   1309           * @return  ZSuccess if OK
   1310           */
   1311          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   1312                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1313                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1314          {
   1315            uint16 dataLen;
   1316            uint8 *buf;
   1317            ZStatus_t status;
   1318          
   1319            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   1320          
   1321            buf = zcl_mem_alloc( dataLen );
   1322            if ( buf != NULL )
   1323            {
   1324              // Load the buffer - serially
   1325              uint8 i;
   1326              uint8 *pBuf = buf;
   1327              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   1328              {
   1329                *pBuf++ = writeRspCmd->attrList[i].status;
   1330                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   1331                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   1332              }
   1333          
   1334              // If there's only a single status record and its status field is set to
   1335              // SUCCESS then omit the attribute ID field.
   1336              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   1337              {
   1338                dataLen = 1;
   1339              }
   1340          
   1341              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1342                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1343              zcl_mem_free( buf );
   1344            }
   1345            else
   1346            {
   1347              status = ZMemError;
   1348            }
   1349          
   1350            return ( status );
   1351          }
   1352          #endif // ZCL_WRITE
   1353          
   1354          #ifdef ZCL_REPORT
   1355          /*********************************************************************
   1356           * @fn      zcl_SendConfigReportCmd
   1357           *
   1358           * @brief   Send a Configure Reporting command
   1359           *
   1360           * @param   dstAddr - destination address
   1361           * @param   clusterID - cluster ID
   1362           * @param   cfgReportCmd - configure reporting command to be sent
   1363           * @param   direction - direction of the command
   1364           * @param   seqNum - transaction sequence number
   1365           *
   1366           * @return  ZSuccess if OK
   1367           */
   1368          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1369                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1370                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1371          {
   1372            uint8 *buf;
   1373            uint16 dataLen = 0;
   1374            ZStatus_t status;
   1375            uint8 i;
   1376          
   1377            // Find out the data length
   1378            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1379            {
   1380              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1381          
   1382              dataLen += 1 + 2; // Direction + Attribute ID
   1383          
   1384              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1385              {
   1386                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1387          
   1388                // Find out the size of the Reportable Change field (for Analog data types)
   1389                if ( zclAnalogDataType( reportRec->dataType ) )
   1390                {
   1391                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1392                }
   1393              }
   1394              else
   1395              {
   1396                dataLen += 2; // Timeout Period
   1397              }
   1398            }
   1399          
   1400            buf = zcl_mem_alloc( dataLen );
   1401            if ( buf != NULL )
   1402            {
   1403              // Load the buffer - serially
   1404              uint8 *pBuf = buf;
   1405          
   1406              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1407              {
   1408                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1409          
   1410                *pBuf++ = reportRec->direction;
   1411                *pBuf++ = LO_UINT16( reportRec->attrID );
   1412                *pBuf++ = HI_UINT16( reportRec->attrID );
   1413          
   1414                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1415                {
   1416                  *pBuf++ = reportRec->dataType;
   1417                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1418                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1419                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1420                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1421          
   1422                  if ( zclAnalogDataType( reportRec->dataType ) )
   1423                  {
   1424                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1425                  }
   1426                }
   1427                else
   1428                {
   1429                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   1430                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1431                }
   1432              } // for loop
   1433          
   1434              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1435                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1436              zcl_mem_free( buf );
   1437            }
   1438            else
   1439            {
   1440              status = ZMemError;
   1441            }
   1442          
   1443            return ( status );
   1444          }
   1445          
   1446          /*********************************************************************
   1447           * @fn      zcl_SendConfigReportRspCmd
   1448           *
   1449           * @brief   Send a Configure Reporting Response command
   1450           *
   1451           * @param   dstAddr - destination address
   1452           * @param   clusterID - cluster ID
   1453           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1454           * @param   direction - direction of the command
   1455           * @param   seqNum - transaction sequence number
   1456           *
   1457           * @return  ZSuccess if OK
   1458           */
   1459          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1460                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1461                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1462          {
   1463            uint16 dataLen;
   1464            uint8 *buf;
   1465            ZStatus_t status;
   1466          
   1467            // Atrribute list (Status, Direction and Attribute ID)
   1468            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   1469          
   1470            buf = zcl_mem_alloc( dataLen );
   1471            if ( buf != NULL )
   1472            {
   1473              // Load the buffer - serially
   1474              uint8 *pBuf = buf;
   1475              uint8 i;
   1476          
   1477              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   1478              {
   1479                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   1480                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   1481                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1482                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1483              }
   1484          
   1485              // If there's only a single status record and its status field is set to
   1486              // SUCCESS then omit the attribute ID field.
   1487              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   1488              {
   1489                dataLen = 1;
   1490              }
   1491          
   1492              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1493                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1494                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   1495              zcl_mem_free( buf );
   1496            }
   1497            else
   1498            {
   1499              status = ZMemError;
   1500            }
   1501          
   1502            return ( status );
   1503          }
   1504          
   1505          /*********************************************************************
   1506           * @fn      zcl_SendReadReportCfgCmd
   1507           *
   1508           * @brief   Send a Read Reporting Configuration command
   1509           *
   1510           * @param   dstAddr - destination address
   1511           * @param   clusterID - cluster ID
   1512           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1513           * @param   direction - direction of the command
   1514           * @param   seqNum - transaction sequence number
   1515           *
   1516           * @return  ZSuccess if OK
   1517           */
   1518          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1519                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1520                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1521          {
   1522            uint16 dataLen;
   1523            uint8 *buf;
   1524            ZStatus_t status;
   1525          
   1526            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1527          
   1528            buf = zcl_mem_alloc( dataLen );
   1529            if ( buf != NULL )
   1530            {
   1531              // Load the buffer - serially
   1532              uint8 *pBuf = buf;
   1533              uint8 i;
   1534          
   1535              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   1536              {
   1537                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   1538                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1539                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1540              }
   1541          
   1542              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1543                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1544              zcl_mem_free( buf );
   1545            }
   1546            else
   1547            {
   1548              status = ZMemError;
   1549            }
   1550          
   1551            return ( status );
   1552          }
   1553          
   1554          /*********************************************************************
   1555           * @fn      zcl_SendReadReportCfgRspCmd
   1556           *
   1557           * @brief   Send a Read Reporting Configuration Response command
   1558           *
   1559           * @param   dstAddr - destination address
   1560           * @param   clusterID - cluster ID
   1561           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1562           * @param   direction - direction of the command
   1563           * @param   seqNum - transaction sequence number
   1564           *
   1565           * @return  ZSuccess if OK
   1566           */
   1567          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1568                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1569                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1570          {
   1571            uint8 *buf;
   1572            uint16 dataLen = 0;
   1573            ZStatus_t status;
   1574            uint8 i;
   1575          
   1576            // Find out the data length
   1577            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1578            {
   1579              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1580          
   1581              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1582          
   1583              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1584              {
   1585                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1586                {
   1587                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1588          
   1589                  // Find out the size of the Reportable Change field (for Analog data types)
   1590                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1591                  {
   1592                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1593                  }
   1594                }
   1595                else
   1596                {
   1597                  dataLen += 2; // Timeout Period
   1598                }
   1599              }
   1600            }
   1601          
   1602            buf = zcl_mem_alloc( dataLen );
   1603            if ( buf != NULL )
   1604            {
   1605              // Load the buffer - serially
   1606              uint8 *pBuf = buf;
   1607          
   1608              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1609              {
   1610                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1611          
   1612                *pBuf++ = reportRspRec->status;
   1613                *pBuf++ = reportRspRec->direction;
   1614                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1615                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1616          
   1617                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1618                {
   1619                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1620                  {
   1621                    *pBuf++ = reportRspRec->dataType;
   1622                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1623                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1624                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1625                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1626          
   1627                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1628                    {
   1629                      pBuf = zclSerializeData( reportRspRec->dataType,
   1630                                               reportRspRec->reportableChange, pBuf );
   1631                    }
   1632                  }
   1633                  else
   1634                  {
   1635                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1636                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1637                  }
   1638                }
   1639              }
   1640          
   1641              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1642                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1643                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1644              zcl_mem_free( buf );
   1645            }
   1646            else
   1647            {
   1648              status = ZMemError;
   1649            }
   1650          
   1651            return ( status );
   1652          }
   1653          
   1654          /*********************************************************************
   1655           * @fn      zcl_SendReportCmd
   1656           *
   1657           * @brief   Send a Report command
   1658           *
   1659           * @param   dstAddr - destination address
   1660           * @param   clusterID - cluster ID
   1661           * @param   reportCmd - report command to be sent
   1662           * @param   direction - direction of the command
   1663           * @param   seqNum - transaction sequence number
   1664           *
   1665           * @return  ZSuccess if OK
   1666           */
   1667          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1668                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1669                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1670          {
   1671            uint16 dataLen = 0;
   1672            uint8 *buf;
   1673            ZStatus_t status;
   1674            uint8 i;
   1675          
   1676            // calculate the size of the command
   1677            for ( i = 0; i < reportCmd->numAttr; i++ )
   1678            {
   1679              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1680          
   1681              dataLen += 2 + 1; // Attribute ID + data type
   1682          
   1683              // Attribute Data
   1684              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1685            }
   1686          
   1687            buf = zcl_mem_alloc( dataLen );
   1688            if ( buf != NULL )
   1689            {
   1690              // Load the buffer - serially
   1691              uint8 *pBuf = buf;
   1692          
   1693              for ( i = 0; i < reportCmd->numAttr; i++ )
   1694              {
   1695                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1696          
   1697                *pBuf++ = LO_UINT16( reportRec->attrID );
   1698                *pBuf++ = HI_UINT16( reportRec->attrID );
   1699                *pBuf++ = reportRec->dataType;
   1700          
   1701                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1702              }
   1703          
   1704              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1705                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1706              zcl_mem_free( buf );
   1707            }
   1708            else
   1709            {
   1710              status = ZMemError;
   1711            }
   1712          
   1713            return ( status );
   1714          }
   1715          #endif // ZCL_REPORT
   1716          
   1717          /*********************************************************************
   1718           * @fn      zcl_SendDefaultRspCmd
   1719           *
   1720           * @brief   Send a Default Response command
   1721           *
   1722           *          Note: The manufacturer code field should be set if this
   1723           *          command is being sent in response to a manufacturer specific
   1724           *          command.
   1725           *
   1726           * @param   dstAddr - destination address
   1727           * @param   clusterID - cluster ID
   1728           * @param   defaultRspCmd - default response command to be sent
   1729           * @param   direction - direction of the command
   1730           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1731           * @param   seqNum - transaction sequence number
   1732           *
   1733           * @return  ZSuccess if OK
   1734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1735          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1736                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1737                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1738          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine35 & 0xFFFF
   1739            uint8 buf[2]; // Command ID and Status;
   1740          
   1741            // Load the buffer - serially
   1742            buf[0] = defaultRspCmd->commandID;
   \                     ??CrossCallReturnLabel_64:
   \   000014   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000017   12....       LCALL     ?Subroutine12 & 0xFFFF
   1743            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_16:
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   C0E0         PUSH      A
   \   00001D   7401         MOV       A,#0x1
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
   1744          
   1745            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1746                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \   000025                ; Setup parameters for call to function zcl_SendCommand
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V0,R0
   \   00002B   89..         MOV       ?V1,R1
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..02       MOV       ?V0,#0x2
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7416         MOV       A,#0x16
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000048   7415         MOV       A,#0x15
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000050   7416         MOV       A,#0x16
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   7416         MOV       A,#0x16
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   75..00       MOV       ?V0,#0x0
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006E   75..0B       MOV       ?V0,#0xb
   \   000071   78..         MOV       R0,#?V0
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000076   EE           MOV       A,R6
   \   000077   F9           MOV       R1,A
   \   000078   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00007B   740B         MOV       A,#0xb
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   7402         MOV       A,#0x2
   \   000082   12....       LCALL     ?DEALLOC_XSTACK8
   \   000085   02....       LJMP      ?Subroutine3 & 0xFFFF
   1747          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET
   1748          
   1749          #ifdef ZCL_DISCOVER
   1750          /*********************************************************************
   1751           * @fn      zcl_SendDiscoverCmdsCmd
   1752           *
   1753           * @brief   Send a Discover Commands command
   1754           *
   1755           * @param   dstAddr - destination address
   1756           * @param   clusterID - cluster ID
   1757           * @param   cmdType - requesting command ID
   1758           * @param   pDiscoverCmd - discover command to be sent
   1759           * @param   direction - direction of the command
   1760           * @param   seqNum - transaction sequence number
   1761           *
   1762           * @return  ZSuccess if OK
   1763           */
   1764          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   1765                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1766                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1767          {
   1768            uint8 payload[2]; // size of startCmdID and maxCmdID
   1769            ZStatus_t status;
   1770          
   1771            payload[0] = pDiscoverCmd->startCmdID;
   1772            payload[1] = pDiscoverCmd->maxCmdID;
   1773          
   1774            // Send message for either commands received or generated
   1775            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   1776            {
   1777              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1778                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   1779            }
   1780            else  // generated
   1781            {
   1782              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1783                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   1784            }
   1785          
   1786            return ( status );
   1787          }
   1788          
   1789          /*********************************************************************
   1790           * @fn      zcl_SendDiscoverCmdsRspCmd
   1791           *
   1792           * @brief   Send a Discover Commands Response command
   1793           *
   1794           * @param   dstAddr - destination address
   1795           * @param   clusterID - cluster ID
   1796           * @param   pDiscoverRspCmd - response command to be sent
   1797           * @param   direction - direction of the command
   1798           * @param   seqNum - transaction sequence number
   1799           *
   1800           * @return  ZSuccess if OK
   1801           */
   1802          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1803                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1804                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1805          {
   1806            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   1807            uint8 *pCmdBuf;
   1808            uint8 i;
   1809            ZStatus_t status = ZSuccess;
   1810          
   1811            // allocate memory
   1812            pCmdBuf = zcl_mem_alloc( payloadSize );
   1813            if ( pCmdBuf != NULL )
   1814            {
   1815              uint8 *pBuf = pCmdBuf;
   1816          
   1817              // Load the buffer - serially
   1818              *pBuf++ = pDiscoverRspCmd->discComplete;
   1819              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   1820              {
   1821                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   1822              }
   1823          
   1824              // Send response message for either commands received or generated
   1825              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   1826              {
   1827                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1828                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   1829              }
   1830              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   1831              {
   1832                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1833                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   1834              }
   1835          
   1836              zcl_mem_free( pCmdBuf );
   1837            }
   1838            else
   1839            {
   1840              status = ZMemError;
   1841            }
   1842          
   1843            return ( status );
   1844          }
   1845          
   1846          /*********************************************************************
   1847           * @fn      zcl_SendDiscoverAttrsCmd
   1848           *
   1849           * @brief   Send a Discover Attributes command
   1850           *
   1851           * @param   dstAddr - destination address
   1852           * @param   clusterID - cluster ID
   1853           * @param   pDiscoverCmd - discover command to be sent
   1854           * @param   direction - direction of the command
   1855           * @param   seqNum - transaction sequence number
   1856           *
   1857           * @return  ZSuccess if OK
   1858           */
   1859          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1860                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1861                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1862          {
   1863            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1864            uint8 *buf;
   1865            ZStatus_t status;
   1866          
   1867            buf = zcl_mem_alloc( dataLen );
   1868            if ( buf != NULL )
   1869            {
   1870              // Load the buffer - serially
   1871              uint8 *pBuf = buf;
   1872              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   1873              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   1874              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   1875          
   1876              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   1877                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1878              zcl_mem_free( buf );
   1879            }
   1880            else
   1881            {
   1882              status = ZMemError;
   1883            }
   1884          
   1885            return ( status );
   1886          }
   1887          
   1888          /*********************************************************************
   1889           * @fn      zcl_SendDiscoverAttrsRspCmd
   1890           *
   1891           * @brief   Send a Discover Attributes Response command
   1892           *
   1893           * @param   dstAddr - destination address
   1894           * @param   clusterID - cluster ID
   1895           * @param   reportRspCmd - report response command to be sent
   1896           * @param   direction - direction of the command
   1897           * @param   seqNum - transaction sequence number
   1898           *
   1899           * @return  ZSuccess if OK
   1900           */
   1901          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1902                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   1903                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1904          {
   1905            uint16 dataLen = 1; // Discovery complete
   1906            uint8 *buf;
   1907            ZStatus_t status;
   1908          
   1909            // calculate the size of the command
   1910            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   1911          
   1912            buf = zcl_mem_alloc( dataLen );
   1913            if ( buf != NULL )
   1914            {
   1915              // Load the buffer - serially
   1916              uint8 i;
   1917              uint8 *pBuf = buf;
   1918          
   1919              *pBuf++ = pDiscoverRspCmd->discComplete;
   1920          
   1921              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   1922              {
   1923                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   1924                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   1925                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   1926              }
   1927          
   1928              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   1929                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1930              zcl_mem_free( buf );
   1931            }
   1932            else
   1933            {
   1934              status = ZMemError;
   1935            }
   1936          
   1937            return ( status );
   1938          }
   1939          
   1940          /*********************************************************************
   1941           * @fn      zcl_SendDiscoverAttrsExt
   1942           *
   1943           * @brief   Send a Discover Attributes Extended command
   1944           *
   1945           * @param   dstAddr - destination address
   1946           * @param   clusterID - cluster ID
   1947           * @param   pDiscoverAttrsExt:
   1948           *            - startAttrID: the first attribute to be selected
   1949           *            - maxAttrIDs: maximum number of returned attributes
   1950           * @param   direction - direction of the command
   1951           * @param   seqNum - transaction sequence number
   1952           *
   1953           * @return  ZSuccess if OK
   1954           */
   1955          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   1956                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   1957                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1958          {
   1959            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   1960            ZStatus_t status;
   1961          
   1962            // Load the buffer - serially
   1963            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   1964            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   1965            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   1966          
   1967            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   1968                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   1969          
   1970            return ( status );
   1971          }
   1972          
   1973          /*********************************************************************
   1974           * @fn      zcl_SendDiscoverAttrsExtRsp
   1975           *
   1976           * @brief   Send a Discover Attributes Extended Response command
   1977           *
   1978           * @param   dstAddr - destination address
   1979           * @param   clusterID - cluster ID
   1980           * @param   pDiscoverRspCmd:
   1981           *            - discComplete: indicates whether all requested attributes returned
   1982           *            - attrID: attribute ID
   1983           *            - attrDataType: data type of the given attribute
   1984           *            - attrAccessControl: access control of the given attribute
   1985           * @param   direction - direction of the command
   1986           * @param   seqNum - transaction sequence number
   1987           *
   1988           * @return  ZSuccess if OK
   1989           */
   1990          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   1991                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   1992                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1993          {
   1994            uint8 *buf;
   1995            uint8 i;
   1996            uint16 dataLen = 1; // Discovery complete
   1997            ZStatus_t status;
   1998          
   1999            // calculate the size of the command
   2000            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   2001          
   2002            buf = zcl_mem_alloc( dataLen );
   2003            if ( buf != NULL )
   2004            {
   2005              // Load the buffer - serially
   2006              uint8 *pBuf = buf;
   2007              *pBuf++ = pDiscoverRspCmd->discComplete;
   2008              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   2009              {
   2010                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2011                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2012                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   2013                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   2014              }
   2015          
   2016              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2017                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   2018              zcl_mem_free( buf );
   2019            }
   2020            else
   2021            {
   2022              status = ZMemError;
   2023            }
   2024          
   2025            return ( status );
   2026          }
   2027          #endif // ZCL_DISCOVER
   2028          
   2029          /*********************************************************************
   2030           * @fn      zcl_ProcessMessageMSG
   2031           *
   2032           * @brief   Data message processor callback.  This function processes
   2033           *          any incoming data - probably from other devices.  So, based
   2034           *          on cluster ID, perform the intended action.
   2035           *
   2036           * @param   pkt - incoming message
   2037           *
   2038           * @return  zclProcMsgStatus_t
   2039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine51_0
   \   000006                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2040          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2041          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2042            endPointDesc_t *epDesc;
   2043            zclIncoming_t inMsg;
   2044            zclLibPlugin_t *pInPlugin;
   2045            zclDefaultRspCmd_t defautlRspCmd;
   2046            uint8 options;
   2047            uint8 securityEnable;
   2048            uint8 interPanMsg;
   2049            ZStatus_t status = ZFailure;
   2050            uint8 defaultResponseSent = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   2051          
   2052            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000010   EE           MOV       A,R6
   \   000011   2420         ADD       A,#0x20
   \   000013   F582         MOV       DPL,A
   \   000015   E4           CLR       A
   \   000016   3F           ADDC      A,R7
   \   000017   F583         MOV       DPH,A
   \   000019   C3           CLR       C
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   9403         SUBB      A,#0x3
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   9400         SUBB      A,#0x0
   \   000021   5005         JNC       ??zcl_ProcessMessageMSG_0
   2053            {
   2054              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   000023   7901         MOV       R1,#0x1
   \   000025   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2055            }
   2056          
   2057            // Initialize
   2058            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   000028   90....       MOV       DPTR,#rawAFMsg
   \   00002B   EE           MOV       A,R6
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   EF           MOV       A,R7
   \   00002F   F0           MOVX      @DPTR,A
   2059            inMsg.msg = pkt;
   \   000030   85..82       MOV       DPL,?XSP + 0
   \   000033   85..83       MOV       DPH,?XSP + 1
   \   000036   EE           MOV       A,R6
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   EF           MOV       A,R7
   \   00003A   F0           MOVX      @DPTR,A
   2060            inMsg.attrCmd = NULL;
   \   00003B   740C         MOV       A,#0xc
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   2061            inMsg.pData = NULL;
   \   000044   7408         MOV       A,#0x8
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   2062            inMsg.pDataLen = 0;
   \   00004D   740A         MOV       A,#0xa
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
   2063          
   2064            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   000056   EE           MOV       A,R6
   \   000057   2422         ADD       A,#0x22
   \   000059   F8           MOV       R0,A
   \   00005A   E4           CLR       A
   \   00005B   3F           ADDC      A,R7
   \   00005C   F9           MOV       R1,A
   \   00005D   88..         MOV       ?V0,R0
   \   00005F   89..         MOV       ?V1,R1
   \   000061                ; Setup parameters for call to function zclParseHdr
   \   000061   8882         MOV       DPL,R0
   \   000063   F583         MOV       DPH,A
   \   000065   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   AA82         MOV       R2,DPL
   \   00006F   AB83         MOV       R3,DPH
   \   000071   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   000074   8A..         MOV       ?V2,R2
   \   000076   8B..         MOV       ?V3,R3
   \   000078   A8..         MOV       R0,?V2
   \   00007A   A9..         MOV       R1,?V3
   \   00007C   7408         MOV       A,#0x8
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?Subroutine17 & 0xFFFF
   2065            inMsg.pDataLen = pkt->cmd.DataLength;
   2066            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_115:
   \   000084   EE           MOV       A,R6
   \   000085   2420         ADD       A,#0x20
   \   000087   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00008A   EA           MOV       A,R2
   \   00008B   C3           CLR       C
   \   00008C   98           SUBB      A,R0
   \   00008D   F8           MOV       R0,A
   \   00008E   EB           MOV       A,R3
   \   00008F   99           SUBB      A,R1
   \   000090   F9           MOV       R1,A
   \   000091   85..82       MOV       DPL,?V0
   \   000094   85..83       MOV       DPH,?V1
   \   000097   E0           MOVX      A,@DPTR
   \   000098   28           ADD       A,R0
   \   000099   F8           MOV       R0,A
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   39           ADDC      A,R1
   \   00009D   F9           MOV       R1,A
   \   00009E   740A         MOV       A,#0xa
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ?Subroutine17 & 0xFFFF
   2067          
   2068            // Temporary workaround to allow callback functions access to the
   2069            // transaction sequence number.  Callback functions will call
   2070            // zcl_getParsedTransSeqNum() to retrieve this number.
   2071            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \                     ??CrossCallReturnLabel_116:
   \   0000A6   7406         MOV       A,#0x6
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000AF   F0           MOVX      @DPTR,A
   2072          
   2073            // Find the wanted endpoint
   2074            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000B0                ; Setup parameters for call to function afFindEndPointDesc
   \   0000B0   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000B3   F9           MOV       R1,A
   \   0000B4   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   2075            if ( epDesc == NULL )
   \   0000B7   EA           MOV       A,R2
   \   0000B8   4B           ORL       A,R3
   \   0000B9   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2076            {
   2077              rawAFMsg = NULL;
   \   0000BB   90....       MOV       DPTR,#rawAFMsg
   \   0000BE   E4           CLR       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   F0           MOVX      @DPTR,A
   2078              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000C2   7902         MOV       R1,#0x2
   \   0000C4   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2079            }
   2080          
   2081            if ( ( epDesc->simpleDesc == NULL ) ||
   2082                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2083                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000C7   8A82         MOV       DPL,R2
   \   0000C9   8B83         MOV       DPH,R3
   \   0000CB   A3           INC       DPTR
   \   0000CC   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000CF   602F         JZ        ??zcl_ProcessMessageMSG_3
   \   0000D1                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000D1   8A82         MOV       DPL,R2
   \   0000D3   8B83         MOV       DPH,R3
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   F583         MOV       DPH,A
   \   0000DC   8882         MOV       DPL,R0
   \   0000DE   A3           INC       DPTR
   \   0000DF   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000E2   7409         MOV       A,#0x9
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   FD           MOV       R5,A
   \   0000E9   7404         MOV       A,#0x4
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   5403         ANL       A,#0x3
   \   0000F1   FC           MOV       R4,A
   \   0000F2   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000F5   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FD   E9           MOV       A,R1
   \   0000FE   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2084            {
   2085              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   000100   90....       MOV       DPTR,#rawAFMsg
   \   000103   E4           CLR       A
   \   000104   F0           MOVX      @DPTR,A
   \   000105   A3           INC       DPTR
   \   000106   F0           MOVX      @DPTR,A
   2086              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   000107   7903         MOV       R1,#0x3
   \   000109   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2087            }
   2088          
   2089          #if defined ( INTER_PAN )
   2090            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   \                     ??zcl_ProcessMessageMSG_4:
   \   00010C                ; Setup parameters for call to function StubAPS_InterPan
   \   00010C   EE           MOV       A,R6
   \   00010D   240F         ADD       A,#0xf
   \   00010F   F582         MOV       DPL,A
   \   000111   E4           CLR       A
   \   000112   3F           ADDC      A,R7
   \   000113   F583         MOV       DPH,A
   \   000115   E0           MOVX      A,@DPTR
   \   000116   F9           MOV       R1,A
   \   000117   EE           MOV       A,R6
   \   000118   2410         ADD       A,#0x10
   \   00011A   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00011D   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000120   E9           MOV       A,R1
   \   000121   601C         JZ        ??zcl_ProcessMessageMSG_5
   2091            {
   2092              // No foundation command is supported thru Inter-PAN communication.
   2093              // But the Light Link cluster uses a different Frame Control format
   2094              // for it's Inter-PAN messages, where the messages could be confused
   2095              // with the foundation commands.
   2096              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \   000123   7402         MOV       A,#0x2
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   E0           MOVX      A,@DPTR
   \   000129   5403         ANL       A,#0x3
   \   00012B   700C         JNZ       ??zcl_ProcessMessageMSG_6
   2097              {
   2098                rawAFMsg = NULL;
   \   00012D   90....       MOV       DPTR,#rawAFMsg
   \   000130   E4           CLR       A
   \   000131   F0           MOVX      @DPTR,A
   \   000132   A3           INC       DPTR
   \   000133   F0           MOVX      @DPTR,A
   2099                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   \   000134   7904         MOV       R1,#0x4
   \   000136   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2100              }
   2101          
   2102              interPanMsg = TRUE;
   \                     ??zcl_ProcessMessageMSG_6:
   \   000139   D2..         SETB      ?VB.1
   2103              options = AF_TX_OPTIONS_NONE;
   \   00013B   7A00         MOV       R2,#0x0
   \   00013D   800C         SJMP      ??zcl_ProcessMessageMSG_7
   2104            }
   2105            else
   2106          #endif
   2107            {
   2108              interPanMsg = FALSE;
   \                     ??zcl_ProcessMessageMSG_5:
   \   00013F   C2..         CLR       ?VB.1
   2109              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \   000141                ; Setup parameters for call to function zclGetClusterOption
   \   000141   12....       LCALL     ?Subroutine23 & 0xFFFF
   2110            }
   \                     ??CrossCallReturnLabel_43:
   \   000144   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000147   E9           MOV       A,R1
   \   000148   5440         ANL       A,#0x40
   \   00014A   FA           MOV       R2,A
   2111          
   2112            // Find the appropriate plugin
   2113            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \                     ??zcl_ProcessMessageMSG_7:
   \   00014B   8E82         MOV       DPL,R6
   \   00014D   8F83         MOV       DPH,R7
   \   00014F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000152   90....       MOV       DPTR,#plugins
   \   000155   8004         SJMP      ??zcl_ProcessMessageMSG_8
   \                     ??zcl_ProcessMessageMSG_9:
   \   000157   8882         MOV       DPL,R0
   \   000159   8983         MOV       DPH,R1
   \                     ??zcl_ProcessMessageMSG_8:
   \   00015B   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00015E   7003         JNZ       $+5
   \   000160   02....       LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
   \   000163   8882         MOV       DPL,R0
   \   000165   8983         MOV       DPH,R1
   \   000167   A3           INC       DPTR
   \   000168   A3           INC       DPTR
   \   000169   E0           MOVX      A,@DPTR
   \   00016A   F5..         MOV       ?V0,A
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   F5..         MOV       ?V1,A
   \   000170   C3           CLR       C
   \   000171   EC           MOV       A,R4
   \   000172   95..         SUBB      A,?V0
   \   000174   ED           MOV       A,R5
   \   000175   95..         SUBB      A,?V1
   \   000177   40DE         JC        ??zcl_ProcessMessageMSG_9
   \   000179   8882         MOV       DPL,R0
   \   00017B   8983         MOV       DPH,R1
   \   00017D   A3           INC       DPTR
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   C3           CLR       C
   \   000182   E0           MOVX      A,@DPTR
   \   000183   9C           SUBB      A,R4
   \   000184   A3           INC       DPTR
   \   000185   E0           MOVX      A,@DPTR
   \   000186   9D           SUBB      A,R5
   \   000187   40CE         JC        ??zcl_ProcessMessageMSG_9
   \   000189   7402         MOV       A,#0x2
   \   00018B   12....       LCALL     ?XSTACK_DISP0_8
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   5407         ANL       A,#0x7
   \   000191   700D         JNZ       ??zcl_ProcessMessageMSG_11
   \   000193   7407         MOV       A,#0x7
   \   000195   12....       LCALL     ?XSTACK_DISP0_8
   \   000198   E0           MOVX      A,@DPTR
   \   000199   640B         XRL       A,#0xb
   \   00019B   7003         JNZ       $+5
   \   00019D   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   2114          
   2115            // Local and remote Security options must match except for Default Response command
   2116            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   2117            {
   2118              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zcl_ProcessMessageMSG_11:
   \   0001A0   EA           MOV       A,R2
   \   0001A1   7003         JNZ       $+5
   \   0001A3   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   \   0001A6   EE           MOV       A,R6
   \   0001A7   2419         ADD       A,#0x19
   \   0001A9   F582         MOV       DPL,A
   \   0001AB   E4           CLR       A
   \   0001AC   3F           ADDC      A,R7
   \   0001AD   F583         MOV       DPH,A
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   6003         JZ        $+5
   \   0001B2   02....       LJMP      ??zcl_ProcessMessageMSG_12 & 0xFFFF
   2119          
   2120              // Make sure that Clusters specifically defined to use security are received secure,
   2121              // any other cluster that wants to use APS security will be allowed
   2122              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   2123              {
   2124                if ( UNICAST_MSG( inMsg.msg ) )
   \   0001B5   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001B8   6003         JZ        $+5
   \   0001BA   02....       LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
   \   0001BD   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0001C0   6003         JZ        $+5
   \   0001C2   02....       LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
   2125                {
   2126                  // Send a Default Response command back with no Application Link Key security
   2127                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   0001C5   EE           MOV       A,R6
   \   0001C6   2404         ADD       A,#0x4
   \   0001C8   F5..         MOV       ?V0,A
   \   0001CA   E4           CLR       A
   \   0001CB   3F           ADDC      A,R7
   \   0001CC   F5..         MOV       ?V1,A
   \   0001CE   EE           MOV       A,R6
   \   0001CF   2414         ADD       A,#0x14
   \   0001D1   FE           MOV       R6,A
   \   0001D2   5001         JNC       ??zcl_ProcessMessageMSG_14
   \   0001D4   0F           INC       R7
   \                     ??zcl_ProcessMessageMSG_14:
   \   0001D5                ; Setup parameters for call to function zclSetSecurityOption
   \   0001D5   7C00         MOV       R4,#0x0
   \   0001D7   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0001DA   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2128          
   2129                  defautlRspCmd.statusCode = status;
   \   0001DD   740F         MOV       A,#0xf
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   7401         MOV       A,#0x1
   \   0001E4   F0           MOVX      @DPTR,A
   2130                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001E5   7407         MOV       A,#0x7
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   C0E0         PUSH      A
   \   0001ED   740E         MOV       A,#0xe
   \   0001EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F2   D0E0         POP       A
   \   0001F4   F0           MOVX      @DPTR,A
   2131                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2132                                         inMsg.msg->clusterId, &defautlRspCmd,
   2133                                         !inMsg.hdr.fc.direction, true,
   2134                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \   0001F5                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   0001F5   7406         MOV       A,#0x6
   \   0001F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FA   E0           MOVX      A,@DPTR
   \   0001FB   F5..         MOV       ?V2,A
   \   0001FD   78..         MOV       R0,#?V2
   \   0001FF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000202   7405         MOV       A,#0x5
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00020A   75..01       MOV       ?V2,#0x1
   \   00020D   78..         MOV       R0,#?V2
   \   00020F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000212   7406         MOV       A,#0x6
   \   000214   12....       LCALL     ?XSTACK_DISP0_8
   \   000217   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00021A   F5..         MOV       ?V2,A
   \   00021C   78..         MOV       R0,#?V2
   \   00021E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000221   7413         MOV       A,#0x13
   \   000223   12....       LCALL     ?XSTACK_DISP100_8
   \   000226   88..         MOV       ?V2,R0
   \   000228   89..         MOV       ?V3,R1
   \   00022A   78..         MOV       R0,#?V2
   \   00022C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00022F   7407         MOV       A,#0x7
   \   000231   12....       LCALL     ?XSTACK_DISP0_8
   \   000234   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000237   12....       LCALL     ?XSTACK_DISP0_8
   \   00023A   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00023D   12....       LCALL     ?XSTACK_DISP0_8
   \   000240   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000243   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000246   7407         MOV       A,#0x7
   \   000248   12....       LCALL     ?DEALLOC_XSTACK8
   2135          
   2136                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   00024B                ; Setup parameters for call to function zclSetSecurityOption
   \   00024B   7C01         MOV       R4,#0x1
   \   00024D   12....       LCALL     ?Subroutine28 & 0xFFFF
   2137                }
   \                     ??CrossCallReturnLabel_55:
   \   000250   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2138          
   2139                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_13:
   \   000253   90....       MOV       DPTR,#rawAFMsg
   \   000256   E4           CLR       A
   \   000257   F0           MOVX      @DPTR,A
   \   000258   A3           INC       DPTR
   \   000259   F0           MOVX      @DPTR,A
   2140                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   00025A   7905         MOV       R1,#0x5
   \   00025C   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2141              }
   2142            }
   \                     ??zcl_ProcessMessageMSG_10:
   \   00025F   7800         MOV       R0,#0x0
   \   000261   7900         MOV       R1,#0x0
   2143          
   2144            // Is this a foundation type message
   2145            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_12:
   \   000263   A2..         MOV       C,?VB.1
   \   000265   5003         JNC       $+5
   \   000267   02....       LJMP      ??zcl_ProcessMessageMSG_15 & 0xFFFF
   \   00026A   7402         MOV       A,#0x2
   \   00026C   12....       LCALL     ?XSTACK_DISP0_8
   \   00026F   E0           MOVX      A,@DPTR
   \   000270   5403         ANL       A,#0x3
   \   000272   6003         JZ        $+5
   \   000274   02....       LJMP      ??zcl_ProcessMessageMSG_15 & 0xFFFF
   2146            {
   2147              if ( inMsg.hdr.fc.manuSpecific )
   \   000277   E0           MOVX      A,@DPTR
   \   000278   5404         ANL       A,#0x4
   \   00027A   6005         JZ        ??zcl_ProcessMessageMSG_16
   2148              {
   2149                // We don't support any manufacturer specific command
   2150                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   00027C   7E84         MOV       R6,#-0x7c
   \   00027E   02....       LJMP      ??zcl_ProcessMessageMSG_17 & 0xFFFF
   2151              }
   2152              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2153                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zcl_ProcessMessageMSG_16:
   \   000281   7407         MOV       A,#0x7
   \   000283   12....       LCALL     ?XSTACK_DISP0_8
   \   000286   E0           MOVX      A,@DPTR
   \   000287   C3           CLR       C
   \   000288   9417         SUBB      A,#0x17
   \   00028A   4003         JC        $+5
   \   00028C   02....       LJMP      ??zcl_ProcessMessageMSG_18 & 0xFFFF
   \   00028F   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000292   12....       LCALL     ?S_SHL
   \   000295   74..         MOV       A,#zclCmdTable & 0xff
   \   000297   25..         ADD       A,?V0
   \   000299   F582         MOV       DPL,A
   \   00029B   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   00029D   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0002A0   7003         JNZ       $+5
   \   0002A2   02....       LJMP      ??zcl_ProcessMessageMSG_18 & 0xFFFF
   2154              {
   2155                zclParseCmd_t parseCmd;
   2156          
   2157                parseCmd.endpoint = pkt->endPoint;
   \   0002A5   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0002A8   C0E0         PUSH      A
   \   0002AA   7410         MOV       A,#0x10
   \   0002AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AF   D0E0         POP       A
   \   0002B1   F0           MOVX      @DPTR,A
   2158                parseCmd.dataLen = inMsg.pDataLen;
   \   0002B2   740A         MOV       A,#0xa
   \   0002B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B7   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0002BA   7411         MOV       A,#0x11
   \   0002BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BF   12....       LCALL     ?Subroutine17 & 0xFFFF
   2159                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_117:
   \   0002C2   7408         MOV       A,#0x8
   \   0002C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C7   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0002CA   7413         MOV       A,#0x13
   \   0002CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CF   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0002D2                ; Setup parameters for indirect call
   \   0002D2   7410         MOV       A,#0x10
   \   0002D4   12....       LCALL     ?XSTACK_DISP101_8
   \   0002D7   7407         MOV       A,#0x7
   \   0002D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DC   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0002DF   12....       LCALL     ?S_SHL
   \   0002E2   74..         MOV       A,#zclCmdTable & 0xff
   \   0002E4   25..         ADD       A,?V0
   \   0002E6   F582         MOV       DPL,A
   \   0002E8   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   0002EA   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0002ED   C0E0         PUSH      A
   \   0002EF   7401         MOV       A,#0x1
   \   0002F1   93           MOVC      A,@A+DPTR
   \   0002F2   F583         MOV       DPH,A
   \   0002F4   D082         POP       DPL
   2160          
   2161                // Parse the command, remember that the return value is a pointer to allocated memory
   2162                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \   0002F6   12....       LCALL     ?CALL_IND
   \   0002F9   8A..         MOV       ?V0,R2
   \   0002FB   8B..         MOV       ?V1,R3
   \   0002FD   A8..         MOV       R0,?V0
   \   0002FF   A9..         MOV       R1,?V1
   \   000301   740C         MOV       A,#0xc
   \   000303   12....       LCALL     ?XSTACK_DISP0_8
   \   000306   12....       LCALL     ?Subroutine17 & 0xFFFF
   2163                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_119:
   \   000309   E8           MOV       A,R0
   \   00030A   49           ORL       A,R1
   \   00030B   6053         JZ        ??zcl_ProcessMessageMSG_19
   \   00030D   7407         MOV       A,#0x7
   \   00030F   12....       LCALL     ?XSTACK_DISP0_8
   \   000312   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000315   12....       LCALL     ?S_SHL
   \   000318   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   00031A   25..         ADD       A,?V0
   \   00031C   F582         MOV       DPL,A
   \   00031E   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   000320   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000323   6030         JZ        ??zcl_ProcessMessageMSG_20
   2164                {
   2165                  // Process the command
   2166                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   000325                ; Setup parameters for indirect call
   \   000325   AA..         MOV       R2,?XSP + 0
   \   000327   AB..         MOV       R3,?XSP + 1
   \   000329   7407         MOV       A,#0x7
   \   00032B   12....       LCALL     ?XSTACK_DISP0_8
   \   00032E   12....       LCALL     ?Subroutine21 & 0xFFFF
   2167                  {
   2168                    // Couldn't find attribute in the table.
   2169                  }
   2170                }
   \                     ??CrossCallReturnLabel_39:
   \   000331   12....       LCALL     ?S_SHL
   \   000334   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   000336   25..         ADD       A,?V0
   \   000338   F582         MOV       DPL,A
   \   00033A   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   00033C   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00033F   C0E0         PUSH      A
   \   000341   7401         MOV       A,#0x1
   \   000343   93           MOVC      A,@A+DPTR
   \   000344   F583         MOV       DPH,A
   \   000346   D082         POP       DPL
   \   000348   12....       LCALL     ?CALL_IND
   2171          
   2172                // Free the buffer
   2173                if ( inMsg.attrCmd )
   \   00034B   740C         MOV       A,#0xc
   \   00034D   12....       LCALL     ?XSTACK_DISP0_8
   \   000350   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000353   600B         JZ        ??zcl_ProcessMessageMSG_19
   2174                {
   2175                  zcl_mem_free( inMsg.attrCmd );
   \                     ??zcl_ProcessMessageMSG_20:
   \   000355                ; Setup parameters for call to function osal_mem_free
   \   000355   740C         MOV       A,#0xc
   \   000357   12....       LCALL     ?XSTACK_DISP0_8
   \   00035A   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   2176                }
   \                     ??CrossCallReturnLabel_106:
   \   00035D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2177          
   2178                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zcl_ProcessMessageMSG_19:
   \   000360   7407         MOV       A,#0x7
   \   000362   12....       LCALL     ?XSTACK_DISP0_8
   \   000365   E0           MOVX      A,@DPTR
   \   000366   6069         JZ        ??zcl_ProcessMessageMSG_21
   \   000368   6402         XRL       A,#0x2
   \   00036A   6065         JZ        ??zcl_ProcessMessageMSG_21
   \   00036C   E0           MOVX      A,@DPTR
   \   00036D   6403         XRL       A,#0x3
   \   00036F   6060         JZ        ??zcl_ProcessMessageMSG_21
   \   000371   E0           MOVX      A,@DPTR
   \   000372   6406         XRL       A,#0x6
   \   000374   605B         JZ        ??zcl_ProcessMessageMSG_21
   \   000376   E0           MOVX      A,@DPTR
   \   000377   6408         XRL       A,#0x8
   \   000379   6056         JZ        ??zcl_ProcessMessageMSG_21
   \   00037B   E0           MOVX      A,@DPTR
   \   00037C   640C         XRL       A,#0xc
   \   00037E   6051         JZ        ??zcl_ProcessMessageMSG_21
   \   000380   E0           MOVX      A,@DPTR
   \   000381   6411         XRL       A,#0x11
   \   000383   604C         JZ        ??zcl_ProcessMessageMSG_21
   \   000385   E0           MOVX      A,@DPTR
   \   000386   6413         XRL       A,#0x13
   \   000388   6047         JZ        ??zcl_ProcessMessageMSG_21
   \   00038A   E0           MOVX      A,@DPTR
   \   00038B   6415         XRL       A,#0x15
   \   00038D   6042         JZ        ??zcl_ProcessMessageMSG_21
   \   00038F   E0           MOVX      A,@DPTR
   \   000390   640B         XRL       A,#0xb
   \   000392   603D         JZ        ??zcl_ProcessMessageMSG_21
   2179                {
   2180                  rawAFMsg = NULL;
   2181                  return ( ZCL_PROC_SUCCESS ); // We're done
   2182                }
   2183          
   2184                status = ZSuccess;
   \   000394   7E00         MOV       R6,#0x0
   \   000396   8059         SJMP      ??zcl_ProcessMessageMSG_17
   2185              }
   2186              else
   2187              {
   2188                // Unsupported message
   2189                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_18:
   \   000398   7E82         MOV       R6,#-0x7e
   \   00039A   8055         SJMP      ??zcl_ProcessMessageMSG_17
   2190              }
   2191            }
   2192            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2193            {
   2194              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_15:
   \   00039C   E8           MOV       A,R0
   \   00039D   49           ORL       A,R1
   \   00039E   6041         JZ        ??zcl_ProcessMessageMSG_22
   \   0003A0   8882         MOV       DPL,R0
   \   0003A2   8983         MOV       DPH,R1
   \   0003A4   A3           INC       DPTR
   \   0003A5   A3           INC       DPTR
   \   0003A6   A3           INC       DPTR
   \   0003A7   A3           INC       DPTR
   \   0003A8   A3           INC       DPTR
   \   0003A9   A3           INC       DPTR
   \   0003AA   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0003AD   6032         JZ        ??zcl_ProcessMessageMSG_22
   2195              {
   2196                // The return value of the plugin function will be
   2197                //  ZSuccess - Supported and need default response
   2198                //  ZFailure - Unsupported
   2199                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2200                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2201                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2202                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2203                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   0003AF                ; Setup parameters for indirect call
   \   0003AF   AA..         MOV       R2,?XSP + 0
   \   0003B1   AB..         MOV       R3,?XSP + 1
   \   0003B3   8882         MOV       DPL,R0
   \   0003B5   8983         MOV       DPH,R1
   \   0003B7   A3           INC       DPTR
   \   0003B8   A3           INC       DPTR
   \   0003B9   A3           INC       DPTR
   \   0003BA   A3           INC       DPTR
   \   0003BB   A3           INC       DPTR
   \   0003BC   A3           INC       DPTR
   \   0003BD   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0003C0   12....       LCALL     ?CALL_IND
   \   0003C3   E9           MOV       A,R1
   \   0003C4   FE           MOV       R6,A
   2204                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   0003C5   74FF         MOV       A,#-0x1
   \   0003C7   6E           XRL       A,R6
   \   0003C8   6007         JZ        ??zcl_ProcessMessageMSG_21
   \   0003CA   A2..         MOV       C,?VB.1
   \   0003CC   500E         JNC       ??zcl_ProcessMessageMSG_23
   \   0003CE   EE           MOV       A,R6
   \   0003CF   700B         JNZ       ??zcl_ProcessMessageMSG_23
   2205                {
   2206                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_21:
   \   0003D1   90....       MOV       DPTR,#rawAFMsg
   \   0003D4   E4           CLR       A
   \   0003D5   F0           MOVX      @DPTR,A
   \   0003D6   A3           INC       DPTR
   \   0003D7   F0           MOVX      @DPTR,A
   2207                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   0003D8   F9           MOV       R1,A
   \   0003D9   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2208                }
   2209              }
   2210          
   2211              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_23:
   \   0003DC   7401         MOV       A,#0x1
   \   0003DE   6E           XRL       A,R6
   \   0003DF   7010         JNZ       ??zcl_ProcessMessageMSG_17
   2212              {
   2213                // Unsupported message
   2214                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zcl_ProcessMessageMSG_22:
   \   0003E1   7402         MOV       A,#0x2
   \   0003E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E6   E0           MOVX      A,@DPTR
   \   0003E7   5404         ANL       A,#0x4
   \   0003E9   6004         JZ        ??zcl_ProcessMessageMSG_24
   2215                {
   2216                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   0003EB   7E83         MOV       R6,#-0x7d
   \   0003ED   8002         SJMP      ??zcl_ProcessMessageMSG_17
   2217                }
   2218                else
   2219                {
   2220                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_24:
   \   0003EF   7E81         MOV       R6,#-0x7f
   2221                }
   2222              }
   2223            }
   2224          
   2225            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_17:
   \   0003F1   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0003F4   707C         JNZ       ??zcl_ProcessMessageMSG_25
   \   0003F6   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0003F9   7077         JNZ       ??zcl_ProcessMessageMSG_25
   \   0003FB   7402         MOV       A,#0x2
   \   0003FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000400   E0           MOVX      A,@DPTR
   \   000401   5410         ANL       A,#0x10
   \   000403   706D         JNZ       ??zcl_ProcessMessageMSG_25
   2226            {
   2227              // Send a Default Response command back
   2228              defautlRspCmd.statusCode = status;
   \   000405   740F         MOV       A,#0xf
   \   000407   12....       LCALL     ?XSTACK_DISP0_8
   \   00040A   EE           MOV       A,R6
   \   00040B   F0           MOVX      @DPTR,A
   2229              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   00040C   7407         MOV       A,#0x7
   \   00040E   12....       LCALL     ?XSTACK_DISP0_8
   \   000411   E0           MOVX      A,@DPTR
   \   000412   C0E0         PUSH      A
   \   000414   740E         MOV       A,#0xe
   \   000416   12....       LCALL     ?XSTACK_DISP0_8
   \   000419   D0E0         POP       A
   \   00041B   F0           MOVX      @DPTR,A
   2230              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2231                                     inMsg.msg->clusterId, &defautlRspCmd,
   2232                                     !inMsg.hdr.fc.direction, true,
   2233                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \   00041C                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   00041C   7406         MOV       A,#0x6
   \   00041E   12....       LCALL     ?XSTACK_DISP0_8
   \   000421   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000424   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000427   7405         MOV       A,#0x5
   \   000429   12....       LCALL     ?XSTACK_DISP0_8
   \   00042C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00042F   75..01       MOV       ?V0,#0x1
   \   000432   78..         MOV       R0,#?V0
   \   000434   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000437   7406         MOV       A,#0x6
   \   000439   12....       LCALL     ?XSTACK_DISP0_8
   \   00043C   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00043F   F5..         MOV       ?V0,A
   \   000441   78..         MOV       R0,#?V0
   \   000443   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000446   7413         MOV       A,#0x13
   \   000448   12....       LCALL     ?XSTACK_DISP100_8
   \   00044B   88..         MOV       ?V0,R0
   \   00044D   89..         MOV       ?V1,R1
   \   00044F   78..         MOV       R0,#?V0
   \   000451   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000454   7407         MOV       A,#0x7
   \   000456   12....       LCALL     ?XSTACK_DISP0_8
   \   000459   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00045C   12....       LCALL     ?XSTACK_DISP0_8
   \   00045F   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000462   12....       LCALL     ?XSTACK_DISP0_8
   \   000465   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000468   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   00046B   7407         MOV       A,#0x7
   \   00046D   12....       LCALL     ?DEALLOC_XSTACK8
   2234              defaultResponseSent = TRUE;
   \   000470   D2..         SETB      ?VB.0
   2235            }
   2236          
   2237            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_25:
   \   000472   90....       MOV       DPTR,#rawAFMsg
   \   000475   E4           CLR       A
   \   000476   F0           MOVX      @DPTR,A
   \   000477   A3           INC       DPTR
   \   000478   F0           MOVX      @DPTR,A
   2238            if ( status == ZSuccess )
   \   000479   EE           MOV       A,R6
   \   00047A   7004         JNZ       ??zcl_ProcessMessageMSG_26
   2239            {
   2240              return ( ZCL_PROC_SUCCESS );
   \   00047C   7900         MOV       R1,#0x0
   \   00047E   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2241            }
   2242            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_26:
   \   000480   7484         MOV       A,#-0x7c
   \   000482   6E           XRL       A,R6
   \   000483   A2..         MOV       C,?VB.0
   \   000485   700A         JNZ       ??zcl_ProcessMessageMSG_27
   2243            {
   2244              if ( defaultResponseSent )
   \   000487   5004         JNC       ??zcl_ProcessMessageMSG_28
   2245              {
   2246                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   000489   7907         MOV       R1,#0x7
   \   00048B   800C         SJMP      ??zcl_ProcessMessageMSG_1
   2247              }
   2248              else
   2249              {
   2250                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_28:
   \   00048D   7906         MOV       R1,#0x6
   \   00048F   8008         SJMP      ??zcl_ProcessMessageMSG_1
   2251              }
   2252            }
   2253            else
   2254            {
   2255              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_27:
   \   000491   5004         JNC       ??zcl_ProcessMessageMSG_29
   2256              {
   2257                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   000493   7909         MOV       R1,#0x9
   \   000495   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2258              }
   2259              else
   2260              {
   2261                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_29:
   \   000497   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   000499   7415         MOV       A,#0x15
   2262              }
   2263            }
   \   00049B   02....       LJMP      ?Subroutine1 & 0xFFFF
   2264          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   F8           MOV       R0,A
   \   000004   7401         MOV       A,#0x1
   \   000006   93           MOVC      A,@A+DPTR
   \   000007   F9           MOV       R1,A
   \   000008   E8           MOV       A,R0
   \   000009   49           ORL       A,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   35..         ADDC      A,?V1
   \   000002   F583         MOV       DPH,A
   \   000004   E4           CLR       A
   \   000005   93           MOVC      A,@A+DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   6401         XRL       A,#0x1
   \   000008   5401         ANL       A,#0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   7407         MOV       A,#0x7
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   C8           XCH       A,R0
   \   00000B   2415         ADD       A,#0x15
   \   00000D   F582         MOV       DPL,A
   \   00000F   E4           CLR       A
   \   000010   38           ADDC      A,R0
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00000B   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FC           MOV       R4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FD           MOV       R5,A
   \   00000C   7407         MOV       A,#0x7
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   75..00       MOV       ?V1,#0x0
   \   000006   7402         MOV       A,#0x2
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000009                REQUIRE ??Subroutine55_0
   \   000009                ; // Fall through to label ??Subroutine55_0
   2265          
   2266          /*********************************************************************
   2267           * PRIVATE FUNCTIONS
   2268           *********************************************************************/
   2269          
   2270          /*********************************************************************
   2271           * @fn      zclParseHdr
   2272           *
   2273           * @brief   Parse header of the ZCL format
   2274           *
   2275           * @param   hdr - place to put the frame control information
   2276           * @param   pData - incoming buffer to parse
   2277           *
   2278           * @return  pointer past the header
   2279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2280          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2282            // Clear the header
   2283            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2284          
   2285            // Parse the Frame Control
   2286            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   54FC         ANL       A,#0xfc
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E8           MOV       A,R0
   \   00002C   4A           ORL       A,R2
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E9           MOV       A,R1
   \   000036   12....       LCALL     ?Subroutine14 & 0xFFFF
   2287            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_21:
   \   000039   A2E2         MOV       C,0xE0 /* A   */.2
   \   00003B   5004         JNC       ??zclParseHdr_0
   \   00003D   D2F0         SETB      B.0
   \   00003F   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   000041   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   54FB         ANL       A,#0xfb
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A2F0         MOV       C,B.0
   \   00004F   E4           CLR       A
   \   000050   33           RLC       A
   \   000051   F5..         MOV       ?V2,A
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   7402         MOV       A,#0x2
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?S_SHL
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   45..         ORL       A,?V2
   \   000060   12....       LCALL     ?Subroutine14 & 0xFFFF
   2288            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_22:
   \   000063   A2E3         MOV       C,0xE0 /* A   */.3
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   5004         JNC       ??zclParseHdr_2
   2289            {
   2290              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006E   4408         ORL       A,#0x8
   \   000070   8002         SJMP      ??zclParseHdr_3
   2291            }
   2292            else
   2293            {
   2294              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   000072   54F7         ANL       A,#0xf7
   2295            }
   \                     ??zclParseHdr_3:
   \   000074   12....       LCALL     ?Subroutine14 & 0xFFFF
   2296          
   2297            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_23:
   \   000077   A2E4         MOV       C,0xE0 /* A   */.4
   \   000079   5004         JNC       ??zclParseHdr_4
   \   00007B   D2F0         SETB      B.0
   \   00007D   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007F   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   000081   85..82       MOV       DPL,?V0
   \   000084   85..83       MOV       DPH,?V1
   \   000087   E0           MOVX      A,@DPTR
   \   000088   54EF         ANL       A,#0xef
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A2F0         MOV       C,B.0
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   F5..         MOV       ?V2,A
   \   000091   7404         MOV       A,#0x4
   \   000093   78..         MOV       R0,#?V2
   \   000095   12....       LCALL     ?S_SHL
   \   000098   E0           MOVX      A,@DPTR
   \   000099   45..         ORL       A,?V2
   \   00009B   12....       LCALL     ?Subroutine13 & 0xFFFF
   2298            pData++;  // move past the frame control field
   \                     ??CrossCallReturnLabel_19:
   \   00009E   AE82         MOV       R6,DPL
   \   0000A0   AF83         MOV       R7,DPH
   2299          
   2300            // parse the manfacturer code
   2301            if ( hdr->fc.manuSpecific )
   \   0000A2   85..82       MOV       DPL,?V0
   \   0000A5   85..83       MOV       DPH,?V1
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   5404         ANL       A,#0x4
   \   0000AB   601C         JZ        ??zclParseHdr_6
   2302            {
   2303              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000AD   8E82         MOV       DPL,R6
   \   0000AF   8F83         MOV       DPH,R7
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   FA           MOV       R2,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F9           MOV       R1,A
   \   0000B6   EA           MOV       A,R2
   \   0000B7   85..82       MOV       DPL,?V0
   \   0000BA   85..83       MOV       DPH,?V1
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   2304              pData += 2;
   \                     ??CrossCallReturnLabel_113:
   \   0000C2   EE           MOV       A,R6
   \   0000C3   2402         ADD       A,#0x2
   \   0000C5   FE           MOV       R6,A
   \   0000C6   5001         JNC       ??zclParseHdr_6
   \   0000C8   0F           INC       R7
   2305            }
   2306          
   2307            // parse the Transaction Sequence Number
   2308            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000C9   8E82         MOV       DPL,R6
   \   0000CB   8F83         MOV       DPH,R7
   \   0000CD   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000D0   12....       LCALL     ?Subroutine13 & 0xFFFF
   2309          
   2310            // parse the Cluster's command ID
   2311            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_20:
   \   0000D3   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000D6   A3           INC       DPTR
   \   0000D7   F0           MOVX      @DPTR,A
   2312          
   2313            // Should point to the frame payload
   2314            return ( pData );
   \   0000D8   EE           MOV       A,R6
   \   0000D9   2402         ADD       A,#0x2
   \   0000DB   FA           MOV       R2,A
   \   0000DC   E4           CLR       A
   \   0000DD   3F           ADDC      A,R7
   \   0000DE   FB           MOV       R3,A
   \   0000DF   02....       LJMP      ??Subroutine52_0 & 0xFFFF
   2315          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2316          
   2317          /*********************************************************************
   2318           * @fn      zclBuildHdr
   2319           *
   2320           * @brief   Build header of the ZCL format
   2321           *
   2322           * @param   hdr - outgoing header information
   2323           * @param   pData - outgoing header space
   2324           *
   2325           * @return  pointer past the header
   2326           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2327          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2328          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2329            // Build the Frame Control byte
   2330            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   2331            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_142:
   \   000013   5404         ANL       A,#0x4
   \   000015   12....       LCALL     ?Subroutine15 & 0xFFFF
   2332            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_140:
   \   000018   5408         ANL       A,#0x8
   \   00001A   12....       LCALL     ?Subroutine15 & 0xFFFF
   2333            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_141:
   \   00001D   5410         ANL       A,#0x10
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   48           ORL       A,R0
   \   000026   F0           MOVX      @DPTR,A
   2334            pData++;  // move past the frame control field
   \   000027   A3           INC       DPTR
   \   000028   AC82         MOV       R4,DPL
   \   00002A   AD83         MOV       R5,DPH
   2335          
   2336            // Add the manfacturer code
   2337            if ( hdr->fc.manuSpecific )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5404         ANL       A,#0x4
   \   000033   601A         JZ        ??zclBuildHdr_0
   2338            {
   2339              *pData++ = LO_UINT16( hdr->manuCode );
   \   000035   EA           MOV       A,R2
   \   000036   2402         ADD       A,#0x2
   \   000038   F8           MOV       R0,A
   \   000039   E4           CLR       A
   \   00003A   3B           ADDC      A,R3
   \   00003B   F9           MOV       R1,A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   8C82         MOV       DPL,R4
   \   000043   8D83         MOV       DPH,R5
   \   000045   12....       LCALL     ?Subroutine12 & 0xFFFF
   2340              *pData++ = HI_UINT16( hdr->manuCode );
   2341            }
   \                     ??CrossCallReturnLabel_17:
   \   000048   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00004B   FC           MOV       R4,A
   \   00004C   5001         JNC       ??zclBuildHdr_0
   \   00004E   0D           INC       R5
   2342          
   2343            // Add the Transaction Sequence Number
   2344            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   00004F   8A82         MOV       DPL,R2
   \   000051   8B83         MOV       DPH,R3
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   8C82         MOV       DPL,R4
   \   00005A   8D83         MOV       DPH,R5
   \   00005C   F0           MOVX      @DPTR,A
   2345          
   2346            // Add the Cluster's command ID
   2347            *pData++ = hdr->commandID;
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   12....       LCALL     ?Subroutine34 & 0xFFFF
   2348          
   2349            // Should point to the frame payload
   2350            return ( pData );
   \                     ??CrossCallReturnLabel_62:
   \   000069   FA           MOV       R2,A
   \   00006A   E4           CLR       A
   \   00006B   3D           ADDC      A,R5
   \   00006C   FB           MOV       R3,A
   \   00006D   80..         SJMP      ??Subroutine58_0
   2351          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EC           MOV       A,R4
   \   000008   2402         ADD       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F8           MOV       R0,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   48           ORL       A,R0
   \   000007                REQUIRE ??Subroutine57_0
   \   000007                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   2352          
   2353          /*********************************************************************
   2354           * @fn      zclCalcHdrSize
   2355           *
   2356           * @brief   Calculate the number of bytes needed for an outgoing
   2357           *          ZCL header.
   2358           *
   2359           * @param   hdr - outgoing header information
   2360           *
   2361           * @return  returns the number of bytes needed
   2362           */
   2363          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   2364          {
   2365            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   2366          
   2367            // Add the manfacturer code
   2368            if ( hdr->fc.manuSpecific )
   2369            {
   2370              needed += 2;
   2371            }
   2372          
   2373            return ( needed );
   2374          }
   2375          
   2376          /*********************************************************************
   2377           * @fn      zclFindPlugin
   2378           *
   2379           * @brief   Find the right plugin for a cluster ID
   2380           *
   2381           * @param   clusterID - cluster ID to look for
   2382           * @param   profileID - profile ID
   2383           *
   2384           * @return  pointer to plugin, NULL if not found
   2385           */
   2386          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   2387          {
   2388            zclLibPlugin_t *pLoop = plugins;
   2389          
   2390            (void)profileID;  // Intentionally unreferenced parameter
   2391          
   2392            while ( pLoop != NULL )
   2393            {
   2394              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2395              {
   2396                return ( pLoop );
   2397              }
   2398          
   2399              pLoop = pLoop->next;
   2400            }
   2401          
   2402            return ( (zclLibPlugin_t *)NULL );
   2403          }
   2404          
   2405          #ifdef ZCL_DISCOVER
   2406          /*********************************************************************
   2407           * @fn      zclFindCmdRecsList
   2408           *
   2409           * @brief   Find the right command record list for an endpoint
   2410           *
   2411           * @param   endpoint - endpoint to look for
   2412           *
   2413           * @return  pointer to record list, NULL if not found
   2414           */
   2415          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   2416          {
   2417            zclCmdRecsList_t *pLoop = gpCmdList;
   2418          
   2419            while ( pLoop != NULL )
   2420            {
   2421              if ( pLoop->endpoint == endpoint )
   2422              {
   2423                return ( pLoop );
   2424              }
   2425          
   2426              pLoop = pLoop->pNext;
   2427            }
   2428          
   2429            return ( NULL );
   2430          }
   2431          
   2432          /*********************************************************************
   2433           * @fn      zclFindCmdRec
   2434           *
   2435           * @brief   Find the command record that matchs the parameters
   2436           *
   2437           * @param   endpoint - Application's endpoint
   2438           * @param   clusterID - cluster ID
   2439           * @param   attrId - attribute looking for
   2440           * @param   pAttr - attribute record to be returned
   2441           *
   2442           * @return  TRUE if record found. FALSE, otherwise.
   2443           */
   2444          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   2445          {
   2446            uint8 i;
   2447            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   2448          
   2449            if ( pRec != NULL )
   2450            {
   2451              for ( i = 0; i < pRec->numCommands; i++ )
   2452              {
   2453                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   2454                {
   2455                  *pCmd = pRec->pCmdRecs[i];
   2456          
   2457                  return ( TRUE ); // EMBEDDED RETURN
   2458                }
   2459              }
   2460            }
   2461          
   2462            return ( FALSE );
   2463          }
   2464          #endif // ZCL_DISCOVER
   2465          
   2466          /*********************************************************************
   2467           * @fn      zclFindAttrRecsList
   2468           *
   2469           * @brief   Find the right attribute record list for an endpoint
   2470           *
   2471           * @param   clusterID - endpointto look for
   2472           *
   2473           * @return  pointer to record list, NULL if not found
   2474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2475          static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2476          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2477            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2478          
   2479            while ( pLoop != NULL )
   2480            {
   2481              if ( pLoop->endpoint == endpoint )
   2482              {
   2483                return ( pLoop );
   2484              }
   2485          
   2486              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000010   600C         JZ        ??zclFindAttrRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP      ??zclFindAttrRecsList_3
   2487            }
   2488          
   2489            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2490          }
   2491          
   2492          /*********************************************************************
   2493           * @fn      zclFindAttrRec
   2494           *
   2495           * @brief   Find the attribute record that matchs the parameters
   2496           *
   2497           * @param   endpoint - Application's endpoint
   2498           * @param   clusterID - cluster ID
   2499           * @param   attrId - attribute looking for
   2500           * @param   pAttr - attribute record to be returned
   2501           *
   2502           * @return  TRUE if record found. FALSE, otherwise.
   2503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2504          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2505          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2506            uint8 x;
   2507            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   AC..         MOV       R4,?V4
   \   000016   AD..         MOV       R5,?V5
   2508          
   2509            if ( pRec != NULL )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zclFindAttrRec_0 & 0xFFFF
   2510            {
   2511              for ( x = 0; x < pRec->numAttributes; x++ )
   \   00001F   7A00         MOV       R2,#0x0
   \   000021   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   000023   0A           INC       R2
   \                     ??zclFindAttrRec_1:
   \   000024   8C82         MOV       DPL,R4
   \   000026   8D83         MOV       DPH,R5
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F8           MOV       R0,A
   \   000031   EA           MOV       A,R2
   \   000032   C3           CLR       C
   \   000033   98           SUBB      A,R0
   \   000034   4003         JC        $+5
   \   000036   02....       LJMP      ??zclFindAttrRec_0 & 0xFFFF
   2512              {
   2513                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   000039   EA           MOV       A,R2
   \   00003A   F5..         MOV       ?V4,A
   \   00003C   75..00       MOV       ?V5,#0x0
   \   00003F   7403         MOV       A,#0x3
   \   000041   78..         MOV       R0,#?V4
   \   000043   12....       LCALL     ?S_SHL
   \   000046   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000049   E4           CLR       A
   \   00004A   93           MOVC      A,@A+DPTR
   \   00004B   F8           MOV       R0,A
   \   00004C   7401         MOV       A,#0x1
   \   00004E   93           MOVC      A,@A+DPTR
   \   00004F   F9           MOV       R1,A
   \   000050   E5..         MOV       A,?V0
   \   000052   68           XRL       A,R0
   \   000053   7003         JNZ       ??zclFindAttrRec_3
   \   000055   E5..         MOV       A,?V1
   \   000057   69           XRL       A,R1
   \                     ??zclFindAttrRec_3:
   \   000058   70C9         JNZ       ??zclFindAttrRec_2
   \   00005A   EA           MOV       A,R2
   \   00005B   F5..         MOV       ?V4,A
   \   00005D   75..00       MOV       ?V5,#0x0
   \   000060   7403         MOV       A,#0x3
   \   000062   78..         MOV       R0,#?V4
   \   000064   12....       LCALL     ?S_SHL
   \   000067   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E4           CLR       A
   \   00006D   93           MOVC      A,@A+DPTR
   \   00006E   F8           MOV       R0,A
   \   00006F   7401         MOV       A,#0x1
   \   000071   93           MOVC      A,@A+DPTR
   \   000072   F9           MOV       R1,A
   \   000073   EE           MOV       A,R6
   \   000074   68           XRL       A,R0
   \   000075   7002         JNZ       ??zclFindAttrRec_4
   \   000077   EF           MOV       A,R7
   \   000078   69           XRL       A,R1
   \                     ??zclFindAttrRec_4:
   \   000079   70A8         JNZ       ??zclFindAttrRec_2
   2514                {
   2515                  *pAttr = pRec->attrs[x];
   \   00007B   EA           MOV       A,R2
   \   00007C   F5..         MOV       ?V0,A
   \   00007E   75..00       MOV       ?V1,#0x0
   \   000081   7403         MOV       A,#0x3
   \   000083   78..         MOV       R0,#?V0
   \   000085   12....       LCALL     ?S_SHL
   \   000088   8C82         MOV       DPL,R4
   \   00008A   8D83         MOV       DPH,R5
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   E0           MOVX      A,@DPTR
   \   000095   25..         ADD       A,?V0
   \   000097   F8           MOV       R0,A
   \   000098   A3           INC       DPTR
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   35..         ADDC      A,?V1
   \   00009C   8882         MOV       DPL,R0
   \   00009E   F583         MOV       DPH,A
   \   0000A0   C082         PUSH      DPL
   \   0000A2   C083         PUSH      DPH
   \   0000A4   740E         MOV       A,#0xe
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000AC   D083         POP       DPH
   \   0000AE   D082         POP       DPL
   \   0000B0   7408         MOV       A,#0x8
   \   0000B2   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2516          
   2517                  return ( TRUE ); // EMBEDDED RETURN
   \   0000B5   7901         MOV       R1,#0x1
   \   0000B7   8002         SJMP      ??zclFindAttrRec_5
   2518                }
   2519              }
   2520            }
   2521          
   2522            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   0000B9   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   0000BB   02....       LJMP      ?Subroutine4 & 0xFFFF
   2523          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   25..         ADD       A,?V4
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   35..         ADDC      A,?V5
   \   000014   8882         MOV       DPL,R0
   \   000016   F583         MOV       DPH,A
   \   000018   22           RET
   2524          
   2525          #if defined ( ZCL_STANDALONE )
   2526          /*********************************************************************
   2527           * @fn      zclSetAttrRecList
   2528           *
   2529           * @brief   Set attribute record list for end point
   2530           *
   2531           * @param   endpoint - endpoint the attribute list belongs to
   2532           * @param   numAttr - number of attributes in list
   2533           * @param   attrList - array of attribute records.
   2534           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2535           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2536           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2537           *                     ATTRIBUTE INFO
   2538           *
   2539           * @return  TRUE if successful, FALSE otherwise.
   2540           */
   2541          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2542          {
   2543            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2544          
   2545            if ( pRecsList != NULL )
   2546            {
   2547              pRecsList->numAttributes = numAttr;
   2548              pRecsList->attrs = attrList;
   2549              return ( TRUE );
   2550            }
   2551          
   2552            return ( FALSE );
   2553          }
   2554          
   2555          #endif // ZCL_STANDALONE
   2556          
   2557          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2558          /*********************************************************************
   2559           * @fn      zclGetReadWriteCB
   2560           *
   2561           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2562           *
   2563           * @param   endpoint - Application's endpoint
   2564           *
   2565           * @return  Read/Write CB, NULL if not found
   2566           */
   2567          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   2568          {
   2569            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   2570          
   2571            if ( pRec != NULL )
   2572            {
   2573              return ( pRec->pfnReadWriteCB );
   2574            }
   2575          
   2576            return ( NULL );
   2577          }
   2578          
   2579          /*********************************************************************
   2580           * @fn      zclGetAuthorizeCB
   2581           *
   2582           * @brief   Get the Read/Write Authorization callback function pointer
   2583           *          for a given endpoint.
   2584           *
   2585           * @param   endpoint - Application's endpoint
   2586           *
   2587           * @return  Authorization CB, NULL if not found
   2588           */
   2589          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   2590          {
   2591            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   2592          
   2593            if ( pRec != NULL )
   2594            {
   2595              return ( pRec->pfnAuthorizeCB );
   2596            }
   2597          
   2598            return ( NULL );
   2599          }
   2600          #endif // ZCL_READ || ZCL_WRITE
   2601          
   2602          /*********************************************************************
   2603           * @fn      zclFindClusterOption
   2604           *
   2605           * @brief   Find the option record that matchs the cluster id
   2606           *
   2607           * @param   endpoint - Application's endpoint
   2608           * @param   clusterID - cluster ID looking for
   2609           *
   2610           * @return  pointer to clutser option, NULL if not found
   2611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2612          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2613          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   2614            zclClusterOptionList *pLoop;
   2615          
   2616            pLoop = clusterOptionList;
   \   000007   90....       MOV       DPTR,#clusterOptionList
   \   00000A   8004         SJMP      ??zclFindClusterOption_0
   2617            while ( pLoop != NULL )
   2618            {
   2619              if ( pLoop->endpoint == endpoint )
   2620              {
   2621                uint8 x;
   2622                for ( x = 0; x < pLoop->numOptions; x++ )
   2623                {
   2624                  if ( pLoop->options[x].clusterID == clusterID )
   2625                  {
   2626                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2627                  }
   2628                }
   2629              }
   2630          
   2631              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   00000C   8882         MOV       DPL,R0
   \   00000E   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000010   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000013   6058         JZ        ??zclFindClusterOption_2
   \   000015   8882         MOV       DPL,R0
   \   000017   8983         MOV       DPH,R1
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6F           XRL       A,R7
   \   00001D   70ED         JNZ       ??zclFindClusterOption_1
   \   00001F   7E00         MOV       R6,#0x0
   \   000021   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000023   0E           INC       R6
   \                     ??zclFindClusterOption_3:
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   FC           MOV       R4,A
   \   00002D   EE           MOV       A,R6
   \   00002E   C3           CLR       C
   \   00002F   9C           SUBB      A,R4
   \   000030   50DA         JNC       ??zclFindClusterOption_1
   \   000032   EE           MOV       A,R6
   \   000033   75F003       MOV       B,#0x3
   \   000036   A4           MUL       AB
   \   000037   FC           MOV       R4,A
   \   000038   85F0..       MOV       ?V0,B
   \   00003B   AD..         MOV       R5,?V0
   \   00003D   8882         MOV       DPL,R0
   \   00003F   8983         MOV       DPH,R1
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   2C           ADD       A,R4
   \   000047   F5..         MOV       ?V0,A
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   3D           ADDC      A,R5
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   F583         MOV       DPH,A
   \   000051   E0           MOVX      A,@DPTR
   \   000052   6A           XRL       A,R2
   \   000053   7003         JNZ       ??zclFindClusterOption_5
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   6B           XRL       A,R3
   \                     ??zclFindClusterOption_5:
   \   000058   70C9         JNZ       ??zclFindClusterOption_4
   \   00005A   ED           MOV       A,R5
   \   00005B   FB           MOV       R3,A
   \   00005C   8882         MOV       DPL,R0
   \   00005E   8983         MOV       DPH,R1
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   2C           ADD       A,R4
   \   000066   FA           MOV       R2,A
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   3B           ADDC      A,R3
   \   00006A   FB           MOV       R3,A
   \   00006B   8004         SJMP      ??zclFindClusterOption_6
   2632            }
   2633          
   2634            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   00006D   7A00         MOV       R2,#0x0
   \   00006F   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000071   02....       LJMP      ??Subroutine58_0 & 0xFFFF
   2635          }
   2636          
   2637          /*********************************************************************
   2638           * @fn      zclGetClusterOption
   2639           *
   2640           * @brief   Get the option record that matchs the cluster id
   2641           *
   2642           * @param   endpoint - Application's endpoint
   2643           * @param   clusterID - cluster ID looking for
   2644           *
   2645           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2647          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2648          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2649            uint8 option;
   2650            zclOptionRec_t *pOption;
   2651          
   2652            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2653            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2654            {
   2655              option = pOption->option;
   2656              if ( !ZG_SECURE_ENABLED )
   2657              {
   2658                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2659              }
   2660          
   2661              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2662            }
   2663          
   2664            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A                REQUIRE ?Subroutine3
   \   00001A                ; // Fall through to label ?Subroutine3
   2665          }
   2666          
   2667          /*********************************************************************
   2668           * @fn      zclSetSecurityOption
   2669           *
   2670           * @brief   Set the security option for the cluster id
   2671           *
   2672           * @param   endpoint - Application's endpoint
   2673           * @param   clusterID - cluster ID looking for
   2674           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2675           *
   2676           * @return  none
   2677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2678          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2679          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2680            zclOptionRec_t *pOption;
   2681          
   2682            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   2683            if ( pOption != NULL )
   \   00000E   E582         MOV       A,DPL
   \   000010   4583         ORL       A,DPH
   \   000012   600E         JZ        ??zclSetSecurityOption_0
   2684            {
   2685              if ( enable )
   \   000014   EF           MOV       A,R7
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   6005         JZ        ??zclSetSecurityOption_1
   2686              {
   2687                pOption->option |= AF_EN_SECURITY;
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   D2E6         SETB      0xE0 /* A   */.6
   \   00001C   8003         SJMP      ??zclSetSecurityOption_2
   2688              }
   2689              else
   2690              {
   2691                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   000021   F0           MOVX      @DPTR,A
   2692              }
   2693            }
   2694          }
   \                     ??zclSetSecurityOption_0:
   \   000022   80..         SJMP      ?Subroutine3
   2695          
   2696          #ifdef ZCL_DISCOVER
   2697          /*********************************************************************
   2698           * @fn      zclFindNextCmdRec
   2699           *
   2700           * @brief   Find the command (or next) record that matchs the parameters
   2701           *
   2702           * @param   endpoint - Application's endpoint
   2703           * @param   clusterID - cluster ID
   2704           * @param   commandID - command ID from requesting command
   2705           * @param   direction- direction of received command
   2706           * @param   pCmdID - command looking for
   2707           * @param   pCmd - command information within command record list
   2708           *
   2709           * @return  pointer to command record, NULL no more records of this cluster
   2710           */
   2711          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   2712                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2713          {
   2714            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   2715            uint8 i;
   2716          
   2717            if ( pRec != NULL )
   2718            {
   2719              for ( i = 0; i < pRec->numCommands; i++ )
   2720              {
   2721                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2722                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2723                {
   2724                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2725                  {
   2726                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   2727                    {
   2728                      *pCmd = pRec->pCmdRecs[i];
   2729          
   2730                      // Update command ID
   2731                      *pCmdID = pCmd->cmdID;
   2732          
   2733                      return ( TRUE ); // EMBEDDED RETURN
   2734                    }
   2735                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   2736                    {
   2737                      *pCmd = pRec->pCmdRecs[i];
   2738          
   2739                      // Update command ID
   2740                      *pCmdID = pCmd->cmdID;
   2741          
   2742                      return ( TRUE ); // EMBEDDED RETURN
   2743                    }
   2744                  }
   2745                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   2746                  {
   2747                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   2748                    {
   2749                      *pCmd = pRec->pCmdRecs[i];
   2750          
   2751                      // Update command ID
   2752                      *pCmdID = pCmd->cmdID;
   2753          
   2754                      return ( TRUE ); // EMBEDDED RETURN
   2755                    }
   2756                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   2757                    {
   2758                      *pCmd = pRec->pCmdRecs[i];
   2759          
   2760                      // Update command ID
   2761                      *pCmdID = pCmd->cmdID;
   2762          
   2763                      return ( TRUE ); // EMBEDDED RETURN
   2764                    }
   2765                  }
   2766                  else
   2767                  {
   2768                    return ( FALSE ); // Incorrect Command ID
   2769                  }
   2770                }
   2771              }
   2772            }
   2773          
   2774            return ( FALSE );
   2775          }
   2776          
   2777          /*********************************************************************
   2778           * @fn      zclFindNextAttrRec
   2779           *
   2780           * @brief   Find the attribute (or next) record that matchs the parameters
   2781           *
   2782           * @param   endpoint - Application's endpoint
   2783           * @param   clusterID - cluster ID
   2784           * @param   attr - attribute looking for
   2785           *
   2786           * @return  pointer to attribute record, NULL if not found
   2787           */
   2788          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   2789                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2790          {
   2791            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   2792            uint8 attrDir;
   2793          
   2794            if ( pRec != NULL )
   2795            {
   2796              uint16 x;
   2797          
   2798              for ( x = 0; x < pRec->numAttributes; x++ )
   2799              {
   2800                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2801                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   2802                {
   2803                  // also make sure direction is right
   2804                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2805                  if ( attrDir == direction )
   2806                  {
   2807                    // return attribute and found attribute ID
   2808                    *pAttr = pRec->attrs[x];
   2809                    *attrId = pAttr->attr.attrId;
   2810          
   2811                    return ( TRUE ); // EMBEDDED RETURN
   2812                  }
   2813                }
   2814              }
   2815            }
   2816          
   2817            return ( FALSE );
   2818          }
   2819          #endif // ZCL_DISCOVER
   2820          
   2821          /*********************************************************************
   2822           * @fn      zclSerializeData
   2823           *
   2824           * @brief   Builds a buffer from the attribute data to sent out over
   2825           *          the air.
   2826           *          NOTE - Not compatible with application's attributes callbacks.
   2827           *
   2828           * @param   dataType - data types defined in zcl.h
   2829           * @param   attrData - pointer to the attribute data
   2830           * @param   buf - where to put the serialized data
   2831           *
   2832           * @return  pointer to end of destination buffer
   2833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2834          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2836            uint8 *pStr;
   2837            uint16 len;
   2838          
   2839            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2840            {
   2841              return ( buf );
   2842            }
   2843          
   2844            switch ( dataType )
   \   000014   E9           MOV       A,R1
   \   000015   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000018   04           DB        4
   \   000019   41           DB        65
   \   00001A   42           DB        66
   \   00001B   ....         DW        ??zclSerializeData_1
   \   00001D   43           DB        67
   \   00001E   44           DB        68
   \   00001F   ....         DW        ??zclSerializeData_2
   \   000021   E0           DB        224
   \   000022   E2           DB        226
   \   000023   ....         DW        ??zclSerializeData_3
   \   000025   E8           DB        232
   \   000026   E9           DB        233
   \   000027   ....         DW        ??zclSerializeData_4
   \   000029   21           DB        33
   \   00002A   08           DB        8
   \   00002B   ....         DW        ??zclSerializeData_5
   \   00002D   09           DB        9
   \   00002E   ....         DW        ??zclSerializeData_4
   \   000030   0A           DB        10
   \   000031   ....         DW        ??zclSerializeData_6
   \   000033   0B           DB        11
   \   000034   ....         DW        ??zclSerializeData_3
   \   000036   10           DB        16
   \   000037   ....         DW        ??zclSerializeData_5
   \   000039   18           DB        24
   \   00003A   ....         DW        ??zclSerializeData_5
   \   00003C   19           DB        25
   \   00003D   ....         DW        ??zclSerializeData_4
   \   00003F   1A           DB        26
   \   000040   ....         DW        ??zclSerializeData_6
   \   000042   1B           DB        27
   \   000043   ....         DW        ??zclSerializeData_3
   \   000045   20           DB        32
   \   000046   ....         DW        ??zclSerializeData_5
   \   000048   21           DB        33
   \   000049   ....         DW        ??zclSerializeData_4
   \   00004B   22           DB        34
   \   00004C   ....         DW        ??zclSerializeData_6
   \   00004E   23           DB        35
   \   00004F   ....         DW        ??zclSerializeData_3
   \   000051   24           DB        36
   \   000052   ....         DW        ??zclSerializeData_7
   \   000054   25           DB        37
   \   000055   ....         DW        ??zclSerializeData_8
   \   000057   26           DB        38
   \   000058   ....         DW        ??zclSerializeData_9
   \   00005A   27           DB        39
   \   00005B   ....         DW        ??zclSerializeData_10
   \   00005D   28           DB        40
   \   00005E   ....         DW        ??zclSerializeData_5
   \   000060   29           DB        41
   \   000061   ....         DW        ??zclSerializeData_4
   \   000063   2A           DB        42
   \   000064   ....         DW        ??zclSerializeData_6
   \   000066   2B           DB        43
   \   000067   ....         DW        ??zclSerializeData_3
   \   000069   2C           DB        44
   \   00006A   ....         DW        ??zclSerializeData_7
   \   00006C   2D           DB        45
   \   00006D   ....         DW        ??zclSerializeData_8
   \   00006F   2E           DB        46
   \   000070   ....         DW        ??zclSerializeData_9
   \   000072   2F           DB        47
   \   000073   ....         DW        ??zclSerializeData_10
   \   000075   30           DB        48
   \   000076   ....         DW        ??zclSerializeData_5
   \   000078   31           DB        49
   \   000079   ....         DW        ??zclSerializeData_4
   \   00007B   38           DB        56
   \   00007C   ....         DW        ??zclSerializeData_4
   \   00007E   39           DB        57
   \   00007F   ....         DW        ??zclSerializeData_3
   \   000081   3A           DB        58
   \   000082   ....         DW        ??zclSerializeData_10
   \   000084   EA           DB        234
   \   000085   ....         DW        ??zclSerializeData_3
   \   000087   F0           DB        240
   \   000088   ....         DW        ??zclSerializeData_10
   \   00008A   F1           DB        241
   \   00008B   ....         DW        ??zclSerializeData_11
   \   00008D   ....         DW        ??zclSerializeData_0
   2845            {
   2846              case ZCL_DATATYPE_DATA8:
   2847              case ZCL_DATATYPE_BOOLEAN:
   2848              case ZCL_DATATYPE_BITMAP8:
   2849              case ZCL_DATATYPE_INT8:
   2850              case ZCL_DATATYPE_UINT8:
   2851              case ZCL_DATATYPE_ENUM8:
   2852                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   E0           MOVX      A,@DPTR
   \   000094   8A82         MOV       DPL,R2
   \   000096   8B83         MOV       DPH,R3
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   AA82         MOV       R2,DPL
   \   00009C   AB83         MOV       R3,DPH
   2853                 break;
   \   00009E   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2854          
   2855              case ZCL_DATATYPE_DATA16:
   2856              case ZCL_DATATYPE_BITMAP16:
   2857              case ZCL_DATATYPE_UINT16:
   2858              case ZCL_DATATYPE_INT16:
   2859              case ZCL_DATATYPE_ENUM16:
   2860              case ZCL_DATATYPE_SEMI_PREC:
   2861              case ZCL_DATATYPE_CLUSTER_ID:
   2862              case ZCL_DATATYPE_ATTR_ID:
   2863                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000A1   12....       LCALL     ?Subroutine7 & 0xFFFF
   2864                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_4:
   \   0000A4   EA           MOV       A,R2
   \   0000A5   2402         ADD       A,#0x2
   \   0000A7   FA           MOV       R2,A
   \   0000A8   5001         JNC       ??zclSerializeData_12
   \   0000AA   0B           INC       R3
   2865                break;
   \                     ??zclSerializeData_12:
   \   0000AB   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2866          
   2867              case ZCL_DATATYPE_DATA24:
   2868              case ZCL_DATATYPE_BITMAP24:
   2869              case ZCL_DATATYPE_UINT24:
   2870              case ZCL_DATATYPE_INT24:
   2871                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000AE   8E82         MOV       DPL,R6
   \   0000B0   8F83         MOV       DPH,R7
   \   0000B2   78..         MOV       R0,#?V4
   \   0000B4   12....       LCALL     ?L_MOV_X
   \   0000B7   8A82         MOV       DPL,R2
   \   0000B9   8B83         MOV       DPH,R3
   \   0000BB   E5..         MOV       A,?V4
   \   0000BD   12....       LCALL     ?Subroutine40 & 0xFFFF
   2872                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_78:
   \   0000C0   78..         MOV       R0,#?V4
   \   0000C2   12....       LCALL     ?L_MOV_X
   \   0000C5   E5..         MOV       A,?V5
   \   0000C7   8A82         MOV       DPL,R2
   \   0000C9   8B83         MOV       DPH,R3
   \   0000CB   A3           INC       DPTR
   \   0000CC   12....       LCALL     ?Subroutine40 & 0xFFFF
   2873                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_79:
   \   0000CF   78..         MOV       R0,#?V4
   \   0000D1   12....       LCALL     ?L_MOV_X
   \   0000D4   7410         MOV       A,#0x10
   \   0000D6   78..         MOV       R0,#?V4
   \   0000D8   12....       LCALL     ?UL_SHR
   \   0000DB   8A82         MOV       DPL,R2
   \   0000DD   8B83         MOV       DPH,R3
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   E5..         MOV       A,?V4
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   EA           MOV       A,R2
   \   0000E5   2403         ADD       A,#0x3
   \   0000E7   FA           MOV       R2,A
   \   0000E8   5001         JNC       ??zclSerializeData_13
   \   0000EA   0B           INC       R3
   2874                break;
   \                     ??zclSerializeData_13:
   \   0000EB   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2875          
   2876              case ZCL_DATATYPE_DATA32:
   2877              case ZCL_DATATYPE_BITMAP32:
   2878              case ZCL_DATATYPE_UINT32:
   2879              case ZCL_DATATYPE_INT32:
   2880              case ZCL_DATATYPE_SINGLE_PREC:
   2881              case ZCL_DATATYPE_TOD:
   2882              case ZCL_DATATYPE_DATE:
   2883              case ZCL_DATATYPE_UTC:
   2884              case ZCL_DATATYPE_BAC_OID:
   2885                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   0000EE                ; Setup parameters for call to function osal_buffer_uint32
   \   0000EE   8E82         MOV       DPL,R6
   \   0000F0   8F83         MOV       DPH,R7
   \   0000F2   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000F5   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   0000F8   7404         MOV       A,#0x4
   \   0000FA   12....       LCALL     ?DEALLOC_XSTACK8
   2886                break;
   \   0000FD   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2887          
   2888              case ZCL_DATATYPE_UINT40:
   2889              case ZCL_DATATYPE_INT40:
   2890                pStr = (uint8*)attrData;
   2891                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000100                ; Setup parameters for call to function osal_memcpy
   \   000100   8E..         MOV       ?V4,R6
   \   000102   8F..         MOV       ?V5,R7
   \   000104   75..00       MOV       ?V6,#0x0
   \   000107   78..         MOV       R0,#?V4
   \   000109   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010C   7C05         MOV       R4,#0x5
   \   00010E   8070         SJMP      ??zclSerializeData_14
   2892                break;
   2893          
   2894              case ZCL_DATATYPE_UINT48:
   2895              case ZCL_DATATYPE_INT48:
   2896                pStr = (uint8*)attrData;
   2897                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   000110                ; Setup parameters for call to function osal_memcpy
   \   000110   8E..         MOV       ?V4,R6
   \   000112   8F..         MOV       ?V5,R7
   \   000114   75..00       MOV       ?V6,#0x0
   \   000117   78..         MOV       R0,#?V4
   \   000119   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011C   7C06         MOV       R4,#0x6
   \   00011E   8060         SJMP      ??zclSerializeData_14
   2898                break;
   2899          
   2900              case ZCL_DATATYPE_UINT56:
   2901              case ZCL_DATATYPE_INT56:
   2902                pStr = (uint8*)attrData;
   2903                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000120                ; Setup parameters for call to function osal_memcpy
   \   000120   8E..         MOV       ?V4,R6
   \   000122   8F..         MOV       ?V5,R7
   \   000124   75..00       MOV       ?V6,#0x0
   \   000127   78..         MOV       R0,#?V4
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012C   7C07         MOV       R4,#0x7
   \   00012E   8050         SJMP      ??zclSerializeData_14
   2904                break;
   2905          
   2906              case ZCL_DATATYPE_DOUBLE_PREC:
   2907              case ZCL_DATATYPE_IEEE_ADDR:
   2908              case ZCL_DATATYPE_UINT64:
   2909              case ZCL_DATATYPE_INT64:
   2910                pStr = (uint8*)attrData;
   2911                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   000130                ; Setup parameters for call to function osal_memcpy
   \   000130   8E..         MOV       ?V4,R6
   \   000132   8F..         MOV       ?V5,R7
   \   000134   75..00       MOV       ?V6,#0x0
   \   000137   78..         MOV       R0,#?V4
   \   000139   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013C   7C08         MOV       R4,#0x8
   \   00013E   8040         SJMP      ??zclSerializeData_14
   2912                break;
   2913          
   2914              case ZCL_DATATYPE_CHAR_STR:
   2915              case ZCL_DATATYPE_OCTET_STR:
   2916                pStr = (uint8*)attrData;
   2917                len = *pStr;
   2918                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   000140                ; Setup parameters for call to function osal_memcpy
   \   000140   8E..         MOV       ?V4,R6
   \   000142   8F..         MOV       ?V5,R7
   \   000144   75..00       MOV       ?V6,#0x0
   \   000147   78..         MOV       R0,#?V4
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014C   8E82         MOV       DPL,R6
   \   00014E   8F83         MOV       DPH,R7
   \   000150   E0           MOVX      A,@DPTR
   \   000151   2401         ADD       A,#0x1
   \   000153   FC           MOV       R4,A
   \   000154   E4           CLR       A
   \   000155   3400         ADDC      A,#0x0
   \   000157   8016         SJMP      ??zclSerializeData_15
   2919                break;
   2920          
   2921              case ZCL_DATATYPE_LONG_CHAR_STR:
   2922              case ZCL_DATATYPE_LONG_OCTET_STR:
   2923                pStr = (uint8*)attrData;
   2924                len = BUILD_UINT16( pStr[0], pStr[1] );
   2925                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   000159                ; Setup parameters for call to function osal_memcpy
   \   000159   8E..         MOV       ?V4,R6
   \   00015B   8F..         MOV       ?V5,R7
   \   00015D   75..00       MOV       ?V6,#0x0
   \   000160   78..         MOV       R0,#?V4
   \   000162   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000165   8E82         MOV       DPL,R6
   \   000167   8F83         MOV       DPH,R7
   \   000169   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00016C   FC           MOV       R4,A
   \   00016D   E4           CLR       A
   \   00016E   39           ADDC      A,R1
   \                     ??zclSerializeData_15:
   \   00016F   FD           MOV       R5,A
   \   000170   8010         SJMP      ??zclSerializeData_16
   2926                break;
   2927          
   2928              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   2929                pStr = (uint8*)attrData;
   2930                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   000172                ; Setup parameters for call to function osal_memcpy
   \   000172   8E..         MOV       ?V4,R6
   \   000174   8F..         MOV       ?V5,R7
   \   000176   75..00       MOV       ?V6,#0x0
   \   000179   78..         MOV       R0,#?V4
   \   00017B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00017E   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_14:
   \   000180   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_16:
   \   000182   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000185   7403         MOV       A,#0x3
   \   000187   12....       LCALL     ?DEALLOC_XSTACK8
   2931                break;
   2932          
   2933              case ZCL_DATATYPE_NO_DATA:
   2934              case ZCL_DATATYPE_UNKNOWN:
   2935                // Fall through
   2936          
   2937              default:
   2938                break;
   2939            }
   2940          
   2941            return ( buf );
   \                     ??zclSerializeData_0:
   \   00018A   7F08         MOV       R7,#0x8
   \   00018C   02....       LJMP      ?BANKED_LEAVE_XDATA
   2942          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EC           MOV       A,R4
   \   000006   2402         ADD       A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   \   000014   22           RET
   2943          
   2944          #ifdef ZCL_REPORT
   2945          /*********************************************************************
   2946           * @fn      zclAnalogDataType
   2947           *
   2948           * @brief   Checks to see if Data Type is Analog
   2949           *
   2950           * @param   dataType - data type
   2951           *
   2952           * @return  TRUE if data type is analog
   2953           */
   2954          uint8 zclAnalogDataType( uint8 dataType )
   2955          {
   2956            uint8 analog;
   2957          
   2958            switch ( dataType )
   2959            {
   2960              case ZCL_DATATYPE_UINT8:
   2961              case ZCL_DATATYPE_UINT16:
   2962              case ZCL_DATATYPE_UINT24:
   2963              case ZCL_DATATYPE_UINT32:
   2964              case ZCL_DATATYPE_UINT40:
   2965              case ZCL_DATATYPE_UINT48:
   2966              case ZCL_DATATYPE_UINT56:
   2967              case ZCL_DATATYPE_UINT64:
   2968              case ZCL_DATATYPE_INT8:
   2969              case ZCL_DATATYPE_INT16:
   2970              case ZCL_DATATYPE_INT24:
   2971              case ZCL_DATATYPE_INT32:
   2972              case ZCL_DATATYPE_INT40:
   2973              case ZCL_DATATYPE_INT48:
   2974              case ZCL_DATATYPE_INT56:
   2975              case ZCL_DATATYPE_INT64:
   2976              case ZCL_DATATYPE_SEMI_PREC:
   2977              case ZCL_DATATYPE_SINGLE_PREC:
   2978              case ZCL_DATATYPE_DOUBLE_PREC:
   2979              case ZCL_DATATYPE_TOD:
   2980              case ZCL_DATATYPE_DATE:
   2981              case ZCL_DATATYPE_UTC:
   2982                analog = TRUE;
   2983                break;
   2984          
   2985              default:
   2986                analog = FALSE;
   2987                break;
   2988            }
   2989          
   2990            return ( analog );
   2991          }
   2992          
   2993          /*********************************************************************
   2994           * @fn      zclIsLittleEndianMachine
   2995           *
   2996           * @brief   Verifies endianness in system.
   2997           *
   2998           * @param   none
   2999           *
   3000           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3001           */
   3002          static int zclIsLittleEndianMachine(void)
   3003          {
   3004            uint16 test = 0x0001;
   3005          
   3006            return (*((uint8 *)(&test)));
   3007          }
   3008          
   3009          /*********************************************************************
   3010           * @fn      zcl_BuildAnalogData
   3011           *
   3012           * @brief   Build an analog arribute out of sequential bytes.
   3013           *
   3014           * @param   dataType - type of data
   3015           * @param   pData - pointer to data
   3016           * @param   pBuf - where to put the data
   3017           *
   3018           * @return  none
   3019           */
   3020          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   3021          {
   3022            int current_byte_index;
   3023            int remaining_bytes;
   3024            int step;
   3025          
   3026            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   3027          
   3028            // decide if move forward or backwards to copy data
   3029            if ( zclIsLittleEndianMachine() )
   3030            {
   3031              step = 1;
   3032              current_byte_index = 0;
   3033            }
   3034            else
   3035            {
   3036              step = -1;
   3037              current_byte_index = remaining_bytes - 1;
   3038            }
   3039          
   3040            while ( remaining_bytes-- )
   3041            {
   3042              pData[current_byte_index] = *(pBuf++);
   3043              current_byte_index += step;
   3044            }
   3045          }
   3046          #endif // ZCL_REPORT
   3047          
   3048          /*********************************************************************
   3049           * @fn      zclGetDataTypeLength
   3050           *
   3051           * @brief   Return the length of the datatype in octet.
   3052           *
   3053           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3054           *                ZCL_DATATYPE_CHAR_STR data types.
   3055           *
   3056           * @param   dataType - data type
   3057           *
   3058           * @return  length of data
   3059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3060          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3061          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3062            uint8 len;
   3063          
   3064            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3065            {
   3066              case ZCL_DATATYPE_DATA8:
   3067              case ZCL_DATATYPE_BOOLEAN:
   3068              case ZCL_DATATYPE_BITMAP8:
   3069              case ZCL_DATATYPE_INT8:
   3070              case ZCL_DATATYPE_UINT8:
   3071              case ZCL_DATATYPE_ENUM8:
   3072                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3073                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3074          
   3075              case ZCL_DATATYPE_DATA16:
   3076              case ZCL_DATATYPE_BITMAP16:
   3077              case ZCL_DATATYPE_UINT16:
   3078              case ZCL_DATATYPE_INT16:
   3079              case ZCL_DATATYPE_ENUM16:
   3080              case ZCL_DATATYPE_SEMI_PREC:
   3081              case ZCL_DATATYPE_CLUSTER_ID:
   3082              case ZCL_DATATYPE_ATTR_ID:
   3083                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3084                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3085          
   3086              case ZCL_DATATYPE_DATA24:
   3087              case ZCL_DATATYPE_BITMAP24:
   3088              case ZCL_DATATYPE_UINT24:
   3089              case ZCL_DATATYPE_INT24:
   3090                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3091                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3092          
   3093              case ZCL_DATATYPE_DATA32:
   3094              case ZCL_DATATYPE_BITMAP32:
   3095              case ZCL_DATATYPE_UINT32:
   3096              case ZCL_DATATYPE_INT32:
   3097              case ZCL_DATATYPE_SINGLE_PREC:
   3098              case ZCL_DATATYPE_TOD:
   3099              case ZCL_DATATYPE_DATE:
   3100              case ZCL_DATATYPE_UTC:
   3101              case ZCL_DATATYPE_BAC_OID:
   3102                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3103                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3104          
   3105             case ZCL_DATATYPE_UINT40:
   3106             case ZCL_DATATYPE_INT40:
   3107                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3108                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3109          
   3110             case ZCL_DATATYPE_UINT48:
   3111             case ZCL_DATATYPE_INT48:
   3112                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3113                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3114          
   3115             case ZCL_DATATYPE_UINT56:
   3116             case ZCL_DATATYPE_INT56:
   3117                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3118                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3119          
   3120             case ZCL_DATATYPE_DOUBLE_PREC:
   3121             case ZCL_DATATYPE_IEEE_ADDR:
   3122             case ZCL_DATATYPE_UINT64:
   3123             case ZCL_DATATYPE_INT64:
   3124               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3125               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3126          
   3127              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3128               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3129               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3130          
   3131              case ZCL_DATATYPE_NO_DATA:
   3132              case ZCL_DATATYPE_UNKNOWN:
   3133                // Fall through
   3134          
   3135              default:
   3136                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3137                break;
   3138            }
   3139          
   3140            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3141          }
   3142          
   3143          /*********************************************************************
   3144           * @fn      zclGetAttrDataLength
   3145           *
   3146           * @brief   Return the length of the attribute.
   3147           *
   3148           * @param   dataType - data type
   3149           * @param   pData - pointer to data
   3150           *
   3151           * @return  returns atrribute length
   3152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3153          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3154          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3155            uint16 dataLen = 0;
   3156          
   3157            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   700C         JNZ       ??zclGetAttrDataLength_1
   3158            {
   3159              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ?Subroutine37 & 0xFFFF
   3160            }
   \                     ??CrossCallReturnLabel_71:
   \   000018   FA           MOV       R2,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   8015         SJMP      ??zclGetAttrDataLength_2
   3161            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV       A,#0x42
   \   00001F   6E           XRL       A,R6
   \   000020   6005         JZ        ??zclGetAttrDataLength_3
   \   000022   7441         MOV       A,#0x41
   \   000024   6E           XRL       A,R6
   \   000025   700E         JNZ       ??zclGetAttrDataLength_4
   3162            {
   3163              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV       R3,A
   \   000033   8007         SJMP      ??zclGetAttrDataLength_5
   3164            }
   3165            else
   3166            {
   3167              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV       A,R1
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   3168            }
   3169          
   3170            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   02....       LJMP      ??Subroutine58_0 & 0xFFFF
   3171          }
   3172          
   3173          #ifdef ZCL_READ
   3174          /*********************************************************************
   3175           * @fn      zclReadAttrData
   3176           *
   3177           * @brief   Read the attribute's current value into pAttrData.
   3178           *          NOTE - Not compatible with application's attributes callbacks.
   3179           *
   3180           * @param   pAttrData - where to put attribute data
   3181           * @param   pAttr - pointer to attribute
   3182           * @param   pDataLen - where to put attribute data length
   3183           *
   3184           * @return Success
   3185           */
   3186          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   3187          {
   3188            uint16 dataLen;
   3189          
   3190            if ( pAttr->attr.dataPtr == NULL )
   3191            {
   3192              return ( ZCL_STATUS_FAILURE );
   3193            }
   3194          
   3195            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   3196            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   3197          
   3198            if ( pDataLen != NULL )
   3199            {
   3200              *pDataLen = dataLen;
   3201            }
   3202          
   3203            return ( ZCL_STATUS_SUCCESS );
   3204          }
   3205          
   3206          /*********************************************************************
   3207           * @fn      zcl_ReadAttrData
   3208           *
   3209           * @brief   Read the attribute's current value into pAttrData.
   3210           *          Use application's callback function if assigned to this attribute.
   3211           *
   3212           * @param   endpoint - application's endpoint
   3213           * @param   clusterId - cluster that attribute belongs to
   3214           * @param   attrId - attribute id
   3215           * @param   pAttrData - where to put attribute data
   3216           * @param   pDataLen - where to put attribute data length
   3217           *
   3218           * @return  Successful if data was read
   3219           */
   3220          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   3221                                                   uint8 *pAttrData, uint16 *pDataLen )
   3222          {
   3223            zclAttrRec_t attrRec;
   3224          
   3225            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   3226            {
   3227              return ( ZCL_STATUS_FAILURE );
   3228            }
   3229          
   3230            if ( attrRec.attr.dataPtr != NULL )
   3231            {
   3232              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   3233            }
   3234            else
   3235            {
   3236              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   3237            }
   3238          }
   3239          
   3240          /*********************************************************************
   3241           * @fn      zclGetAttrDataLengthUsingCB
   3242           *
   3243           * @brief   Use application's callback to get the length of the attribute's
   3244           *          current value stored in the database.
   3245           *
   3246           * @param   endpoint - application's endpoint
   3247           * @param   clusterId - cluster that attribute belongs to
   3248           * @param   attrId - attribute id
   3249           *
   3250           * @return  returns attribute length
   3251           */
   3252          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   3253          {
   3254            uint16 dataLen = 0;
   3255            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   3256          
   3257            if ( pfnReadWriteCB != NULL )
   3258            {
   3259              // Only get the attribute length
   3260              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   3261            }
   3262          
   3263            return ( dataLen );
   3264          }
   3265          
   3266          /*********************************************************************
   3267           * @fn      zclReadAttrDataUsingCB
   3268           *
   3269           * @brief   Use application's callback to read the attribute's current
   3270           *          value stored in the database.
   3271           *
   3272           * @param   endpoint - application's endpoint
   3273           * @param   clusterId - cluster that attribute belongs to
   3274           * @param   attrId - attribute id
   3275           * @param   pAttrData - where to put attribute data
   3276           * @param   pDataLen - where to put attribute data length
   3277           *
   3278           * @return  Successful if data was read
   3279           */
   3280          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   3281                                                   uint8 *pAttrData, uint16 *pDataLen )
   3282          {
   3283            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   3284          
   3285            if ( pDataLen != NULL )
   3286            {
   3287              *pDataLen = 0; // Always initialize it to 0
   3288            }
   3289          
   3290            if ( pfnReadWriteCB != NULL )
   3291            {
   3292              // Read the attribute value and its length
   3293              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   3294            }
   3295          
   3296            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   3297          }
   3298          
   3299          /*********************************************************************
   3300           * @fn      zclAuthorizeRead
   3301           *
   3302           * @brief   Use application's callback to authorize a Read operation
   3303           *          on a given attribute.
   3304           *
   3305           * @param   endpoint - application's endpoint
   3306           * @param   srcAddr - source Address
   3307           * @param   pAttr - pointer to attribute
   3308           *
   3309           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3310           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3311           */
   3312          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3313          {
   3314            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   3315            {
   3316              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3317          
   3318              if ( pfnAuthorizeCB != NULL )
   3319              {
   3320                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   3321              }
   3322            }
   3323          
   3324            return ( ZCL_STATUS_SUCCESS );
   3325          }
   3326          #endif // ZCL_READ
   3327          
   3328          #ifdef ZCL_WRITE
   3329          /*********************************************************************
   3330           * @fn      zclWriteAttrData
   3331           *
   3332           * @brief   Write the received data.
   3333           *
   3334           * @param   endpoint - application's endpoint
   3335           * @param   pAttr - where to write data to
   3336           * @param   pWriteRec - data to be written
   3337           *
   3338           * @return  Successful if data was written
   3339           */
   3340          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   3341                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3342          {
   3343            uint8 status;
   3344          
   3345            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   3346            {
   3347              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   3348              if ( status == ZCL_STATUS_SUCCESS )
   3349              {
   3350                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   3351                {
   3352                  // Write the attribute value
   3353                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   3354                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   3355          
   3356                  status = ZCL_STATUS_SUCCESS;
   3357                }
   3358                else
   3359                {
   3360                  status = ZCL_STATUS_INVALID_VALUE;
   3361                }
   3362              }
   3363            }
   3364            else
   3365            {
   3366              status = ZCL_STATUS_READ_ONLY;
   3367            }
   3368          
   3369            return ( status );
   3370          }
   3371          
   3372          /*********************************************************************
   3373           * @fn      zclWriteAttrDataUsingCB
   3374           *
   3375           * @brief   Use application's callback to write the attribute's current
   3376           *          value stored in the database.
   3377           *
   3378           * @param   endpoint - application's endpoint
   3379           * @param   pAttr - where to write data to
   3380           * @param   pAttrData - data to be written
   3381           *
   3382           * @return  Successful if data was written
   3383           */
   3384          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   3385                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3386          {
   3387            uint8 status;
   3388          
   3389            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   3390            {
   3391              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   3392              if ( status == ZCL_STATUS_SUCCESS )
   3393              {
   3394                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   3395                if ( pfnReadWriteCB != NULL )
   3396                {
   3397                  // Write the attribute value
   3398                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3399                                              ZCL_OPER_WRITE, pAttrData, NULL );
   3400                }
   3401                else
   3402                {
   3403                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   3404                }
   3405              }
   3406            }
   3407            else
   3408            {
   3409              status = ZCL_STATUS_READ_ONLY;
   3410            }
   3411          
   3412            return ( status );
   3413          }
   3414          
   3415          /*********************************************************************
   3416           * @fn      zclAuthorizeWrite
   3417           *
   3418           * @brief   Use application's callback to authorize a Write operation
   3419           *          on a given attribute.
   3420           *
   3421           * @param   endpoint - application's endpoint
   3422           * @param   srcAddr - source Address
   3423           * @param   pAttr - pointer to attribute
   3424           *
   3425           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3426           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3427           */
   3428          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3429          {
   3430            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   3431            {
   3432              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3433          
   3434              if ( pfnAuthorizeCB != NULL )
   3435              {
   3436                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   3437              }
   3438            }
   3439          
   3440            return ( ZCL_STATUS_SUCCESS );
   3441          }
   3442          #endif // ZCL_WRITE
   3443          
   3444          #ifdef ZCL_READ
   3445          /*********************************************************************
   3446           * @fn      zclParseInReadCmd
   3447           *
   3448           * @brief   Parse the "Profile" Read Commands
   3449           *
   3450           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3451           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3452           *
   3453           * @param   pCmd - pointer to incoming data to parse
   3454           *
   3455           * @return  pointer to the parsed command structure
   3456           */
   3457          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   3458          {
   3459            zclReadCmd_t *readCmd;
   3460            uint8 *pBuf = pCmd->pData;
   3461          
   3462            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   3463            if ( readCmd != NULL )
   3464            {
   3465              uint8 i;
   3466              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   3467              for ( i = 0; i < readCmd->numAttr; i++ )
   3468              {
   3469                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   3470                pBuf += 2;
   3471              }
   3472            }
   3473          
   3474            return ( (void *)readCmd );
   3475          }
   3476          
   3477          /*********************************************************************
   3478           * @fn      zclParseInReadRspCmd
   3479           *
   3480           * @brief   Parse the "Profile" Read Response Commands
   3481           *
   3482           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3483           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3484           *
   3485           * @param   pCmd - pointer to incoming data to parse
   3486           *
   3487           * @return  pointer to the parsed command structure
   3488           */
   3489          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   3490          {
   3491            zclReadRspCmd_t *readRspCmd;
   3492            uint8 *pBuf = pCmd->pData;
   3493            uint8 *dataPtr;
   3494            uint8 numAttr = 0;
   3495            uint8 hdrLen;
   3496            uint16 dataLen = 0;
   3497            uint16 attrDataLen;
   3498          
   3499            // find out the number of attributes and the length of attribute data
   3500            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3501            {
   3502              uint8 status;
   3503          
   3504              numAttr++;
   3505              pBuf += 2; // move pass attribute id
   3506          
   3507              status = *pBuf++;
   3508              if ( status == ZCL_STATUS_SUCCESS )
   3509              {
   3510                uint8 dataType = *pBuf++;
   3511          
   3512                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   3513                pBuf += attrDataLen; // move pass attribute data
   3514          
   3515                // add padding if needed
   3516                if ( PADDING_NEEDED( attrDataLen ) )
   3517                {
   3518                  attrDataLen++;
   3519                }
   3520          
   3521                dataLen += attrDataLen;
   3522              }
   3523            }
   3524          
   3525            // calculate the length of the response header
   3526            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   3527          
   3528            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3529            if ( readRspCmd != NULL )
   3530            {
   3531              uint8 i;
   3532              pBuf = pCmd->pData;
   3533              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   3534          
   3535              readRspCmd->numAttr = numAttr;
   3536              for ( i = 0; i < numAttr; i++ )
   3537              {
   3538                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   3539          
   3540                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3541                pBuf += 2;
   3542          
   3543                statusRec->status = *pBuf++;
   3544                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   3545                {
   3546                  statusRec->dataType = *pBuf++;
   3547          
   3548                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   3549                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   3550                  statusRec->data = dataPtr;
   3551          
   3552                  pBuf += attrDataLen; // move pass attribute data
   3553          
   3554                  // advance attribute data pointer
   3555                  if ( PADDING_NEEDED( attrDataLen ) )
   3556                  {
   3557                    attrDataLen++;
   3558                  }
   3559          
   3560                  dataPtr += attrDataLen;
   3561                }
   3562              }
   3563            }
   3564          
   3565            return ( (void *)readRspCmd );
   3566          }
   3567          #endif // ZCL_READ
   3568          
   3569          #ifdef ZCL_WRITE
   3570          /*********************************************************************
   3571           * @fn      zclParseInWriteCmd
   3572           *
   3573           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3574           *          Response Commands
   3575           *
   3576           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3577           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3578           *
   3579           * @param   pCmd - pointer to incoming data to parse
   3580           *
   3581           * @return  pointer to the parsed command structure
   3582           */
   3583          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   3584          {
   3585            zclWriteCmd_t *writeCmd;
   3586            uint8 *pBuf = pCmd->pData;
   3587            uint16 attrDataLen;
   3588            uint8 *dataPtr;
   3589            uint8 numAttr = 0;
   3590            uint8 hdrLen;
   3591            uint16 dataLen = 0;
   3592          
   3593            // find out the number of attributes and the length of attribute data
   3594            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3595            {
   3596              uint8 dataType;
   3597          
   3598              numAttr++;
   3599              pBuf += 2; // move pass attribute id
   3600          
   3601              dataType = *pBuf++;
   3602          
   3603              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   3604              pBuf += attrDataLen; // move pass attribute data
   3605          
   3606              // add padding if needed
   3607              if ( PADDING_NEEDED( attrDataLen ) )
   3608              {
   3609                attrDataLen++;
   3610              }
   3611          
   3612              dataLen += attrDataLen;
   3613            }
   3614          
   3615            // calculate the length of the response header
   3616            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   3617          
   3618            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3619            if ( writeCmd != NULL )
   3620            {
   3621              uint8 i;
   3622              pBuf = pCmd->pData;
   3623              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   3624          
   3625              writeCmd->numAttr = numAttr;
   3626              for ( i = 0; i < numAttr; i++ )
   3627              {
   3628                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   3629          
   3630                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3631                pBuf += 2;
   3632                statusRec->dataType = *pBuf++;
   3633          
   3634                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   3635                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   3636                statusRec->attrData = dataPtr;
   3637          
   3638                pBuf += attrDataLen; // move pass attribute data
   3639          
   3640                // advance attribute data pointer
   3641                if ( PADDING_NEEDED( attrDataLen ) )
   3642                {
   3643                  attrDataLen++;
   3644                }
   3645          
   3646                dataPtr += attrDataLen;
   3647              }
   3648            }
   3649          
   3650            return ( (void *)writeCmd );
   3651          }
   3652          
   3653          /*********************************************************************
   3654           * @fn      zclParseInWriteRspCmd
   3655           *
   3656           * @brief   Parse the "Profile" Write Response Commands
   3657           *
   3658           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3659           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3660           *
   3661           * @param   pCmd - pointer to incoming data to parse
   3662           *
   3663           * @return  pointer to the parsed command structure
   3664           */
   3665          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   3666          {
   3667            zclWriteRspCmd_t *writeRspCmd;
   3668            uint8 *pBuf = pCmd->pData;
   3669            uint8 i = 0;
   3670          
   3671            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   3672            if ( writeRspCmd != NULL )
   3673            {
   3674              if ( pCmd->dataLen == 1 )
   3675              {
   3676                // special case when all writes were successfull
   3677                writeRspCmd->attrList[i++].status = *pBuf;
   3678              }
   3679              else
   3680              {
   3681                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3682                {
   3683                  writeRspCmd->attrList[i].status = *pBuf++;
   3684                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3685                  pBuf += 2;
   3686                }
   3687              }
   3688          
   3689              writeRspCmd->numAttr = i;
   3690            }
   3691          
   3692            return ( (void *)writeRspCmd );
   3693          }
   3694          #endif // ZCL_WRITE
   3695          
   3696          #ifdef ZCL_REPORT
   3697          /*********************************************************************
   3698           * @fn      zclParseInConfigReportCmd
   3699           *
   3700           * @brief   Parse the "Profile" Configure Reporting Command
   3701           *
   3702           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3703           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3704           *
   3705           * @param   pCmd - pointer to incoming data to parse
   3706           *
   3707           * @return  pointer to the parsed command structure
   3708           */
   3709          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   3710          {
   3711            zclCfgReportCmd_t *cfgReportCmd;
   3712            uint8 *pBuf = pCmd->pData;
   3713            uint8 *dataPtr;
   3714            uint8 numAttr = 0;
   3715            uint8 dataType;
   3716            uint8 hdrLen;
   3717            uint16 dataLen = 0;
   3718            uint8 reportChangeLen; // length of Reportable Change field
   3719          
   3720            // Calculate the length of the Request command
   3721            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3722            {
   3723              uint8 direction;
   3724          
   3725              numAttr++;
   3726              direction = *pBuf++;
   3727              pBuf += 2; // move pass the attribute ID
   3728          
   3729              // Is there a Reportable Change field?
   3730              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3731              {
   3732                dataType = *pBuf++;
   3733                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3734          
   3735                // For attributes of 'discrete' data types this field is omitted
   3736                if ( zclAnalogDataType( dataType ) )
   3737                {
   3738                  reportChangeLen = zclGetDataTypeLength( dataType );
   3739                  pBuf += reportChangeLen;
   3740          
   3741                  // add padding if needed
   3742                  if ( PADDING_NEEDED( reportChangeLen ) )
   3743                  {
   3744                    reportChangeLen++;
   3745                  }
   3746          
   3747                  dataLen += reportChangeLen;
   3748                }
   3749                else
   3750                {
   3751                  pBuf++; // move past reportable change field
   3752                }
   3753              }
   3754              else
   3755              {
   3756                pBuf += 2; // move pass the Timeout Period
   3757              }
   3758            } // while loop
   3759          
   3760            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   3761          
   3762            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3763            if ( cfgReportCmd != NULL )
   3764            {
   3765              uint8 i;
   3766              pBuf = pCmd->pData;
   3767              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   3768          
   3769              cfgReportCmd->numAttr = numAttr;
   3770              for ( i = 0; i < numAttr; i++ )
   3771              {
   3772                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3773          
   3774                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3775          
   3776                reportRec->direction = *pBuf++;
   3777                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3778                pBuf += 2;
   3779                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3780                {
   3781                  // Attribute to be reported
   3782                  reportRec->dataType = *pBuf++;
   3783                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3784                  pBuf += 2;
   3785                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3786                  pBuf += 2;
   3787          
   3788                  // For attributes of 'discrete' data types this field is omitted
   3789                  if ( zclAnalogDataType( reportRec->dataType ) )
   3790                  {
   3791                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3792                    reportRec->reportableChange = dataPtr;
   3793          
   3794                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3795                    pBuf += reportChangeLen;
   3796          
   3797                    // advance attribute data pointer
   3798                    if ( PADDING_NEEDED( reportChangeLen ) )
   3799                    {
   3800                      reportChangeLen++;
   3801                    }
   3802          
   3803                    dataPtr += reportChangeLen;
   3804                  }
   3805                }
   3806                else
   3807                {
   3808                  // Attribute reports to be received
   3809                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   3810                  pBuf += 2;
   3811                }
   3812              } // while loop
   3813            }
   3814          
   3815            return ( (void *)cfgReportCmd );
   3816          }
   3817          
   3818          /*********************************************************************
   3819           * @fn      zclParseInConfigReportRspCmd
   3820           *
   3821           * @brief   Parse the "Profile" Configure Reporting Response Command
   3822           *
   3823           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3824           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3825           *
   3826           * @param   pCmd - pointer to incoming data to parse
   3827           *
   3828           * @return  pointer to the parsed command structure
   3829           */
   3830          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   3831          {
   3832            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3833            uint8 *pBuf = pCmd->pData;
   3834            uint8 numAttr;
   3835          
   3836            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   3837          
   3838            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3839                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   3840            if ( cfgReportRspCmd != NULL )
   3841            {
   3842              uint8 i;
   3843              cfgReportRspCmd->numAttr = numAttr;
   3844              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   3845              {
   3846                cfgReportRspCmd->attrList[i].status = *pBuf++;
   3847                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   3848                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3849                pBuf += 2;
   3850              }
   3851            }
   3852          
   3853            return ( (void *)cfgReportRspCmd );
   3854          }
   3855          
   3856          /*********************************************************************
   3857           * @fn      zclParseInReadReportCfgCmd
   3858           *
   3859           * @brief   Parse the "Profile" Read Reporting Configuration Command
   3860           *
   3861           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3862           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3863           *
   3864           * @param   pCmd - pointer to incoming data to parse
   3865           *
   3866           * @return  pointer to the parsed command structure
   3867           */
   3868          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   3869          {
   3870            zclReadReportCfgCmd_t *readReportCfgCmd;
   3871            uint8 *pBuf = pCmd->pData;
   3872            uint8 numAttr;
   3873          
   3874            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   3875          
   3876            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   3877                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   3878            if ( readReportCfgCmd != NULL )
   3879            {
   3880              uint8 i;
   3881              readReportCfgCmd->numAttr = numAttr;
   3882              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   3883              {
   3884                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   3885                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3886                pBuf += 2;
   3887              }
   3888            }
   3889          
   3890            return ( (void *)readReportCfgCmd );
   3891          }
   3892          
   3893          /*********************************************************************
   3894           * @fn      zclParseInReadReportCfgRspCmd
   3895           *
   3896           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   3897           *
   3898           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3899           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3900           *
   3901           * @param   pCmd - pointer to incoming data to parse
   3902           *
   3903           * @return  pointer to the parsed command structure
   3904           */
   3905          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   3906          {
   3907            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   3908            uint8 reportChangeLen;
   3909            uint8 *pBuf = pCmd->pData;
   3910            uint8 *dataPtr;
   3911            uint8 numAttr = 0;
   3912            uint8 hdrLen;
   3913            uint16 dataLen = 0;
   3914          
   3915            // Calculate the length of the response command
   3916            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3917            {
   3918              uint8 status;
   3919              uint8 direction;
   3920          
   3921              numAttr++;
   3922              status = *pBuf++;
   3923              direction = *pBuf++;
   3924              pBuf += 2; // move pass the attribute ID
   3925          
   3926              if ( status == ZCL_STATUS_SUCCESS )
   3927              {
   3928                if ( direction == ZCL_SEND_ATTR_REPORTS )
   3929                {
   3930                  uint8 dataType = *pBuf++;
   3931                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   3932          
   3933                  // For attributes of 'discrete' data types this field is omitted
   3934                  if ( zclAnalogDataType( dataType ) )
   3935                  {
   3936                    reportChangeLen = zclGetDataTypeLength( dataType );
   3937                    pBuf += reportChangeLen;
   3938          
   3939                    // add padding if needed
   3940                    if ( PADDING_NEEDED( reportChangeLen ) )
   3941                    {
   3942                      reportChangeLen++;
   3943                    }
   3944          
   3945                    dataLen += reportChangeLen;
   3946                  }
   3947                }
   3948                else
   3949                {
   3950                  pBuf += 2; // move pass the Timeout field
   3951                }
   3952              }
   3953            } // while loop
   3954          
   3955            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   3956          
   3957            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3958            if ( readReportCfgRspCmd != NULL )
   3959            {
   3960              uint8 i;
   3961              pBuf = pCmd->pData;
   3962              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   3963          
   3964              readReportCfgRspCmd->numAttr = numAttr;
   3965              for ( i = 0; i < numAttr; i++ )
   3966              {
   3967                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   3968          
   3969                reportRspRec->status = *pBuf++;
   3970                reportRspRec->direction = *pBuf++;
   3971                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3972                pBuf += 2;
   3973          
   3974                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   3975                {
   3976                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   3977                  {
   3978                    reportRspRec->dataType = *pBuf++;
   3979                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3980                    pBuf += 2;
   3981                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3982                    pBuf += 2;
   3983          
   3984                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   3985                    {
   3986                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   3987                      reportRspRec->reportableChange = dataPtr;
   3988          
   3989                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   3990                      pBuf += reportChangeLen;
   3991          
   3992                      // advance attribute data pointer
   3993                      if ( PADDING_NEEDED( reportChangeLen ) )
   3994                      {
   3995                        reportChangeLen++;
   3996                      }
   3997          
   3998                      dataPtr += reportChangeLen;
   3999                    }
   4000                  }
   4001                  else
   4002                  {
   4003                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   4004                    pBuf += 2;
   4005                  }
   4006                }
   4007              }
   4008            }
   4009          
   4010            return ( (void *)readReportCfgRspCmd );
   4011          }
   4012          
   4013          /*********************************************************************
   4014           * @fn      zclParseInReportCmd
   4015           *
   4016           * @brief   Parse the "Profile" Report Command
   4017           *
   4018           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4019           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4020           *
   4021           * @param   pCmd - pointer to incoming data to parse
   4022           *
   4023           * @return  pointer to the parsed command structure
   4024           */
   4025          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   4026          {
   4027            zclReportCmd_t *reportCmd;
   4028            uint8 *pBuf = pCmd->pData;
   4029            uint16 attrDataLen;
   4030            uint8 *dataPtr;
   4031            uint8 numAttr = 0;
   4032            uint8 hdrLen;
   4033            uint16 dataLen = 0;
   4034          
   4035            // find out the number of attributes and the length of attribute data
   4036            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4037            {
   4038              uint8 dataType;
   4039          
   4040              numAttr++;
   4041              pBuf += 2; // move pass attribute id
   4042          
   4043              dataType = *pBuf++;
   4044          
   4045              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   4046              pBuf += attrDataLen; // move pass attribute data
   4047          
   4048              // add padding if needed
   4049              if ( PADDING_NEEDED( attrDataLen ) )
   4050              {
   4051                attrDataLen++;
   4052              }
   4053          
   4054              dataLen += attrDataLen;
   4055            }
   4056          
   4057            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   4058          
   4059            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4060            if (reportCmd != NULL )
   4061            {
   4062              uint8 i;
   4063              pBuf = pCmd->pData;
   4064              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   4065          
   4066              reportCmd->numAttr = numAttr;
   4067              for ( i = 0; i < numAttr; i++ )
   4068              {
   4069                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   4070          
   4071                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4072                pBuf += 2;
   4073                reportRec->dataType = *pBuf++;
   4074          
   4075                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   4076                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   4077                reportRec->attrData = dataPtr;
   4078          
   4079                pBuf += attrDataLen; // move pass attribute data
   4080          
   4081                // advance attribute data pointer
   4082                if ( PADDING_NEEDED( attrDataLen ) )
   4083                {
   4084                  attrDataLen++;
   4085                }
   4086          
   4087                dataPtr += attrDataLen;
   4088              }
   4089            }
   4090          
   4091            return ( (void *)reportCmd );
   4092          }
   4093          #endif // ZCL_REPORT
   4094          
   4095          /*********************************************************************
   4096           * @fn      zclParseInDefaultRspCmd
   4097           *
   4098           * @brief   Parse the "Profile" Default Response Command
   4099           *
   4100           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4101           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4102           *
   4103           * @param   pCmd - pointer to incoming data to parse
   4104           *
   4105           * @return  pointer to the parsed command structure
   4106           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4107          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4108          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4109            zclDefaultRspCmd_t *defaultRspCmd;
   4110            uint8 *pBuf = pCmd->pData;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00000F   E8           MOV       A,R0
   \   000010   FE           MOV       R6,A
   \   000011   E9           MOV       A,R1
   \   000012   FF           MOV       R7,A
   4111          
   4112            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   7A02         MOV       R2,#0x2
   \   000015   7B00         MOV       R3,#0x0
   \   000017   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4113            if ( defaultRspCmd != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   6003         JZ        ??CrossCallReturnLabel_5
   4114            {
   4115              defaultRspCmd->commandID = *pBuf++;
   \   00001E   12....       LCALL     ?Subroutine7 & 0xFFFF
   4116              defaultRspCmd->statusCode = *pBuf;
   4117            }
   4118          
   4119            return ( (void *)defaultRspCmd );
   \                     ??CrossCallReturnLabel_5:
   \   000021   02....       LJMP      ?Subroutine3 & 0xFFFF
   4120          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsgExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsgExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_addExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_addExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_HandleExternal::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_HandleExternal

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getRawAFMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getRawAFMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getParsedTransSeqNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getParsedTransSeqNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerPlugin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerAttrList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerClusterOptionList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerValidateAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_DeviceOperational::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ProcessMessageMSG::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclBuildHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSetSecurityOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSerializeData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetDataTypeLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd
   4121          
   4122          #ifdef ZCL_DISCOVER
   4123          /*********************************************************************
   4124           * @fn      zclParseInDiscAttrsCmd
   4125           *
   4126           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4127           *
   4128           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4129           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4130           *
   4131           * @param   pCmd - pointer to incoming data to parse
   4132           *
   4133           * @return  pointer to the parsed command structure
   4134           */
   4135          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   4136          {
   4137            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4138            uint8 *pBuf = pCmd->pData;
   4139          
   4140            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   4141            if ( pDiscoverCmd != NULL )
   4142            {
   4143              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   4144              pBuf += 2;
   4145              pDiscoverCmd->maxAttrIDs = *pBuf;
   4146            }
   4147          
   4148            return ( (void *)pDiscoverCmd );
   4149          }
   4150          
   4151          /*********************************************************************
   4152           * @fn      zclParseInDiscAttrsRspCmd
   4153           *
   4154           * @brief   Parse the "Profile" Discovery Response Commands
   4155           *
   4156           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4157           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4158           *
   4159           * @param   pCmd - pointer to incoming data to parse
   4160           *
   4161           * @return  pointer to the parsed command structure
   4162           */
   4163          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   4164          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   4165          {
   4166            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4167            uint8 *pBuf = pCmd->pData;
   4168            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   4169          
   4170            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4171                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   4172          
   4173            if ( pDiscoverRspCmd != NULL )
   4174            {
   4175              uint8 i;
   4176          
   4177              pDiscoverRspCmd->discComplete = *pBuf++;
   4178              pDiscoverRspCmd->numAttr = numAttr;
   4179          
   4180              for ( i = 0; i < numAttr; i++ )
   4181              {
   4182                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4183                pBuf += 2;
   4184                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   4185              }
   4186            }
   4187          
   4188            return ( (void *)pDiscoverRspCmd );
   4189          }
   4190          
   4191          /*********************************************************************
   4192           * @fn      zclParseInDiscCmdsCmd
   4193           *
   4194           * @brief   Parse the "Profile" Discovery Commands
   4195           *
   4196           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4197           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4198           *
   4199           * @param   pCmd - pointer to incoming data to parse
   4200           *
   4201           * @return  pointer to the parsed command structure
   4202           */
   4203          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   4204          {
   4205            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4206            uint8 *pBuf = pCmd->pData;
   4207          
   4208            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   4209            if ( pDiscoverCmd != NULL )
   4210            {
   4211              pDiscoverCmd->startCmdID = *pBuf++;
   4212              pDiscoverCmd->maxCmdID = *pBuf++;
   4213            }
   4214          
   4215            return ( (void *)pDiscoverCmd );
   4216          }
   4217          
   4218          /*********************************************************************
   4219           * @fn      zclParseInDiscCmdsRspCmd
   4220           *
   4221           * @brief   Parse the Discover Commands Response Command
   4222           *
   4223           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4224           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4225           *
   4226           * @param   pCmd - pointer to incoming data to parse
   4227           *
   4228           * @return  pointer to the parsed command structure
   4229           */
   4230          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   4231          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   4232          {
   4233            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4234            uint8 *pBuf = pCmd->pData;
   4235            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   4236          
   4237              // allocate memory for size of structure plus variable array
   4238            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4239                              ( numCmds * sizeof(uint8) ) );
   4240            if ( pDiscoverRspCmd != NULL )
   4241            {
   4242              uint8 i;
   4243              pDiscoverRspCmd->discComplete = *pBuf++;
   4244              pDiscoverRspCmd->numCmd = numCmds;
   4245          
   4246              for ( i = 0; i < numCmds; i++ )
   4247              {
   4248                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   4249              }
   4250            }
   4251          
   4252            return ( (void *)pDiscoverRspCmd );
   4253          }
   4254          
   4255          /*********************************************************************
   4256           * @fn      zclParseInDiscAttrsExtRspCmd
   4257           *
   4258           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4259           *
   4260           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4261           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4262           *
   4263           * @param   pCmd - pointer to incoming data to parse
   4264           *
   4265           * @return  pointer to the parsed command structure
   4266           */
   4267          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
   4268          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   4269          {
   4270            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4271            uint8 i;
   4272            uint8 *pBuf = pCmd->pData;
   4273            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   4274          
   4275            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4276                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   4277          
   4278            if ( pDiscoverRspCmd != NULL )
   4279            {
   4280              pDiscoverRspCmd->discComplete = *pBuf++;
   4281              pDiscoverRspCmd->numAttr = numAttrs;
   4282          
   4283              for ( i = 0; i < numAttrs; i++ )
   4284              {
   4285                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4286                pBuf += 2;
   4287                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   4288                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   4289              }
   4290            }
   4291          
   4292            return ( (void *)pDiscoverRspCmd );
   4293          }
   4294          #endif // ZCL_DISCOVER
   4295          
   4296          #ifdef ZCL_READ
   4297          /*********************************************************************
   4298           * @fn      zclProcessInReadCmd
   4299           *
   4300           * @brief   Process the "Profile" Read Command
   4301           *
   4302           * @param   pInMsg - incoming message to process
   4303           *
   4304           * @return  TRUE if command processed. FALSE, otherwise.
   4305           */
   4306          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   4307          {
   4308            zclReadCmd_t *readCmd;
   4309            zclReadRspCmd_t *readRspCmd;
   4310            zclAttrRec_t attrRec;
   4311            uint16 len;
   4312            uint8 i;
   4313          
   4314            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   4315          
   4316            // calculate the length of the response status record
   4317            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4318          
   4319            readRspCmd = zcl_mem_alloc( len );
   4320            if ( readRspCmd == NULL )
   4321            {
   4322              return FALSE; // EMBEDDED RETURN
   4323            }
   4324          
   4325            readRspCmd->numAttr = readCmd->numAttr;
   4326            for ( i = 0; i < readCmd->numAttr; i++ )
   4327            {
   4328              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4329          
   4330              statusRec->attrID = readCmd->attrID[i];
   4331          
   4332              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4333                                   readCmd->attrID[i], &attrRec ) )
   4334              {
   4335                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4336                {
   4337                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4338                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4339                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4340                  {
   4341                    statusRec->data = attrRec.attr.dataPtr;
   4342                    statusRec->dataType = attrRec.attr.dataType;
   4343                  }
   4344                }
   4345                else
   4346                {
   4347                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4348                }
   4349              }
   4350              else
   4351              {
   4352                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4353              }
   4354            }
   4355          
   4356            // Build and send Read Response command
   4357            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4358                             readRspCmd, !pInMsg->hdr.fc.direction,
   4359                             true, pInMsg->hdr.transSeqNum );
   4360            zcl_mem_free( readRspCmd );
   4361          
   4362            return TRUE;
   4363          }
   4364          #endif // ZCL_READ
   4365          
   4366          #ifdef ZCL_WRITE
   4367          /*********************************************************************
   4368           * @fn      processInWriteCmd
   4369           *
   4370           * @brief   Process the "Profile" Write and Write No Response Commands
   4371           *
   4372           * @param   pInMsg - incoming message to process
   4373           *
   4374           * @return  TRUE if command processed. FALSE, otherwise.
   4375           */
   4376          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   4377          {
   4378            zclWriteCmd_t *writeCmd;
   4379            zclWriteRspCmd_t *writeRspCmd;
   4380            uint8 sendRsp = FALSE;
   4381            uint8 j = 0;
   4382            uint8 i;
   4383          
   4384            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   4385            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   4386            {
   4387              // We need to send a response back - allocate space for it
   4388              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4389                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   4390              if ( writeRspCmd == NULL )
   4391              {
   4392                return FALSE; // EMBEDDED RETURN
   4393              }
   4394          
   4395              sendRsp = TRUE;
   4396            }
   4397          
   4398            for ( i = 0; i < writeCmd->numAttr; i++ )
   4399            {
   4400              zclAttrRec_t attrRec;
   4401              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4402          
   4403              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4404                                   statusRec->attrID, &attrRec ) )
   4405              {
   4406                if ( statusRec->dataType == attrRec.attr.dataType )
   4407                {
   4408                  uint8 status;
   4409          
   4410                  // Write the new attribute value
   4411                  if ( attrRec.attr.dataPtr != NULL )
   4412                  {
   4413                    status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4414                                               &attrRec, statusRec );
   4415                  }
   4416                  else // Use CB
   4417                  {
   4418                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4419                                                      &attrRec, statusRec->attrData );
   4420                  }
   4421          
   4422                  // If successful, a write attribute status record shall NOT be generated
   4423                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4424                  {
   4425                    // Attribute is read only - move on to the next write attribute record
   4426                    writeRspCmd->attrList[j].status = status;
   4427                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4428                  }
   4429                }
   4430                else
   4431                {
   4432                  // Attribute data type is incorrect - move on to the next write attribute record
   4433                  if ( sendRsp )
   4434                  {
   4435                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4436                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4437                  }
   4438                }
   4439              }
   4440              else
   4441              {
   4442                // Attribute is not supported - move on to the next write attribute record
   4443                if ( sendRsp )
   4444                {
   4445                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4446                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4447                }
   4448              }
   4449            } // for loop
   4450          
   4451            if ( sendRsp )
   4452            {
   4453              writeRspCmd->numAttr = j;
   4454              if ( writeRspCmd->numAttr == 0 )
   4455              {
   4456                // Since all records were written successful, include a single status record
   4457                // in the resonse command with the status field set to SUCCESS and the
   4458                // attribute ID field omitted.
   4459                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   4460                writeRspCmd->numAttr = 1;
   4461              }
   4462          
   4463              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4464                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4465                                true, pInMsg->hdr.transSeqNum );
   4466              zcl_mem_free( writeRspCmd );
   4467            }
   4468          
   4469            return TRUE;
   4470          }
   4471          
   4472          /*********************************************************************
   4473           * @fn      zclRevertWriteUndividedCmd
   4474           *
   4475           * @brief   Revert the "Profile" Write Undevided Command
   4476           *
   4477           * @param   pInMsg - incoming message to process
   4478           * @param   curWriteRec - old data
   4479           * @param   numAttr - number of attributes to be reverted
   4480           *
   4481           * @return  none
   4482           */
   4483          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   4484                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4485          {
   4486            uint8 i;
   4487          
   4488            for ( i = 0; i < numAttr; i++ )
   4489            {
   4490              zclAttrRec_t attrRec;
   4491              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4492          
   4493              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4494                                    statusRec->attrID, &attrRec ) )
   4495              {
   4496                break; // should never happen
   4497              }
   4498          
   4499              if ( attrRec.attr.dataPtr != NULL )
   4500              {
   4501                // Just copy the old data back - no need to validate the data
   4502                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4503                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4504              }
   4505              else // Use CB
   4506              {
   4507                // Write the old data back
   4508                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4509                                         &attrRec, statusRec->attrData );
   4510              }
   4511            } // for loop
   4512          }
   4513          
   4514          /*********************************************************************
   4515           * @fn      zclProcessInWriteUndividedCmd
   4516           *
   4517           * @brief   Process the "Profile" Write Undivided Command
   4518           *
   4519           * @param   pInMsg - incoming message to process
   4520           *
   4521           * @return  TRUE if command processed. FALSE, otherwise.
   4522           */
   4523          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   4524          {
   4525            zclWriteCmd_t *writeCmd;
   4526            zclWriteRspCmd_t *writeRspCmd;
   4527            zclAttrRec_t attrRec;
   4528            uint16 dataLen;
   4529            uint16 curLen = 0;
   4530            uint8 j = 0;
   4531            uint8 i;
   4532          
   4533            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   4534          
   4535            // Allocate space for Write Response Command
   4536            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4537                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   4538            if ( writeRspCmd == NULL )
   4539            {
   4540              return FALSE; // EMBEDDED RETURN
   4541            }
   4542          
   4543            // If any attribute cannot be written, no attribute values are changed. Hence,
   4544            // make sure all the attributes are supported and writable
   4545            for ( i = 0; i < writeCmd->numAttr; i++ )
   4546            {
   4547              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4548          
   4549              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4550                                    statusRec->attrID, &attrRec ) )
   4551              {
   4552                // Attribute is not supported - stop here
   4553                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4554                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4555                break;
   4556              }
   4557          
   4558              if ( statusRec->dataType != attrRec.attr.dataType )
   4559              {
   4560                // Attribute data type is incorrect - stope here
   4561                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4562                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4563                break;
   4564              }
   4565          
   4566              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4567              {
   4568                // Attribute is not writable - stop here
   4569                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4570                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4571                break;
   4572              }
   4573          
   4574              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4575              {
   4576                // Not authorized to write - stop here
   4577                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4578                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4579                break;
   4580              }
   4581          
   4582              // Attribute Data length
   4583              if ( attrRec.attr.dataPtr != NULL )
   4584              {
   4585                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4586              }
   4587              else // Use CB
   4588              {
   4589                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4590                                                       statusRec->attrID );
   4591              }
   4592          
   4593              // add padding if needed
   4594              if ( PADDING_NEEDED( dataLen ) )
   4595              {
   4596                dataLen++;
   4597              }
   4598          
   4599              curLen += dataLen;
   4600            } // for loop
   4601          
   4602            writeRspCmd->numAttr = j;
   4603            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   4604            {
   4605              uint8 *curDataPtr;
   4606              zclWriteRec_t *curWriteRec;
   4607          
   4608              // calculate the length of the current data header
   4609              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   4610          
   4611              // Allocate space to keep a copy of the current data
   4612              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   4613              if ( curWriteRec == NULL )
   4614              {
   4615                zcl_mem_free(writeRspCmd );
   4616                return FALSE; // EMBEDDED RETURN
   4617              }
   4618          
   4619              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   4620          
   4621              // Write the new data over
   4622              for ( i = 0; i < writeCmd->numAttr; i++ )
   4623              {
   4624                uint8 status;
   4625                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4626                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4627          
   4628                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4629                                      statusRec->attrID, &attrRec ) )
   4630                {
   4631                  break; // should never happen
   4632                }
   4633          
   4634                // Keep a copy of the current data before before writing the new data over
   4635                curStatusRec->attrID = statusRec->attrID;
   4636                curStatusRec->attrData = curDataPtr;
   4637          
   4638                if ( attrRec.attr.dataPtr != NULL )
   4639                {
   4640                  // Read the current value
   4641                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4642          
   4643                  // Write the new attribute value
   4644                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4645                                             &attrRec, statusRec );
   4646                }
   4647                else // Use CBs
   4648                {
   4649                  // Read the current value
   4650                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4651                                          statusRec->attrID, curDataPtr, &dataLen );
   4652                  // Write the new attribute value
   4653                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4654                                                    &attrRec, statusRec->attrData );
   4655                }
   4656          
   4657                // If successful, a write attribute status record shall NOT be generated
   4658                if ( status != ZCL_STATUS_SUCCESS )
   4659                {
   4660                  writeRspCmd->attrList[j].status = status;
   4661                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4662          
   4663                  // Since this write failed, we need to revert all the pervious writes
   4664                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4665                  break;
   4666                }
   4667          
   4668                // add padding if needed
   4669                if ( PADDING_NEEDED( dataLen ) )
   4670                {
   4671                  dataLen++;
   4672                }
   4673          
   4674                curDataPtr += dataLen;
   4675              } // for loop
   4676          
   4677              writeRspCmd->numAttr = j;
   4678              if ( writeRspCmd->numAttr  == 0 )
   4679              {
   4680                // Since all records were written successful, include a single status record
   4681                // in the resonse command with the status field set to SUCCESS and the
   4682                // attribute ID field omitted.
   4683                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   4684                writeRspCmd->numAttr = 1;
   4685              }
   4686          
   4687              zcl_mem_free( curWriteRec );
   4688            }
   4689          
   4690            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4691                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4692                              true, pInMsg->hdr.transSeqNum );
   4693            zcl_mem_free( writeRspCmd );
   4694          
   4695            return TRUE;
   4696          }
   4697          #endif // ZCL_WRITE
   4698          
   4699          #ifdef ZCL_DISCOVER
   4700          /*********************************************************************
   4701           * @fn      zclProcessInDiscAttrs
   4702           *
   4703           * @brief   Process the "Profile" Discover Attributes Commands
   4704           *
   4705           * @param   pInMsg - incoming message to process
   4706           *
   4707           * @return  TRUE if command processed. FALSE, otherwise.
   4708           */
   4709          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   4710          {
   4711            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4712            zclAttrRec_t attrRec;
   4713            uint16 attrID;
   4714            uint8 numAttrs;
   4715            uint8 i;
   4716          
   4717            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   4718          
   4719            // Find out the number of attributes supported within the specified range
   4720            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   4721            {
   4722              // finds the next attribute on this endpoint/cluster after the range.
   4723              // attributes must be in numerical order in the list.
   4724              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4725              {
   4726                break;
   4727              }
   4728            }
   4729          
   4730            numAttrs = i;  // store range of attributes in buffer
   4731          
   4732              // Process message for either attributes or extended attributes
   4733            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   4734            {
   4735              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   4736            }
   4737            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   4738            {
   4739              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   4740            }
   4741          
   4742            return TRUE;
   4743          }
   4744          
   4745          /*********************************************************************
   4746           * @fn      zclProcessInDiscAttrsCmd
   4747           *
   4748           * @brief   Process the Discover Attributes Command
   4749           *
   4750           * @param   pInMsg - incoming message to process
   4751           *
   4752           * @param   pDiscoverCmd - structure from requesting command
   4753           *
   4754           * @param   attrLenBuf - describes the amount of attributes to be processed
   4755           *
   4756           * @return  none
   4757           */
   4758          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   4759          {
   4760            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4761            uint8 discComplete = TRUE;
   4762            zclAttrRec_t attrRec;
   4763            uint16 attrID;
   4764            uint8 i;
   4765          
   4766            // Allocate space for the response command
   4767            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4768                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   4769            if ( pDiscoverRsp == NULL )
   4770            {
   4771              return; // EMBEDDED RETURN
   4772            }
   4773          
   4774            if ( numAttrs != 0 )
   4775            {
   4776              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   4777              {
   4778                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4779                {
   4780                  break; // should not happen, as numAttrs already calculated
   4781                }
   4782          
   4783                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   4784                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   4785              }
   4786          
   4787              // Are there more attributes to be discovered?
   4788              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4789              {
   4790                discComplete = FALSE;
   4791              }
   4792            }
   4793          
   4794            pDiscoverRsp->discComplete = discComplete;
   4795            pDiscoverRsp->numAttr = numAttrs;
   4796          
   4797            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4798                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4799                                         true, pInMsg->hdr.transSeqNum );
   4800            zcl_mem_free( pDiscoverRsp );
   4801          
   4802            return;
   4803          }
   4804          
   4805          /*********************************************************************
   4806           * @fn      zclProcessInDiscAttrsExtCmd
   4807           *
   4808           * @brief   Process the Discover Attributes Extended Command
   4809           *
   4810           * @param   pInMsg - incoming message to process
   4811           *
   4812           * @param   pDiscoverCmd - structure from requesting command
   4813           *
   4814           * @param   attrLenBuf - describes the amount of attributes to be processed
   4815           *
   4816           * @return  none
   4817           */
   4818          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   4819          {
   4820            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4821            uint8 discComplete = TRUE;
   4822            zclAttrRec_t attrRec;
   4823            uint16 attrID;
   4824            uint8 i;
   4825          
   4826              // Allocate space for the response command
   4827            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   4828                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   4829            if ( pDiscoverExtRsp == NULL )
   4830            {
   4831              return; // EMBEDDED RETURN
   4832            }
   4833          
   4834          
   4835            if ( numAttrs != 0 )
   4836            {
   4837              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   4838              {
   4839                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4840                {
   4841                  break; // Should not happen, as numAttrs already calculated
   4842                }
   4843          
   4844                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   4845                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   4846                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   4847              }
   4848          
   4849              // Are there more attributes to be discovered?
   4850              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   4851              {
   4852                discComplete = FALSE;
   4853              }
   4854            }
   4855          
   4856            pDiscoverExtRsp->discComplete = discComplete;
   4857            pDiscoverExtRsp->numAttr = numAttrs;
   4858          
   4859            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4860                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   4861                                         true, pInMsg->hdr.transSeqNum );
   4862          
   4863            zcl_mem_free( pDiscoverExtRsp );
   4864          
   4865            return;
   4866          }
   4867          
   4868          /*********************************************************************
   4869           * @fn      zclProcessInDiscCmd
   4870           *
   4871           * @brief   Process the "Profile" Discover Command
   4872           *
   4873           * @param   pInMsg - incoming message to process
   4874           *
   4875           * @return  TRUE if command processed. FALSE, otherwise.
   4876           */
   4877          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   4878          {
   4879            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4880            zclDiscoverCmdsCmdRsp_t cmdRsp;
   4881            ZStatus_t status;
   4882            zclCommandRec_t cmdRec;
   4883            uint8 cmdID;
   4884            uint8 i;
   4885            uint8 j;
   4886          
   4887            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   4888          
   4889            // Find out the number of commands supported within the specified range
   4890            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   4891            {
   4892              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   4893              {
   4894                break;  // Command not supported
   4895              }
   4896            }
   4897          
   4898            // Allocate space for the response command
   4899            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   4900          
   4901            if ( cmdRsp.pCmdID == NULL )
   4902            {
   4903              return FALSE; // EMBEDDED RETURN
   4904            }
   4905          
   4906            if ( i != 0 )
   4907            {
   4908              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   4909              {
   4910                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   4911                {
   4912                  break; // Attribute not supported
   4913                }
   4914          
   4915                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   4916              }
   4917            }
   4918          
   4919            // Are there more commands to be discovered?
   4920            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   4921            {
   4922              cmdRsp.discComplete = FALSE;
   4923            }
   4924            else
   4925            {
   4926              cmdRsp.discComplete = TRUE;
   4927            }
   4928          
   4929            // pass the command requested
   4930            cmdRsp.cmdType = pInMsg->hdr.commandID;
   4931          
   4932            // store number of commands returned
   4933            cmdRsp.numCmd = j;
   4934          
   4935            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4936                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   4937                                                true, pInMsg->hdr.transSeqNum );
   4938          
   4939            zcl_mem_free( cmdRsp.pCmdID );
   4940          
   4941            if ( status == ZSuccess )
   4942            {
   4943              return TRUE;
   4944            }
   4945            else
   4946            {
   4947              return FALSE;
   4948            }
   4949          }
   4950          
   4951          #endif // ZCL_DISCOVER
   4952          
   4953          
   4954          /*********************************************************************
   4955          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     39   zclBuildHdr
      2     36   zclFindAttrRec
        0     14   -> zclFindAttrRecsList
      2     14   zclFindAttrRecsList
      0     19   zclFindClusterOption
      0      9   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     43   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0      9   zclGetDataTypeLength
      1     45   zclParseHdr
        0     12   -> osal_memset
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     20   zclSerializeData
        0     20   -> osal_buffer_uint32
        0     19   -> osal_memcpy
      0     43   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     57   zcl_DeviceOperational
        0     22   -> zclFindAttrRec
      1     12   zcl_HandleExternal
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1     52   zcl_ProcessMessageMSG
        0     33   -> StubAPS_InterPan
        0     33   -> afFindEndPointDesc
        0     33   -> osal_mem_free
        0     33   -> zclGetClusterOption
        0     33   -> zclParseHdr
        0     33   -> zclSetSecurityOption
        0     35   -> zcl_DeviceOperational
        0     40   -> zcl_SendDefaultRspCmd
      1     62   zcl_SendCommand
        0     39   -> AF_DataRequest
        0     30   -> StubAPS_InterPan
        0     30   -> afFindEndPointDesc
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     33   -> osal_memcpy
        0     30   -> osal_memset
        0     30   -> zclBuildHdr
        0     30   -> zclGetClusterOption
        0     32   -> zcl_DeviceOperational
      1     63   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
      0     12   zcl_event_loop
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_msg_send
        0     12   -> zcl_ProcessMessageMSG
        0     12   -> zcl_getExternalFoundationHandler
      2     12   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2      0   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??Subroutine51_0
       5  ??Subroutine52_0
       5  ??Subroutine53_0
       6  ??Subroutine54_0
       2  ??Subroutine55_0
       6  ??Subroutine56_0
       7  ??Subroutine57_0
       5  ??Subroutine58_0
       7  ?Subroutine0
       3  ?Subroutine1
       8  ?Subroutine10
       8  ?Subroutine11
       5  ?Subroutine12
       5  ?Subroutine13
       5  ?Subroutine14
       7  ?Subroutine15
       8  ?Subroutine16
       1  ?Subroutine17
       9  ?Subroutine18
      18  ?Subroutine19
       3  ?Subroutine2
       6  ?Subroutine20
      11  ?Subroutine21
      15  ?Subroutine22
      16  ?Subroutine23
       8  ?Subroutine24
      21  ?Subroutine25
       5  ?Subroutine26
      25  ?Subroutine27
      16  ?Subroutine28
       6  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
      12  ?Subroutine31
      12  ?Subroutine32
      11  ?Subroutine33
      11  ?Subroutine34
       8  ?Subroutine35
       6  ?Subroutine36
       9  ?Subroutine37
       4  ?Subroutine38
      11  ?Subroutine39
       5  ?Subroutine4
       6  ?Subroutine40
       6  ?Subroutine41
       4  ?Subroutine42
       6  ?Subroutine43
       9  ?Subroutine44
       6  ?Subroutine45
      13  ?Subroutine46
       6  ?Subroutine47
      11  ?Subroutine48
       7  ?Subroutine49
      18  ?Subroutine5
       9  ?Subroutine50
      12  ?Subroutine6
      21  ?Subroutine7
       6  ?Subroutine8
       4  ?Subroutine9
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
     111  zclBuildHdr
       6  zclBuildHdr::?relay
      92  zclCmdTable
     190  zclFindAttrRec
       6  zclFindAttrRec::?relay
      37  zclFindAttrRecsList
       6  zclFindAttrRecsList::?relay
     116  zclFindClusterOption
       6  zclFindClusterOption::?relay
      63  zclGetAttrDataLength
       6  zclGetAttrDataLength::?relay
      26  zclGetClusterOption
       6  zclGetClusterOption::?relay
     166  zclGetDataTypeLength
       6  zclGetDataTypeLength::?relay
     226  zclParseHdr
       6  zclParseHdr::?relay
      36  zclParseInDefaultRspCmd
       6  zclParseInDefaultRspCmd::?relay
     399  zclSerializeData
       6  zclSerializeData::?relay
      36  zclSetSecurityOption
       6  zclSetSecurityOption::?relay
      67  zcl_DeviceOperational
       6  zcl_DeviceOperational::?relay
     169  zcl_HandleExternal
       6  zcl_HandleExternal::?relay
      12  zcl_Init
       6  zcl_Init::?relay
    1182  zcl_ProcessMessageMSG
       6  zcl_ProcessMessageMSG::?relay
     499  zcl_SendCommand
       6  zcl_SendCommand::?relay
     136  zcl_SendDefaultRspCmd
       6  zcl_SendDefaultRspCmd::?relay
       1  zcl_SeqNum
       1  zcl_TaskID
       1  zcl_TransID
       2  zcl_ValidateAttrDataCB
     133  zcl_addExternalFoundationHandler
       6  zcl_addExternalFoundationHandler::?relay
      98  zcl_event_loop
       6  zcl_event_loop::?relay
      66  zcl_getExternalFoundationHandler
       6  zcl_getExternalFoundationHandler::?relay
       9  zcl_getParsedTransSeqNum
       6  zcl_getParsedTransSeqNum::?relay
      12  zcl_getRawAFMsg
       6  zcl_getRawAFMsg::?relay
      82  zcl_registerAttrList
       6  zcl_registerAttrList::?relay
      69  zcl_registerClusterOptionList
       6  zcl_registerClusterOptionList::?relay
      10  zcl_registerForMsg
       6  zcl_registerForMsg::?relay
       8  zcl_registerForMsgExt
       6  zcl_registerForMsgExt::?relay
     103  zcl_registerPlugin
       6  zcl_registerPlugin::?relay
      55  zcl_registerReadWriteCB
       6  zcl_registerReadWriteCB::?relay
      17  zcl_registerValidateAttrData
       6  zcl_registerValidateAttrData::?relay

 
 4 631 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
    92 bytes in segment CODE_C
    16 bytes in segment XDATA_Z
 
   266 bytes of CODE     memory
 4 631 bytes of HUGECODE memory
    16 bytes of XDATA    memory

Errors: none
Warnings: none
