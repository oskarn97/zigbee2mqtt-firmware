///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              16/Feb/2018  21:40:05
// Copyright 2004-2017 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Components\mt\MT_UTIL.c
//    Command line       =  
//        -f C:\Users\Oskar\AppData\Local\Temp\EW4CC.tmp ("C:\Texas
//        Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_UTIL.c" -D
//        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
//        --core=plain --dptr=16,1 --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
//        Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
//        "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes --no_code_motion)
//    Locale             =  German_Germany.1252
//    List file          =  
//        C:\Texas Instruments\Z-Stack Home
//        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\MT_UTIL.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_UTIL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123

        FUNCTION `??MT_UtilBindAddEntry::?relay`,0203H
        PUBLIC `??MT_UtilCommandProcessing::?relay`
        FUNCTION `??MT_UtilCommandProcessing::?relay`,0203H
        FUNCTION `??MT_UtilGetDeviceInfo::?relay`,0203H
        FUNCTION `??MT_UtilGetNvInfo::?relay`,0203H
        FUNCTION `??MT_UtilGpioSetDirection::?relay`,0203H
        FUNCTION `??MT_UtilGpioWrite::?relay`,0203H
        FUNCTION `??packBindEntry_t::?relay`,0203H
        FUNCTION `??packDev_t::?relay`,0203H
        FUNCTION MT_UtilBindAddEntry,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC MT_UtilCommandProcessing
        FUNCTION MT_UtilCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 82, STACK
        FUNCTION MT_UtilGetDeviceInfo,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION MT_UtilGetNvInfo,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION MT_UtilGpioSetDirection,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION MT_UtilGpioWrite,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_3e8
        FUNCTION packBindEntry_t,0a1203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION packDev_t,0a1203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
`??AddrMgrExtAddrValid::?relay` SYMBOL "?relay", AddrMgrExtAddrValid
AssocCount          SYMBOL "AssocCount"
`??AssocCount::?relay` SYMBOL "?relay", AssocCount
AssocFindDevice     SYMBOL "AssocFindDevice"
`??AssocFindDevice::?relay` SYMBOL "?relay", AssocFindDevice
AssocGetWithAddress SYMBOL "AssocGetWithAddress"
`??AssocGetWithAddress::?relay` SYMBOL "?relay", AssocGetWithAddress
AssocMakeList       SYMBOL "AssocMakeList"
`??AssocMakeList::?relay` SYMBOL "?relay", AssocMakeList
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NwkPollReq          SYMBOL "NwkPollReq"
`??NwkPollReq::?relay` SYMBOL "?relay", NwkPollReq
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
`??ZDSecMgrRequestAppKey::?relay` SYMBOL "?relay", ZDSecMgrRequestAppKey
bindAddEntry        SYMBOL "bindAddEntry"
`??bindAddEntry::?relay` SYMBOL "?relay", bindAddEntry
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
`??osal_GetSystemClock::?relay` SYMBOL "?relay", osal_GetSystemClock
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
MT_UtilCommandProcessing SYMBOL "MT_UtilCommandProcessing"
`??MT_UtilCommandProcessing::?relay` SYMBOL "?relay", MT_UtilCommandProcessing

        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrExtAddrValid::?relay`
        FUNCTION `??AddrMgrExtAddrValid::?relay`,00H
        EXTERN `??AssocCount::?relay`
        FUNCTION `??AssocCount::?relay`,00H
        EXTERN `??AssocFindDevice::?relay`
        FUNCTION `??AssocFindDevice::?relay`,00H
        EXTERN `??AssocGetWithAddress::?relay`
        FUNCTION `??AssocGetWithAddress::?relay`,00H
        EXTERN `??AssocMakeList::?relay`
        FUNCTION `??AssocMakeList::?relay`,00H
        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NwkPollReq::?relay`
        FUNCTION `??NwkPollReq::?relay`,00H
        EXTERN `??ZDSecMgrRequestAppKey::?relay`
        FUNCTION `??ZDSecMgrRequestAppKey::?relay`,00H
        EXTERN `??bindAddEntry::?relay`
        FUNCTION `??bindAddEntry::?relay`,00H
        EXTERN `??osal_GetSystemClock::?relay`
        FUNCTION `??osal_GetSystemClock::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocCount
        FUNCTION AssocCount,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocFindDevice
        FUNCTION AssocFindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithAddress
        FUNCTION AssocGetWithAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkPollReq
        FUNCTION NwkPollReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _sapiCallbackSub
        EXTERN _zdoCallbackSub
        EXTERN bindAddEntry
        FUNCTION bindAddEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devState
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgDeviceLogicalType

// C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\mt\MT_UTIL.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_UTIL.c
//    3   Revised:        $Date: 2015-01-26 08:25:50 -0800 (Mon, 26 Jan 2015) $
//    4   Revision:       $Revision: 42025 $
//    5 
//    6   Description:    MonitorTest Utility Functions
//    7 
//    8   Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 
//   45 #include "AddrMgr.h"
//   46 
//   47 #include "OnBoard.h"   /* This is here because of the key reading */

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   48 #include "hal_key.h"
//   49 #include "hal_led.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "osal.h"
//   52 #include "NLMEDE.h"
//   53 #include "MT.h"
//   54 #include "MT_UTIL.h"
//   55 #include "MT_MAC.h"
//   56 #include "ssp.h"
//   57 #if defined ZCL_KEY_ESTABLISH
//   58 #include "zcl_key_establish.h"
//   59 #include "zcl_se.h"
//   60 #endif
//   61 
//   62 #if !defined NONWK
//   63 #include "MT_ZDO.h"
//   64 #include "MT_SAPI.h"
//   65 #include "MT_NWK.h"
//   66 #include "MT_AF.h"
//   67 #include "AssocList.h"
//   68 #include "ZDApp.h"
//   69 #include "ZDSecMgr.h"
//   70 #endif
//   71 
//   72 #if defined MT_SRNG
//   73 #include "hal_srng.h"
//   74 #endif
//   75 
//   76 #if defined FEATURE_DUAL_MAC
//   77 #include "dmmgr.h"
//   78 #endif
//   79 
//   80 /***************************************************************************************************
//   81  * CONSTANTS
//   82  ***************************************************************************************************/
//   83 #define MT_UTIL_DEVICE_INFO_RESPONSE_LEN 14
//   84 #define MT_UTIL_STATUS_LEN    1
//   85 #define MT_UTIL_FRM_CTR_LEN   4
//   86 // Status + LinkKeyDataLen + Tx+Rx Frame counter.
//   87 #define MT_APSME_LINKKEY_GET_RSP_LEN (MT_UTIL_STATUS_LEN + SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2))
//   88 // Status + NV id
//   89 #define MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN (MT_UTIL_STATUS_LEN + 2)
//   90 
//   91 /***************************************************************************************************
//   92  * LOCAL VARIABLES
//   93  ***************************************************************************************************/
//   94 #if defined ZCL_KEY_ESTABLISH
//   95 uint8 zcl_key_establish_task_id;
//   96 #endif
//   97 
//   98 #ifdef FEATURE_GET_PRIMARY_IEEE
//   99 /* This feature is not compatible with MSP430 or ARM platforms. */
//  100 __no_init const __xdata char ieeeMac[1] @ 0x780C;
//  101 #endif
//  102 
//  103 /***************************************************************************************************
//  104  * LOCAL FUNCTIONS
//  105  ***************************************************************************************************/
//  106 #ifdef AUTO_PEND
//  107 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc );
//  108 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc );
//  109 #endif
//  110 
//  111 #if defined (MT_UTIL_FUNC)
//  112 static void MT_UtilGetDeviceInfo(void);
//  113 static void MT_UtilGetNvInfo(void);
//  114 static void MT_UtilSetPanID(uint8 *pBuf);
//  115 static void MT_UtilSetChannels(uint8 *pBuf);
//  116 static void MT_UtilSetSecLevel(uint8 *pBuf);
//  117 static void MT_UtilSetPreCfgKey(uint8 *pBuf);
//  118 static void MT_UtilCallbackSub(uint8 *pData);
//  119 static void MT_UtilTimeAlive(void);
//  120 static void MT_UtilSrcMatchEnable (uint8 *pBuf);
//  121 static void MT_UtilSrcMatchAddEntry (uint8 *pBuf);
//  122 static void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf);
//  123 static void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf);
//  124 static void MT_UtilSrcMatchAckAllPending (uint8 *pBuf);
//  125 static void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf);
//  126 
//  127 static void MT_UtilGpioSetDirection(uint8 *pBuf);
//  128 static void MT_UtilGpioRead(uint8 *pBuf);
//  129 static void MT_UtilGpioWrite(uint8 *pBuf);
//  130 
//  131 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  132 static void MT_UtilKeyEvent(uint8 *pBuf);
//  133 #endif
//  134 
//  135 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  136 static void MT_UtilLedControl(uint8 *pBuf);
//  137 #endif
//  138 
//  139 #ifdef MT_SRNG
//  140 static void MT_UtilSrngGen(void);
//  141 #endif
//  142 
//  143 #ifdef FEATURE_GET_PRIMARY_IEEE
//  144 static void MT_UtilGetPrimaryIEEE(void);
//  145 #endif
//  146 
//  147 #if !defined NONWK
//  148 static void MT_UtilDataReq(uint8 *pBuf);
//  149 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf);
//  150 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf);
//  151 #if defined MT_SYS_KEY_MANAGEMENT
//  152 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf);
//  153 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf);
//  154 #endif //MT_SYS_KEY_MANAGEMENT
//  155 static void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf);
//  156 static void MT_UtilAssocCount(uint8 *pBuf);
//  157 static void MT_UtilAssocFindDevice(uint8 *pBuf);
//  158 static void MT_UtilAssocGetWithAddress(uint8 *pBuf);
//  159 static void MT_UtilBindAddEntry(uint8 *pBuf);
//  160 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev);
//  161 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind);
//  162 #if defined ZCL_KEY_ESTABLISH
//  163 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf);
//  164 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf);
//  165 #endif // ZCL_KEY_ESTABLISH
//  166 static void MT_UtilSync(void);
//  167 #endif // !defined NONWK
//  168 #endif // MT_UTIL_FUNC
//  169 
//  170 #if defined (MT_UTIL_FUNC)
//  171 /***************************************************************************************************
//  172 * @fn      MT_UtilProcessing
//  173 *
//  174 * @brief   Process all the DEBUG commands that are issued by test tool
//  175 *
//  176 * @param   pBuf  - pointer to received SPI data message
//  177 *
//  178 * @return  status
//  179 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  180 uint8 MT_UtilCommandProcessing(uint8 *pBuf)
MT_UtilCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
        CODE
//  181 {
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetNvInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGpioSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGpioWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, NwkPollReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, ZDSecMgrRequestAppKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocFindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocGetWithAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilBindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 62
        MOV       A,#-0x3e
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       ?V0,R2
        MOV       ?V1,R3
//  182   uint8 status = MT_RPC_SUCCESS;
        MOV       R7,#0x0
//  183 
//  184   switch (pBuf[MT_RPC_POS_CMD1])
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_0 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_1 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_8 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
        ADD       A,#-0x6
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_9 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_10 & 0xFFFF
        ADD       A,#-0x3
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_11 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_12 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_13 & 0xFFFF
        ADD       A,#-0xa
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_15 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_16 & 0xFFFF
        ADD       A,#-0x1b
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_17 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_18 & 0xFFFF
        ADD       A,#-0x7
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_19 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_20 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_21 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_22 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_23 & 0xFFFF
        ADD       A,#0x6d
        JNZ       $+5
        LJMP      ??MT_UtilCommandProcessing_24 & 0xFFFF
        LJMP      ??MT_UtilCommandProcessing_25 & 0xFFFF
//  185   {
//  186     // CC253X MAC Network Processor does not have NV support
//  187 #if !defined(CC253X_MACNP)
//  188   case MT_UTIL_GET_DEVICE_INFO:
//  189     MT_UtilGetDeviceInfo();
??MT_UtilCommandProcessing_0:
        ; Setup parameters for call to function MT_UtilGetDeviceInfo
        LCALL     `??MT_UtilGetDeviceInfo::?relay`; Banked call to: MT_UtilGetDeviceInfo
//  190     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  191 
//  192   case MT_UTIL_GET_NV_INFO:
//  193     MT_UtilGetNvInfo();
??MT_UtilCommandProcessing_1:
        ; Setup parameters for call to function MT_UtilGetNvInfo
        LCALL     `??MT_UtilGetNvInfo::?relay`; Banked call to: MT_UtilGetNvInfo
//  194     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  195 
//  196   case MT_UTIL_SET_PANID:
//  197     MT_UtilSetPanID(pBuf);
??MT_UtilCommandProcessing_2:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#-0x7d
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7d
        LJMP      ??MT_UtilCommandProcessing_26 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 78)
//  198     break;
//  199 
//  200   case MT_UTIL_SET_CHANNELS:
//  201     MT_UtilSetChannels(pBuf);
??MT_UtilCommandProcessing_3:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        LCALL     ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XSTORE_R0123
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V0,R2
        MOV       ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        SJMP      ??MT_UtilCommandProcessing_26
          CFI CFA_XSP16 add(XSP16, 78)
//  202     break;
//  203 
//  204   case MT_UTIL_SET_SECLEVEL:
//  205     MT_UtilSetSecLevel(pBuf);
??MT_UtilCommandProcessing_4:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x61
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V2,R2
        MOV       ?V3,R3
        ; Setup parameters for call to function osal_nv_write
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_27
        INC       ?V1
??MT_UtilCommandProcessing_27:
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x61
        SJMP      ??MT_UtilCommandProcessing_26
          CFI CFA_XSP16 add(XSP16, 78)
//  206     break;
//  207 
//  208   case MT_UTIL_SET_PRECFGKEY:
//  209     MT_UtilSetPreCfgKey(pBuf);
??MT_UtilCommandProcessing_5:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function osal_nv_item_len
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV       ?V2,R2
        MOV       ?V3,R3
        ; Setup parameters for call to function osal_nv_write
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_28
        INC       ?V1
??MT_UtilCommandProcessing_28:
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 80)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x62
??MT_UtilCommandProcessing_26:
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        LJMP      ??MT_UtilCommandProcessing_29 & 0xFFFF
//  210     break;
//  211 #endif
//  212 
//  213 #ifdef FEATURE_GET_PRIMARY_IEEE
//  214   case MT_UTIL_GET_PRIMARY_IEEE:
//  215     MT_UtilGetPrimaryIEEE();
//  216     break;
//  217 #endif
//  218 
//  219   case MT_UTIL_CALLBACK_SUB_CMD:
//  220     MT_UtilCallbackSub(pBuf);
??MT_UtilCommandProcessing_6:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_30
        INC       ?V1
??MT_UtilCommandProcessing_30:
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
        MOV       A,R1
        ANL       A,#0x1f
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??MT_UtilCommandProcessing_31
        MOV       A,#0x5
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_32
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_33
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_33:
        JNZ       ??MT_UtilCommandProcessing_34
??MT_UtilCommandProcessing_32:
        MOV       DPTR,#_zdoCallbackSub
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
??MT_UtilCommandProcessing_34:
        MOV       A,#0x6
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_35
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_36
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_36:
        JNZ       ??MT_UtilCommandProcessing_37
??MT_UtilCommandProcessing_35:
        MOV       DPTR,#_sapiCallbackSub
        MOV       A,#-0x1
        SJMP      ??MT_UtilCommandProcessing_38
??MT_UtilCommandProcessing_31:
        MOV       A,#0x5
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_39
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_40
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_40:
        JNZ       ??MT_UtilCommandProcessing_41
??MT_UtilCommandProcessing_39:
        MOV       DPTR,#_zdoCallbackSub
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
??MT_UtilCommandProcessing_41:
        MOV       A,#0x6
        XRL       A,R2
        JZ        ??MT_UtilCommandProcessing_42
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??MT_UtilCommandProcessing_43
        MOV       A,#-0x1
        XRL       A,R1
??MT_UtilCommandProcessing_43:
        JNZ       ??MT_UtilCommandProcessing_37
??MT_UtilCommandProcessing_42:
        MOV       DPTR,#_sapiCallbackSub
        CLR       A
??MT_UtilCommandProcessing_38:
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
??MT_UtilCommandProcessing_37:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP      ??MT_UtilCommandProcessing_44 & 0xFFFF
//  221     break;
//  222 
//  223   case MT_UTIL_KEY_EVENT:
//  224 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  225     MT_UtilKeyEvent(pBuf);
//  226 #endif
//  227     break;
//  228 
//  229   case MT_UTIL_TIME_ALIVE:
//  230     MT_UtilTimeAlive();
??MT_UtilCommandProcessing_8:
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       DPTR,#__Constant_3e8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?UL_DIV_MOD
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 82)
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x4
        MOV       R2,#0x9
        LJMP      ??MT_UtilCommandProcessing_45 & 0xFFFF
//  231     break;
//  232 
//  233   case MT_UTIL_LED_CONTROL:
//  234 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  235     MT_UtilLedControl(pBuf);
//  236 #endif
//  237     break;
//  238 
//  239   case MT_UTIL_SRC_MATCH_ENABLE:
//  240     MT_UtilSrcMatchEnable(pBuf);
//  241     break;
//  242 
//  243   case MT_UTIL_SRC_MATCH_ADD_ENTRY:
//  244     MT_UtilSrcMatchAddEntry(pBuf);
//  245     break;
//  246 
//  247   case MT_UTIL_SRC_MATCH_DEL_ENTRY:
//  248     MT_UtilSrcMatchDeleteEntry(pBuf);
//  249     break;
//  250 
//  251   case MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR:
//  252     MT_UtilSrcMatchCheckSrcAddr(pBuf);
??MT_UtilCommandProcessing_15:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0xb
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        SJMP      ??MT_UtilCommandProcessing_46
//  253     break;
//  254 
//  255   case MT_UTIL_SRC_MATCH_ACK_ALL_PENDING:
//  256     MT_UtilSrcMatchAckAllPending(pBuf);
??MT_UtilCommandProcessing_14:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0xb
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV       R3,#0x1
        LJMP      ??MT_UtilCommandProcessing_45 & 0xFFFF
//  257     break;
//  258 
//  259   case MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING:
//  260     MT_UtilSrcMatchCheckAllPending(pBuf);
??MT_UtilCommandProcessing_16:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0xb
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        INC       A
??MT_UtilCommandProcessing_46:
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x2
        LJMP      ??MT_UtilCommandProcessing_45 & 0xFFFF
//  261     break;
//  262 
//  263   case MT_UTIL_TEST_LOOPBACK:
//  264     MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_UTIL), MT_UTIL_TEST_LOOPBACK,
//  265                                  pBuf[MT_RPC_POS_LEN], (pBuf+MT_RPC_FRAME_HDR_SZ));
??MT_UtilCommandProcessing_9:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R2
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,?V1
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R2,#0x10
        LJMP      ??MT_UtilCommandProcessing_45 & 0xFFFF
//  266     break;
//  267 
//  268   case MT_UTIL_GPIO_SET_DIRECTION:
//  269     MT_UtilGpioSetDirection(pBuf);
??MT_UtilCommandProcessing_11:
        ; Setup parameters for call to function MT_UtilGpioSetDirection
        LCALL     `??MT_UtilGpioSetDirection::?relay`; Banked call to: MT_UtilGpioSetDirection
//  270     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  271 
//  272   case MT_UTIL_GPIO_READ:
//  273     MT_UtilGpioRead(pBuf);
??MT_UtilCommandProcessing_12:
        MOV       A,0x80
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0x90
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xa0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfd
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x6
        MOV       R2,#0x15
        LJMP      ??MT_UtilCommandProcessing_45 & 0xFFFF
//  274     break;
//  275 
//  276   case MT_UTIL_GPIO_WRITE:
//  277     MT_UtilGpioWrite(pBuf);
??MT_UtilCommandProcessing_13:
        ; Setup parameters for call to function MT_UtilGpioWrite
        LCALL     `??MT_UtilGpioWrite::?relay`; Banked call to: MT_UtilGpioWrite
//  278     break;
        LJMP      ??MT_UtilCommandProcessing_7 & 0xFFFF
//  279 
//  280 #if !defined NONWK
//  281   case MT_UTIL_DATA_REQ:
//  282     MT_UtilDataReq(pBuf);
??MT_UtilCommandProcessing_10:
        ; Setup parameters for call to function NwkPollReq
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??NwkPollReq::?relay`; Banked call to: NwkPollReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV       R3,#0x1
        MOV       R2,#0x11
        LJMP      ??MT_UtilCommandProcessing_45 & 0xFFFF
//  283     break;
//  284 
//  285   case MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP:
//  286     MT_UtilAddrMgrEntryLookupExt(pBuf);
??MT_UtilCommandProcessing_17:
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        LJMP      ??MT_UtilCommandProcessing_47 & 0xFFFF
//  287     break;
//  288 
//  289   case MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP:
//  290     MT_UtilAddrMgrEntryLookupNwk(pBuf);
??MT_UtilCommandProcessing_18:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       R3,#0x8
        LJMP      ??MT_UtilCommandProcessing_48 & 0xFFFF
//  291     break;
//  292 
//  293 #if defined MT_SYS_KEY_MANAGEMENT
//  294   case MT_UTIL_APSME_LINK_KEY_DATA_GET:
//  295     MT_UtilAPSME_LinkKeyDataGet(pBuf);
//  296     break;
//  297 
//  298   case MT_UTIL_APSME_LINK_KEY_NV_ID_GET:
//  299     MT_UtilAPSME_LinkKeyNvIdGet(pBuf);
//  300     break;
//  301 #endif // MT_SYS_KEY_MANAGEMENT
//  302 
//  303   case MT_UTIL_APSME_REQUEST_KEY_CMD:
//  304     MT_UtilAPSME_RequestKeyCmd(pBuf);
??MT_UtilCommandProcessing_22:
        LCALL     ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 81)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 78)
        ; Setup parameters for call to function ZDSecMgrRequestAppKey
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrRequestAppKey::?relay`; Banked call to: ZDSecMgrRequestAppKey
??MT_UtilCommandProcessing_29:
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
??MT_UtilCommandProcessing_44:
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        LJMP      ??MT_UtilCommandProcessing_48 & 0xFFFF
//  305     break;
//  306 
//  307   case MT_UTIL_ASSOC_COUNT:
//  308     MT_UtilAssocCount(pBuf);
??MT_UtilCommandProcessing_19:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_49
        INC       ?V1
??MT_UtilCommandProcessing_49:
        MOV       DPL,A
        MOV       DPH,?V1
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        ; Setup parameters for call to function AssocCount
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOV       A,R2
        MOVX      @DPTR,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
??MT_UtilCommandProcessing_47:
        MOV       R3,#0x2
        SJMP      ??MT_UtilCommandProcessing_48
//  309     break;
//  310 
//  311   case MT_UTIL_ASSOC_FIND_DEVICE:
//  312     MT_UtilAssocFindDevice(pBuf);
??MT_UtilCommandProcessing_20:
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_34:
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
        SJMP      ??MT_UtilCommandProcessing_50
//  313     break;
//  314 
//  315   case MT_UTIL_ASSOC_GET_WITH_ADDRESS:
//  316     MT_UtilAssocGetWithAddress(pBuf);
??MT_UtilCommandProcessing_21:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_UtilCommandProcessing_51
        INC       ?V1
??MT_UtilCommandProcessing_51:
        ; Setup parameters for call to function AddrMgrExtAddrValid
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV       A,R1
        JZ        ??MT_UtilCommandProcessing_52
        MOV       R2,?V0
        MOV       R3,?V1
        SJMP      ??MT_UtilCommandProcessing_53
??MT_UtilCommandProcessing_52:
        MOV       R2,#0x0
        MOV       R3,#0x0
??MT_UtilCommandProcessing_53:
        ; Setup parameters for call to function AssocGetWithAddress
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R4
        ADD       A,R7
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        LCALL     `??AssocGetWithAddress::?relay`; Banked call to: AssocGetWithAddress
??MT_UtilCommandProcessing_50:
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function packDev_t
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??packDev_t::?relay`; Banked call to: packDev_t
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x1c
??MT_UtilCommandProcessing_48:
        MOV       A,R6
        MOV       R2,A
??MT_UtilCommandProcessing_45:
        MOV       R1,#0x67
        SJMP      ??MT_UtilCommandProcessing_54
//  317     break;
//  318 
//  319   case MT_UTIL_BIND_ADD_ENTRY:
//  320     MT_UtilBindAddEntry(pBuf);
??MT_UtilCommandProcessing_23:
        ; Setup parameters for call to function MT_UtilBindAddEntry
        LCALL     `??MT_UtilBindAddEntry::?relay`; Banked call to: MT_UtilBindAddEntry
//  321     break;
        SJMP      ??MT_UtilCommandProcessing_7
//  322 
//  323 #if defined ZCL_KEY_ESTABLISH
//  324   case MT_UTIL_ZCL_KEY_EST_INIT_EST:
//  325     MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(pBuf);
//  326     break;
//  327 
//  328   case MT_UTIL_ZCL_KEY_EST_SIGN:
//  329     MT_UtilzclGeneral_KeyEstablishment_ECDSASign(pBuf);
//  330     break;
//  331 #endif
//  332 
//  333   case MT_UTIL_SYNC_REQ:
//  334     MT_UtilSync();
??MT_UtilCommandProcessing_24:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R3,#0x0
        MOV       R2,#-0x20
        MOV       R1,#0x47
??MT_UtilCommandProcessing_54:
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  335     break;
        SJMP      ??MT_UtilCommandProcessing_7
//  336 #endif /* !defined NONWK */
//  337 
//  338 #ifdef MT_SRNG
//  339   case MT_UTIL_SRNG_GENERATE:
//  340     MT_UtilSrngGen();
//  341     break;
//  342 #endif
//  343 
//  344   default:
//  345     status = MT_RPC_ERR_COMMAND_ID;
??MT_UtilCommandProcessing_25:
        MOV       R7,#0x2
//  346     break;
//  347   }
//  348 
//  349   return status;
??MT_UtilCommandProcessing_7:
        MOV       A,R7
        MOV       R1,A
        MOV       A,#0x3e
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR
        ; // Fall through to label ?Subroutine0
//  350 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 78)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function MT_UtilCommandProcessing
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function MT_UtilCommandProcessing
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function MT_UtilCommandProcessing
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV       A,R2
        ADD       A,#0x3
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function MT_UtilCommandProcessing
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,R7
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function MT_UtilCommandProcessing
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_2
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-4
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function MT_UtilCommandProcessing
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_3
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-4
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        ; Setup parameters for call to function AssocFindDevice
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  351 
//  352 /***************************************************************************************************
//  353 * @fn      MT_UtilGetDeviceInfo
//  354 *
//  355 * @brief   The Get Device Info serial message.
//  356 *
//  357 * @param   None.
//  358 *
//  359 * @return  void
//  360 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  361 static void MT_UtilGetDeviceInfo(void)
MT_UtilGetDeviceInfo:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
        CODE
//  362 {
        FUNCALL MT_UtilGetDeviceInfo, AssocMakeList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  363   uint8  *buf;
//  364   uint8  *pBuf;
//  365   uint8  bufLen = MT_UTIL_DEVICE_INFO_RESPONSE_LEN;
        MOV       ?V2,#0xe
//  366   uint16 *assocList = NULL;
        MOV       R6,#0x0
        MOV       R7,#0x0
//  367 
//  368 #if !defined NONWK
//  369   uint8  assocCnt = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  370 
//  371   if (ZG_DEVICE_RTR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??MT_UtilGetDeviceInfo_0
        XRL       A,#0x1
        JNZ       ??MT_UtilGetDeviceInfo_1
//  372   {
//  373     assocList = AssocMakeList( &assocCnt );
??MT_UtilGetDeviceInfo_0:
        ; Setup parameters for call to function AssocMakeList
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AssocMakeList::?relay`; Banked call to: AssocMakeList
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
//  374     bufLen += (assocCnt * sizeof(uint16));
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        CLR       C
        RLC       A
        ADD       A,#0xe
        MOV       ?V2,A
//  375   }
//  376 #endif
//  377 
//  378   buf = osal_mem_alloc( bufLen );
??MT_UtilGetDeviceInfo_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V2
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  379   if ( buf )
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??MT_UtilGetDeviceInfo_2 & 0xFFFF
//  380   {
//  381     pBuf = buf;
//  382 
//  383     *pBuf++ = ZSUCCESS; // Status
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOV       ?V4,DPL
        MOV       ?V5,DPH
//  384 
//  385     osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V6,#0x8
        MOV       ?V7,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  386     pBuf += Z_EXTADDR_LEN;
//  387 
//  388 #if defined NONWK
//  389     // Skip past ZStack only parameters for NONWK
//  390     *pBuf++ = 0;
//  391     *pBuf++ = 0;
//  392     *pBuf++ = 0;
//  393     *pBuf++ = 0;
//  394     *pBuf = 0;
//  395 #else
//  396     {
//  397       uint16 shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
//  398       *pBuf++ = LO_UINT16( shortAddr );
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R2
        LCALL     ?Subroutine12 & 0xFFFF
//  399       *pBuf++ = HI_UINT16( shortAddr );
//  400     }
??CrossCallReturnLabel_16:
        MOV       A,R3
        LCALL     ?Subroutine12 & 0xFFFF
//  401 
//  402     /* Return device type */
//  403     *pBuf++ = ZSTACK_DEVICE_BUILD;
??CrossCallReturnLabel_17:
        INC       DPTR
        MOV       A,#0x7
        MOVX      @DPTR,A
//  404 
//  405     /*Return device state */
//  406     *pBuf++ = (uint8)devState;
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,?V4
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  407 
//  408     if (ZG_DEVICE_RTR_TYPE)
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        JZ        ??MT_UtilGetDeviceInfo_3
        XRL       A,#0x1
        JNZ       ??MT_UtilGetDeviceInfo_4
//  409     {
//  410       *pBuf++ = assocCnt;
??MT_UtilGetDeviceInfo_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_30:
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,?V4
        ADD       A,#0xd
        MOV       ?V4,A
        JNC       ??MT_UtilGetDeviceInfo_5
        INC       ?V5
//  411 
//  412       if ( assocCnt )
??MT_UtilGetDeviceInfo_5:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??MT_UtilGetDeviceInfo_6
//  413       {
//  414         uint8 x;
//  415         uint16 *puint16 = assocList;
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
//  416 
//  417         for ( x = 0; x < assocCnt; x++, puint16++ )
        MOV       R4,#0x0
??MT_UtilGetDeviceInfo_7:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,R4
        CLR       C
        SUBB      A,R2
        JNC       ??MT_UtilGetDeviceInfo_6
//  418         {
//  419           *pBuf++ = LO_UINT16( *puint16 );
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine29_0 & 0xFFFF
//  420           *pBuf++ = HI_UINT16( *puint16 );
//  421         }
??CrossCallReturnLabel_56:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,?V4
        ADD       A,#0x2
        MOV       ?V4,A
        JNC       ??MT_UtilGetDeviceInfo_8
        INC       ?V5
??MT_UtilGetDeviceInfo_8:
        INC       R4
        MOV       A,R0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??MT_UtilGetDeviceInfo_7
        INC       R1
        SJMP      ??MT_UtilGetDeviceInfo_7
//  422       }
//  423     }
//  424     else
//  425     {
//  426       *pBuf++ = 0;
??MT_UtilGetDeviceInfo_4:
        LCALL     ?Subroutine19 & 0xFFFF
//  427     }
??CrossCallReturnLabel_31:
        CLR       A
        MOVX      @DPTR,A
        MOV       A,?V4
        ADD       A,#0xd
//  428 #endif
//  429 
//  430     MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  431                                  MT_UTIL_GET_DEVICE_INFO,
//  432                                  bufLen, buf );
??MT_UtilGetDeviceInfo_6:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,?V2
        MOV       R2,#0x0
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  433 
//  434     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  435   }
//  436 
//  437   if ( assocList )
??MT_UtilGetDeviceInfo_2:
        MOV       A,R6
        ORL       A,R7
        JZ        ??MT_UtilGetDeviceInfo_9
//  438   {
//  439     osal_mem_free( assocList );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  440   }
//  441 }
??MT_UtilGetDeviceInfo_9:
        MOV       A,#0x1
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function MT_UtilGetDeviceInfo
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV       A,?V4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_UtilGetDeviceInfo
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX      @DPTR,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  442 
//  443 #ifdef MT_SRNG
//  444 /***************************************************************************************************
//  445 * @fn      MT_UtilSrngGen
//  446 *
//  447 * @brief   Generate Secure Random Numbers
//  448 *
//  449 * @param   None.
//  450 *
//  451 * @return  void
//  452 ***************************************************************************************************/
//  453 static void MT_UtilSrngGen(void)
//  454 {
//  455   static uint32 count = 125000; /* 125000 * 8 bits = 1000000 bits */
//  456   uint8 outrng[100];
//  457   uint8 status;
//  458 
//  459   if(count > 0)
//  460   {
//  461     status = ssp_srng_generate((uint8 *)outrng, 100, NULL);
//  462     if (status != SRNG_SUCCESS)
//  463     {
//  464       if(RNG_INIT_ERROR == status)
//  465       {
//  466         ssp_srng_reseed();
//  467       }
//  468       else
//  469       {
//  470         while(1)
//  471         {
//  472           ASM_NOP;
//  473         }
//  474       } /* if(RNG_INIT_ERROR == status) */
//  475     }/*if (status != SRNG_SUCCESS) */
//  476 
//  477     if(count >= 100)
//  478     {
//  479       count -= 100;
//  480     }
//  481     else
//  482     {
//  483       count = 0;
//  484     }
//  485     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ |
//  486                                  (uint8)MT_RPC_SYS_DBG),
//  487                                   MT_DEBUG_MSG,
//  488                                   100,
//  489                                   outrng);
//  490     osal_start_timerEx(MT_TaskID, MT_SRNG_EVENT, 100);
//  491   }
//  492 }
//  493 #endif
//  494 
//  495 /***************************************************************************************************
//  496  * @fn      MT_UtilGetNvInfo
//  497  *
//  498  * @brief   The Get NV Info serial message.
//  499  *
//  500  * @param   None.
//  501  *
//  502  * @return  void
//  503  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  504 static void MT_UtilGetNvInfo(void)
MT_UtilGetNvInfo:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function MT_UtilGetNvInfo
        CODE
//  505 {
        FUNCALL MT_UtilGetNvInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  506   uint8 len;
//  507   uint8 stat;
//  508   uint8 *buf;
//  509   uint8 *pBuf;
//  510   uint16 tmp16;
//  511   uint32 tmp32;
//  512 
//  513   /*
//  514     Get required length of buffer
//  515     Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
//  516   */
//  517   len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
//  518 
//  519   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x20
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
//  520   if ( buf )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??MT_UtilGetNvInfo_0 & 0xFFFF
//  521   {
//  522     /* Assume NV not available */
//  523     osal_memset( buf, 0xFF, len );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x20
        MOV       R5,#0x0
        MOV       R1,#-0x1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  524 
//  525     /* Skip over status */
//  526     pBuf = buf + 1;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
//  527 
//  528     /* Start with 64-bit extended address */
//  529     stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V0,#0x8
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       ?V0,A
//  530     if ( stat ) stat = 0x01;
        JZ        ??MT_UtilGetNvInfo_1
        MOV       ?V0,#0x1
//  531     pBuf += Z_EXTADDR_LEN;
??MT_UtilGetNvInfo_1:
        MOV       A,?V2
        ADD       A,#0x8
        MOV       ?V2,A
        JNC       ??MT_UtilGetNvInfo_2
        INC       ?V3
//  532 
//  533     /* Scan channel list (bit mask) */
//  534     if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
??MT_UtilGetNvInfo_2:
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V4,#0x4
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7c
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        JZ        ??MT_UtilGetNvInfo_3
//  535     {
//  536       stat |= 0x02;
        MOV       A,?V0
        SETB      0xE0 /* A   */.1
        MOV       ?V0,A
        SJMP      ??MT_UtilGetNvInfo_4
//  537     }
//  538     else
//  539     {
//  540       pBuf[0] = BREAK_UINT32( tmp32, 3 );
??MT_UtilGetNvInfo_3:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x18
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOV       A,?V4
        MOVX      @DPTR,A
//  541       pBuf[1] = BREAK_UINT32( tmp32, 2 );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,#0x10
        MOV       R0,#?V4
        LCALL     ?UL_SHR
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
//  542       pBuf[2] = BREAK_UINT32( tmp32, 1 );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       A,?V5
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
//  543       pBuf[3] = BREAK_UINT32( tmp32, 0 );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,?V4
        MOVX      @DPTR,A
//  544     }
//  545     pBuf += sizeof( tmp32 );
??MT_UtilGetNvInfo_4:
        MOV       A,?V2
        ADD       A,#0x4
        MOV       ?V2,A
        JNC       ??MT_UtilGetNvInfo_5
        INC       ?V3
//  546 
//  547     /* ZigBee PanID */
//  548     if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
??MT_UtilGetNvInfo_5:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V4,#0x2
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7d
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        JZ        ??MT_UtilGetNvInfo_6
//  549     {
//  550       stat |= 0x04;
        MOV       A,?V0
        SETB      0xE0 /* A   */.2
        MOV       ?V0,A
        SJMP      ??MT_UtilGetNvInfo_7
//  551     }
//  552     else
//  553     {
//  554       pBuf[0] = LO_UINT16( tmp16 );
??MT_UtilGetNvInfo_6:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      @DPTR,A
//  555       pBuf[1] = HI_UINT16( tmp16 );
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOVX      @DPTR,A
//  556     }
//  557     pBuf += sizeof( tmp16 );
??MT_UtilGetNvInfo_7:
        MOV       A,?V2
        ADD       A,#0x2
        MOV       ?V2,A
        JNC       ??MT_UtilGetNvInfo_8
        INC       ?V3
//  558 
//  559     /* Security level */
//  560     if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
??MT_UtilGetNvInfo_8:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V4,#0x1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x61
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        MOV       R0,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        JZ        ??MT_UtilGetNvInfo_9
//  561     {
//  562       stat |= 0x08;
        MOV       A,?V0
        SETB      0xE0 /* A   */.3
        MOV       ?V0,A
//  563     }
//  564     /* Pre-configured security key */
//  565     if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
??MT_UtilGetNvInfo_9:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V2,#0x10
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R1
        JZ        ??MT_UtilGetNvInfo_10
//  566     {
//  567       stat |= 0x10;
        MOV       A,?V0
        SETB      0xE0 /* A   */.4
        MOV       ?V0,A
//  568     }
//  569     /* Status bit mask - bit=1 indicates failure */
//  570     *buf = stat;
??MT_UtilGetNvInfo_10:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,?V0
        MOVX      @DPTR,A
//  571 
//  572     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GET_NV_INFO,
//  573                                   len, buf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,#0x20
        MOV       R2,#0x1
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  574 
//  575     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  576   }
//  577 }
??MT_UtilGetNvInfo_0:
        MOV       A,#0x6
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock23
//  578 
//  579 /***************************************************************************************************
//  580  * @fn      MT_UtilSetPanID
//  581  *
//  582  * @brief   Set PanID message
//  583  *
//  584  * @param   pBuf - pointer to the data
//  585  *
//  586  * @return  void
//  587  ***************************************************************************************************/
//  588 static void MT_UtilSetPanID(uint8 *pBuf)
//  589 {
//  590   uint16 temp16;
//  591   uint8 retValue;
//  592   uint8 cmdId;
//  593 
//  594   /* parse header */
//  595   cmdId = pBuf[MT_RPC_POS_CMD1];
//  596   pBuf += MT_RPC_FRAME_HDR_SZ;
//  597 
//  598   temp16 = osal_build_uint16( pBuf );
//  599 
//  600   retValue = osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &temp16);
//  601 
//  602   /* Build and send back the response */
//  603   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
//  604 }
//  605 
//  606 /***************************************************************************************************
//  607  * @fn      MT_UtilSetChannels
//  608  *
//  609  * @brief   Set Channels
//  610  *
//  611  * @param   pBuf - pointer to the data
//  612  *
//  613  * @return  void
//  614  ***************************************************************************************************/
//  615 static void MT_UtilSetChannels(uint8 *pBuf)
//  616 {
//  617   uint32 tmp32;
//  618   uint8 retValue;
//  619   uint8 cmdId;
//  620 
//  621   /* parse header */
//  622   cmdId = pBuf[MT_RPC_POS_CMD1];
//  623   pBuf += MT_RPC_FRAME_HDR_SZ;
//  624 
//  625   tmp32 = osal_build_uint32( pBuf, 4 );
//  626 
//  627   retValue = osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &tmp32);
//  628 
//  629   /* Build and send back the response */
//  630   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
//  631 }
//  632 
//  633 /***************************************************************************************************
//  634  * @fn      MT_UtilSetSecLevel
//  635  *
//  636  * @brief   Set Sec Level
//  637  *
//  638  * @param   byte *msg - pointer to the data
//  639  *
//  640  * @return  void
//  641  ***************************************************************************************************/
//  642 static void MT_UtilSetSecLevel(uint8 *pBuf)
//  643 {
//  644   uint8 retValue;
//  645   uint8 cmdId;
//  646 
//  647   /* parse header */
//  648   cmdId = pBuf[MT_RPC_POS_CMD1];
//  649   pBuf += MT_RPC_FRAME_HDR_SZ;
//  650 
//  651   retValue = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, osal_nv_item_len( ZCD_NV_SECURITY_LEVEL ), pBuf);
//  652 
//  653   /* Build and send back the response */
//  654   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  655 
//  656 }
//  657 
//  658 /***************************************************************************************************
//  659  * @fn      MT_UtilSetPreCfgKey
//  660  *
//  661  * @brief   Set Pre Cfg Key
//  662  *
//  663  * @param   pBuf - pointer to the data
//  664  *
//  665  * @return  void
//  666  ***************************************************************************************************/
//  667 static void MT_UtilSetPreCfgKey(uint8 *pBuf)
//  668 {
//  669   uint8 retValue;
//  670   uint8 cmdId;
//  671 
//  672   /* parse header */
//  673   cmdId = pBuf[MT_RPC_POS_CMD1];
//  674   pBuf += MT_RPC_FRAME_HDR_SZ;
//  675 
//  676   retValue = osal_nv_write( ZCD_NV_PRECFGKEY, 0, osal_nv_item_len( ZCD_NV_PRECFGKEY ), pBuf);
//  677 
//  678   /* Build and send back the response */
//  679   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  680 
//  681 }
//  682 
//  683 #ifdef FEATURE_GET_PRIMARY_IEEE
//  684 /***************************************************************************************************
//  685  * @fn      MT_UtilGetPrimaryIEEE
//  686  *
//  687  * @brief   Return a copy of the Primary IEEE address
//  688  *
//  689  * @param   none
//  690  *
//  691  * @return  void
//  692  ***************************************************************************************************/
//  693 static void MT_UtilGetPrimaryIEEE(void)
//  694 {
//  695   uint8 i;
//  696   uint8 retBuf[Z_EXTADDR_LEN+1];
//  697 
//  698   retBuf[0] = SUCCESS;
//  699 
//  700   for(i = 1; i <= Z_EXTADDR_LEN; i++)
//  701   {
//  702     retBuf[i] = ieeeMac[i];
//  703   }
//  704 
//  705   MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  706                                   MT_UTIL_GET_PRIMARY_IEEE, Z_EXTADDR_LEN+1, retBuf );
//  707 }
//  708 #endif /* FEATURE_GET_PRIMARY_IEEE */
//  709 
//  710 /***************************************************************************************************
//  711  * @fn      MT_UtilCallbackSub
//  712  *
//  713  * @brief   The Callback subscribe.
//  714  *
//  715  * @param   pBuf - pointer to the data
//  716  *
//  717  * @return  void
//  718  ***************************************************************************************************/
//  719 void MT_UtilCallbackSub(uint8 *pBuf)
//  720 {
//  721   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
//  722   uint8 retValue = ZFailure;
//  723 
//  724 #if defined(MT_MAC_CB_FUNC) || defined(MT_NWK_CB_FUNC) || defined(MT_ZDO_CB_FUNC) || defined(MT_AF_CB_FUNC) || defined(MT_SAPI_CB_FUNC)
//  725   uint8 subSystem;
//  726   uint16 subscribed_command;
//  727 
//  728   // Move past header
//  729   retValue = ZSuccess;
//  730   pBuf += MT_RPC_FRAME_HDR_SZ;
//  731 
//  732   /* Command */
//  733   subscribed_command = osal_build_uint16( pBuf );
//  734   pBuf += 2;
//  735 
//  736   /* Subsystem - 5 bits on the MSB of the command */
//  737   subSystem = HI_UINT16(subscribed_command) & 0x1F ;
//  738 
//  739   /* What is the action - SUBSCRIBE or !SUBSCRIBE */
//  740   if (*pBuf)
//  741   {
//  742     /* Turn ON */
//  743   #if defined( MT_MAC_CB_FUNC )
//  744     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  745     {
//  746     #if !defined (FEATURE_DUAL_MAC)
//  747       _macCallbackSub = 0xFFFF;
//  748     #else
//  749       DMMGR_SaveMacCbReg( 0xFFFF );
//  750     #endif /* ! FEATURE_DUAL_MAC */
//  751     }
//  752   #endif
//  753 
//  754   #if defined( MT_NWK_CB_FUNC )
//  755     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  756       _nwkCallbackSub = 0xFFFF;
//  757   #endif
//  758 
//  759   #if defined( MT_ZDO_CB_FUNC )
//  760     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
//  761       _zdoCallbackSub = 0xFFFFFFFF;
//  762   #endif
//  763 
//  764   #if defined( MT_AF_CB_FUNC )
//  765     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  766       _afCallbackSub = 0xFFFF;
//  767   #endif
//  768 
//  769   #if defined( MT_SAPI_CB_FUNC )
//  770     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
//  771       _sapiCallbackSub = 0xFFFF;
//  772   #endif
//  773   }
//  774   else
//  775   {
//  776     /* Turn OFF */
//  777   #if defined( MT_MAC_CB_FUNC )
//  778     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  779       _macCallbackSub = 0x0000;
//  780 
//  781   #if defined (FEATURE_DUAL_MAC )
//  782     DMMGR_SaveMacCbReg( 0x0000 );
//  783   #endif /* FEATURE_DUAL_MAC */
//  784 
//  785   #endif
//  786 
//  787   #if defined( MT_NWK_CB_FUNC )
//  788     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  789       _nwkCallbackSub = 0x0000;
//  790   #endif
//  791 
//  792   #if defined( MT_ZDO_CB_FUNC )
//  793     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
//  794       _zdoCallbackSub = 0x00000000;
//  795   #endif
//  796 
//  797   #if defined( MT_AF_CB_FUNC )
//  798     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  799       _afCallbackSub = 0x0000;
//  800   #endif
//  801 
//  802   #if defined( MT_SAPI_CB_FUNC )
//  803     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
//  804         _sapiCallbackSub = 0x0000;
//  805   #endif
//  806   }
//  807 #endif  // MT_MAC_CB_FUNC || MT_NWK_CB_FUNC || MT_ZDO_CB_FUNC || MT_AF_CB_FUNC || MT_SAPI_CB_FUNC || MT_SAPI_CB_FUNC
//  808 
//  809   /* Build and send back the response */
//  810   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  811 }
//  812 
//  813 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  814 /***************************************************************************************************
//  815  * @fn      MT_UtilKeyEvent
//  816  *
//  817  * @brief   Process Key Event
//  818  *
//  819  * @param   pBuf - pointer to the data
//  820  *
//  821  * @return  void
//  822  ***************************************************************************************************/
//  823 static void MT_UtilKeyEvent(uint8 *pBuf)
//  824 {
//  825   uint8 x = 0;
//  826   uint8 retValue;
//  827   uint8 cmdId;
//  828 
//  829   /* parse header */
//  830   cmdId = pBuf[MT_RPC_POS_CMD1];
//  831   pBuf += MT_RPC_FRAME_HDR_SZ;
//  832 
//  833   /* Translate between SPI values to device values */
//  834   if ( *pBuf & 0x01 )
//  835     x |= HAL_KEY_SW_1;
//  836   if ( *pBuf & 0x02 )
//  837     x |= HAL_KEY_SW_2;
//  838   if ( *pBuf & 0x04 )
//  839     x |= HAL_KEY_SW_3;
//  840   if ( *pBuf & 0x08 )
//  841     x |= HAL_KEY_SW_4;
//  842 #if defined ( HAL_KEY_SW_5 )
//  843   if ( *pBuf & 0x10 )
//  844     x |= HAL_KEY_SW_5;
//  845 #endif
//  846 #if defined ( HAL_KEY_SW_6 )
//  847   if ( *pBuf & 0x20 )
//  848     x |= HAL_KEY_SW_6;
//  849 #endif
//  850 #if defined ( HAL_KEY_SW_7 )
//  851   if ( *pBuf & 0x40 )
//  852     x |= HAL_KEY_SW_7;
//  853 #endif
//  854 #if defined ( HAL_KEY_SW_8 )
//  855   if ( *pBuf & 0x80 )
//  856     x |= HAL_KEY_SW_8;
//  857 #endif
//  858   pBuf++;
//  859 
//  860   retValue = OnBoard_SendKeys(x, *pBuf);
//  861 
//  862   /* Build and send back the response */
//  863   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  864 }
//  865 #endif
//  866 
//  867 /***************************************************************************************************
//  868  * @fn      MT_UtilTimeAlive
//  869  *
//  870  * @brief   Process Time Alive
//  871  *
//  872  * @param   None.
//  873  *
//  874  * @return  None
//  875  ***************************************************************************************************/
//  876 static void MT_UtilTimeAlive(void)
//  877 {
//  878   uint8 timeAlive[4];
//  879   uint32 tmp32;
//  880 
//  881   /* Time since last reset (seconds) */
//  882   tmp32 = osal_GetSystemClock() / 1000;
//  883 
//  884   /* Convert to high byte first into temp buffer */
//  885   osal_buffer_uint32( timeAlive, tmp32 );
//  886 
//  887   /* Build and send back the response */
//  888   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  889                                        MT_UTIL_TIME_ALIVE, sizeof(timeAlive), timeAlive);
//  890 }
//  891 
//  892 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  893 /***************************************************************************************************
//  894  * @fn      MT_UtilLedControl
//  895  *
//  896  * @brief   Process the LED Control Message
//  897  *
//  898  * @param   pBuf - pointer to the received data
//  899  *
//  900  * @return  None
//  901  ***************************************************************************************************/
//  902 static void MT_UtilLedControl(uint8 *pBuf)
//  903 {
//  904   uint8 iLed, Led, iMode, Mode, cmdId;
//  905   uint8 retValue;
//  906 
//  907   /* parse header */
//  908   cmdId = pBuf[MT_RPC_POS_CMD1];
//  909   pBuf += MT_RPC_FRAME_HDR_SZ;
//  910 
//  911   /* LED and Mode */
//  912   iLed = *pBuf++;
//  913   iMode = *pBuf;
//  914 
//  915   if ( iLed == 1 )
//  916     Led = HAL_LED_1;
//  917   else if ( iLed == 2 )
//  918     Led = HAL_LED_2;
//  919   else if ( iLed == 3 )
//  920     Led = HAL_LED_3;
//  921   else if ( iLed == 4 )
//  922     Led = HAL_LED_4;
//  923   else if ( iLed == 0xFF )
//  924     Led = HAL_LED_ALL;
//  925   else
//  926     Led = 0;
//  927 
//  928   if ( iMode == 0 )
//  929     Mode = HAL_LED_MODE_OFF;
//  930   else if ( iMode == 1 )
//  931     Mode = HAL_LED_MODE_ON;
//  932   else if ( iMode == 2 )
//  933     Mode = HAL_LED_MODE_BLINK;
//  934   else if ( iMode == 3 )
//  935     Mode = HAL_LED_MODE_FLASH;
//  936   else if ( iMode == 4 )
//  937     Mode = HAL_LED_MODE_TOGGLE;
//  938   else
//  939     Led = 0;
//  940 
//  941   if ( Led != 0 )
//  942   {
//  943     HalLedSet (Led, Mode);
//  944     retValue = ZSuccess;
//  945   }
//  946   else
//  947   {
//  948     retValue = ZFailure;
//  949   }
//  950 
//  951   /* Build and send back the response */
//  952   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  953 }
//  954 #endif /* HAL_LED */
//  955 
//  956 /***************************************************************************************************
//  957  * @fn          MT_UtilSrcMatchEnable
//  958  *
//  959  * @brief      Enabled AUTOPEND and source address matching.
//  960  *
//  961  * @param      pBuf - Buffer contains the data
//  962  *
//  963  * @return     void
//  964  ***************************************************************************************************/
//  965 static void MT_UtilSrcMatchEnable (uint8 *pBuf)
//  966 {
//  967   uint8 retValue, cmdId;
//  968 
//  969   /* Parse header */
//  970   cmdId = pBuf[MT_RPC_POS_CMD1];
//  971   pBuf += MT_RPC_FRAME_HDR_SZ;
//  972 
//  973 #ifdef AUTO_PEND
//  974   /* Call the routine */
//  975   retValue = ZMacSrcMatchEnable();
//  976 #else
//  977   retValue = ZMacUnsupported;
//  978 #endif
//  979 
//  980   /* Build and send back the response */
//  981   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  982 
//  983 }
//  984 
//  985 /***************************************************************************************************
//  986  * @fn          MT_UtilSrcMatchAddEntry
//  987  *
//  988  * @brief       Add a short or extended address to source address table.
//  989  *
//  990  * @param       pBuf - Buffer contains the data
//  991  *
//  992  * @return      void
//  993  ***************************************************************************************************/
//  994 static void MT_UtilSrcMatchAddEntry (uint8 *pBuf)
//  995 {
//  996   uint8 retValue, cmdId;
//  997 
//  998   /* Parse header */
//  999   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1000   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1001 
// 1002 #ifdef AUTO_PEND
// 1003   uint16 panID;
// 1004   zAddrType_t devAddr;
// 1005 
// 1006   /* Address mode */
// 1007   devAddr.addrMode = *pBuf++;
// 1008 
// 1009   /* Address based on the address mode */
// 1010   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1011   pBuf += Z_EXTADDR_LEN;
// 1012 
// 1013   /* PanID */
// 1014   panID = osal_build_uint16( pBuf );
// 1015 
// 1016   /* Call the routine */
// 1017   retValue =  ZMacSrcMatchAddEntry (&devAddr, panID);
// 1018 #else
// 1019   retValue = ZMacUnsupported;
// 1020 #endif
// 1021 
// 1022   /* Build and send back the response */
// 1023   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1024 }
// 1025 
// 1026 /***************************************************************************************************
// 1027  * @fn          MT_UtilSrcMatchDeleteEntry
// 1028  *
// 1029  * @brief      Delete a short or extended address from source address table.
// 1030  *
// 1031  * @param      pBuf - Buffer contains the data
// 1032  *
// 1033  * @return     void
// 1034  ***************************************************************************************************/
// 1035 static void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf)
// 1036 {
// 1037   uint8 retValue, cmdId;
// 1038 
// 1039   /* Parse header */
// 1040   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1041   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1042 
// 1043 #ifdef AUTO_PEND
// 1044   uint16 panID;
// 1045   zAddrType_t devAddr;
// 1046 
// 1047   /* Address mode */
// 1048   devAddr.addrMode = *pBuf++;
// 1049 
// 1050   /* Address based on the address mode */
// 1051   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1052   pBuf += Z_EXTADDR_LEN;
// 1053 
// 1054   /* PanID */
// 1055   panID = osal_build_uint16( pBuf );
// 1056 
// 1057   /* Call the routine */
// 1058   retValue =  ZMacSrcMatchDeleteEntry (&devAddr, panID);
// 1059 #else
// 1060   retValue = ZMacUnsupported;
// 1061 #endif
// 1062 
// 1063   /* Build and send back the response */
// 1064   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1065 }
// 1066 
// 1067 /***************************************************************************************************
// 1068  * @fn          MT_UtilSrcMatchCheckSrcAddr
// 1069  *
// 1070  * @brief      Check if a short or extended address is in the source address table.
// 1071  *
// 1072  * @param      pBuf - Buffer contains the data
// 1073  *
// 1074  * @return     void
// 1075  ***************************************************************************************************/
// 1076 static void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf)
// 1077 {
// 1078   uint8 cmdId;
// 1079   uint8 retArray[2];
// 1080 
// 1081   /* Parse header */
// 1082   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1083   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1084 
// 1085 #if 0  /* Unsupported  */
// 1086   uint16 panID;
// 1087   zAddrType_t devAddr;
// 1088 
// 1089   /* Address mode */
// 1090   devAddr.addrMode = *pBuf++;
// 1091 
// 1092   /* Address based on the address mode */
// 1093   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1094   pBuf += Z_EXTADDR_LEN;
// 1095 
// 1096   /* PanID */
// 1097   panID = osal_build_uint16( pBuf );
// 1098 
// 1099   /* Call the routine */
// 1100   retArray[1] =  ZMacSrcMatchCheckSrcAddr (&devAddr, panID);
// 1101 
// 1102     /* Return failure if the index is invalid */
// 1103   if (retArray[1] == ZMacSrcMatchInvalidIndex )
// 1104   {
// 1105     retArray[0] = ZFailure;
// 1106   }
// 1107   else
// 1108   {
// 1109     retArray[0] = ZSuccess;
// 1110   }
// 1111 #else
// 1112   retArray[0] = ZMacUnsupported;
// 1113   retArray[1] = ZMacSrcMatchInvalidIndex;
// 1114 #endif
// 1115 
// 1116   /* Build and send back the response */
// 1117   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1118 }
// 1119 
// 1120 /***************************************************************************************************
// 1121  * @fn          MT_UtilSrcMatchAckAllPending
// 1122  *
// 1123  * @brief       Enabled/disable acknowledging all packets with pending bit set
// 1124  *              It is normally enabled when adding new entries to
// 1125  *              the source address table fails due to the table is full, or
// 1126  *              disabled when more entries are deleted and the table has
// 1127  *              empty slots.
// 1128  *
// 1129  * @param       pBuf - Buffer contains the data
// 1130  *
// 1131  * @return      void
// 1132  ***************************************************************************************************/
// 1133 static void MT_UtilSrcMatchAckAllPending (uint8 *pBuf)
// 1134 {
// 1135   uint8 retValue, cmdId;
// 1136 
// 1137   /* Parse header */
// 1138   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1139   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1140 
// 1141 #ifdef AUTO_PEND
// 1142   /* Call the routine */
// 1143   retValue = ZMacSrcMatchAckAllPending(*pBuf);
// 1144 #else
// 1145   retValue = ZMacUnsupported;
// 1146 #endif
// 1147 
// 1148   /* Build and send back the response */
// 1149   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1150 }
// 1151 
// 1152 /***************************************************************************************************
// 1153  * @fn          MT_UtilSrcMatchCheckAllPending
// 1154  *
// 1155  * @brief       Check if acknowledging all packets with pending bit set
// 1156  *              is enabled.
// 1157  *
// 1158  * @param       pBuf - Buffer contains the data
// 1159  *
// 1160  * @return      void
// 1161  ***************************************************************************************************/
// 1162 static void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf)
// 1163 {
// 1164   uint8 retArray[2], cmdId;
// 1165 
// 1166   /* Parse header */
// 1167   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1168   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1169 
// 1170 #ifdef AUTO_PEND
// 1171   /* Call the routine */
// 1172   retArray[0] = ZMacSuccess;
// 1173   retArray[1] = ZMacSrcMatchCheckAllPending();
// 1174 #else
// 1175   retArray[0] = ZMacUnsupported;
// 1176   retArray[1] = FALSE;
// 1177 #endif
// 1178 
// 1179   /* Build and send back the response */
// 1180   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1181 }
// 1182 
// 1183 /***************************************************************************************************
// 1184  * SUPPORT
// 1185  ***************************************************************************************************/
// 1186 
// 1187 #ifdef AUTO_PEND
// 1188 /***************************************************************************************************
// 1189  * @fn      MT_UtilRevExtCpy
// 1190  *
// 1191  * @brief
// 1192  *
// 1193  *   Reverse-copy an extended address.
// 1194  *
// 1195  * @param   pDst - Pointer to data destination
// 1196  * @param   pSrc - Pointer to data source
// 1197  *
// 1198  * @return  void
// 1199  ***************************************************************************************************/
// 1200 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc )
// 1201 {
// 1202   int8 i;
// 1203 
// 1204   for ( i = Z_EXTADDR_LEN - 1; i >= 0; i-- )
// 1205   {
// 1206     *pDst++ = pSrc[i];
// 1207   }
// 1208 }
// 1209 
// 1210 /***************************************************************************************************
// 1211  * @fn      MT_UtilSpi2Addr
// 1212  *
// 1213  * @brief   Copy an address from an SPI message to an address struct.  The
// 1214  *          addrMode in pAddr must already be set.
// 1215  *
// 1216  * @param   pDst - Pointer to address struct
// 1217  * @param   pSrc - Pointer SPI message byte array
// 1218  *
// 1219  * @return  void
// 1220  ***************************************************************************************************/
// 1221 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc )
// 1222 {
// 1223   if ( pDst->addrMode == Addr16Bit )
// 1224   {
// 1225     pDst->addr.shortAddr = osal_build_uint16( pSrc );
// 1226   }
// 1227   else if ( pDst->addrMode == Addr64Bit )
// 1228   {
// 1229     MT_UtilRevExtCpy( pDst->addr.extAddr, pSrc );
// 1230   }
// 1231 }
// 1232 #endif // AUTO_PEND
// 1233 
// 1234 /***************************************************************************************************
// 1235  * @fn      MT_UtilGpioRead
// 1236  *
// 1237  * @brief   Read values of all GPIOs (P0_0 -P2_4)
// 1238  *
// 1239  * @param   void
// 1240  *
// 1241  * @return  P0, P1, P2, P0DIR, P1DIR, P2DIR
// 1242  ***************************************************************************************************/
// 1243 static void MT_UtilGpioRead(uint8 *pBuf)
// 1244 {
// 1245 #if defined ( HAL_MCU_CC2530 )
// 1246   uint8 rtrn[6] = {P0, P1, P2, P0DIR, P1DIR, P2DIR};
// 1247 #else
// 1248   uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
// 1249 #endif
// 1250   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_READ,
// 1251     6, rtrn);
// 1252 }
// 1253 
// 1254 /***************************************************************************************************
// 1255  * @fn      MT_UtilGpioSetDirection
// 1256  *
// 1257  * @brief   Set the direction of a specific GPIO (P0_0 -P2_4)
// 1258  *
// 1259  * @param   port - 0, 1 or 2
// 1260  * @param   bit - 0 - 7
// 1261  * @param   direction - 0 for input, 1 for output
// 1262  *
// 1263  * @return  oldP0DIR, oldP1DIR, oldP2DIR, newP0DIR, newP1DIR, newP2DIR
// 1264  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1265 static void MT_UtilGpioSetDirection(uint8 *pBuf)
MT_UtilGpioSetDirection:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
        CODE
// 1266 {
        FUNCALL MT_UtilGpioSetDirection, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1267 #if defined ( HAL_MCU_CC2530 )
// 1268   uint8 rtrn[6] = {P0DIR, P1DIR, P2DIR, 0, 0, 0};
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x6
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       A,0xfd
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine2 & 0xFFFF
// 1269   uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
// 1270   uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
// 1271   uint8 direction = pBuf[MT_RPC_POS_DAT0 + 2];
// 1272 
// 1273   if (direction == 0)
??CrossCallReturnLabel_0:
        JNZ       ??MT_UtilGpioSetDirection_0
// 1274   {
// 1275     switch (port)
        MOV       A,R1
        JZ        ??MT_UtilGpioSetDirection_1
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_2
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_3
        SJMP      ??MT_UtilGpioSetDirection_4
// 1276     {
// 1277       case 0:
// 1278         P0DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_1:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xfd,A
// 1279         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1280       case 1:
// 1281         P1DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_2:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xfe,A
// 1282         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1283       case 2:
// 1284         P2DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_3:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xff,A
// 1285         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1286     }
// 1287   }
// 1288   else
// 1289   {
// 1290     switch (port)
??MT_UtilGpioSetDirection_0:
        MOV       A,R1
        JZ        ??MT_UtilGpioSetDirection_5
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_6
        DEC       A
        JZ        ??MT_UtilGpioSetDirection_7
        SJMP      ??MT_UtilGpioSetDirection_4
// 1291     {
// 1292       case 0:
// 1293         P0DIR |= BV(bit);
??MT_UtilGpioSetDirection_5:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xfd,A
// 1294         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1295       case 1:
// 1296         P1DIR |= BV(bit);
??MT_UtilGpioSetDirection_6:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xfe,A
// 1297         break;
        SJMP      ??MT_UtilGpioSetDirection_4
// 1298       case 2:
// 1299         P2DIR |= BV(bit);
??MT_UtilGpioSetDirection_7:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xff,A
// 1300         break;
// 1301     }
// 1302   }
// 1303 
// 1304   rtrn[3] = P0DIR;
??MT_UtilGpioSetDirection_4:
        MOV       A,0xfd
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1305   rtrn[4] = P1DIR;
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1306   rtrn[5] = P2DIR;
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine13 & 0xFFFF
// 1307 #else
// 1308   uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
// 1309 #endif
// 1310 
// 1311   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_SET_DIRECTION,
// 1312     6, rtrn);
??CrossCallReturnLabel_20:
        MOV       R3,#0x6
        MOV       R2,#0x14
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1313 }
        MOV       A,#0x6
          CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine1
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock25
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_UtilCommandProcessing
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 78)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function MT_UtilGpioSetDirection
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_UtilGpioWrite
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
// 1314 
// 1315 /***************************************************************************************************
// 1316  * @fn      MT_UtilGpioWrite
// 1317  *
// 1318  * @brief   Write value of a specific GPIO (P0_0 -P2_4)
// 1319  *
// 1320  * @param   port - 0, 1 or 2
// 1321  * @param   bit - 0 - 7
// 1322  * @param   value - 0 or 1
// 1323  *
// 1324  * @return  oldP0, oldP1, oldP2, newP0, newP1, newP2, P0DIR, P1DIR, P2DIR
// 1325  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1326 static void MT_UtilGpioWrite(uint8 *pBuf)
MT_UtilGpioWrite:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function MT_UtilGpioWrite
        CODE
// 1327 {
        FUNCALL MT_UtilGpioWrite, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV       A,#-0x9
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1328 #if defined ( HAL_MCU_CC2530 )
// 1329   uint8 rtrn[9] = {P0, P1, P2, 0, 0, 0, P0DIR, P1DIR, P2DIR};
        MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x9
        LCALL     ?MOVE_LONG8_XDATA_XDATA
        MOV       A,0x80
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,0x90
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xa0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfd
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xfe
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,0xff
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine2 & 0xFFFF
// 1330   uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
// 1331   uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
// 1332   uint8 value = pBuf[MT_RPC_POS_DAT0 + 2];
// 1333 
// 1334   if (value == 0)
??CrossCallReturnLabel_1:
        JNZ       ??MT_UtilGpioWrite_0
// 1335   {
// 1336     switch (port)
        MOV       A,R1
        JZ        ??MT_UtilGpioWrite_1
        DEC       A
        JZ        ??MT_UtilGpioWrite_2
        DEC       A
        JZ        ??MT_UtilGpioWrite_3
        SJMP      ??MT_UtilGpioWrite_4
// 1337     {
// 1338       case 0:
// 1339         P0 &= (~ BV(bit));
??MT_UtilGpioWrite_1:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0x80,A
// 1340         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1341       case 1:
// 1342         P1 &= (~ BV(bit));
??MT_UtilGpioWrite_2:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0x90,A
// 1343         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1344       case 2:
// 1345         P2 &= (~ BV(bit));
??MT_UtilGpioWrite_3:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        CPL       A
        ANL       0xa0,A
// 1346         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1347     }
// 1348   }
// 1349   else
// 1350   {
// 1351     switch (port)
??MT_UtilGpioWrite_0:
        MOV       A,R1
        JZ        ??MT_UtilGpioWrite_5
        DEC       A
        JZ        ??MT_UtilGpioWrite_6
        DEC       A
        JZ        ??MT_UtilGpioWrite_7
        SJMP      ??MT_UtilGpioWrite_4
// 1352     {
// 1353       case 0:
// 1354         P0 |= BV(bit);
??MT_UtilGpioWrite_5:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0x80,A
// 1355         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1356       case 1:
// 1357         P1 |= BV(bit);
??MT_UtilGpioWrite_6:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0x90,A
// 1358         break;
        SJMP      ??MT_UtilGpioWrite_4
// 1359       case 2:
// 1360         P2 |= BV(bit);
??MT_UtilGpioWrite_7:
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       A,R0
        MOV       R0,#?V0
        LCALL     ?S_SHL
        MOV       A,?V0
        ORL       0xa0,A
// 1361         break;
// 1362     }
// 1363   }
// 1364 
// 1365   rtrn[3] = P0;
??MT_UtilGpioWrite_4:
        MOV       A,0x80
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1366   rtrn[4] = P1;
        MOV       A,0x90
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 1367   rtrn[5] = P2;
        MOV       A,0xa0
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine13 & 0xFFFF
// 1368 
// 1369 #else
// 1370   uint8 rtrn[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
// 1371 #endif
// 1372 
// 1373   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_WRITE,
// 1374     9, rtrn);
??CrossCallReturnLabel_21:
        MOV       R3,#0x9
        MOV       R2,#0x16
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1375 }
        MOV       A,#0x9
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock32
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_UtilGpioWrite
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_42:
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
// 1376 
// 1377 #if !defined NONWK
// 1378 /**************************************************************************************************
// 1379  * @fn      MT_UtilDataReq
// 1380  *
// 1381  * @brief   Process the MAC Data Request command.
// 1382  *
// 1383  * @param   pBuf - pointer to the received data
// 1384  *
// 1385  * @return  None
// 1386 **************************************************************************************************/
// 1387 static void MT_UtilDataReq(uint8 *pBuf)
// 1388 {
// 1389   uint8 rtrn = NwkPollReq(pBuf[MT_RPC_POS_DAT0]);
// 1390   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_DATA_REQ,
// 1391                                                                                1, &rtrn);
// 1392 }
// 1393 
// 1394 /***************************************************************************************************
// 1395  * @fn      MT_UtilAddrMgrEntryLookupExt
// 1396  *
// 1397  * @brief   Proxy the AddrMgrEntryLookupExt() function.
// 1398  *
// 1399  * @param   pBuf - pointer to the received buffer
// 1400  *
// 1401  * @return  void
// 1402  ***************************************************************************************************/
// 1403 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf)
// 1404 {
// 1405   uint8 nwkAddr[2];
// 1406   AddrMgrEntry_t entry;
// 1407   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1408   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1409 
// 1410   osal_memcpy(entry.extAddr, pBuf, Z_EXTADDR_LEN);
// 1411   (void)AddrMgrEntryLookupExt(&entry);
// 1412 
// 1413   nwkAddr[0] = LO_UINT16(entry.nwkAddr);
// 1414   nwkAddr[1] = HI_UINT16(entry.nwkAddr);
// 1415   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1416                                        cmdId, sizeof(uint16), nwkAddr);
// 1417 }
// 1418 
// 1419 /***************************************************************************************************
// 1420  * @fn      MT_UtilAddrMgrEntryLookupNwk
// 1421  *
// 1422  * @brief   Proxy the AddrMgrEntryLookupNwk() function.
// 1423  *
// 1424  * @param   pBuf - pointer to the received buffer
// 1425  *
// 1426  * @return  void
// 1427  ***************************************************************************************************/
// 1428 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf)
// 1429 {
// 1430   AddrMgrEntry_t entry;
// 1431   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1432   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1433 
// 1434   entry.nwkAddr = osal_build_uint16( pBuf );
// 1435   (void)AddrMgrEntryLookupNwk(&entry);
// 1436 
// 1437   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1438                                        cmdId, Z_EXTADDR_LEN, entry.extAddr);
// 1439 }
// 1440 
// 1441 #if defined MT_SYS_KEY_MANAGEMENT
// 1442 /***************************************************************************************************
// 1443  * @fn      MT_UtilAPSME_LinkKeyDataGet
// 1444  *
// 1445  * @brief   Retrieves APS Link Key data from NV.
// 1446  *
// 1447  * @param   pBuf - pointer to the received buffer
// 1448  *
// 1449  * @return  void
// 1450  ***************************************************************************************************/
// 1451 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf)
// 1452 {
// 1453   uint8 rsp[MT_APSME_LINKKEY_GET_RSP_LEN];
// 1454   APSME_LinkKeyData_t *pData = NULL;
// 1455   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1456   uint16 apsLinkKeyNvId;
// 1457   uint32 *apsRxFrmCntr;
// 1458   uint32 *apsTxFrmCntr;
// 1459 
// 1460   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1461 
// 1462   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1463 
// 1464   if (SUCCESS == *rsp)
// 1465   {
// 1466     pData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
// 1467 
// 1468     if (pData != NULL)
// 1469     {
// 1470       // retrieve key from NV
// 1471       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 1472                         sizeof(APSME_LinkKeyData_t), pData) == SUCCESS)
// 1473 
// 1474       {
// 1475         uint8 *ptr = rsp+1;
// 1476         apsRxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr;
// 1477         apsTxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr;
// 1478 
// 1479         (void)osal_memcpy(ptr, pData->key, SEC_KEY_LEN);
// 1480         ptr += SEC_KEY_LEN;
// 1481         osal_buffer_uint32( ptr, *apsTxFrmCntr );
// 1482         ptr += 4;
// 1483         osal_buffer_uint32( ptr, *apsRxFrmCntr );
// 1484       }
// 1485 
// 1486       // clear copy of key in RAM
// 1487       osal_memset( pData, 0x00, sizeof(APSME_LinkKeyData_t) );
// 1488 
// 1489       osal_mem_free(pData);
// 1490     }
// 1491   }
// 1492   else
// 1493   {
// 1494     // set data key and counters 0xFF
// 1495     osal_memset(&rsp[1], 0xFF, SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2));
// 1496   }
// 1497 
// 1498   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1499                                        MT_APSME_LINKKEY_GET_RSP_LEN, rsp);
// 1500 
// 1501   // clear key data
// 1502   osal_memset(rsp, 0x00, MT_APSME_LINKKEY_GET_RSP_LEN);
// 1503 
// 1504 }
// 1505 
// 1506 /***************************************************************************************************
// 1507  * @fn      MT_UtilAPSME_LinkKeyNvIdGet
// 1508  *
// 1509  * @brief   Retrieves APS Link Key NV ID from the entry table.
// 1510  *
// 1511  * @param   pBuf - pointer to the received buffer
// 1512  *
// 1513  * @return  void
// 1514  ***************************************************************************************************/
// 1515 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf)
// 1516 {
// 1517   uint8 rsp[MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN];
// 1518   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1519   uint16 apsLinkKeyNvId;
// 1520 
// 1521   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1522 
// 1523   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1524 
// 1525   if (SUCCESS == *rsp)
// 1526   {
// 1527     rsp[1] = LO_UINT16(apsLinkKeyNvId);
// 1528     rsp[2] = HI_UINT16(apsLinkKeyNvId);
// 1529   }
// 1530   else
// 1531   {
// 1532     // send failure response with invalid NV ID
// 1533     osal_memset(&rsp[1], 0xFF, 2);
// 1534   }
// 1535 
// 1536   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1537                                        MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN, rsp);
// 1538 }
// 1539 #endif // MT_SYS_KEY_MANAGEMENT
// 1540 
// 1541 /***************************************************************************************************
// 1542  * @fn      MT_UtilAPSME_RequestKeyCmd
// 1543  *
// 1544  * @brief   Send RequestKey command message to TC for a specific partner Address.
// 1545  *
// 1546  * @param   pBuf  - pointer to the received buffer
// 1547  *
// 1548  * @return  void
// 1549  ***************************************************************************************************/
// 1550 void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf)
// 1551 {
// 1552   uint8 cmdId;
// 1553   uint8 partnerAddr[Z_EXTADDR_LEN];
// 1554   uint8 retValue;
// 1555 
// 1556   // parse header
// 1557   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1558   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1559 
// 1560   /* PartnerAddress */
// 1561   osal_memcpy(partnerAddr, pBuf, Z_EXTADDR_LEN);
// 1562 
// 1563   retValue = (uint8)ZDSecMgrRequestAppKey(partnerAddr);
// 1564 
// 1565   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
// 1566 }
// 1567 
// 1568 /***************************************************************************************************
// 1569  * @fn      MT_UtilAssocCount
// 1570  *
// 1571  * @brief   Proxy the AssocCount() function.
// 1572  *
// 1573  * @param   pBuf - pointer to the received buffer
// 1574  *
// 1575  * @return  void
// 1576  ***************************************************************************************************/
// 1577 static void MT_UtilAssocCount(uint8 *pBuf)
// 1578 {
// 1579   uint16 cnt;
// 1580   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1581   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1582 
// 1583   cnt = AssocCount(pBuf[0], pBuf[1]);
// 1584   pBuf[0] = LO_UINT16(cnt);
// 1585   pBuf[1] = HI_UINT16(cnt);
// 1586 
// 1587   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, pBuf);
// 1588 }
// 1589 
// 1590 /***************************************************************************************************
// 1591  * @fn      MT_UtilAssocFindDevice
// 1592  *
// 1593  * @brief   Get an associated device by index.
// 1594  *
// 1595  * @param   pBuf - pointer to the received buffer
// 1596  *
// 1597  * @return  void
// 1598  ***************************************************************************************************/
// 1599 static void MT_UtilAssocFindDevice(uint8 *pBuf)
// 1600 {
// 1601   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1602   uint8 buf[sizeof(associated_devices_t)];
// 1603 
// 1604   packDev_t(buf, AssocFindDevice(pBuf[MT_RPC_FRAME_HDR_SZ]));
// 1605   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1606                                        sizeof(associated_devices_t), buf);
// 1607 }
// 1608 
// 1609 /***************************************************************************************************
// 1610  * @fn      MT_UtilAssocGetWithAddress
// 1611  *
// 1612  * @brief   Get an associated device by address.
// 1613  *
// 1614  * @param   pBuf - pointer to the received buffer
// 1615  *
// 1616  * @return  void
// 1617  ***************************************************************************************************/
// 1618 static void MT_UtilAssocGetWithAddress(uint8 *pBuf)
// 1619 {
// 1620   extern associated_devices_t *AssocGetWithAddress(uint8 *extAddr, uint16 shortAddr);
// 1621   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1622   uint8 buf[sizeof(associated_devices_t)];
// 1623 
// 1624   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1625   packDev_t(buf, AssocGetWithAddress(((AddrMgrExtAddrValid(pBuf)) ? pBuf : NULL),
// 1626                                   BUILD_UINT16(pBuf[Z_EXTADDR_LEN], pBuf[Z_EXTADDR_LEN+1])));
// 1627 
// 1628   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1629                                        sizeof(associated_devices_t), buf);
// 1630 }
// 1631 
// 1632 /***************************************************************************************************
// 1633  * @fn      MT_UtilBindAddEntry
// 1634  *
// 1635  * @brief   Add Binding Entry into Local Table.
// 1636  *
// 1637  * @param   pBuf - pointer to the received buffer
// 1638  *
// 1639  * @return  void
// 1640  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1641 static void MT_UtilBindAddEntry(uint8 *pBuf)
MT_UtilBindAddEntry:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function MT_UtilBindAddEntry
        CODE
// 1642 {
        FUNCALL MT_UtilBindAddEntry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, bindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, packBindEntry_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 23
        MOV       A,#-0x17
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1643   uint8 srcEp;
// 1644   zAddrType_t dstAddr;
// 1645   uint8 dstEp;
// 1646   uint8 numClusterIds;
// 1647   uint16 *clusterIds;
// 1648   uint8 buf[sizeof(BindingEntry_t)];
// 1649   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V7,A
// 1650   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1651 
// 1652   // Initialize the return buffer
// 1653   osal_memset( buf, 0xFF, sizeof(BindingEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xe
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 1654   buf[2] = 0xFE;    // set the default value of INVALID_NODE_ADDR
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x2
        MOVX      @DPTR,A
// 1655   buf[3] = 0xFF;    // set the default value of INVALID_NODE_ADDR
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1656 
// 1657   srcEp = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
// 1658 
// 1659   // Destination Address mode
// 1660   dstAddr.addrMode = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x5
        MOV       R6,A
        JNC       ??MT_UtilBindAddEntry_0
        INC       R7
// 1661 
// 1662   // Destination Address
// 1663   if ( dstAddr.addrMode == Addr64Bit )
??MT_UtilBindAddEntry_0:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_UtilBindAddEntry_1
// 1664   {
// 1665     uint8 *ptr; // Use this additional pointer because *pBuf is incremented later for both cases
// 1666 
// 1667     ptr = pBuf;
// 1668     osal_cpyExtAddr( dstAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??MT_UtilBindAddEntry_2
// 1669   }
// 1670   else
// 1671   {
// 1672     dstAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_UtilBindAddEntry_1:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1673   }
// 1674   // The short address occupies LSB two bytes
// 1675   pBuf += Z_EXTADDR_LEN;
// 1676 
// 1677   // DstEPInt
// 1678   dstEp = *pBuf++;
??MT_UtilBindAddEntry_2:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
// 1679 
// 1680   numClusterIds = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
// 1681 
// 1682   if ( numClusterIds > 0 )
        JZ        ??MT_UtilBindAddEntry_3
// 1683   {
// 1684     // copy list of clusters
// 1685     clusterIds = (uint16 *)osal_mem_alloc( numClusterIds * sizeof(uint16) );
        ADD       A,0xE0 /* A   */
        MOV       ?V2,A
        CLR       A
        RLC       A
        MOV       ?V3,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,?V2
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1686     osal_memcpy( clusterIds, pBuf, numClusterIds * sizeof(uint16));
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0xa
        MOV       ?V8,A
        CLR       A
        ADDC      A,R7
        MOV       ?V9,A
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
// 1687 
// 1688     if ( clusterIds != NULL )
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??MT_UtilBindAddEntry_3
// 1689     {
// 1690       // The response to MT interface has to be pack into buf
// 1691       packBindEntry_t( buf, bindAddEntry( srcEp, &dstAddr, dstEp, numClusterIds, clusterIds ));
        ; Setup parameters for call to function bindAddEntry
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV       R5,?V6
        MOV       R4,?V5
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,?V4
        LCALL     `??bindAddEntry::?relay`; Banked call to: bindAddEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
        ; Setup parameters for call to function packBindEntry_t
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??packBindEntry_t::?relay`; Banked call to: packBindEntry_t
// 1692 
// 1693       osal_mem_free( clusterIds );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1694     }
// 1695   }
// 1696 
// 1697   MT_BuildAndSendZToolResponse( ( (uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL ),
// 1698                                 cmdId, sizeof(BindingEntry_t), buf );
??MT_UtilBindAddEntry_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0xe
        MOV       R2,?V7
        MOV       R1,#0x67
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1699 }
        MOV       A,#0x17
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock36
// 1700 
// 1701 /***************************************************************************************************
// 1702  * @fn      packDev_t
// 1703  *
// 1704  * @brief   Pack an associated_devices_t structure into a byte buffer (pack INVALID_NODE_ADDR if
// 1705  *          the pDev parameter is NULL).
// 1706  *
// 1707  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1708  * @param   pDev - pointer to the structure.
// 1709  *
// 1710  * @return  void
// 1711  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1712 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev)
packDev_t:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function packDev_t
        CODE
// 1713 {
        FUNCALL packDev_t, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
// 1714   if (NULL == pDev)
        MOV       A,R4
        ORL       A,?V1
        JNZ       ??packDev_t_0
// 1715   {
// 1716     uint16 rtrn = INVALID_NODE_ADDR;
// 1717     *pBuf++ = LO_UINT16(rtrn);
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#-0x2
        MOVX      @DPTR,A
// 1718     *pBuf++ = HI_UINT16(rtrn);
        INC       DPTR
        INC       A
        LJMP      ??packDev_t_1 & 0xFFFF
// 1719   }
// 1720   else
// 1721   {
// 1722     *pBuf++ = LO_UINT16(pDev->shortAddr);
??packDev_t_0:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL     ?Subroutine17 & 0xFFFF
// 1723     *pBuf++ = HI_UINT16(pDev->shortAddr);
??CrossCallReturnLabel_26:
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_39:
        INC       DPTR
        MOVX      @DPTR,A
// 1724     *pBuf++ = LO_UINT16(pDev->addrIdx);
        MOV       A,R4
        ADD       A,#0x2
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        INC       DPTR
        LCALL     ?Subroutine14 & 0xFFFF
// 1725     *pBuf++ = HI_UINT16(pDev->addrIdx);
??CrossCallReturnLabel_54:
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?Subroutine16 & 0xFFFF
// 1726     *pBuf++ = pDev->nodeRelation;
??CrossCallReturnLabel_24:
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL     ?Subroutine18 & 0xFFFF
// 1727     *pBuf++ = pDev->devStatus;
??CrossCallReturnLabel_50:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL     ?Subroutine17 & 0xFFFF
// 1728     *pBuf++ = pDev->assocCnt;
??CrossCallReturnLabel_27:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?Subroutine18 & 0xFFFF
// 1729     *pBuf++ = pDev->age;
??CrossCallReturnLabel_51:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     ?Subroutine17 & 0xFFFF
// 1730     *pBuf++ = pDev->linkInfo.txCounter;
??CrossCallReturnLabel_28:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL     ?Subroutine18 & 0xFFFF
// 1731     *pBuf++ = pDev->linkInfo.txCost;
??CrossCallReturnLabel_52:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?Subroutine17 & 0xFFFF
// 1732     *pBuf++ = pDev->linkInfo.rxLqi;
??CrossCallReturnLabel_29:
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        INC       DPTR
        MOVX      @DPTR,A
// 1733     *pBuf++ = pDev->linkInfo.inKeySeqNum;
        MOV       A,R4
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0xc
        MOV       R6,A
        JNC       ??packDev_t_2
        INC       R7
// 1734     osal_buffer_uint32( pBuf, pDev->linkInfo.inFrmCntr );
??packDev_t_2:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV       A,R4
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1735     *pBuf += 4;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,#0x4
        MOVX      @DPTR,A
// 1736     *pBuf++ = LO_UINT16(pDev->linkInfo.txFailure);
        MOV       A,?V0
        ADD       A,#0x10
        LCALL     ?Subroutine6 & 0xFFFF
// 1737     *pBuf++ = HI_UINT16(pDev->linkInfo.txFailure);
// 1738   }
??CrossCallReturnLabel_9:
        LCALL     ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_57:
        INC       DPTR
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_40:
        INC       DPTR
??packDev_t_1:
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x2
// 1739 }
        LJMP      ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function packDev_t
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function packDev_t
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        INC       DPTR
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function packBindEntry_t
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function packDev_t
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function packDev_t
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function packDev_t
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function packDev_t
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function packDev_t
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function packDev_t
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function packBindEntry_t
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        INC       DPTR
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function packDev_t
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function packDev_t
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function packBindEntry_t
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function packDev_t
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_37:
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function packDev_t
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_15
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function packDev_t
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_10
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function packDev_t
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_11
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_46:
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function packDev_t
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_15
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-6
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function packDev_t
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_10
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-6
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function packDev_t
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_11
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-6
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function packDev_t
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_6
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-6
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function packDev_t
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_7
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-6
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function packDev_t
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_4
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-6
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function packDev_t
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_5
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-6
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function packDev_t
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_36:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function packDev_t
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function packDev_t
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function packDev_t
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function packDev_t
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_8
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-4
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function packDev_t
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_9
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-4
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function packDev_t
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_33:
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function packDev_t
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_7
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-4
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function packDev_t
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_4
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function packDev_t
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_5
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_45:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function packDev_t
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_32:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99
// 1740 
// 1741 /***************************************************************************************************
// 1742  * @fn      packBindEntry_t
// 1743  *
// 1744  * @brief   Pack a BindingEntry_t structure into a byte buffer (pack INVALID_NODE_ADDR
// 1745  *          as dstIdx if the pBind parameter is NULL).
// 1746  *
// 1747  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1748  * @param   pBind - pointer to the structure.
// 1749  *
// 1750  * @return  void
// 1751  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1752 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind)
packBindEntry_t:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function packBindEntry_t
        CODE
// 1753 {
        FUNCALL packBindEntry_t, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1754   if ( NULL == pBind )
        MOV       A,R4
        ORL       A,R5
        JNZ       ??packBindEntry_t_0
// 1755   {
// 1756     uint16 rtrn = INVALID_NODE_ADDR;
// 1757     *pBuf++ = 0xFF;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1758     *pBuf++ = 0xFF;
        INC       DPTR
        MOVX      @DPTR,A
// 1759     *pBuf++ = LO_UINT16(rtrn);
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        DEC       A
        LCALL     ?Subroutine24 & 0xFFFF
// 1760     *pBuf++ = HI_UINT16(rtrn);
// 1761     *pBuf++ = 0xFF;
// 1762     *pBuf++ = 0xFF;
// 1763 
// 1764   }
??CrossCallReturnLabel_43:
        INC       A
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_23:
        INC       DPTR
        MOVX      @DPTR,A
        MOV       A,R2
        ADD       A,#0x6
        SJMP      ??packBindEntry_t_1
// 1765   else
// 1766   {
// 1767     *pBuf++ = pBind->srcEP;
??packBindEntry_t_0:
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine28_0 & 0xFFFF
// 1768     *pBuf++ = pBind->dstGroupMode;
??CrossCallReturnLabel_53:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_59:
        MOVX      @DPTR,A
// 1769     *pBuf++ = LO_UINT16( pBind->dstIdx );
        MOV       A,R4
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?Subroutine14 & 0xFFFF
// 1770     *pBuf++ = HI_UINT16( pBind->dstIdx );
??CrossCallReturnLabel_55:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_60:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine16 & 0xFFFF
// 1771     *pBuf++ = pBind->dstEP;
??CrossCallReturnLabel_25:
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX      @DPTR,A
// 1772     *pBuf++ = pBind->numClusterIds;
        MOV       A,R4
        ADD       A,#0x5
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        INC       DPTR
        MOVX      @DPTR,A
// 1773 
// 1774     osal_memcpy( pBuf, pBind->clusterIdList, pBind->numClusterIds * sizeof(uint16));
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R4
        ADD       A,#0x6
        MOV       ?V0,A
        CLR       A
        ADDC      A,R5
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ADD       A,0xE0 /* A   */
        MOV       R4,A
        CLR       A
        RLC       A
        MOV       R5,A
        MOV       A,R2
        ADD       A,#0x6
        MOV       R2,A
        JNC       ??packBindEntry_t_2
        INC       R3
??packBindEntry_t_2:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1775   }
// 1776 }
??packBindEntry_t_1:
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock100

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
          CFI Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function MT_UtilGpioWrite
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_1
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-4
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function packBindEntry_t
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function packBindEntry_t
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_22
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function packBindEntry_t
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_23
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function packBindEntry_t
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function packBindEntry_t
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function packBindEntry_t
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        INC       DPTR
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function packBindEntry_t
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function packBindEntry_t
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        INC       DPTR
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function packBindEntry_t
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function packBindEntry_t
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function packBindEntry_t
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function packBindEntry_t
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function packBindEntry_t
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGetDeviceInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetDeviceInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGetNvInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetNvInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGpioSetDirection::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGpioSetDirection

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGpioWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGpioWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilBindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilBindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packDev_t::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packDev_t

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packBindEntry_t::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packBindEntry_t

        END
// 1777 
// 1778 #if defined ZCL_KEY_ESTABLISH
// 1779 /***************************************************************************************************
// 1780  * @fn      MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment
// 1781  *
// 1782  * @brief   Proxy the zclKE_StartDirect() function.
// 1783  *
// 1784  * @param   pBuf - pointer to the received buffer
// 1785  *
// 1786  * @return  void
// 1787  ***************************************************************************************************/
// 1788 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf)
// 1789 {
// 1790   afAddrType_t partnerAddr;
// 1791   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1792   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1793 
// 1794   partnerAddr.panId = 0;  // Not an inter-pan message.
// 1795   partnerAddr.endPoint = pBuf[2];
// 1796   partnerAddr.addrMode = afAddr16Bit;
// 1797   partnerAddr.addr.shortAddr = osal_build_uint16( &pBuf[4] );
// 1798 
// 1799   zcl_key_establish_task_id = pBuf[0];
// 1800 
// 1801   *pBuf = zclKE_StartDirect(MT_TaskID, &partnerAddr, pBuf[1], pBuf[3]);
// 1802 
// 1803   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1804 }
// 1805 
// 1806 /***************************************************************************************************
// 1807  * @fn      MT_UtilzclGeneral_KeyEstablishment_ECDSASign
// 1808  *
// 1809  * @brief   Proxy the zclGeneral_KeyEstablishment_ECDSASign() function.
// 1810  *
// 1811  * @param   pBuf - pointer to the received buffer
// 1812  *
// 1813  * @return  void
// 1814  ***************************************************************************************************/
// 1815 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf)
// 1816 {
// 1817 #if defined ZCL_KEY_ESTABLISH
// 1818   uint8 *output;
// 1819   uint8 signLen;
// 1820   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1821   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1822 
// 1823   signLen = zclKE_ECDSASignGetLen(ZCL_KE_SUITE_1);
// 1824 
// 1825   output = osal_mem_alloc(signLen+1);
// 1826 
// 1827   if (NULL == output)
// 1828   {
// 1829     *pBuf = FAILURE;
// 1830     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1831   }
// 1832   else
// 1833   {
// 1834     *output = zclKE_ECDSASign(ZCL_KE_SUITE_1, pBuf+1, *pBuf, output+1);
// 1835     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1836                                          signLen+1, output);
// 1837     osal_mem_free(output);
// 1838   }
// 1839 #endif
// 1840 }
// 1841 
// 1842 /***************************************************************************************************
// 1843  * @fn      MT_UtilKeyEstablishInd
// 1844  *
// 1845  * @brief   Proxy the ZCL_KEY_ESTABLISH_IND command.
// 1846  *
// 1847  * @param   pInd - Pointer to a zclKE_StatusInd_t structure.
// 1848  *
// 1849  * @return  None
// 1850  ***************************************************************************************************/
// 1851 void MT_UtilKeyEstablishInd(zclKE_StatusInd_t *pInd)
// 1852 {
// 1853   uint8 msg[6];
// 1854 
// 1855   msg[0] = zcl_key_establish_task_id;
// 1856   msg[1] = pInd->hdr.event;
// 1857   msg[2] = pInd->hdr.status;
// 1858   msg[3] = pInd->waitTime;
// 1859   msg[4] = LO_UINT16(pInd->suites);
// 1860   msg[5] = HI_UINT16(pInd->suites);
// 1861 
// 1862   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_UTIL),
// 1863                                        MT_UTIL_ZCL_KEY_ESTABLISH_IND, 6, msg);
// 1864 }
// 1865 #endif
// 1866 
// 1867 /***************************************************************************************************
// 1868  * @fn      MT_UtilSync
// 1869  *
// 1870  * @brief   Process the MT_UTIL_SYNC command
// 1871  *
// 1872  * @param   None
// 1873  *
// 1874  * @return  None
// 1875  ***************************************************************************************************/
// 1876 static void MT_UtilSync(void)
// 1877 {
// 1878  MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_UTIL),MT_UTIL_SYNC_REQ,0,0);
// 1879 }
// 1880 #endif /* !defined NONWK */
// 1881 #endif /* MT_UTIL_FUNC */
// 1882 /**************************************************************************************************
// 1883  **************************************************************************************************/
// 
// 3 461 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
//    19 bytes in segment XDATA_ROM_C
// 
//    48 bytes of CODE     memory
//    15 bytes of CONST    memory (+ 4 bytes shared)
//     0 bytes of DATA     memory (+ 6 bytes shared)
// 3 461 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
