###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               16/Feb/2018  21:40:07
# Copyright 2004-2017 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.10
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_key_establish.c
#    Command line       =  
#        -f C:\Users\Oskar\AppData\Local\Temp\EWAEF.tmp ("C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Components\stack\zcl\zcl_key_establish.c" -D
#        FEATURE_SYSTEM_STATS -D POWER_SAVING -D xTC_LINKKEY_JOIN -lC "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary163\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\ecc\binary283\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes --no_code_motion)
#    Locale             =  German_Germany.1252
#    List file          =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\zcl_key_establish.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Home
#        1.2.2a.44539\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\zcl_key_establish.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Home 1.2.2a.44539\Components\stack\zcl\zcl_key_establish.c
      1          /**************************************************************************************************
      2            Filename:       zcl_key_establish.c
      3            Revised:        $Date: 2014-12-08 11:21:45 -0800 (Mon, 08 Dec 2014) $
      4            Revision:       $Revision: 41372 $
      5          
      6            Description:    Zigbee Cluster Library - SE (Smart Energy) Key Establishment
      7          
      8          
      9            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          /**************************************************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "hal_types.h"
     46          #include "ZComDef.h"
     47          #include "eccapi_163.h"
     48          #include "eccapi_283.h"
     49          #include "ssp_hash.h"
     50          #include "ZGlobals.h"
     51          #include "AddrMgr.h"
     52          #include "nwk_globals.h"
     53          #include "NLMEDE.h"
     54          #include "AF.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDSecMgr.h"
     58          #include "stub_aps.h"
     59          #include "zcl.h"
     60          #include "zcl_se.h"
     61          #include "zcl_key_establish.h"
     62          
     63          
     64          /**************************************************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          // Key Establishment End Point Configuration
     69          #define ZCL_KE_DEVICE_VERSION  0
     70          #define ZCL_KE_FLAGS           0
     71          #define ZCL_KE_CLUSTER_CNT     1
     72          
     73          // Server-to-Client Cluster Commands
     74          #define ZCL_KE_INITIATE_RSP      0x00
     75          #define ZCL_KE_EPH_DATA_RSP      0x01
     76          #define ZCL_KE_CFM_KEY_DATA_RSP  0x02
     77          #define ZCL_KE_TERMINATE_CLIENT  0x03
     78          
     79          // Client-to-Server Cluster Commands
     80          #define ZCL_KE_INITIATE_REQ      0x00
     81          #define ZCL_KE_EPH_DATA_REQ      0x01
     82          #define ZCL_KE_CFM_KEY_DATA_REQ  0x02
     83          #define ZCL_KE_TERMINATE_SERVER  0x03
     84          
     85          // Key Length
     86          #define ZCL_KE_KEY_LEN  16
     87          #define ZCL_KE_MAC_LEN  16
     88          
     89          // Timer Constants
     90          #define ZCL_KE_TIMER_EVT  0x01
     91          
     92          // ZCL_KE_STATE
     93          #define ZCL_KE_INIT      0
     94          #define ZCL_KE_READY     1
     95          #define ZCL_KE_NO_CERTS  10
     96          
     97          // ZCL_KE_MSG_TYPE
     98          #define ZCL_KE_START_MSG         1
     99          #define ZCL_KE_START_DIRECT_MSG  2
    100          #define ZCL_KE_KEY_GEN_MSG       3
    101          
    102          // Poll Rate Bits
    103          #define ZCL_KE_CLIENT_POLL_RATE_BIT  0x01
    104          #define ZCL_KE_SERVER_POLL_RATE_BIT  0x02
    105          
    106          // Time between stage 1 and stage 2 -- see ZCL_KE_KEY_GEN_STAGES_*
    107          #define ZCL_KE_KEY_GEN_TIMEOUT  500
    108          
    109          // Invalid gen time
    110          #define ZCL_KE_GEN_INVALID_TIME  0xFF
    111          
    112          // Configured poll rate for end device during key establishment
    113          #if !defined ( ZCL_KE_POLL_RATE )
    114          #define ZCL_KE_POLL_RATE  1000
    115          #endif
    116          
    117          // Configure connection timeout in ms
    118          #if !defined ( ZCL_KE_CONN_TIMEOUT )
    119          #define ZCL_KE_CONN_TIMEOUT  60000
    120          #endif
    121          
    122          // Configure timeouts for suite discovery operations(Match_Desc_req, ZCL_CMD_READ, etc. )
    123          #if !defined ( ZCL_KE_SUITE_DISCOVERY_TIMEOUT )
    124          #define ZCL_KE_SUITE_DISCOVERY_TIMEOUT  60000
    125          #endif 
    126          
    127          // Configure server times for ephemeral and key data generation
    128          #if !defined ( ZCL_KE_SERVER_EPH_DATA_GEN_TIME )
    129          #define ZCL_KE_SERVER_EPH_DATA_GEN_TIME 30
    130          #endif 
    131          
    132          #if !defined ( ZCL_KE_SERVER_CFM_KEY_GEN_TIME)
    133          #define ZCL_KE_SERVER_CFM_KEY_GEN_TIME 30
    134          #endif 
    135          
    136          // Configure client times for ephemeral and key data generation
    137          #if !defined ( ZCL_KE_CLIENT_EPH_DATA_GEN_TIME )
    138          #define ZCL_KE_CLIENT_EPH_DATA_GEN_TIME 30
    139          #endif 
    140          
    141          #if !defined ( ZCL_KE_CLIENT_CFM_KEY_GEN_TIME )
    142          #define ZCL_KE_CLIENT_CFM_KEY_GEN_TIME 30
    143          #endif 
    144          
    145          // Configure the Trust Center's max server connections -- saved in NV "ZCD_NV_KE_MAX_DEVICES"
    146          #if !defined ( ZCL_KE_MAX_SERVER_CONNECTIONS )
    147          #define ZCL_KE_MAX_SERVER_CONNECTIONS  2
    148          #endif
    149          
    150          // ZCL_KE_SERVER_CONN_STATE
    151          #define ZCL_KE_SERVER_CONN_INIT                   0
    152          #define ZCL_KE_SERVER_CONN_EPH_DATA_REQ_WAIT      1
    153          #define ZCL_KE_SERVER_CONN_KEY_GEN_WAIT           2
    154          #define ZCL_KE_SERVER_CONN_KEY_GEN_QUEUED         3
    155          #define ZCL_KE_SERVER_CONN_CFM_KEY_DATA_REQ_WAIT  4
    156          
    157          // ZCL_KE_CLIENT_CONN_STATE
    158          #define ZCL_KE_CLIENT_CONN_INIT                   0
    159          #define ZCL_KE_CLIENT_CONN_MATCH_RSP_WAIT         1
    160          #define ZCL_KE_CLIENT_CONN_READ_RSP_WAIT          2
    161          #define ZCL_KE_CLIENT_CONN_INIT_RSP_WAIT          5
    162          #define ZCL_KE_CLIENT_CONN_EPH_DATA_RSP_WAIT      6
    163          #define ZCL_KE_CLIENT_CONN_KEY_GEN_WAIT           7
    164          #define ZCL_KE_CLIENT_CONN_KEY_GEN_QUEUED         8
    165          #define ZCL_KE_CLIENT_CONN_CFM_KEY_DATA_RSP_WAIT  9
    166          
    167          // Certificate fields
    168          #define ZCL_KE_CERT_ISSUER_LEN  8
    169          #define ZCL_KE_CERT_163_EXT_ADDR_IDX   22
    170          #define ZCL_KE_CERT_163_ISSUER_IDX     30
    171          #define ZCL_KE_CERT_283_EXT_ADDR_IDX   28
    172          #define ZCL_KE_CERT_283_ISSUER_IDX     11
    173          #define ZCL_KE_CERT_283_TYPE_IDX       0
    174          #define ZCL_KE_CERT_283_CURVE_IDX      9
    175          #define ZCL_KE_CERT_283_HASH_IDX       10
    176          #define ZCL_KE_CERT_283_KEY_USAGE_IDX  36
    177          
    178          #define ZCL_KE_CERT_283_TYPE_VALUE     0x00
    179          #define ZCL_KE_CERT_283_CURVE_VALUE    0x0D
    180          #define ZCL_KE_CERT_283_HASH_VALUE     0x08
    181          #define ZCL_KE_CERT_283_KEY_USAGE_BIT  0x08
    182          
    183          // ZCL_KE_GET_FIELD_TYPES
    184          #define ZCL_KE_PUBLIC_KEY_NV_ID   0    
    185          #define ZCL_KE_PRIVATE_KEY_NV_ID  1     
    186          #define ZCL_KE_CERT_NV_ID         2
    187          #define ZCL_KE_PUBLIC_KEY_LEN     3
    188          #define ZCL_KE_PRIVATE_KEY_LEN    4
    189          #define ZCL_KE_CERT_LEN           5
    190          #define ZCL_KE_CERT_EXT_ADDR_IDX  6
    191          #define ZCL_KE_CERT_ISSUER_IDX    7
    192          #define ZCL_KE_FIELDS_MAX         8
    193          
    194          // Initiate payload fields for ZCL_KE_INITIATE_RSP and ZCL_KE_INITIATE_REQ
    195          #define ZCL_KE_INITIATE_HDR_LEN     4
    196          #define ZCL_KE_INITIATE_SUITE1_LEN  ZCL_KE_INITIATE_HDR_LEN + ECCAPI_CERT_163_LEN
    197          #define ZCL_KE_INITIATE_SUITE2_LEN  ZCL_KE_INITIATE_HDR_LEN + ECCAPI_CERT_283_LEN
    198          
    199          // Terminate payload fields for ZCL_KE_TERMINATE_CLIENT and ZCL_KE_TERMINATE_SERVER
    200          #define ZCL_KE_TERMINATE_LEN  4
    201          
    202          
    203          /**************************************************************************************************
    204           * TYPEDEFS
    205           */
    206          
    207          // ZCL_KE_START_MSG payload
    208          typedef struct
    209          {
    210            osal_event_hdr_t hdr;
    211            uint8 taskID;
    212            uint16 partnerNwkAddr;
    213            uint8 transSeqNum;
    214          } zclKE_StartMsg_t;
    215          
    216          // ZCL_KE_START_DIRECT_MSG payload
    217          typedef struct
    218          {
    219            osal_event_hdr_t hdr;
    220            uint8 taskID;
    221            afAddrType_t partnerAddr;
    222            uint8 transSeqNum;
    223            uint16 suite;
    224          } zclKE_StartDirectMsg_t;
    225          
    226          // ZCL_KE_KEY_GEN_MSG payload
    227          typedef struct
    228          {
    229            osal_event_hdr_t hdr;
    230            uint16 partnerAddr;
    231            uint8 server;
    232          } zclKE_KeyGenMsg_t;
    233          
    234          // Local zclReadCmd_t structure
    235          typedef struct
    236          {
    237            uint8  numAttr;
    238            uint16 attrID[1];
    239          } zclKE_ReadCmd_t;
    240          
    241          typedef struct 
    242          {
    243            uint16 suite;
    244            uint8 ephDataGenTime;
    245            uint8 cfmKeyGenTime;
    246            uint8 *pIdentity;
    247          } zclKE_InitiateCmd_t;
    248          
    249          typedef struct 
    250          {
    251            uint8 *pEphData;
    252          } zclKE_EphDataCmd_t;
    253          
    254          typedef struct 
    255          {
    256            uint8 *pMAC;
    257          } zclKE_CfmKeyDataCmd_t;
    258          
    259          typedef struct
    260          {
    261            uint8 status; // ZCL_KE_TERMINATE_ERROR
    262            uint8 waitTime;
    263            uint16 suites;
    264          } zclKE_TerminateCmd_t;
    265          
    266          typedef struct zclKE_ConnType zclKE_Conn_t;
    267          
    268          struct zclKE_ConnType
    269          {
    270            uint8 taskID;
    271            uint8 state; // see ZCL_KE_SERVER_CONN_STATE or ZCL_KE_CLIENT_CONN_STATE
    272            uint8 transSeqNum;
    273            uint8 rmtEphDataGenTime;
    274            uint8 rmtCfmKeyGenTime;
    275            uint16 suite;
    276            uint32 stamp;
    277            uint32 timeout;
    278            afAddrType_t partner;
    279            uint8 *pEPublicKey;
    280            uint8 *pEPrivateKey;
    281            uint8 *pRmtEPublicKey;
    282            uint8 *pRmtCert;
    283            uint8 *pKey;
    284            uint8 *pMACKey;
    285            zclKE_Conn_t *pNext;
    286          };
    287          
    288          typedef struct
    289          {
    290            uint8 error;
    291            zclIncoming_t *pInMsg;
    292            zclKE_Conn_t *pConn;
    293          } zclKE_ConnCtxt_t;
    294          
    295          
    296          /**************************************************************************************************
    297           * FUNCTION PROTOTYPES
    298           */
    299          
    300          
    301          /**************************************************************************************************
    302           * LOCAL VARIABLES
    303           */
    304          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    305          static uint8 zclKE_TaskID;
   \                     zclKE_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    306          static uint16 zclKE_SupportedSuites = 0;
   \                     zclKE_SupportedSuites:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    307          static uint8 zclKE_State = ZCL_KE_INIT; // see ZCL_KE_STATE
   \                     zclKE_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    308          static zclKE_Conn_t *zclKE_ServerConnList = NULL;
   \                     zclKE_ServerConnList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    309          static zclKE_Conn_t *zclKE_ClientConnList = NULL;
   \                     zclKE_ClientConnList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    310          

   \                                 In  segment CODE_C, align 1
    311          static CONST cId_t zclKE_ClusterList[ZCL_KE_CLUSTER_CNT] =
   \                     zclKE_ClusterList:
   \   000000   0008         DW 2048
    312          {
    313            ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
    314          };
    315          

   \                                 In  segment CODE_C, align 1
    316          static CONST SimpleDescriptionFormat_t zclKE_SimpleDesc =
   \                     zclKE_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   0901         DW 265
   \   000003   0705         DW 1287
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW zclKE_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW zclKE_ClusterList
    317          {
    318            ZCL_KE_ENDPOINT,
    319            ZCL_SE_PROFILE_ID,
    320            ZCL_SE_DEVICEID_PHYSICAL,
    321            ZCL_KE_DEVICE_VERSION,
    322            ZCL_KE_FLAGS,
    323            ZCL_KE_CLUSTER_CNT,
    324            (cId_t *)zclKE_ClusterList, 
    325            ZCL_KE_CLUSTER_CNT,
    326            (cId_t *)zclKE_ClusterList 
    327          };
    328          

   \                                 In  segment CODE_C, align 1
    329          static CONST endPointDesc_t zclKE_EPDesc =
   \                     zclKE_EPDesc:
   \   000000   0A           DB 10
   \   000001   ....         DW zcl_TaskID
   \   000003   ....         DW zclKE_SimpleDesc
   \   000005   00           DB 0
    330          {
    331            ZCL_KE_ENDPOINT,
    332          #ifndef ZCL_STANDALONE
    333            &zcl_TaskID,
    334          #else
    335            &zclKE_TaskID,
    336          #endif
    337            (SimpleDescriptionFormat_t *)&zclKE_SimpleDesc,
    338            (afNetworkLatencyReq_t)noLatencyReqs
    339          };
    340          

   \                                 In  segment CODE_C, align 1
    341          static CONST zclAttrRec_t zclKE_ZCL_AttrList[] =
   \                     zclKE_ZCL_AttrList:
   \   000000   0008         DW 2048
   \   000002   0000         DW 0
   \   000004   31           DB 49
   \   000005   01           DB 1
   \   000006   ....         DW zclKE_SupportedSuites
    342          {
    343            {
    344              ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
    345              {  // Attribute record
    346                ATTRID_KE_SUITE,
    347                ZCL_DATATYPE_ENUM16,
    348                ACCESS_CONTROL_READ,
    349                (void *)&zclKE_SupportedSuites
    350              }
    351            },
    352          };
    353          
    354          // Note: should not be const since ZCL may temporarily change the value

   \                                 In  segment XDATA_I, align 1, keep-with-next
    355          static zclOptionRec_t zclKE_ZCL_Options[] =
   \                     zclKE_ZCL_Options:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for zclKE_ZCL_Options>`
   \   000003                REQUIRE __INIT_XDATA_I
    356          {
    357            {
    358              ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
    359              ( AF_ACK_REQUEST ),
    360            },
    361          };
    362          
    363          #if defined( NWK_AUTO_POLL )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    364          uint32 zclKE_PollRateSaved;
   \                     zclKE_PollRateSaved:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    365          uint8  zclKE_PollRateSet = 0;
   \                     zclKE_PollRateSet:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    366          #endif
    367          
    368          #if !defined( ECCAPI_163_DISABLED )
    369          // see ZCL_KE_GET_FIELD_TYPES

   \                                 In  segment CODE_C, align 1
    370          static CONST uint16 zclKE_Suite1Fields[ZCL_KE_FIELDS_MAX] = 
   \                     zclKE_Suite1Fields:
   \   000000   6B00         DW 107
   \   000002   6A00         DW 106
   \   000004   6900         DW 105
   \   000006   1600         DW 22
   \   000008   1500         DW 21
   \   00000A   3000         DW 48
   \   00000C   1600         DW 22
   \   00000E   1E00         DW 30
    371          {
    372            ZCD_NV_CA_PUBLIC_KEY,         // ZCL_KE_PUBLIC_KEY_NV_ID 
    373            ZCD_NV_DEVICE_PRIVATE_KEY,    // ZCL_KE_PRIVATE_KEY_NV_ID
    374            ZCD_NV_IMPLICIT_CERTIFICATE,  // ZCL_KE_CERT_NV_ID       
    375            ECCAPI_PUBLIC_KEY_163_LEN,    // ZCL_KE_PUBLIC_KEY_LEN
    376            ECCAPI_PRIVATE_KEY_163_LEN,   // ZCL_KE_PRIVATE_KEY_LEN
    377            ECCAPI_CERT_163_LEN,          // ZCL_KE_CERT_LEN         
    378            ZCL_KE_CERT_163_EXT_ADDR_IDX, // ZCL_KE_CERT_EXT_ADDR_IDX
    379            ZCL_KE_CERT_163_ISSUER_IDX,   // ZCL_KE_CERT_ISSUER_IDX  
    380            // ZCL_KE_FIELDS_MAX         
    381          };
    382          #endif // ECCAPI_163_DISABLED
    383          
    384          #if !defined( ECCAPI_283_DISABLED )
    385          // see ZCL_KE_GET_FIELD_TYPES

   \                                 In  segment CODE_C, align 1
    386          static CONST uint16 zclKE_Suite2Fields[ZCL_KE_FIELDS_MAX] =
   \                     zclKE_Suite2Fields:
   \   000000   7400         DW 116
   \   000002   7300         DW 115
   \   000004   7200         DW 114
   \   000006   2500         DW 37
   \   000008   2400         DW 36
   \   00000A   4A00         DW 74
   \   00000C   1C00         DW 28
   \   00000E   0B00         DW 11
    387          {
    388            ZCD_NV_PUBLIC_KEY_283,        // ZCL_KE_PUBLIC_KEY_NV_ID 
    389            ZCD_NV_PRIVATE_KEY_283,       // ZCL_KE_PRIVATE_KEY_NV_ID
    390            ZCD_NV_CERT_283,              // ZCL_KE_CERT_NV_ID       
    391            ECCAPI_PUBLIC_KEY_283_LEN,    // ZCL_KE_PUBLIC_KEY_LEN
    392            ECCAPI_PRIVATE_KEY_283_LEN,   // ZCL_KE_PRIVATE_KEY_LEN
    393            ECCAPI_CERT_283_LEN,          // ZCL_KE_CERT_LEN         
    394            ZCL_KE_CERT_283_EXT_ADDR_IDX, // ZCL_KE_CERT_EXT_ADDR_IDX
    395            ZCL_KE_CERT_283_ISSUER_IDX,   // ZCL_KE_CERT_ISSUER_IDX  
    396            // ZCL_KE_FIELDS_MAX         
    397          };
    398          #endif // ECCAPI_283_DISABLED
    399          
    400          
    401          /**************************************************************************************************
    402           * LOCAL FUNCTIONS
    403           */
    404          
    405          #if defined( NWK_AUTO_POLL )
    406          /**************************************************************************************************
    407           * @fn      zclKE_SetPollRate
    408           *
    409           * @brief   Set the network poll rate for key establishment.
    410           *
    411           * @param   user - ZCL_KE_SERVER_POLL_RATE_BIT or ZCL_KE_CLIENT_POLL_RATE_BIT
    412           *
    413           * @return  void
    414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          static void zclKE_SetPollRate( uint8 user )
   \                     zclKE_SetPollRate:
    416          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    417            if ( !zclKE_PollRateSet )
   \   000007   90....       MOV       DPTR,#zclKE_PollRateSet
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   7015         JNZ       ??zclKE_SetPollRate_0
    418            {
    419              // Save and set the current poll rate
    420              zclKE_PollRateSaved = zgPollRate;
   \   00000D   90....       MOV       DPTR,#zgPollRate
   \   000010   12....       LCALL     ?XLOAD_R0123
   \   000013   90....       MOV       DPTR,#zclKE_PollRateSaved
   \   000016   12....       LCALL     ?XSTORE_R0123
    421              NLME_SetPollRate( ZCL_KE_POLL_RATE );
   \   000019                ; Setup parameters for call to function NLME_SetPollRate
   \   000019   90....       MOV       DPTR,#__Constant_3e8
   \   00001C   12....       LCALL     ?XLOAD_R2345
   \   00001F   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    422            }
    423          
    424            zclKE_PollRateSet |= user;
   \                     ??zclKE_SetPollRate_0:
   \   000022   90....       MOV       DPTR,#zclKE_PollRateSet
   \   000025   E0           MOVX      A,@DPTR
   \   000026   4E           ORL       A,R6
   \   000027   F0           MOVX      @DPTR,A
    425          }
   \   000028   80..         SJMP      ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    426          
    427          /**************************************************************************************************
    428           * @fn      zclKE_SetPollRate
    429           *
    430           * @brief   Set the network poll rate for key establishment.
    431           *
    432           * @param   user - ZCL_KE_SERVER_POLL_RATE_BIT or ZCL_KE_CLIENT_POLL_RATE_BIT
    433           *
    434           * @return  void
    435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          static void zclKE_RestorePollRate( uint8 user )
   \                     zclKE_RestorePollRate:
    437          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    438            zclKE_PollRateSet &= ~user;
   \   000006   F4           CPL       A
   \   000007   F8           MOV       R0,A
   \   000008   90....       MOV       DPTR,#zclKE_PollRateSet
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   58           ANL       A,R0
   \   00000D   F0           MOVX      @DPTR,A
    439          
    440            if ( !zclKE_PollRateSet )
   \   00000E   7009         JNZ       ??zclKE_RestorePollRate_0
    441            {
    442              // Restore poll rate
    443              NLME_SetPollRate( zclKE_PollRateSaved );
   \   000010                ; Setup parameters for call to function NLME_SetPollRate
   \   000010   90....       MOV       DPTR,#zclKE_PollRateSaved
   \   000013   12....       LCALL     ?XLOAD_R2345
   \   000016   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
    444            }
    445          }
   \                     ??zclKE_RestorePollRate_0:
   \   000019   80..         SJMP      ?Subroutine0
    446          #endif // NWK_AUTO_POLL
    447          
    448          /**************************************************************************************************
    449           * @fn      zclKE_MemFree
    450           *
    451           * @brief   Release(and clear) allocated memory.
    452           *
    453           * @param   pv - pointer to be freed
    454           * @param   len - length of pointer memory allocated
    455           *
    456           * @return  void
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          static void zclKE_MemFree( void *pv, uint16 len )
   \                     zclKE_MemFree:
    459          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    460            if ( pv )
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   600C         JZ        ??zclKE_MemFree_0
    461            {
    462              osal_memset( pv, 0, len );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7900         MOV       R1,#0x0
   \   00000F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    463              osal_mem_free( pv );
   \   000012                ; Setup parameters for call to function osal_mem_free
   \   000012   EE           MOV       A,R6
   \   000013   FA           MOV       R2,A
   \   000014   EF           MOV       A,R7
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    464            }  
    465          }
   \                     ??zclKE_MemFree_0:
   \   000019                REQUIRE ?Subroutine0
   \   000019                ; // Fall through to label ?Subroutine0
    466          
    467          /**************************************************************************************************
    468           * @fn      zclKE_GetField
    469           *
    470           * @brief   Lookup the value of the field(ZCL_KE_GET_FIELD_TYPES) for the selected suite.
    471           *
    472           * @param   suite - selected suite
    473           * @param   field - see ZCL_KE_GET_FIELD_TYPES
    474           *
    475           * @return  uint16 - value of requested field
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          static uint16 zclKE_GetField( uint16 suite, uint8 field )
   \                     zclKE_GetField:
    478          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    479            uint16 result;
    480           
    481            switch ( suite )
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   78..         MOV       R0,#?V0
   \   00000B   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_GetField>_0`:
   \   00000E   0100         DW        1
   \   000010   01           DB        1
   \   000011   ....         DW        ??zclKE_GetField_0
   \   000013   ....         DW        ??zclKE_GetField_1
   \   000015   ....         DW        ??zclKE_GetField_2
    482            {
    483          #if !defined( ECCAPI_163_DISABLED )
    484              case ZCL_KE_SUITE_1:
    485                result = zclKE_Suite1Fields[field];
   \                     ??zclKE_GetField_1:
   \   000017   E9           MOV       A,R1
   \   000018   29           ADD       A,R1
   \   000019   FA           MOV       R2,A
   \   00001A   E4           CLR       A
   \   00001B   33           RLC       A
   \   00001C   FB           MOV       R3,A
   \   00001D   74..         MOV       A,#zclKE_Suite1Fields & 0xff
   \   00001F   2A           ADD       A,R2
   \   000020   F582         MOV       DPL,A
   \   000022   74..         MOV       A,#(zclKE_Suite1Fields >> 8) & 0xff
   \   000024   800D         SJMP      ??zclKE_GetField_3
    486                break;
    487          #endif
    488          
    489          #if !defined( ECCAPI_283_DISABLED )
    490              case ZCL_KE_SUITE_2:
    491                result = zclKE_Suite2Fields[field];
   \                     ??zclKE_GetField_2:
   \   000026   E9           MOV       A,R1
   \   000027   29           ADD       A,R1
   \   000028   FA           MOV       R2,A
   \   000029   E4           CLR       A
   \   00002A   33           RLC       A
   \   00002B   FB           MOV       R3,A
   \   00002C   74..         MOV       A,#zclKE_Suite2Fields & 0xff
   \   00002E   2A           ADD       A,R2
   \   00002F   F582         MOV       DPL,A
   \   000031   74..         MOV       A,#(zclKE_Suite2Fields >> 8) & 0xff
   \                     ??zclKE_GetField_3:
   \   000033   3B           ADDC      A,R3
   \   000034   F583         MOV       DPH,A
   \   000036   E4           CLR       A
   \   000037   93           MOVC      A,@A+DPTR
   \   000038   C0E0         PUSH      A
   \   00003A   7401         MOV       A,#0x1
   \   00003C   93           MOVC      A,@A+DPTR
   \   00003D   F583         MOV       DPH,A
   \   00003F   D082         POP       DPL
   \   000041   AA82         MOV       R2,DPL
   \   000043   AB83         MOV       R3,DPH
    492                break;
   \   000045   8004         SJMP      ??zclKE_GetField_4
    493          #endif
    494                
    495              default:
    496                // Should never get here
    497                result = 0;      
   \                     ??zclKE_GetField_0:
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
    498                break;
    499            }
    500          
    501            return result;
   \                     ??zclKE_GetField_4:
   \   00004B   02....       LJMP      ??Subroutine133_0 & 0xFFFF
    502          }  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    503          
    504          /**************************************************************************************************
    505           * @fn      zclKE_NotifyStatus
    506           *
    507           * @brief   Notify key establishment initiator(zclKE_Start or zclKE_StartDirect) of final status.
    508           *
    509           * @param   taskID - OSAL task ID of requesting task
    510           * @param   partnerNwkAddr - partner network address  
    511           * @param   notifyStatus - see ZCL_KE_NOTIFY_STATUS
    512           * @param   pCmd - terminate command payload
    513           *
    514           * @return  void
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          static void zclKE_NotifyStatus( uint8 taskID, uint16 partnerNwkAddr, 
   \                     zclKE_NotifyStatus:
    517                                          uint8 notifyStatus, zclKE_TerminateCmd_t *pCmd )
    518          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FF           MOV       R7,A
    519            zclKE_StatusInd_t *pInd;
    520          
    521            // Allocate the indication
    522            pInd = (zclKE_StatusInd_t *)osal_msg_allocate( sizeof( zclKE_StatusInd_t ) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    523          
    524            if ( pInd )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   6060         JZ        ??zclKE_NotifyStatus_0
    525            {
    526              pInd->hdr.event = ZCL_KEY_ESTABLISH_IND;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   7435         MOV       A,#0x35
   \   00001E   F0           MOVX      @DPTR,A
    527              pInd->hdr.status = notifyStatus;
   \   00001F   EF           MOV       A,R7
   \   000020   A3           INC       DPTR
   \   000021   12....       LCALL     ??Subroutine137_0 & 0xFFFF
    528              pInd->partnerNwkAddr = partnerNwkAddr;
   \                     ??CrossCallReturnLabel_370:
   \   000024   A3           INC       DPTR
   \   000025   E5..         MOV       A,?V1
   \   000027   F0           MOVX      @DPTR,A
   \   000028   740C         MOV       A,#0xc
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   12....       LCALL     ??Subroutine116_0 & 0xFFFF
    529          
    530              if ( pCmd )
   \                     ??CrossCallReturnLabel_182:
   \   000030   6026         JZ        ??zclKE_NotifyStatus_1
    531              {
    532                pInd->terminateError = pCmd->status ;
   \   000032   8882         MOV       DPL,R0
   \   000034   8983         MOV       DPH,R1
   \   000036   E0           MOVX      A,@DPTR
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   12....       LCALL     ?Subroutine57 & 0xFFFF
    533                pInd->suites = pCmd->suites;
    534                pInd->waitTime = pCmd->waitTime;
    535              }
   \                     ??CrossCallReturnLabel_73:
   \   000042   FC           MOV       R4,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   FD           MOV       R5,A
   \   000046   8A82         MOV       DPL,R2
   \   000048   8B83         MOV       DPH,R3
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   EC           MOV       A,R4
   \   000050   F0           MOVX      @DPTR,A
   \   000051   A3           INC       DPTR
   \   000052   ED           MOV       A,R5
   \   000053   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000056   800F         SJMP      ??zclKE_NotifyStatus_2
    536              else
    537              {
    538                pInd->terminateError = ZCL_KE_TERMINATE_ERROR_NONE;
   \                     ??zclKE_NotifyStatus_1:
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   E4           CLR       A
   \   000061   12....       LCALL     ?Subroutine53 & 0xFFFF
    539                pInd->suites = 0;
   \                     ??CrossCallReturnLabel_63:
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   F0           MOVX      @DPTR,A
    540                pInd->waitTime = 0;
   \                     ??zclKE_NotifyStatus_2:
   \   000067   8A82         MOV       DPL,R2
   \   000069   8B83         MOV       DPH,R3
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   F0           MOVX      @DPTR,A
    541              }
    542          
    543              osal_msg_send( taskID, (uint8 *)pInd );
   \   000073                ; Setup parameters for call to function osal_msg_send
   \   000073   EE           MOV       A,R6
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    544            }
    545          }
   \                     ??zclKE_NotifyStatus_0:
   \   000078   02....       LJMP      ??Subroutine109_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V0
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET
    546          
    547          /**************************************************************************************************
    548           * @fn      zclKE_StartTimer
    549           *
    550           * @brief   Start the key establishment timer.
    551           *
    552           * @param   timeout - requested timeout in milliseconds
    553           *
    554           * @return  void
    555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    556          static void zclKE_StartTimer( uint32 timeout )
   \                     zclKE_StartTimer:
    557          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    558            if ( timeout )
   \   00000D   EA           MOV       A,R2
   \   00000E   45..         ORL       A,?V1
   \   000010   45..         ORL       A,?V2
   \   000012   45..         ORL       A,?V3
   \   000014   6039         JZ        ??zclKE_StartTimer_0
    559            {
    560              // Check if timer needs to be started or adjusted to a smaller timeout 
    561              uint32 next = osal_get_timeoutEx( zclKE_TaskID, ZCL_KE_TIMER_EVT );
   \   000016                ; Setup parameters for call to function osal_get_timeoutEx
   \   000016   7A01         MOV       R2,#0x1
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   90....       MOV       DPTR,#zclKE_TaskID
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F9           MOV       R1,A
   \   00001F   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000022   8A..         MOV       ?V4,R2
   \   000024   8B..         MOV       ?V5,R3
   \   000026   8C..         MOV       ?V6,R4
   \   000028   8D..         MOV       ?V7,R5
    562          
    563              if ( ( !next ) || ( timeout < next ) )
   \   00002A   EA           MOV       A,R2
   \   00002B   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   00002E   6009         JZ        ??zclKE_StartTimer_1
   \   000030   78..         MOV       R0,#?V4
   \   000032   79..         MOV       R1,#?V0
   \   000034   12....       LCALL     ?UL_GT
   \   000037   5016         JNC       ??zclKE_StartTimer_0
    564              {
    565                osal_start_timerEx( zclKE_TaskID, ZCL_KE_TIMER_EVT, timeout );
   \                     ??zclKE_StartTimer_1:
   \   000039                ; Setup parameters for call to function osal_start_timerEx
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00003E   7A01         MOV       R2,#0x1
   \   000040   7B00         MOV       R3,#0x0
   \   000042   90....       MOV       DPTR,#zclKE_TaskID
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00004A   7404         MOV       A,#0x4
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
    566              }
    567            }
    568          }
   \                     ??zclKE_StartTimer_0:
   \   00004F   7F08         MOV       R7,#0x8
   \   000051   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   45..         ORL       A,?V5
   \   000002   45..         ORL       A,?V6
   \   000004   45..         ORL       A,?V7
   \   000006   22           RET
    569          
    570          /**************************************************************************************************
    571           * @fn      zclKE_ConnRelease
    572           *
    573           * @brief   Release connection and associated memory allocations.
    574           *
    575           * @param   pConn - server or client connection
    576           *
    577           * @return  void
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          static void zclKE_ConnRelease( zclKE_Conn_t *pConn )
   \                     zclKE_ConnRelease:
    580          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    581            zclKE_MemFree( pConn->pEPublicKey, zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN ) );
   \   000009   EE           MOV       A,R6
   \   00000A   2405         ADD       A,#0x5
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3F           ADDC      A,R7
   \   00000F   F9           MOV       R1,A
   \   000010   88..         MOV       ?V0,R0
   \   000012   89..         MOV       ?V1,R1
   \   000014                ; Setup parameters for call to function zclKE_GetField
   \   000014   7903         MOV       R1,#0x3
   \   000016   8882         MOV       DPL,R0
   \   000018   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00001B   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00001E   8A..         MOV       ?V2,R2
   \   000020   8B..         MOV       ?V3,R3
   \   000022   AC..         MOV       R4,?V2
   \   000024   AD..         MOV       R5,?V3
   \   000026                ; Setup parameters for call to function zclKE_MemFree
   \   000026   EE           MOV       A,R6
   \   000027   241B         ADD       A,#0x1b
   \   000029   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00002C   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    582            zclKE_MemFree( pConn->pEPrivateKey,zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN ) );
   \   00002F                ; Setup parameters for call to function zclKE_GetField
   \   00002F   7904         MOV       R1,#0x4
   \   000031   85..82       MOV       DPL,?V0
   \   000034   85..83       MOV       DPH,?V1
   \   000037   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00003A   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00003D   8A..         MOV       ?V2,R2
   \   00003F   8B..         MOV       ?V3,R3
   \   000041   AC..         MOV       R4,?V2
   \   000043   AD..         MOV       R5,?V3
   \   000045                ; Setup parameters for call to function zclKE_MemFree
   \   000045   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000048   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    583            zclKE_MemFree( pConn->pRmtEPublicKey, zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN ) );
   \   00004B                ; Setup parameters for call to function zclKE_GetField
   \   00004B   7903         MOV       R1,#0x3
   \   00004D   85..82       MOV       DPL,?V0
   \   000050   85..83       MOV       DPH,?V1
   \   000053   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000056   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000059   8A..         MOV       ?V2,R2
   \   00005B   8B..         MOV       ?V3,R3
   \   00005D   AC..         MOV       R4,?V2
   \   00005F   AD..         MOV       R5,?V3
   \   000061                ; Setup parameters for call to function zclKE_MemFree
   \   000061   EE           MOV       A,R6
   \   000062   241F         ADD       A,#0x1f
   \   000064   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000067   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    584            zclKE_MemFree( pConn->pRmtCert, zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN ) );
   \   00006A                ; Setup parameters for call to function zclKE_GetField
   \   00006A   7905         MOV       R1,#0x5
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000075   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000078   8A..         MOV       ?V0,R2
   \   00007A   8B..         MOV       ?V1,R3
   \   00007C   AC..         MOV       R4,?V0
   \   00007E   AD..         MOV       R5,?V1
   \   000080                ; Setup parameters for call to function zclKE_MemFree
   \   000080   EE           MOV       A,R6
   \   000081   2421         ADD       A,#0x21
   \   000083   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000086   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    585            zclKE_MemFree( pConn->pKey, ZCL_KE_KEY_LEN );
   \   000089                ; Setup parameters for call to function zclKE_MemFree
   \   000089   7C10         MOV       R4,#0x10
   \   00008B   7D00         MOV       R5,#0x0
   \   00008D   EE           MOV       A,R6
   \   00008E   2423         ADD       A,#0x23
   \   000090   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000093   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    586            zclKE_MemFree( pConn->pMACKey, ZCL_KE_KEY_LEN );
   \   000096                ; Setup parameters for call to function zclKE_MemFree
   \   000096   7C10         MOV       R4,#0x10
   \   000098   7D00         MOV       R5,#0x0
   \   00009A   EE           MOV       A,R6
   \   00009B   2425         ADD       A,#0x25
   \   00009D   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   0000A0   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    587            osal_mem_free( pConn );
   \   0000A3                ; Setup parameters for call to function osal_mem_free
   \   0000A3   EE           MOV       A,R6
   \   0000A4   FA           MOV       R2,A
   \   0000A5   EF           MOV       A,R7
   \   0000A6   FB           MOV       R3,A
   \   0000A7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    588          }
   \   0000AA   02....       LJMP      ??Subroutine109_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   EE           MOV       A,R6
   \   000001   241D         ADD       A,#0x1d
   \   000003                REQUIRE ??Subroutine118_0
   \   000003                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004                REQUIRE ??Subroutine119_0
   \   000004                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine120_0
   \   000002                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    589          
    590          /**************************************************************************************************
    591           * @fn      zclKE_ConnSetTimeout
    592           *
    593           * @brief   Set connection timeout.
    594           *
    595           * @param   pConn - server or client connection
    596           * @param   timeout - requested timeout in milliseconds
    597           *
    598           * @return  void
    599           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    600          static void zclKE_ConnSetTimeout( zclKE_Conn_t *pConn, uint32 timeout )
   \                     zclKE_ConnSetTimeout:
    601          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    602            pConn->stamp  = osal_GetSystemClock();
   \   000009                ; Setup parameters for call to function osal_GetSystemClock
   \   000009   12....       LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   00000C   EA           MOV       A,R2
   \   00000D   F8           MOV       R0,A
   \   00000E   EB           MOV       A,R3
   \   00000F   F9           MOV       R1,A
   \   000010   EC           MOV       A,R4
   \   000011   FA           MOV       R2,A
   \   000012   ED           MOV       A,R5
   \   000013   FB           MOV       R3,A
   \   000014   8E82         MOV       DPL,R6
   \   000016   8F83         MOV       DPH,R7
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   12....       LCALL     ?XSTORE_R0123
   \   000022   740C         MOV       A,#0xc
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?L_MOV_X
    603            pConn->timeout = timeout;
   \   00002C   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?L_MOV_TO_X
    604            zclKE_StartTimer( timeout );  
   \   000034                ; Setup parameters for call to function zclKE_StartTimer
   \   000034   AA..         MOV       R2,?V0
   \   000036   AB..         MOV       R3,?V1
   \   000038   AC..         MOV       R4,?V2
   \   00003A   AD..         MOV       R5,?V3
   \   00003C   12....       LCALL     `??zclKE_StartTimer::?relay`; Banked call to: zclKE_StartTimer
    605          }
   \   00003F   02....       LJMP      ??Subroutine109_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine130_0
   \   000001                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
    606          
    607          /**************************************************************************************************
    608           * @fn      zclKE_GetRandom
    609           *
    610           * @brief   Callback function that generates random seeds of the specified length.  This function
    611           *          should copy "size" bytes of random data into "pBuf".
    612           *
    613           * @param   pBuf - This is an unsigned char array of size at least "size" to hold the random data.
    614           * @param   size - The number of bytes of random data to compute and store.
    615           *
    616           * @return  int - MCE_SUCCESS.
    617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          static int zclKE_GetRandom(uint8 *pBuf, uint32 size)
   \                     zclKE_GetRandom:
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   740C         MOV       A,#0xc
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   78..         MOV       R0,#?V0
   \   000010   12....       LCALL     ?L_MOV_X
   \   000013   8014         SJMP      ??zclKE_GetRandom_0
    620            // Input to SSP_GetTrueRandAES assumes size <= SEC_KEY_LEN
    621            // Therefore, call SSP_GetTrueRandAES multiple times to
    622            // fill out the buffer.
    623            while( size > SEC_KEY_LEN )
    624            {
    625              SSP_GetTrueRandAES( SEC_KEY_LEN, pBuf );
   \                     ??zclKE_GetRandom_1:
   \   000015                ; Setup parameters for call to function SSP_GetTrueRandAES
   \   000015   7910         MOV       R1,#0x10
   \   000017   12....       LCALL     `??SSP_GetTrueRandAES::?relay`; Banked call to: SSP_GetTrueRandAES
    626              size -= SEC_KEY_LEN;
   \   00001A   90....       MOV       DPTR,#__Constant_fffffff0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?L_ADD_X
    627              pBuf += SEC_KEY_LEN;
   \   000022   EE           MOV       A,R6
   \   000023   2410         ADD       A,#0x10
   \   000025   FE           MOV       R6,A
   \   000026   5001         JNC       ??zclKE_GetRandom_0
   \   000028   0F           INC       R7
    628            }
   \                     ??zclKE_GetRandom_0:
   \   000029   90....       MOV       DPTR,#__Constant_11
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?UL_GE_X
   \   000031   EE           MOV       A,R6
   \   000032   FA           MOV       R2,A
   \   000033   EF           MOV       A,R7
   \   000034   FB           MOV       R3,A
   \   000035   40DE         JC        ??zclKE_GetRandom_1
    629          
    630            SSP_GetTrueRandAES( (uint8)size, pBuf );
   \   000037                ; Setup parameters for call to function SSP_GetTrueRandAES
   \   000037   A9..         MOV       R1,?V0
   \   000039   12....       LCALL     `??SSP_GetTrueRandAES::?relay`; Banked call to: SSP_GetTrueRandAES
    631          
    632            return MCE_SUCCESS;
   \   00003C   02....       LJMP      ?Subroutine2 & 0xFFFF
    633          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B00         MOV       R3,#0x0
   \   000004                REQUIRE ??Subroutine109_0
   \   000004                ; // Fall through to label ??Subroutine109_0
    634          
    635          /**************************************************************************************************
    636           * @fn      zclKE_HashFunc
    637           *
    638           * @brief   This function should compute the hash of the "pData" parameter of size  "dataLen", and
    639           *          store the result in the "pDigest" buffer parameter.
    640           *
    641           * @param   pDigest - output buffer(length must be 16)
    642           * @param   dataLen - length in bytes of the message to be hashed.
    643           * @param   pData - input buffer of data to be hashed
    644           *
    645           * @return  int - MCE_SUCCESS.
    646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    647          static int zclKE_HashFunc( unsigned char *pDigest, 
   \                     zclKE_HashFunc:
    648                                     unsigned long dataLen, 
    649                                     unsigned char *pData )
    650          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    651            // Convert to bit length
    652            dataLen *= 8;
    653            sspMMOHash( NULL, 0, pData, ( uint16 )dataLen, pDigest );
   \   000005                ; Setup parameters for call to function sspMMOHash
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   78..         MOV       R0,#?V0
   \   00000B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000E   740E         MOV       A,#0xe
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?L_MOV_X
   \   000018   7403         MOV       A,#0x3
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?S_SHL
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000024   7900         MOV       R1,#0x0
   \   000026   7A00         MOV       R2,#0x0
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   00002D   7404         MOV       A,#0x4
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    654            return MCE_SUCCESS;
   \   000032   02....       LJMP      ?Subroutine2 & 0xFFFF
    655          }
    656          
    657          /**************************************************************************************************
    658           * @fn      zclKE_KeyDeriveFunction
    659           *
    660           * @brief   Key Derive Function (ANSI X9.63).
    661           *          Note this is not a generalized KDF. It only applies to the KDF
    662           *          specified in ZigBee SE profile. Only the first two hashed keys
    663           *          are calculated and concatenated.
    664           *
    665           * @param   pZData - input shared secret
    666           * @param   zDataLen - input shared secret length(ZCL_KE_PRIVATE_KEY_LEN)
    667           * @param   pKeyData - output buffer ( 16*2 bytes)
    668           *
    669           * @return  void
    670           */
    671          static void zclKE_KeyDeriveFunction( uint8 *pZData, uint16 zDataLen, uint8 *pKeyData )
    672          {
    673            uint8 hashCounter[4] = {0x00, 0x00, 0x00, 0x01};
    674            uint8 hashedData[ECCAPI_PRIVATE_KEY_283_LEN + 4]; // Use max ZCL_KE_PRIVATE_KEY_LEN
    675            uint16 bitLen;
    676          
    677            bitLen = ( zDataLen + 4 ) * 8;
    678          
    679            // Calculate K1: Ki = Hash(Z || Counter1 )
    680            osal_memcpy( hashedData, pZData, zDataLen );
    681            osal_memcpy( &(hashedData[zDataLen]), hashCounter, 4);
    682          
    683            sspMMOHash(NULL, 0, hashedData, bitLen, pKeyData);
    684          
    685            // Indrement the counter
    686            hashedData[zDataLen + 3] = 0x02;
    687          
    688            sspMMOHash(NULL, 0, hashedData, bitLen, &(pKeyData[ZCL_KE_KEY_LEN]));
    689          }
    690          
    691          /**************************************************************************************************
    692           * @fn      zclKE_GenEphKeys
    693           *
    694           * @brief   Generate ephemeral keys.
    695           *
    696           * @param   pCtxt - connection context
    697           *
    698           * @return  uint8 - TRUE if successful, FALSE if not
    699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    700          static uint8 zclKE_GenEphKeys( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_GenEphKeys:
    701          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    702            uint8 result;
    703            uint16 len;
    704            zclKE_Conn_t *pConn = pCtxt->pConn;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V1
   \   000011   F5..         MOV       ?V3,A
   \   000013   85..82       MOV       DPL,?V2
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine135_0 & 0xFFFF
    705          
    706            // Allocate ephemeral public key 
    707            len = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   \                     ??CrossCallReturnLabel_360:
   \   00001B                ; Setup parameters for call to function zclKE_GetField
   \   00001B   7903         MOV       R1,#0x3
   \   00001D   8E82         MOV       DPL,R6
   \   00001F   8F83         MOV       DPH,R7
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000029   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
    708          
    709            pConn->pEPublicKey = zcl_mem_alloc( len );
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002F   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000032   EA           MOV       A,R2
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   EB           MOV       A,R3
   \   000036   F0           MOVX      @DPTR,A
    710          
    711            if ( !pCtxt->pConn->pEPublicKey )
   \   000037   85..82       MOV       DPL,?V2
   \   00003A   85..83       MOV       DPH,?V3
   \   00003D   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000040   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000043   38           ADDC      A,R0
   \   000044   F583         MOV       DPH,A
   \   000046   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??zclKE_GenEphKeys_0 & 0xFFFF
    712            {
    713              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    714              return FALSE;
    715            }
    716          
    717            // Allocate ephemeral private key 
    718            len = zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN );
   \   00004E                ; Setup parameters for call to function zclKE_GetField
   \   00004E   7904         MOV       R1,#0x4
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00005C   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
    719          
    720            pConn->pEPrivateKey = zcl_mem_alloc( len );
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000062   8A..         MOV       ?V2,R2
   \   000064   8B..         MOV       ?V3,R3
   \   000066   A8..         MOV       R0,?V2
   \   000068   A9..         MOV       R1,?V3
   \   00006A   EE           MOV       A,R6
   \   00006B   241D         ADD       A,#0x1d
   \   00006D   F582         MOV       DPL,A
   \   00006F   E4           CLR       A
   \   000070   3F           ADDC      A,R7
   \   000071   12....       LCALL     ??Subroutine102_0 & 0xFFFF
    721          
    722            if ( !pConn->pEPrivateKey )
   \                     ??CrossCallReturnLabel_134:
   \   000074   6063         JZ        ??zclKE_GenEphKeys_0
    723            {
    724              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    725              return FALSE;
    726            }
    727          
    728            // Generate the ephemeral keys
    729            switch ( pConn->suite )
   \   000076   8E82         MOV       DPL,R6
   \   000078   8F83         MOV       DPH,R7
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00007F   78..         MOV       R0,#?V2
   \   000081   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_GenEphKeys>_0`:
   \   000084   0100         DW        1
   \   000086   01           DB        1
   \   000087   ....         DW        ??zclKE_GenEphKeys_0
   \   000089   ....         DW        ??zclKE_GenEphKeys_1
   \   00008B   ....         DW        ??zclKE_GenEphKeys_2
    730            {
    731          #if !defined( ECCAPI_163_DISABLED )
    732              case ZCL_KE_SUITE_1:
    733                result = ZSE_ECCGenerateKey( pConn->pEPrivateKey,
    734                                             pConn->pEPublicKey,
    735                                             zclKE_GetRandom,
    736                                             NULL, 0);
   \                     ??zclKE_GenEphKeys_1:
   \   00008D                ; Setup parameters for call to function ZSE_ECCGenerateKey
   \   00008D   90....       MOV       DPTR,#__Constant_0
   \   000090   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000093   E4           CLR       A
   \   000094   F5..         MOV       ?V2,A
   \   000096   F5..         MOV       ?V3,A
   \   000098   78..         MOV       R0,#?V2
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   75....       MOV       ?V2,#`??zclKE_GetRandom::?relay` & 0xff
   \   0000A0   75....       MOV       ?V3,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   0000A3   78..         MOV       R0,#?V2
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0000AB   12....       LCALL     `??ZSE_ECCGenerateKey::?relay`; Banked call to: ZSE_ECCGenerateKey
   \   0000AE   8021         SJMP      ??zclKE_GenEphKeys_3
    737                break;
    738          #endif // !defined( ECCAPI_163_DISABLED )
    739          
    740          #if !defined( ECCAPI_283_DISABLED )
    741              case ZCL_KE_SUITE_2:
    742                result = ZSE_ECCGenerateKey283( pConn->pEPrivateKey,
    743                                                pConn->pEPublicKey,
    744                                                zclKE_GetRandom,
    745                                                NULL, 0);
   \                     ??zclKE_GenEphKeys_2:
   \   0000B0                ; Setup parameters for call to function ZSE_ECCGenerateKey283
   \   0000B0   90....       MOV       DPTR,#__Constant_0
   \   0000B3   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000B6   E4           CLR       A
   \   0000B7   F5..         MOV       ?V2,A
   \   0000B9   F5..         MOV       ?V3,A
   \   0000BB   78..         MOV       R0,#?V2
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   75....       MOV       ?V2,#`??zclKE_GetRandom::?relay` & 0xff
   \   0000C3   75....       MOV       ?V3,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   0000C6   78..         MOV       R0,#?V2
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CB   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   0000CE   12....       LCALL     `??ZSE_ECCGenerateKey283::?relay`; Banked call to: ZSE_ECCGenerateKey283
   \                     ??zclKE_GenEphKeys_3:
   \   0000D1   7408         MOV       A,#0x8
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D6   EA           MOV       A,R2
    746                break;
    747          #endif // !defined( ECCAPI_283_DISABLED )
    748          
    749              default:
    750                // Should never get here
    751                result = MCE_ERR_BAD_INPUT;
    752                break;
    753            }
    754          
    755            if ( result != MCE_SUCCESS )
   \   0000D7   600D         JZ        ??zclKE_GenEphKeys_4
    756            {
    757              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_GenEphKeys_0:
   \   0000D9   85..82       MOV       DPL,?V0
   \   0000DC   85..83       MOV       DPH,?V1
   \   0000DF   7404         MOV       A,#0x4
   \   0000E1   F0           MOVX      @DPTR,A
    758              return FALSE;
   \   0000E2   7900         MOV       R1,#0x0
   \   0000E4   8002         SJMP      ??zclKE_GenEphKeys_5
    759            }
    760          
    761            return TRUE;
   \                     ??zclKE_GenEphKeys_4:
   \   0000E6   7901         MOV       R1,#0x1
   \                     ??zclKE_GenEphKeys_5:
   \   0000E8                REQUIRE ?Subroutine3
   \   0000E8                ; // Fall through to label ?Subroutine3
    762          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine103_0
   \   000002                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine105_0
   \   000002                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine107_0
   \   000001                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   241B         ADD       A,#0x1b
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   3F           ADDC      A,R7
   \   000004   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000007                REQUIRE ??Subroutine117_0
   \   000007                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    763          
    764          /**************************************************************************************************
    765           * @fn      zclKE_GenKeyBits
    766           *
    767           * @brief   Generate key bits.
    768           *
    769           * @param   pCtxt - connection context
    770           * @param   pKeyBits - key bits buffer(ZCL_KE_PRIVATE_KEY_LEN)
    771           *
    772           * @return  uint8 - TRUE if successful, FALSE if not
    773           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    774          static uint8 zclKE_GenKeyBits( zclKE_ConnCtxt_t *pCtxt, uint8 *pKeyBits )
   \                     zclKE_GenKeyBits:
    775          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8A..         MOV       ?V14,R2
   \   000016   8B..         MOV       ?V15,R3
    776            uint8 success;
    777            uint8 result;
    778            uint8 rxOnIdleSaved;
    779            uint8 rxOnIdleSet;
    780            uint8 *pPublicKey = NULL;
    781            uint8 *pPrivateKey = NULL;
   \   000018   75..00       MOV       ?V8,#0x0
   \   00001B   75..00       MOV       ?V9,#0x0
    782            uint16 publicKeyLen;
    783            uint16 privateKeyLen;
    784            zclKE_Conn_t *pConn = pCtxt->pConn;
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   12....       LCALL     ?Subroutine32 & 0xFFFF
    785          
    786            // Assume success
    787            success = TRUE;
   \                     ??CrossCallReturnLabel_148:
   \   000025   75..01       MOV       ?V6,#0x1
    788          
    789            publicKeyLen = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   \   000028   E5..         MOV       A,?V2
   \   00002A   2405         ADD       A,#0x5
   \   00002C   F5..         MOV       ?V4,A
   \   00002E   E4           CLR       A
   \   00002F   35..         ADDC      A,?V3
   \   000031   F5..         MOV       ?V5,A
   \   000033                ; Setup parameters for call to function zclKE_GetField
   \   000033   7903         MOV       R1,#0x3
   \   000035   85..82       MOV       DPL,?V4
   \   000038   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00003B   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00003E   8A..         MOV       ?V0,R2
   \   000040   8B..         MOV       ?V1,R3
   \   000042   AE..         MOV       R6,?V0
   \   000044   AF..         MOV       R7,?V1
    790            privateKeyLen = zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN );
   \   000046                ; Setup parameters for call to function zclKE_GetField
   \   000046   7904         MOV       R1,#0x4
   \   000048   85..82       MOV       DPL,?V4
   \   00004B   85..83       MOV       DPH,?V5
   \   00004E   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000051   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000054   8A..         MOV       ?V0,R2
   \   000056   8B..         MOV       ?V1,R3
    791            
    792            do 
    793            {
    794              pPublicKey = osal_mem_alloc( publicKeyLen );
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   EE           MOV       A,R6
   \   000059   FA           MOV       R2,A
   \   00005A   EF           MOV       A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005F   8A..         MOV       ?V10,R2
   \   000061   8B..         MOV       ?V11,R3
    795              if ( !pPublicKey )
   \   000063   EA           MOV       A,R2
   \   000064   45..         ORL       A,?V11
   \   000066   6010         JZ        ??zclKE_GenKeyBits_0
    796              {
    797                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    798                success = FALSE;
    799                break;
    800              }
    801          
    802              pPrivateKey = osal_mem_alloc( privateKeyLen );
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   AA..         MOV       R2,?V0
   \   00006A   AB..         MOV       R3,?V1
   \   00006C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006F   8A..         MOV       ?V8,R2
   \   000071   8B..         MOV       ?V9,R3
    803              if ( !pPrivateKey )
   \   000073   EA           MOV       A,R2
   \   000074   45..         ORL       A,?V9
   \   000076   700F         JNZ       ??zclKE_GenKeyBits_1
    804              {
    805                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_GenKeyBits_0:
   \   000078   85..82       MOV       DPL,?V14
   \   00007B   85..83       MOV       DPH,?V15
   \   00007E   7404         MOV       A,#0x4
   \   000080   F0           MOVX      @DPTR,A
    806                success = FALSE;
   \   000081   75..00       MOV       ?V6,#0x0
    807                break;
   \   000084   02....       LJMP      ??zclKE_GenKeyBits_2 & 0xFFFF
    808              }
    809          
    810              osal_nv_read( zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_NV_ID ), 0,
    811                            publicKeyLen, pPublicKey );
   \                     ??zclKE_GenKeyBits_1:
   \   000087   E5..         MOV       A,?V2
   \   000089   2405         ADD       A,#0x5
   \   00008B   E4           CLR       A
   \   00008C   35..         ADDC      A,?V3
   \   00008E                ; Setup parameters for call to function zclKE_GetField
   \   00008E   7900         MOV       R1,#0x0
   \   000090   85..82       MOV       DPL,?V4
   \   000093   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000096   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000099                ; Setup parameters for call to function osal_nv_read
   \   000099   78..         MOV       R0,#?V10
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   8E..         MOV       ?V12,R6
   \   0000A0   8F..         MOV       ?V13,R7
   \   0000A2   78..         MOV       R0,#?V12
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   7C00         MOV       R4,#0x0
   \   0000A9   7D00         MOV       R5,#0x0
   \   0000AB   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000AE   7404         MOV       A,#0x4
   \   0000B0   12....       LCALL     ?DEALLOC_XSTACK8
    812          
    813              osal_nv_read( zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_NV_ID ), 0,
    814                            privateKeyLen, pPrivateKey );
   \   0000B3                ; Setup parameters for call to function zclKE_GetField
   \   0000B3   7901         MOV       R1,#0x1
   \   0000B5   85..82       MOV       DPL,?V4
   \   0000B8   85..83       MOV       DPH,?V5
   \   0000BB   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0000BE   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   0000C1                ; Setup parameters for call to function osal_nv_read
   \   0000C1   78..         MOV       R0,#?V8
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CB   7C00         MOV       R4,#0x0
   \   0000CD   7D00         MOV       R5,#0x0
   \   0000CF   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000D2   7404         MOV       A,#0x4
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
    815          
    816              // Turn off the radio before the key bit generation, in order to avoid
    817              // incoming message accumulation by interrupts during the long process time.
    818              rxOnIdleSet = FALSE;
   \   0000D7   85..82       MOV       DPL,?XSP + 0
   \   0000DA   85..83       MOV       DPH,?XSP + 1
   \   0000DD   E4           CLR       A
   \   0000DE   F0           MOVX      @DPTR,A
    819              ZMacGetReq( ZMacRxOnIdle, &rxOnIdleSaved );
   \   0000DF                ; Setup parameters for call to function ZMacGetReq
   \   0000DF   04           INC       A
   \   0000E0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E3   7952         MOV       R1,#0x52
   \   0000E5   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    820              ZMacSetReq( ZMacRxOnIdle, &rxOnIdleSet );
   \   0000E8                ; Setup parameters for call to function ZMacSetReq
   \   0000E8   AA..         MOV       R2,?XSP + 0
   \   0000EA   AB..         MOV       R3,?XSP + 1
   \   0000EC   7952         MOV       R1,#0x52
   \   0000EE   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    821          
    822              // DO NOT BREAK -- until radio state is restored
    823          
    824              // Generate the ephemeral keys
    825              switch ( pConn->suite )
   \   0000F1   85..82       MOV       DPL,?V4
   \   0000F4   85..83       MOV       DPH,?V5
   \   0000F7   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000FA   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_GenKeyBits>_0`:
   \   0000FD   0100         DW        1
   \   0000FF   01           DB        1
   \   000100   ....         DW        ??zclKE_GenKeyBits_3
   \   000102   ....         DW        ??zclKE_GenKeyBits_4
   \   000104   ....         DW        ??zclKE_GenKeyBits_5
    826              {
    827          #if !defined( ECCAPI_163_DISABLED )
    828                case ZCL_KE_SUITE_1:
    829                  result = ZSE_ECCKeyBitGenerate( pPrivateKey, pConn->pEPrivateKey,
    830                                                  pConn->pEPublicKey, pConn->pRmtCert,
    831                                                  pConn->pRmtEPublicKey, pPublicKey,
    832                                                  pKeyBits, zclKE_HashFunc, NULL, 0 );
   \                     ??zclKE_GenKeyBits_4:
   \   000106                ; Setup parameters for call to function ZSE_ECCKeyBitGenerate
   \   000106   90....       MOV       DPTR,#__Constant_0
   \   000109   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00010C   E4           CLR       A
   \   00010D   F5..         MOV       ?V4,A
   \   00010F   F5..         MOV       ?V5,A
   \   000111   78..         MOV       R0,#?V4
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   75....       MOV       ?V4,#`??zclKE_HashFunc::?relay` & 0xff
   \   000119   75....       MOV       ?V5,#(`??zclKE_HashFunc::?relay` >> 8) & 0xff
   \   00011C   78..         MOV       R0,#?V4
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000121   740A         MOV       A,#0xa
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000129   78..         MOV       R0,#?V10
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012E   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000131   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000134   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000137   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00013A   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00013D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000140   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000143   12....       LCALL     `??ZSE_ECCKeyBitGenerate::?relay`; Banked call to: ZSE_ECCKeyBitGenerate
   \   000146   8040         SJMP      ??zclKE_GenKeyBits_6
    833                  break;
    834          #endif // !defined( ECCAPI_163_DISABLED )
    835          
    836          #if !defined( ECCAPI_283_DISABLED )
    837                case ZCL_KE_SUITE_2:
    838                  result = ZSE_ECCKeyBitGenerate283( pPrivateKey, pConn->pEPrivateKey,
    839                                                     pConn->pEPublicKey, pConn->pRmtCert,
    840                                                     pConn->pRmtEPublicKey, pPublicKey,
    841                                                     pKeyBits, zclKE_HashFunc, NULL, 0 );
   \                     ??zclKE_GenKeyBits_5:
   \   000148                ; Setup parameters for call to function ZSE_ECCKeyBitGenerate283
   \   000148   90....       MOV       DPTR,#__Constant_0
   \   00014B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00014E   E4           CLR       A
   \   00014F   F5..         MOV       ?V4,A
   \   000151   F5..         MOV       ?V5,A
   \   000153   78..         MOV       R0,#?V4
   \   000155   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000158   75....       MOV       ?V4,#`??zclKE_HashFunc::?relay` & 0xff
   \   00015B   75....       MOV       ?V5,#(`??zclKE_HashFunc::?relay` >> 8) & 0xff
   \   00015E   78..         MOV       R0,#?V4
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000163   740A         MOV       A,#0xa
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00016B   78..         MOV       R0,#?V10
   \   00016D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000170   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000173   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000176   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000179   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00017C   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00017F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000182   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000185   12....       LCALL     `??ZSE_ECCKeyBitGenerate283::?relay`; Banked call to: ZSE_ECCKeyBitGenerate283
   \                     ??zclKE_GenKeyBits_6:
   \   000188   7412         MOV       A,#0x12
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   EA           MOV       A,R2
    842                  break;
    843          #endif // !defined( ECCAPI_283_DISABLED )
    844          
    845                default:
    846                  // Should never get here
    847                  result = MCE_ERR_BAD_INPUT;
    848                  break;
    849              }
    850          
    851              if( result != MCE_SUCCESS )
   \   00018E   600C         JZ        ??zclKE_GenKeyBits_7
    852              {
    853                pCtxt->error = ZCL_KE_TERMINATE_BAD_KEY_CONFIRM;
   \                     ??zclKE_GenKeyBits_3:
   \   000190   85..82       MOV       DPL,?V14
   \   000193   85..83       MOV       DPH,?V15
   \   000196   7402         MOV       A,#0x2
   \   000198   F0           MOVX      @DPTR,A
    854                success = FALSE;
   \   000199   75..00       MOV       ?V6,#0x0
    855                // DO NOT BREAK -- until radio state is restored
    856              }
    857          
    858              // Restore radio state
    859              ZMacSetReq( ZMacRxOnIdle, &rxOnIdleSaved );
   \                     ??zclKE_GenKeyBits_7:
   \   00019C                ; Setup parameters for call to function ZMacSetReq
   \   00019C   7401         MOV       A,#0x1
   \   00019E   12....       LCALL     ?XSTACK_DISP101_8
   \   0001A1   7952         MOV       R1,#0x52
   \   0001A3   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    860          
    861            } while ( 0 );
    862          
    863            // Cleanup local memory allocations
    864            zclKE_MemFree( pPublicKey, publicKeyLen );
   \                     ??zclKE_GenKeyBits_2:
   \   0001A6                ; Setup parameters for call to function zclKE_MemFree
   \   0001A6   EE           MOV       A,R6
   \   0001A7   FC           MOV       R4,A
   \   0001A8   EF           MOV       A,R7
   \   0001A9   FD           MOV       R5,A
   \   0001AA   AA..         MOV       R2,?V10
   \   0001AC   AB..         MOV       R3,?V11
   \   0001AE   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    865            zclKE_MemFree( pPrivateKey, privateKeyLen );
   \   0001B1                ; Setup parameters for call to function zclKE_MemFree
   \   0001B1   AC..         MOV       R4,?V0
   \   0001B3   AD..         MOV       R5,?V1
   \   0001B5   AA..         MOV       R2,?V8
   \   0001B7   AB..         MOV       R3,?V9
   \   0001B9   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    866          
    867            return success;
   \   0001BC   A9..         MOV       R1,?V6
   \   0001BE   7404         MOV       A,#0x4
   \   0001C0                REQUIRE ?Subroutine4
   \   0001C0                ; // Fall through to label ?Subroutine4
    868          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F10         MOV       R7,#0x10
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E5..         MOV       A,?V2
   \   000002   2421         ADD       A,#0x21
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E5..         MOV       A,?V2
   \   000002   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000005   35..         ADDC      A,?V3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E5..         MOV       A,?V2
   \   000002   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000005   35..         ADDC      A,?V3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E5..         MOV       A,?V2
   \   000002   241D         ADD       A,#0x1d
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V3
   \   000009   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000C   AA..         MOV       R2,?V8
   \   00000E   AB..         MOV       R3,?V9
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   78..         MOV       R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   241F         ADD       A,#0x1f
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET
    869          
    870          /**************************************************************************************************
    871           * @fn      zclKE_GenKeys
    872           *
    873           * @brief   Generate keys.
    874           *
    875           * @param   pCtxt - connection context
    876           *
    877           * @return  uint8 - TRUE if successful, FALSE if not
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          static uint8 zclKE_GenKeys( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_GenKeys:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV       A,#-0x2c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    881            uint8 success;
    882            uint8 *pKeyBits = NULL;
    883            uint8 *pKeyData = NULL;
   \   00000E   75..00       MOV       ?V10,#0x0
   \   000011   75..00       MOV       ?V11,#0x0
    884            uint16 privateKeyLen;
    885            zclKE_Conn_t *pConn = pCtxt->pConn;
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   12....       LCALL     ?Subroutine79 & 0xFFFF
    886          
    887            // Assume success
    888            success = TRUE;
   \                     ??CrossCallReturnLabel_154:
   \   00001B   75..01       MOV       ?V2,#0x1
    889          
    890            privateKeyLen = zclKE_GetField( pConn->suite, ZCL_KE_PRIVATE_KEY_LEN );
   \   00001E                ; Setup parameters for call to function zclKE_GetField
   \   00001E   7904         MOV       R1,#0x4
   \   000020   85..82       MOV       DPL,?V8
   \   000023   F583         MOV       DPH,A
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00002D   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000030   8A..         MOV       ?V4,R2
   \   000032   8B..         MOV       ?V5,R3
   \   000034   AE..         MOV       R6,?V4
   \   000036   AF..         MOV       R7,?V5
    891          
    892            do
    893            {
    894              // Allocate buffer for "zclKE_GenKeyBits"
    895              pKeyBits = osal_mem_alloc( privateKeyLen );
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V14,R2
   \   00003D   8B..         MOV       ?V15,R3
    896              if ( !pKeyBits )
   \   00003F   EA           MOV       A,R2
   \   000040   45..         ORL       A,?V15
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zclKE_GenKeys_0 & 0xFFFF
    897              {
    898                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    899                success = FALSE;
    900                break;
    901              }
    902          
    903              // Generate key bitstream
    904              if ( !zclKE_GenKeyBits( pCtxt, pKeyBits ) )
   \   000047                ; Setup parameters for call to function zclKE_GenKeyBits
   \   000047   AC..         MOV       R4,?V14
   \   000049   AD..         MOV       R5,?V15
   \   00004B   AA..         MOV       R2,?V0
   \   00004D   AB..         MOV       R3,?V1
   \   00004F   12....       LCALL     `??zclKE_GenKeyBits::?relay`; Banked call to: zclKE_GenKeyBits
   \   000052   E9           MOV       A,R1
   \   000053   7003         JNZ       $+5
   \   000055   02....       LJMP      ??zclKE_GenKeys_1 & 0xFFFF
    905              {
    906                // pCtxt->error set in "zclKE_GenKeyBits"
    907                success = FALSE;
    908                break;
    909              }
    910          
    911              // Release and clear any memory blocks that are not needed
    912              zclKE_MemFree( pConn->pRmtCert, zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN ) ); 
   \   000058                ; Setup parameters for call to function zclKE_GetField
   \   000058   7905         MOV       R1,#0x5
   \   00005A   85..82       MOV       DPL,?V8
   \   00005D   85..83       MOV       DPH,?V9
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000068   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00006B   8A..         MOV       ?V4,R2
   \   00006D   8B..         MOV       ?V5,R3
   \   00006F   AC..         MOV       R4,?V4
   \   000071   AD..         MOV       R5,?V5
   \   000073   E5..         MOV       A,?V8
   \   000075   2421         ADD       A,#0x21
   \   000077   F5..         MOV       ?V6,A
   \   000079   E4           CLR       A
   \   00007A   35..         ADDC      A,?V9
   \   00007C   F5..         MOV       ?V7,A
   \   00007E                ; Setup parameters for call to function zclKE_MemFree
   \   00007E   85..82       MOV       DPL,?V6
   \   000081   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000084   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    913              zclKE_MemFree( pConn->pEPrivateKey, privateKeyLen ); 
   \   000087   E5..         MOV       A,?V8
   \   000089   241D         ADD       A,#0x1d
   \   00008B   F5..         MOV       ?V4,A
   \   00008D   E4           CLR       A
   \   00008E   35..         ADDC      A,?V9
   \   000090   F5..         MOV       ?V5,A
   \   000092                ; Setup parameters for call to function zclKE_MemFree
   \   000092   EE           MOV       A,R6
   \   000093   FC           MOV       R4,A
   \   000094   EF           MOV       A,R7
   \   000095   FD           MOV       R5,A
   \   000096   85..82       MOV       DPL,?V4
   \   000099   85..83       MOV       DPH,?V5
   \   00009C   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00009F   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    914              pConn->pRmtCert = NULL;
   \   0000A2   85..82       MOV       DPL,?V6
   \   0000A5   85..83       MOV       DPH,?V7
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   12....       LCALL     ?Subroutine85 & 0xFFFF
    915              pConn->pEPrivateKey = NULL;
   \                     ??CrossCallReturnLabel_111:
   \   0000AE   F0           MOVX      @DPTR,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   F0           MOVX      @DPTR,A
    916          
    917              // Allocate buffer for key data: KDF(KEY_BITS) = MAC_KEY_DATA || KEY_DATA
    918              pKeyData = osal_mem_alloc( 2 * ZCL_KE_KEY_LEN );
   \   0000B1                ; Setup parameters for call to function osal_mem_alloc
   \   0000B1   7A20         MOV       R2,#0x20
   \   0000B3   FB           MOV       R3,A
   \   0000B4   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B7   8A..         MOV       ?V10,R2
   \   0000B9   8B..         MOV       ?V11,R3
    919              if ( !pKeyData )
   \   0000BB   EA           MOV       A,R2
   \   0000BC   45..         ORL       A,?V11
   \   0000BE   6030         JZ        ??zclKE_GenKeys_0
    920              {
    921                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    922                success = FALSE;
    923                break;
    924              }
    925          
    926              pConn->pMACKey = osal_mem_alloc( ZCL_KE_KEY_LEN );
   \   0000C0                ; Setup parameters for call to function osal_mem_alloc
   \   0000C0   7A10         MOV       R2,#0x10
   \   0000C2   7B00         MOV       R3,#0x0
   \   0000C4   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000C7   8A..         MOV       ?V4,R2
   \   0000C9   8B..         MOV       ?V5,R3
   \   0000CB   A8..         MOV       R0,?V4
   \   0000CD   A9..         MOV       R1,?V5
   \   0000CF   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000D2   12....       LCALL     ??Subroutine102_0 & 0xFFFF
    927              if ( !pConn->pMACKey )
   \                     ??CrossCallReturnLabel_135:
   \   0000D5   6019         JZ        ??zclKE_GenKeys_0
    928              {
    929                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
    930                success = FALSE;
    931                break;
    932              }
    933          
    934              pConn->pKey = osal_mem_alloc( ZCL_KE_KEY_LEN );
   \   0000D7                ; Setup parameters for call to function osal_mem_alloc
   \   0000D7   7A10         MOV       R2,#0x10
   \   0000D9   7B00         MOV       R3,#0x0
   \   0000DB   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000DE   8A..         MOV       ?V4,R2
   \   0000E0   8B..         MOV       ?V5,R3
   \   0000E2   A8..         MOV       R0,?V4
   \   0000E4   A9..         MOV       R1,?V5
   \   0000E6   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   0000E9   35..         ADDC      A,?V9
   \   0000EB   12....       LCALL     ??Subroutine102_0 & 0xFFFF
    935              if ( !pConn->pKey )
   \                     ??CrossCallReturnLabel_136:
   \   0000EE   700F         JNZ       ??zclKE_GenKeys_2
    936              {
    937                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_GenKeys_0:
   \   0000F0   85..82       MOV       DPL,?V0
   \   0000F3   85..83       MOV       DPH,?V1
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   F0           MOVX      @DPTR,A
    938                success = FALSE;
   \                     ??zclKE_GenKeys_1:
   \   0000F9   75..00       MOV       ?V2,#0x0
    939                break;
   \   0000FC   02....       LJMP      ??zclKE_GenKeys_3 & 0xFFFF
    940              }
    941          
    942              // Derive the keying data using KDF function
    943              zclKE_KeyDeriveFunction( pKeyBits, privateKeyLen, pKeyData );
   \                     ??zclKE_GenKeys_2:
   \   0000FF   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 1}>`
   \   000102   AC..         MOV       R4,?XSP + 0
   \   000104   AD..         MOV       R5,?XSP + 1
   \   000106   7404         MOV       A,#0x4
   \   000108   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00010B   EE           MOV       A,R6
   \   00010C   2404         ADD       A,#0x4
   \   00010E   F5..         MOV       ?V4,A
   \   000110   E4           CLR       A
   \   000111   3F           ADDC      A,R7
   \   000112   F5..         MOV       ?V5,A
   \   000114   7403         MOV       A,#0x3
   \   000116   78..         MOV       R0,#?V4
   \   000118   12....       LCALL     ?S_SHL
   \   00011B   85....       MOV       ?V0,?V4
   \   00011E   85....       MOV       ?V1,?V5
   \   000121                ; Setup parameters for call to function osal_memcpy
   \   000121   85....       MOV       ?V4,?V14
   \   000124   85....       MOV       ?V5,?V15
   \   000127   F5..         MOV       ?V6,A
   \   000129   78..         MOV       R0,#?V4
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012E   EE           MOV       A,R6
   \   00012F   FC           MOV       R4,A
   \   000130   EF           MOV       A,R7
   \   000131   FD           MOV       R5,A
   \   000132   7407         MOV       A,#0x7
   \   000134   12....       LCALL     ?XSTACK_DISP101_8
   \   000137   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013A   7403         MOV       A,#0x3
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013F   7404         MOV       A,#0x4
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   E582         MOV       A,DPL
   \   000146   2E           ADD       A,R6
   \   000147   F5..         MOV       ?V12,A
   \   000149   E583         MOV       A,DPH
   \   00014B   3F           ADDC      A,R7
   \   00014C   F5..         MOV       ?V13,A
   \   00014E                ; Setup parameters for call to function osal_memcpy
   \   00014E   A8..         MOV       R0,?XSP + 0
   \   000150   A9..         MOV       R1,?XSP + 1
   \   000152   88..         MOV       ?V4,R0
   \   000154   89..         MOV       ?V5,R1
   \   000156   78..         MOV       R0,#?V4
   \   000158   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015B   7C04         MOV       R4,#0x4
   \   00015D   7D00         MOV       R5,#0x0
   \   00015F   AA..         MOV       R2,?V12
   \   000161   AB..         MOV       R3,?V13
   \   000163   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000166   7403         MOV       A,#0x3
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016B                ; Setup parameters for call to function sspMMOHash
   \   00016B   78..         MOV       R0,#?V10
   \   00016D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000170   78..         MOV       R0,#?V0
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000175   7408         MOV       A,#0x8
   \   000177   12....       LCALL     ?XSTACK_DISP102_8
   \   00017A   7900         MOV       R1,#0x0
   \   00017C   7A00         MOV       R2,#0x0
   \   00017E   7B00         MOV       R3,#0x0
   \   000180   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   000183   7404         MOV       A,#0x4
   \   000185   12....       LCALL     ?DEALLOC_XSTACK8
   \   000188   85..82       MOV       DPL,?V12
   \   00018B   85..83       MOV       DPH,?V13
   \   00018E   A3           INC       DPTR
   \   00018F   A3           INC       DPTR
   \   000190   A3           INC       DPTR
   \   000191   7402         MOV       A,#0x2
   \   000193   F0           MOVX      @DPTR,A
   \   000194   E5..         MOV       A,?V10
   \   000196   2410         ADD       A,#0x10
   \   000198   F5..         MOV       ?V12,A
   \   00019A   E4           CLR       A
   \   00019B   35..         ADDC      A,?V11
   \   00019D   F5..         MOV       ?V13,A
   \   00019F                ; Setup parameters for call to function sspMMOHash
   \   00019F   78..         MOV       R0,#?V12
   \   0001A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A4   78..         MOV       R0,#?V0
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A9   7408         MOV       A,#0x8
   \   0001AB   12....       LCALL     ?XSTACK_DISP102_8
   \   0001AE   7900         MOV       R1,#0x0
   \   0001B0   7A00         MOV       R2,#0x0
   \   0001B2   7B00         MOV       R3,#0x0
   \   0001B4   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   0001B7   7404         MOV       A,#0x4
   \   0001B9   12....       LCALL     ?DEALLOC_XSTACK8
    944          
    945              // Save the derived keys
    946              osal_memcpy( pConn->pMACKey, pKeyData, ZCL_KE_KEY_LEN );
    947              osal_memcpy( pConn->pKey, &(pKeyData[ZCL_KE_KEY_LEN]), ZCL_KE_KEY_LEN );
    948          
    949            } while ( 0 );
   \   0001BC                ; Setup parameters for call to function osal_memcpy
   \   0001BC   85....       MOV       ?V4,?V10
   \   0001BF   85....       MOV       ?V5,?V11
   \   0001C2   78..         MOV       R0,#?V4
   \   0001C4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001C7   7C10         MOV       R4,#0x10
   \   0001C9   7D00         MOV       R5,#0x0
   \   0001CB   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0001CE   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0001D1   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001D4   7403         MOV       A,#0x3
   \   0001D6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D9                ; Setup parameters for call to function osal_memcpy
   \   0001D9   85....       MOV       ?V4,?V12
   \   0001DC   85....       MOV       ?V5,?V13
   \   0001DF   78..         MOV       R0,#?V4
   \   0001E1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E4   7C10         MOV       R4,#0x10
   \   0001E6   7D00         MOV       R5,#0x0
   \   0001E8   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   0001EB   35..         ADDC      A,?V9
   \   0001ED   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   0001F0   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001F3   7403         MOV       A,#0x3
   \   0001F5   12....       LCALL     ?DEALLOC_XSTACK8
    950          
    951            // Cleanup local memory allocations
    952            zclKE_MemFree( pKeyBits, privateKeyLen );
   \                     ??zclKE_GenKeys_3:
   \   0001F8                ; Setup parameters for call to function zclKE_MemFree
   \   0001F8   EE           MOV       A,R6
   \   0001F9   FC           MOV       R4,A
   \   0001FA   EF           MOV       A,R7
   \   0001FB   FD           MOV       R5,A
   \   0001FC   AA..         MOV       R2,?V14
   \   0001FE   AB..         MOV       R3,?V15
   \   000200   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    953            zclKE_MemFree( pKeyData, 2 * ZCL_KE_KEY_LEN );
   \   000203                ; Setup parameters for call to function zclKE_MemFree
   \   000203   7C20         MOV       R4,#0x20
   \   000205   7D00         MOV       R5,#0x0
   \   000207   AA..         MOV       R2,?V10
   \   000209   AB..         MOV       R3,?V11
   \   00020B   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
    954          
    955            return success;
   \   00020E   A9..         MOV       R1,?V2
   \   000210   742C         MOV       A,#0x2c
   \   000212   02....       LJMP      ?Subroutine4 & 0xFFFF
    956          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E5..         MOV       A,?V8
   \   000002   2425         ADD       A,#0x25
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V9
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E5..         MOV       A,?V8
   \   000002                REQUIRE ??Subroutine123_0
   \   000002                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   2423         ADD       A,#0x23
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    957          
    958          /**************************************************************************************************
    959           * @fn      zclKE_GenKeys
    960           *
    961           * @brief   Generate MAC value.
    962           *
    963           * @param   pConn - server or client connection
    964           * @param   initiator - key establishment initiator(TRUE) or responder(FALSE)
    965           * @param   MACu - MACu(TRUE) or MACv(FALSE)
    966           * @param   pMAC - MAC buffer
    967           *
    968           * @return  uint8 - TRUE if successful, FALSE if not
    969           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    970          static uint8 zclKE_GenMAC( zclKE_Conn_t *pConn, uint8 initiator, uint8 MACu, uint8* pMAC )
   \                     zclKE_GenMAC:
    971          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   89..         MOV       ?V10,R1
   \   000010   8C..         MOV       ?V7,R4
    972            uint8 *hashBuf = NULL;
    973            uint16 bufLen;
    974            uint16 keyLen;
    975            uint8 rmtExtAddr[Z_EXTADDR_LEN];
    976          
    977            // Lookup remote extended address
    978            if ( !AddrMgrExtAddrLookup( pConn->partner.addr.shortAddr, rmtExtAddr ) )
   \   000012                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000012   AC..         MOV       R4,?XSP + 0
   \   000014   AD..         MOV       R5,?XSP + 1
   \   000016   EA           MOV       A,R2
   \   000017   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   00001A   35..         ADDC      A,?V9
   \   00001C   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00001F   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000022   E9           MOV       A,R1
   \   000023   603D         JZ        ??zclKE_GenMAC_0
    979            {
    980              return FALSE;
    981            }
    982          
    983            // Lookup key length
    984            keyLen = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   \   000025                ; Setup parameters for call to function zclKE_GetField
   \   000025   7903         MOV       R1,#0x3
   \   000027   85..82       MOV       DPL,?V8
   \   00002A   85..83       MOV       DPH,?V9
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000035   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000038   8A..         MOV       ?V0,R2
   \   00003A   8B..         MOV       ?V1,R3
   \   00003C   AE..         MOV       R6,?V0
   \   00003E   AF..         MOV       R7,?V1
    985          
    986            // MAC(U) = MAC(MacKey) { M(U) || ID(U) || ID(V) || E(U) || E(V) }
    987            bufLen = 1 + (Z_EXTADDR_LEN * 2) + (keyLen * 2);
   \   000040   EE           MOV       A,R6
   \   000041   F8           MOV       R0,A
   \   000042   EF           MOV       A,R7
   \   000043   F9           MOV       R1,A
   \   000044   E8           MOV       A,R0
   \   000045   2A           ADD       A,R2
   \   000046   F8           MOV       R0,A
   \   000047   E9           MOV       A,R1
   \   000048   33           RLC       A
   \   000049   F9           MOV       R1,A
   \   00004A   E8           MOV       A,R0
   \   00004B   2411         ADD       A,#0x11
   \   00004D   F5..         MOV       ?V0,A
   \   00004F   E4           CLR       A
   \   000050   39           ADDC      A,R1
   \   000051   F5..         MOV       ?V1,A
    988            hashBuf = osal_mem_alloc( bufLen );
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   AA..         MOV       R2,?V0
   \   000055   FB           MOV       R3,A
   \   000056   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   8A..         MOV       ?V2,R2
   \   00005B   8B..         MOV       ?V3,R3
    989            if( !hashBuf )
   \   00005D   EA           MOV       A,R2
   \   00005E   45..         ORL       A,?V3
   \   000060   7005         JNZ       ??zclKE_GenMAC_1
    990            {
    991              return FALSE;
   \                     ??zclKE_GenMAC_0:
   \   000062   7900         MOV       R1,#0x0
   \   000064   02....       LJMP      ??zclKE_GenMAC_2 & 0xFFFF
    992            }
    993          
    994            // Convert length to bit length
    995            bufLen = bufLen * 8;
   \                     ??zclKE_GenMAC_1:
   \   000067   85....       MOV       ?V4,?V0
   \   00006A   85....       MOV       ?V5,?V1
   \   00006D   7403         MOV       A,#0x3
   \   00006F   78..         MOV       R0,#?V4
   \   000071   12....       LCALL     ?S_SHL
   \   000074   85....       MOV       ?V0,?V4
   \   000077   85....       MOV       ?V1,?V5
    996          
    997            // Assumption for M(U) and M(V) is: M(U) = 0x02, M(V) = 0x03
    998            if( MACu == TRUE )
   \   00007A   04           INC       A
   \   00007B   65..         XRL       A,?V7
   \   00007D   8A82         MOV       DPL,R2
   \   00007F   8B83         MOV       DPH,R3
   \   000081   7004         JNZ       ??zclKE_GenMAC_3
    999            {
   1000              hashBuf[0] = 0x02; // M(U)
   \   000083   7402         MOV       A,#0x2
   \   000085   8002         SJMP      ??zclKE_GenMAC_4
   1001            }
   1002            else
   1003            {
   1004              hashBuf[0] = 0x03; // M(V)
   \                     ??zclKE_GenMAC_3:
   \   000087   7403         MOV       A,#0x3
   \                     ??zclKE_GenMAC_4:
   \   000089   F0           MOVX      @DPTR,A
   1005            }
   1006          
   1007          
   1008            if ( ( initiator && MACu ) || ( !initiator && !MACu ) )
   \   00008A   E5..         MOV       A,?V10
   \   00008C   7003         JNZ       $+5
   \   00008E   02....       LJMP      ??zclKE_GenMAC_5 & 0xFFFF
   \   000091   E5..         MOV       A,?V7
   \   000093   6003         JZ        $+5
   \   000095   02....       LJMP      ??zclKE_GenMAC_6 & 0xFFFF
   1009            {
   1010              // MAC = MAC(MacKey) { M() || ID(L) || ID(R) || E(L) || E(R) }
   1011              // L - Local, R - Remote
   1012              // ID(L)
   1013              SSP_MemCpyReverse( &hashBuf[1], NLME_GetExtAddr(), Z_EXTADDR_LEN);
   1014              // ID(R)
   1015              SSP_MemCpyReverse( &hashBuf[1 + Z_EXTADDR_LEN], rmtExtAddr, Z_EXTADDR_LEN );
   1016              // E(L)
   1017              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN)], pConn->pEPublicKey, keyLen );
   1018              // E(R)
   1019              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN) + keyLen], pConn->pRmtEPublicKey, keyLen );
   1020            }
   1021            else
   1022            {
   1023              // MAC = MAC(MacKey) { M() || ID(R) || ID(L) || E(R) || E(L) }
   1024              // L - Local, R - Remote
   1025              // ID(R)
   1026              SSP_MemCpyReverse( &hashBuf[1], rmtExtAddr, Z_EXTADDR_LEN);
   \                     ??zclKE_GenMAC_7:
   \   000098                ; Setup parameters for call to function SSP_MemCpyReverse
   \   000098   75..08       MOV       ?V4,#0x8
   \   00009B   75..00       MOV       ?V5,#0x0
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   7402         MOV       A,#0x2
   \   0000A5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A8   8A82         MOV       DPL,R2
   \   0000AA   8B83         MOV       DPH,R3
   \   0000AC   A3           INC       DPTR
   \   0000AD   AA82         MOV       R2,DPL
   \   0000AF   AB83         MOV       R3,DPH
   \   0000B1   12....       LCALL     `??SSP_MemCpyReverse::?relay`; Banked call to: SSP_MemCpyReverse
   \   0000B4   7402         MOV       A,#0x2
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   1027              // ID(L)
   1028              SSP_MemCpyReverse( &hashBuf[1 + Z_EXTADDR_LEN], NLME_GetExtAddr(), Z_EXTADDR_LEN );
   \   0000B9                ; Setup parameters for call to function NLME_GetExtAddr
   \   0000B9   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   0000BC   8A..         MOV       ?V4,R2
   \   0000BE   8B..         MOV       ?V5,R3
   \   0000C0   AC..         MOV       R4,?V4
   \   0000C2   AD..         MOV       R5,?V5
   \   0000C4                ; Setup parameters for call to function SSP_MemCpyReverse
   \   0000C4   75..08       MOV       ?V4,#0x8
   \   0000C7   75..00       MOV       ?V5,#0x0
   \   0000CA   78..         MOV       R0,#?V4
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CF   E5..         MOV       A,?V2
   \   0000D1   2409         ADD       A,#0x9
   \   0000D3   FA           MOV       R2,A
   \   0000D4   E4           CLR       A
   \   0000D5   35..         ADDC      A,?V3
   \   0000D7   FB           MOV       R3,A
   \   0000D8   12....       LCALL     `??SSP_MemCpyReverse::?relay`; Banked call to: SSP_MemCpyReverse
   \   0000DB   7402         MOV       A,#0x2
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   1029              // E(R)
   1030              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN)], pConn->pRmtEPublicKey, keyLen );
   \   0000E0                ; Setup parameters for call to function osal_memcpy
   \   0000E0   E5..         MOV       A,?V8
   \   0000E2   12....       LCALL     ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000E5   35..         ADDC      A,?V9
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EF   EE           MOV       A,R6
   \   0000F0   FC           MOV       R4,A
   \   0000F1   EF           MOV       A,R7
   \   0000F2   FD           MOV       R5,A
   \   0000F3   E5..         MOV       A,?V2
   \   0000F5   2411         ADD       A,#0x11
   \   0000F7   FA           MOV       R2,A
   \   0000F8   E4           CLR       A
   \   0000F9   35..         ADDC      A,?V3
   \   0000FB   FB           MOV       R3,A
   \   0000FC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000FF   7403         MOV       A,#0x3
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
   1031              // E(L)
   1032              osal_memcpy( &hashBuf[1 + (2 * Z_EXTADDR_LEN) + keyLen], pConn->pEPublicKey, keyLen );
   \   000104                ; Setup parameters for call to function osal_memcpy
   \   000104   E5..         MOV       A,?V8
   \   000106   241B         ADD       A,#0x1b
   \                     ??zclKE_GenMAC_8:
   \   000108   F582         MOV       DPL,A
   \   00010A   E4           CLR       A
   \   00010B   35..         ADDC      A,?V9
   \   00010D   F583         MOV       DPH,A
   1033            }
   \   00010F   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000112   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000115   EE           MOV       A,R6
   \   000116   FC           MOV       R4,A
   \   000117   EF           MOV       A,R7
   \   000118   FD           MOV       R5,A
   \   000119   E5..         MOV       A,?V2
   \   00011B   2E           ADD       A,R6
   \   00011C   F8           MOV       R0,A
   \   00011D   E5..         MOV       A,?V3
   \   00011F   3F           ADDC      A,R7
   \   000120   F9           MOV       R1,A
   \   000121   E8           MOV       A,R0
   \   000122   2411         ADD       A,#0x11
   \   000124   FA           MOV       R2,A
   \   000125   E4           CLR       A
   \   000126   39           ADDC      A,R1
   \   000127   FB           MOV       R3,A
   \   000128   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012B   7403         MOV       A,#0x3
   \   00012D   12....       LCALL     ?DEALLOC_XSTACK8
   1034          
   1035            // Hash MAC
   1036            SSP_KeyedHash( hashBuf, bufLen, pConn->pMACKey, pMAC );
   \   000130                ; Setup parameters for call to function SSP_KeyedHash
   \   000130   741B         MOV       A,#0x1b
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000138   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00013B   F583         MOV       DPH,A
   \   00013D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000140   AC..         MOV       R4,?V0
   \   000142   AD..         MOV       R5,?V1
   \   000144   AA..         MOV       R2,?V2
   \   000146   AB..         MOV       R3,?V3
   \   000148   12....       LCALL     `??SSP_KeyedHash::?relay`; Banked call to: SSP_KeyedHash
   \   00014B   7404         MOV       A,#0x4
   \   00014D   12....       LCALL     ?DEALLOC_XSTACK8
   1037          
   1038            osal_mem_free( hashBuf );
   \   000150                ; Setup parameters for call to function osal_mem_free
   \   000150   AA..         MOV       R2,?V2
   \   000152   AB..         MOV       R3,?V3
   \   000154   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1039          
   1040            return TRUE;
   \   000157   7901         MOV       R1,#0x1
   \                     ??zclKE_GenMAC_2:
   \   000159   7408         MOV       A,#0x8
   \   00015B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015E   02....       LJMP      ?Subroutine5 & 0xFFFF
   \                     ??zclKE_GenMAC_5:
   \   000161   E5..         MOV       A,?V7
   \   000163   6003         JZ        $+5
   \   000165   02....       LJMP      ??zclKE_GenMAC_7 & 0xFFFF
   \                     ??zclKE_GenMAC_6:
   \   000168                ; Setup parameters for call to function NLME_GetExtAddr
   \   000168   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00016B   8A..         MOV       ?V4,R2
   \   00016D   8B..         MOV       ?V5,R3
   \   00016F   AC..         MOV       R4,?V4
   \   000171   AD..         MOV       R5,?V5
   \   000173                ; Setup parameters for call to function SSP_MemCpyReverse
   \   000173   75..08       MOV       ?V4,#0x8
   \   000176   75..00       MOV       ?V5,#0x0
   \   000179   78..         MOV       R0,#?V4
   \   00017B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017E   85..82       MOV       DPL,?V2
   \   000181   85..83       MOV       DPH,?V3
   \   000184   A3           INC       DPTR
   \   000185   AA82         MOV       R2,DPL
   \   000187   AB83         MOV       R3,DPH
   \   000189   12....       LCALL     `??SSP_MemCpyReverse::?relay`; Banked call to: SSP_MemCpyReverse
   \   00018C   7402         MOV       A,#0x2
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191                ; Setup parameters for call to function SSP_MemCpyReverse
   \   000191   78..         MOV       R0,#?V4
   \   000193   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000196   7402         MOV       A,#0x2
   \   000198   12....       LCALL     ?XSTACK_DISP102_8
   \   00019B   E5..         MOV       A,?V2
   \   00019D   2409         ADD       A,#0x9
   \   00019F   FA           MOV       R2,A
   \   0001A0   E4           CLR       A
   \   0001A1   35..         ADDC      A,?V3
   \   0001A3   FB           MOV       R3,A
   \   0001A4   12....       LCALL     `??SSP_MemCpyReverse::?relay`; Banked call to: SSP_MemCpyReverse
   \   0001A7   7402         MOV       A,#0x2
   \   0001A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AC                ; Setup parameters for call to function osal_memcpy
   \   0001AC   E5..         MOV       A,?V8
   \   0001AE   12....       LCALL     ??Subroutine107_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0001B1   35..         ADDC      A,?V9
   \   0001B3   F583         MOV       DPH,A
   \   0001B5   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001BB   EE           MOV       A,R6
   \   0001BC   FC           MOV       R4,A
   \   0001BD   EF           MOV       A,R7
   \   0001BE   FD           MOV       R5,A
   \   0001BF   E5..         MOV       A,?V2
   \   0001C1   2411         ADD       A,#0x11
   \   0001C3   FA           MOV       R2,A
   \   0001C4   E4           CLR       A
   \   0001C5   35..         ADDC      A,?V3
   \   0001C7   FB           MOV       R3,A
   \   0001C8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001CB   7403         MOV       A,#0x3
   \   0001CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D0                ; Setup parameters for call to function osal_memcpy
   \   0001D0   E5..         MOV       A,?V8
   \   0001D2   241F         ADD       A,#0x1f
   \   0001D4   02....       LJMP      ??zclKE_GenMAC_8 & 0xFFFF
   1041          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   75..00       MOV       ?V6,#0x0
   \   000006   78..         MOV       R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0B         MOV       R7,#0xb
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
   1042          
   1043          /**************************************************************************************************
   1044           * @fn      zclKE_CheckForAvailSuites
   1045           *
   1046           * @brief   Check to see which suites are available.
   1047           *
   1048           * @param   none
   1049           *
   1050           * @return  void
   1051           */
   1052          static void zclKE_CheckForAvailSuites( void )
   1053          {
   1054            uint8 certData[ECCAPI_PUBLIC_KEY_283_LEN];
   1055            uint8 nullData[ECCAPI_PUBLIC_KEY_283_LEN] = {
   1056              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1057              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1058              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1059              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
   1060              0xFF, 0xFF, 0xFF, 0xFF, 0xFF
   1061            };
   1062          
   1063          #if !defined( ECCAPI_163_DISABLED )
   1064            if ( ( SUCCESS == osal_nv_read( ZCD_NV_CA_PUBLIC_KEY, 0, 
   1065                                            ECCAPI_PUBLIC_KEY_163_LEN, certData ) ) && 
   1066                 ( !osal_memcmp( certData, nullData, ECCAPI_PUBLIC_KEY_163_LEN )  )    )
   1067            {
   1068              zclKE_SupportedSuites |= ZCL_KE_SUITE_1;
   1069            }
   1070          #endif // ECCAPI_163_DISABLED
   1071          
   1072          
   1073          #if !defined( ECCAPI_283_DISABLED )
   1074            if ( ( SUCCESS == osal_nv_read( ZCD_NV_PUBLIC_KEY_283, 0, 
   1075                                            ECCAPI_PUBLIC_KEY_283_LEN, certData ) ) && 
   1076                 ( !osal_memcmp( certData, nullData, ECCAPI_PUBLIC_KEY_283_LEN )  )    )
   1077            {
   1078              zclKE_SupportedSuites |= ZCL_KE_SUITE_2;
   1079            }
   1080          #endif // ECCAPI_283_DISABLED
   1081          }
   1082          
   1083          /**************************************************************************************************
   1084           * @fn      zclKE_CheckMultSuiteBits
   1085           *
   1086           * @brief   Check suite field for multiple bits.
   1087           *
   1088           * @param   suite - suite field 
   1089           *
   1090           * @return  uint8 - TRUE multiple bits, FALSE if not
   1091           */
   1092          static uint8 zclKE_CheckMultSuiteBits( uint16 suite )
   1093          {
   1094            uint8 success = FALSE;
   1095            uint8 bit;
   1096            uint16 bitCount = 0;
   1097          
   1098            for ( bit = 0; bit < 16; bit++ )
   1099            {
   1100              if ( suite & ( 1 << bit ) )
   1101              {
   1102                bitCount++;
   1103                if ( bitCount > 1 )
   1104                {
   1105                  // Multiple bits detected
   1106                  success = TRUE;
   1107          
   1108                  break;
   1109                }
   1110              }
   1111              else if ( suite < ( 1 << bit ) )
   1112              {
   1113                // No more bits
   1114                break;
   1115              }
   1116            }
   1117          
   1118            return success;
   1119          }
   1120          
   1121          /**************************************************************************************************
   1122           * @fn      zclKE_InitiateCmdCheckSuite
   1123           *
   1124           * @brief   Check initiate command - suite.
   1125           *
   1126           * @param   pCtxt - connection context
   1127           * @param   pCmd - command payload
   1128           *
   1129           * @return  uint8 - TRUE if successful, FALSE if not
   1130           */
   1131          static uint8 zclKE_InitiateCmdCheckSuite( zclKE_ConnCtxt_t *pCtxt,
   1132                                                    zclKE_InitiateCmd_t *pCmd )
   1133          {
   1134            uint8 success;
   1135          
   1136            // Check for legal suites
   1137            if ( ( pCmd->suite == ZCL_KE_SUITE_1 ) ||
   1138                 ( pCmd->suite == ZCL_KE_SUITE_2 )    )
   1139            {
   1140              // Is the selected suite supported
   1141              if ( pCmd->suite & zclKE_SupportedSuites )
   1142              {
   1143                success = TRUE;
   1144              }
   1145              else
   1146              {
   1147                pCtxt->error = ZCL_KE_TERMINATE_UNSUPPORTED_SUITE;
   1148          
   1149                success = FALSE;
   1150              }
   1151            }
   1152            else
   1153            {
   1154              // Already failed but must check for multiple bits 
   1155              if ( zclKE_CheckMultSuiteBits( pCmd->suite ) )
   1156              {
   1157                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   1158              }
   1159              else
   1160              {
   1161                pCtxt->error = ZCL_KE_TERMINATE_UNSUPPORTED_SUITE;
   1162              }
   1163          
   1164              success = FALSE;
   1165            }  
   1166          
   1167            return success;
   1168          }
   1169          
   1170          /**************************************************************************************************
   1171           * @fn      zclKE_InitiateCmdCheckGenTimes
   1172           *
   1173           * @brief   Check initiate command - key generation times.
   1174           *
   1175           * @param   pCtxt - connection context
   1176           * @param   pCmd - command payload
   1177           *
   1178           * @return  uint8 - TRUE if successful, FALSE if not
   1179           */
   1180          static uint8 zclKE_InitiateCmdCheckGenTimes( zclKE_ConnCtxt_t *pCtxt,
   1181                                                       zclKE_InitiateCmd_t *pCmd )
   1182          {
   1183            uint8 success;
   1184          
   1185            if ( ( pCmd->ephDataGenTime < ZCL_KE_GEN_INVALID_TIME ) &&
   1186                 ( pCmd->cfmKeyGenTime < ZCL_KE_GEN_INVALID_TIME  )    )
   1187            {
   1188              success = TRUE;
   1189            }
   1190            else
   1191            {
   1192              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   1193          
   1194              success = FALSE;
   1195            }
   1196          
   1197            return success;
   1198          }
   1199          
   1200          /**************************************************************************************************
   1201           * @fn      zclKE_InitiateCmdCheckCertExtAddr
   1202           *
   1203           * @brief   Check initiate command - cert extended address.
   1204           *
   1205           * @param   pCtxt - connection context
   1206           * @param   pCmd - command payload
   1207           *
   1208           * @return  uint8 - TRUE if successful, FALSE if not
   1209           */
   1210          static uint8 zclKE_InitiateCmdCheckCertExtAddr( zclKE_ConnCtxt_t *pCtxt,
   1211                                                          zclKE_InitiateCmd_t *pCmd )
   1212          {
   1213            uint8 success;
   1214            uint16 idx;
   1215            uint8 extAddr[Z_EXTADDR_LEN];
   1216            uint8 revExtAddr[Z_EXTADDR_LEN];
   1217          
   1218            // Get extended address index
   1219            idx = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_EXT_ADDR_IDX );
   1220          
   1221            // Lookup the extended address, reverse and compare with cert
   1222            if ( ( AddrMgrExtAddrLookup( pCtxt->pInMsg->msg->srcAddr.addr.shortAddr,
   1223                                         extAddr )                                   ) &&
   1224                 ( osal_revmemcpy( revExtAddr, extAddr, Z_EXTADDR_LEN )              ) &&
   1225                 ( osal_memcmp( &pCmd->pIdentity[idx], revExtAddr, Z_EXTADDR_LEN )   )    )
   1226            {
   1227              success = TRUE;
   1228            }
   1229            else
   1230            {
   1231              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   1232          
   1233              success = FALSE;
   1234            }
   1235            
   1236            return success;
   1237          }
   1238          
   1239          /**************************************************************************************************
   1240           * @fn      zclKE_InitiateCmdCheckCertIssuer
   1241           *
   1242           * @brief   Check initiate command - cert issuer.
   1243           *
   1244           * @param   pCtxt - connection context
   1245           * @param   pCmd - command payload
   1246           *
   1247           * @return  uint8 - TRUE if successful, FALSE if not
   1248           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1249          static uint8 zclKE_InitiateCmdCheckCertIssuer( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_InitiateCmdCheckCertIssuer:
   1250                                                         zclKE_InitiateCmd_t *pCmd )
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V10,R2
   \   000007   8B..         MOV       ?V11,R3
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1252            uint8 success;
   1253            uint16 id = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_NV_ID );
   \   00000D                ; Setup parameters for call to function zclKE_GetField
   \   00000D   7902         MOV       R1,#0x2
   \   00000F   8C82         MOV       DPL,R4
   \   000011   8D83         MOV       DPH,R5
   \   000013   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000016   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000019   8A..         MOV       ?V4,R2
   \   00001B   8B..         MOV       ?V5,R3
   1254            uint16 len = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_LEN );
   \   00001D                ; Setup parameters for call to function zclKE_GetField
   \   00001D   7905         MOV       R1,#0x5
   \   00001F   85..82       MOV       DPL,?V0
   \   000022   85..83       MOV       DPH,?V1
   \   000025   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000028   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00002B   8A..         MOV       ?V2,R2
   \   00002D   8B..         MOV       ?V3,R3
   \   00002F   AE..         MOV       R6,?V2
   \   000031   AF..         MOV       R7,?V3
   1255            uint16 idx = zclKE_GetField( pCmd->suite, ZCL_KE_CERT_ISSUER_IDX );
   \   000033                ; Setup parameters for call to function zclKE_GetField
   \   000033   7907         MOV       R1,#0x7
   \   000035   85..82       MOV       DPL,?V0
   \   000038   85..83       MOV       DPH,?V1
   \   00003B   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00003E   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000041   8A..         MOV       ?V8,R2
   \   000043   8B..         MOV       ?V9,R3
   1256            uint8 *pCert  = NULL;
   1257          
   1258            success = TRUE;
   \   000045   75..01       MOV       ?V2,#0x1
   1259          
   1260            do
   1261            {
   1262              uint8 *pCert  = (uint8 *)osal_mem_alloc( len );
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   EE           MOV       A,R6
   \   000049   FA           MOV       R2,A
   \   00004A   EF           MOV       A,R7
   \   00004B   FB           MOV       R3,A
   \   00004C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004F   8A..         MOV       ?V12,R2
   \   000051   8B..         MOV       ?V13,R3
   1263              if ( !pCert )
   \   000053   EA           MOV       A,R2
   \   000054   45..         ORL       A,?V13
   \   000056   700A         JNZ       ??zclKE_InitiateCmdCheckCertIssuer_0
   1264              {
   1265                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \   000058   85..82       MOV       DPL,?V10
   \   00005B   85..83       MOV       DPH,?V11
   \   00005E   7404         MOV       A,#0x4
   \   000060   8065         SJMP      ??zclKE_InitiateCmdCheckCertIssuer_1
   1266                success = FALSE;
   1267                break;
   1268              }
   1269          
   1270              osal_nv_read( id, 0, len, pCert );
   \                     ??zclKE_InitiateCmdCheckCertIssuer_0:
   \   000062                ; Setup parameters for call to function osal_nv_read
   \   000062   78..         MOV       R0,#?V12
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   8E..         MOV       ?V6,R6
   \   000069   8F..         MOV       ?V7,R7
   \   00006B   78..         MOV       R0,#?V6
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7C00         MOV       R4,#0x0
   \   000072   7D00         MOV       R5,#0x0
   \   000074   AA..         MOV       R2,?V4
   \   000076   AB..         MOV       R3,?V5
   \   000078   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   1271          
   1272              if ( !osal_memcmp( &pCmd->pIdentity[idx], &pCert[idx], ZCL_KE_CERT_ISSUER_LEN ) )
   \   000080                ; Setup parameters for call to function osal_memcmp
   \   000080   E5..         MOV       A,?V12
   \   000082   25..         ADD       A,?V8
   \   000084   F5..         MOV       ?V4,A
   \   000086   E5..         MOV       A,?V13
   \   000088   35..         ADDC      A,?V9
   \   00008A   F5..         MOV       ?V5,A
   \   00008C   75..00       MOV       ?V6,#0x0
   \   00008F   78..         MOV       R0,#?V4
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000094   7C08         MOV       R4,#0x8
   \   000096   7D00         MOV       R5,#0x0
   \   000098   85..82       MOV       DPL,?V0
   \   00009B   85..83       MOV       DPH,?V1
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   25..         ADD       A,?V8
   \   0000A5   F8           MOV       R0,A
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   35..         ADDC      A,?V9
   \   0000AA   8882         MOV       DPL,R0
   \   0000AC   F583         MOV       DPH,A
   \   0000AE   A982         MOV       R1,DPL
   \   0000B0   AA83         MOV       R2,DPH
   \   0000B2   7B00         MOV       R3,#0x0
   \   0000B4   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000B7   7403         MOV       A,#0x3
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   700C         JNZ       ??zclKE_InitiateCmdCheckCertIssuer_2
   1273              {
   1274                pCtxt->error = ZCL_KE_TERMINATE_UNKNOWN_ISSUER;
   \   0000BF   85..82       MOV       DPL,?V10
   \   0000C2   85..83       MOV       DPH,?V11
   \   0000C5   7401         MOV       A,#0x1
   \                     ??zclKE_InitiateCmdCheckCertIssuer_1:
   \   0000C7   F0           MOVX      @DPTR,A
   1275                success = FALSE;
   \   0000C8   75..00       MOV       ?V2,#0x0
   1276                break;
   1277              }
   1278            }
   1279            while ( 0 );
   1280          
   1281            // Cleanup local memory allocations
   1282            zclKE_MemFree( pCert, len );
   \                     ??zclKE_InitiateCmdCheckCertIssuer_2:
   \   0000CB                ; Setup parameters for call to function zclKE_MemFree
   \   0000CB   EE           MOV       A,R6
   \   0000CC   FC           MOV       R4,A
   \   0000CD   EF           MOV       A,R7
   \   0000CE   FD           MOV       R5,A
   \   0000CF   7A00         MOV       R2,#0x0
   \   0000D1   7B00         MOV       R3,#0x0
   \   0000D3   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
   1283          
   1284            return success;
   \   0000D6   A9..         MOV       R1,?V2
   \   0000D8                REQUIRE ?Subroutine6
   \   0000D8                ; // Fall through to label ?Subroutine6
   1285          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1286          
   1287          #if !defined( ECCAPI_283_DISABLED )
   1288          /**************************************************************************************************
   1289           * @fn      zclKE_InitiateCmdCheckCertSuite2
   1290           *
   1291           * @brief   Check initiate command - suite2 cert fields.
   1292           *
   1293           * @param   pCtxt - connection context
   1294           * @param   pCmd - command payload
   1295           *
   1296           * @return  uint8 - TRUE if successful, FALSE if not
   1297           */
   1298          static uint8 zclKE_InitiateCmdCheckCertSuite2( zclKE_ConnCtxt_t *pCtxt,
   1299                                                         zclKE_InitiateCmd_t *pCmd )
   1300          {
   1301            uint8 success;
   1302          
   1303            if ( ( pCmd->pIdentity[ZCL_KE_CERT_283_TYPE_IDX] ==
   1304                   ZCL_KE_CERT_283_TYPE_VALUE                       ) &&
   1305                 ( pCmd->pIdentity[ZCL_KE_CERT_283_CURVE_IDX] ==
   1306                   ZCL_KE_CERT_283_CURVE_VALUE                      ) &&
   1307                 ( pCmd->pIdentity[ZCL_KE_CERT_283_HASH_IDX] ==
   1308                   ZCL_KE_CERT_283_HASH_VALUE                       ) &&
   1309                 ( pCmd->pIdentity[ZCL_KE_CERT_283_KEY_USAGE_IDX] &
   1310                   ZCL_KE_CERT_283_KEY_USAGE_BIT                    )    )
   1311            {
   1312              success = TRUE;
   1313            }
   1314            else
   1315            {
   1316              pCtxt->error = ZCL_KE_TERMINATE_INVALID_CERTIFICATE;
   1317          
   1318              success = FALSE;
   1319            }
   1320          
   1321            return success;
   1322          }
   1323          #endif // !defined( ECCAPI_283_DISABLED )
   1324          
   1325          /**************************************************************************************************
   1326           * @fn      zclKE_InitiateCmdCheckCertSpecific
   1327           *
   1328           * @brief   Check initiate command - suite specific cert fields.
   1329           *
   1330           * @param   pCtxt - connection context
   1331           * @param   pCmd - command payload
   1332           *
   1333           * @return  uint8 - TRUE if successful, FALSE if not
   1334           */
   1335          static uint8 zclKE_InitiateCmdCheckCertSpecific( zclKE_ConnCtxt_t *pCtxt,
   1336                                                           zclKE_InitiateCmd_t *pCmd )
   1337          {
   1338            uint8 success;
   1339          
   1340            switch ( pCmd->suite )
   1341            {
   1342              case ZCL_KE_SUITE_1:
   1343                success = TRUE;
   1344                break;
   1345          
   1346          #if !defined( ECCAPI_283_DISABLED )
   1347              case ZCL_KE_SUITE_2:
   1348                success = zclKE_InitiateCmdCheckCertSuite2( pCtxt, pCmd );
   1349                break;
   1350          #endif
   1351          
   1352              default:
   1353                // Should never get here
   1354                success = TRUE;
   1355                break;
   1356            }
   1357           
   1358            return success;
   1359          }
   1360          
   1361          /**************************************************************************************************
   1362           * @fn      zclKE_InitiateCmdCheckFields
   1363           *
   1364           * @brief   Check fields of ZCL_KE_INITIATE_REQ and ZCL_KE_INITIATE_RSP payloads.
   1365           *
   1366           * @param   pCtxt - connection context
   1367           * @param   pCmd - command payload
   1368           *
   1369           * @return  uint8 - TRUE if successful, FALSE if not
   1370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1371          static uint8 zclKE_InitiateCmdCheckFields( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_InitiateCmdCheckFields:
   1372                                                     zclKE_InitiateCmd_t *pCmd )
   1373          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   1374            uint8 success;
   1375          
   1376            if ( zclKE_InitiateCmdCheckSuite( pCtxt, pCmd ) &&
   1377                 zclKE_InitiateCmdCheckGenTimes( pCtxt, pCmd ) && 
   1378                 zclKE_InitiateCmdCheckCertExtAddr( pCtxt, pCmd ) &&
   1379                 zclKE_InitiateCmdCheckCertIssuer( pCtxt, pCmd ) &&
   1380                 zclKE_InitiateCmdCheckCertSpecific( pCtxt, pCmd )  )
   \   000012   8E82         MOV       DPL,R6
   \   000014   8F83         MOV       DPH,R7
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6401         XRL       A,#0x1
   \   000019   7002         JNZ       ??zclKE_InitiateCmdCheckFields_0
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \                     ??zclKE_InitiateCmdCheckFields_0:
   \   00001D   606D         JZ        ??zclKE_InitiateCmdCheckFields_1
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6402         XRL       A,#0x2
   \   000026   7002         JNZ       ??zclKE_InitiateCmdCheckFields_2
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \                     ??zclKE_InitiateCmdCheckFields_2:
   \   00002A   6060         JZ        ??zclKE_InitiateCmdCheckFields_1
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclKE_InitiateCmdCheckFields_3:
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   E9           MOV       A,R1
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?US_SHR
   \   000043   E5..         MOV       A,?V2
   \   000045   A2E0         MOV       C,0xE0 /* A   */.0
   \   000047   501D         JNC       ??zclKE_InitiateCmdCheckFields_4
   \   000049   0C           INC       R4
   \   00004A   EC           MOV       A,R4
   \   00004B   7001         JNZ       ??zclKE_InitiateCmdCheckFields_5
   \   00004D   0D           INC       R5
   \                     ??zclKE_InitiateCmdCheckFields_5:
   \   00004E   C3           CLR       C
   \   00004F   9402         SUBB      A,#0x2
   \   000051   ED           MOV       A,R5
   \   000052   9400         SUBB      A,#0x0
   \   000054   4025         JC        ??zclKE_InitiateCmdCheckFields_6
   \                     ??zclKE_InitiateCmdCheckFields_7:
   \   000056   85..82       MOV       DPL,?V0
   \   000059   85..83       MOV       DPH,?V1
   \                     ??zclKE_InitiateCmdCheckFields_8:
   \   00005C   7403         MOV       A,#0x3
   \                     ??zclKE_InitiateCmdCheckFields_9:
   \   00005E   F0           MOVX      @DPTR,A
   1381            {
   1382              success = TRUE;
   1383            }
   1384            else
   1385            {
   1386              success = FALSE;
   \                     ??zclKE_InitiateCmdCheckFields_10:
   \   00005F   7900         MOV       R1,#0x0
   1387            }
   1388          
   1389            return success;
   \                     ??zclKE_InitiateCmdCheckFields_11:
   \   000061   7410         MOV       A,#0x10
   \   000063   02....       LJMP      ??Subroutine111_0 & 0xFFFF
   \                     ??zclKE_InitiateCmdCheckFields_4:
   \   000066   75..01       MOV       ?V2,#0x1
   \   000069   75..00       MOV       ?V3,#0x0
   \   00006C   E9           MOV       A,R1
   \   00006D   78..         MOV       R0,#?V2
   \   00006F   12....       LCALL     ?S_SHL
   \   000072   C3           CLR       C
   \   000073   EA           MOV       A,R2
   \   000074   95..         SUBB      A,?V2
   \   000076   EB           MOV       A,R3
   \   000077   95..         SUBB      A,?V3
   \   000079   4007         JC        ??zclKE_InitiateCmdCheckFields_12
   \                     ??zclKE_InitiateCmdCheckFields_6:
   \   00007B   09           INC       R1
   \   00007C   E9           MOV       A,R1
   \   00007D   C3           CLR       C
   \   00007E   9410         SUBB      A,#0x10
   \   000080   40B7         JC        ??zclKE_InitiateCmdCheckFields_3
   \                     ??zclKE_InitiateCmdCheckFields_12:
   \   000082   85..82       MOV       DPL,?V0
   \   000085   85..83       MOV       DPH,?V1
   \                     ??zclKE_InitiateCmdCheckFields_13:
   \   000088   7405         MOV       A,#0x5
   \   00008A   80D2         SJMP      ??zclKE_InitiateCmdCheckFields_9
   \                     ??zclKE_InitiateCmdCheckFields_1:
   \   00008C   8E82         MOV       DPL,R6
   \   00008E   8F83         MOV       DPH,R7
   \   000090   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000093   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   000096   E0           MOVX      A,@DPTR
   \   000097   58           ANL       A,R0
   \   000098   F8           MOV       R0,A
   \   000099   A3           INC       DPTR
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   59           ANL       A,R1
   \   00009C   F9           MOV       R1,A
   \   00009D   E8           MOV       A,R0
   \   00009E   49           ORL       A,R1
   \   00009F   6010         JZ        ??zclKE_InitiateCmdCheckFields_14
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F4           CPL       A
   \   0000A9   700C         JNZ       ??zclKE_InitiateCmdCheckFields_15
   \                     ??zclKE_InitiateCmdCheckFields_16:
   \   0000AB   8A82         MOV       DPL,R2
   \   0000AD   8B83         MOV       DPH,R3
   \   0000AF   80AB         SJMP      ??zclKE_InitiateCmdCheckFields_8
   \                     ??zclKE_InitiateCmdCheckFields_14:
   \   0000B1   8A82         MOV       DPL,R2
   \   0000B3   8B83         MOV       DPH,R3
   \   0000B5   80D1         SJMP      ??zclKE_InitiateCmdCheckFields_13
   \                     ??zclKE_InitiateCmdCheckFields_15:
   \   0000B7   8E82         MOV       DPL,R6
   \   0000B9   8F83         MOV       DPH,R7
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F4           CPL       A
   \   0000C0   60E9         JZ        ??zclKE_InitiateCmdCheckFields_16
   \   0000C2                ; Setup parameters for call to function zclKE_GetField
   \   0000C2   7906         MOV       R1,#0x6
   \   0000C4   8E82         MOV       DPL,R6
   \   0000C6   8F83         MOV       DPH,R7
   \   0000C8   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000CB   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   0000CE   8A..         MOV       ?V2,R2
   \   0000D0   8B..         MOV       ?V3,R3
   \   0000D2                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   0000D2   7408         MOV       A,#0x8
   \   0000D4   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D7   85..82       MOV       DPL,?V0
   \   0000DA   85..83       MOV       DPH,?V1
   \   0000DD   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000E0   F8           MOV       R0,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   C8           XCH       A,R0
   \   0000E4   2406         ADD       A,#0x6
   \   0000E6   F582         MOV       DPL,A
   \   0000E8   E4           CLR       A
   \   0000E9   38           ADDC      A,R0
   \   0000EA   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   0000ED   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   0000F0   E9           MOV       A,R1
   \   0000F1   7003         JNZ       $+5
   \   0000F3   02....       LJMP      ??zclKE_InitiateCmdCheckFields_7 & 0xFFFF
   \   0000F6                ; Setup parameters for call to function osal_revmemcpy
   \   0000F6   7408         MOV       A,#0x8
   \   0000F8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FB   88..         MOV       ?V4,R0
   \   0000FD   89..         MOV       ?V5,R1
   \   0000FF   75..00       MOV       ?V6,#0x0
   \   000102   78..         MOV       R0,#?V4
   \   000104   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000107   7C08         MOV       R4,#0x8
   \   000109   7D00         MOV       R5,#0x0
   \   00010B   7403         MOV       A,#0x3
   \   00010D   12....       LCALL     ?XSTACK_DISP101_8
   \   000110   12....       LCALL     `??osal_revmemcpy::?relay`; Banked call to: osal_revmemcpy
   \   000113   7403         MOV       A,#0x3
   \   000115   12....       LCALL     ?DEALLOC_XSTACK8
   \   000118   8B..         MOV       ?V5,R3
   \   00011A   EA           MOV       A,R2
   \   00011B   45..         ORL       A,?V5
   \   00011D   7003         JNZ       $+5
   \   00011F   02....       LJMP      ??zclKE_InitiateCmdCheckFields_7 & 0xFFFF
   \   000122                ; Setup parameters for call to function osal_memcmp
   \   000122   A8..         MOV       R0,?XSP + 0
   \   000124   A9..         MOV       R1,?XSP + 1
   \   000126   88..         MOV       ?V4,R0
   \   000128   89..         MOV       ?V5,R1
   \   00012A   78..         MOV       R0,#?V4
   \   00012C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012F   7C08         MOV       R4,#0x8
   \   000131   7D00         MOV       R5,#0x0
   \   000133   8E82         MOV       DPL,R6
   \   000135   8F83         MOV       DPH,R7
   \   000137   A3           INC       DPTR
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   A3           INC       DPTR
   \   00013B   E0           MOVX      A,@DPTR
   \   00013C   25..         ADD       A,?V2
   \   00013E   F8           MOV       R0,A
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   35..         ADDC      A,?V3
   \   000143   8882         MOV       DPL,R0
   \   000145   F583         MOV       DPH,A
   \   000147   A982         MOV       R1,DPL
   \   000149   AA83         MOV       R2,DPH
   \   00014B   7B00         MOV       R3,#0x0
   \   00014D   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000150   7403         MOV       A,#0x3
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
   \   000155   E9           MOV       A,R1
   \   000156   7003         JNZ       $+5
   \   000158   02....       LJMP      ??zclKE_InitiateCmdCheckFields_7 & 0xFFFF
   \   00015B                ; Setup parameters for call to function zclKE_InitiateCmdCheckCertIssuer
   \   00015B   EE           MOV       A,R6
   \   00015C   FC           MOV       R4,A
   \   00015D   EF           MOV       A,R7
   \   00015E   FD           MOV       R5,A
   \   00015F   AA..         MOV       R2,?V0
   \   000161   AB..         MOV       R3,?V1
   \   000163   12....       LCALL     `??zclKE_InitiateCmdCheckCertIssuer::?relay`; Banked call to: zclKE_InitiateCmdCheckCertIssuer
   \   000166   E9           MOV       A,R1
   \   000167   7003         JNZ       $+5
   \   000169   02....       LJMP      ??zclKE_InitiateCmdCheckFields_10 & 0xFFFF
   \   00016C   8E82         MOV       DPL,R6
   \   00016E   8F83         MOV       DPH,R7
   \   000170   E0           MOVX      A,@DPTR
   \   000171   6402         XRL       A,#0x2
   \   000173   7002         JNZ       ??zclKE_InitiateCmdCheckFields_17
   \   000175   A3           INC       DPTR
   \   000176   E0           MOVX      A,@DPTR
   \                     ??zclKE_InitiateCmdCheckFields_17:
   \   000177   7051         JNZ       ??zclKE_InitiateCmdCheckFields_18
   \   000179   8E82         MOV       DPL,R6
   \   00017B   8F83         MOV       DPH,R7
   \   00017D   A3           INC       DPTR
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000183   7038         JNZ       ??zclKE_InitiateCmdCheckFields_19
   \   000185   8E82         MOV       DPL,R6
   \   000187   8F83         MOV       DPH,R7
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   C8           XCH       A,R0
   \   000190   2409         ADD       A,#0x9
   \   000192   F582         MOV       DPL,A
   \   000194   E4           CLR       A
   \   000195   38           ADDC      A,R0
   \   000196   F583         MOV       DPH,A
   \   000198   E0           MOVX      A,@DPTR
   \   000199   640D         XRL       A,#0xd
   \   00019B   7020         JNZ       ??zclKE_InitiateCmdCheckFields_19
   \   00019D   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0001A0   240A         ADD       A,#0xa
   \   0001A2   F582         MOV       DPL,A
   \   0001A4   E4           CLR       A
   \   0001A5   38           ADDC      A,R0
   \   0001A6   F583         MOV       DPH,A
   \   0001A8   E0           MOVX      A,@DPTR
   \   0001A9   6408         XRL       A,#0x8
   \   0001AB   7010         JNZ       ??zclKE_InitiateCmdCheckFields_19
   \   0001AD   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0001B0   2424         ADD       A,#0x24
   \   0001B2   F582         MOV       DPL,A
   \   0001B4   E4           CLR       A
   \   0001B5   38           ADDC      A,R0
   \   0001B6   F583         MOV       DPH,A
   \   0001B8   E0           MOVX      A,@DPTR
   \   0001B9   A2E3         MOV       C,0xE0 /* A   */.3
   \   0001BB   400D         JC        ??zclKE_InitiateCmdCheckFields_18
   \                     ??zclKE_InitiateCmdCheckFields_19:
   \   0001BD   85..82       MOV       DPL,?V0
   \   0001C0   85..83       MOV       DPH,?V1
   \   0001C3   7406         MOV       A,#0x6
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   7800         MOV       R0,#0x0
   \   0001C8   8002         SJMP      ??zclKE_InitiateCmdCheckFields_20
   \                     ??zclKE_InitiateCmdCheckFields_18:
   \   0001CA   7801         MOV       R0,#0x1
   \                     ??zclKE_InitiateCmdCheckFields_20:
   \   0001CC   E8           MOV       A,R0
   \   0001CD   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001CF   E4           CLR       A
   \   0001D0   33           RLC       A
   \   0001D1   F9           MOV       R1,A
   \   0001D2   02....       LJMP      ??zclKE_InitiateCmdCheckFields_11 & 0xFFFF
   1390          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine112_0
   \   000001                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000003   22           RET
   1391          
   1392          /**************************************************************************************************
   1393           * @fn      zclKE_InitiateRspCheckFields
   1394           *
   1395           * @brief   Check fields of ZCL_KE_INITIATE_RSP payload.
   1396           *
   1397           * @param   pCtxt - connection context
   1398           * @param   pCmd - command payload
   1399           *
   1400           * @return  uint8 - TRUE if successful, FALSE if not
   1401           */
   1402          static uint8 zclKE_InitiateRspCheckFields( zclKE_ConnCtxt_t *pCtxt,
   1403                                                     zclKE_InitiateCmd_t *pCmd )
   1404          {
   1405            uint8 success = FALSE;
   1406          
   1407            // First use the base initiate cmd check -- this should be called first so 
   1408            // expected errors will be returned during specific tests
   1409            if ( zclKE_InitiateCmdCheckFields( (zclKE_ConnCtxt_t *)pCtxt, pCmd ) )
   1410            {
   1411              // Is this the suite that was requested
   1412              if ( pCtxt->pConn->suite == pCmd->suite )
   1413              {
   1414                success = TRUE;
   1415              }    
   1416              else
   1417              {
   1418                pCtxt->error = ZCL_KE_TERMINATE_UNSUPPORTED_SUITE;
   1419              }
   1420            }
   1421          
   1422            return success;
   1423          }
   1424          
   1425          /**************************************************************************************************
   1426           * @fn      zclKE_ParseInitiateCmd
   1427           *
   1428           * @brief   Parse command(ZCL_KE_INITIATE_REQ or ZCL_KE_INITIATE_RSP).
   1429           *
   1430           * @param   pInMsg - incoming message to process
   1431           * @param   pCmd - command payload
   1432           *
   1433           * @return  ZStatus_t - status
   1434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1435          static ZStatus_t zclKE_ParseInitiateCmd( zclIncoming_t *pInMsg, 
   \                     zclKE_ParseInitiateCmd:
   1436                                                   zclKE_InitiateCmd_t *pCmd )
   1437          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1438            uint8 *pBuf = pInMsg->pData;
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   1439          
   1440            // Check for minimum packet length
   1441            if ( pInMsg->pDataLen < ZCL_KE_INITIATE_HDR_LEN )
   \                     ??CrossCallReturnLabel_0:
   \   000008   5003         JNC       $+5
   \   00000A   02....       LJMP      ??zclKE_ParseInitiateCmd_0 & 0xFFFF
   1442            {
   1443              return ZCL_STATUS_MALFORMED_COMMAND;
   1444            }
   1445          
   1446            pCmd->suite = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   00000D   8882         MOV       DPL,R0
   \   00000F   8983         MOV       DPH,R1
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FF           MOV       R7,A
   \   000017   E5..         MOV       A,?V0
   \   000019   8C82         MOV       DPL,R4
   \   00001B   8D83         MOV       DPH,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   EF           MOV       A,R7
   \   000020   12....       LCALL     ?Subroutine57 & 0xFFFF
   1447            pBuf += 2;
   1448            pCmd->ephDataGenTime = *pBuf++;
   \                     ??CrossCallReturnLabel_74:
   \   000023   8C82         MOV       DPL,R4
   \   000025   8D83         MOV       DPH,R5
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   12....       LCALL     ?Subroutine88 & 0xFFFF
   1449            pCmd->cfmKeyGenTime = *pBuf++;
   \                     ??CrossCallReturnLabel_119:
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   8C82         MOV       DPL,R4
   \   000031   8D83         MOV       DPH,R5
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
   1450            pCmd->pIdentity = pBuf;
   \   000037   E8           MOV       A,R0
   \   000038   2404         ADD       A,#0x4
   \   00003A   5001         JNC       ??zclKE_ParseInitiateCmd_1
   \   00003C   09           INC       R1
   \                     ??zclKE_ParseInitiateCmd_1:
   \   00003D   8C82         MOV       DPL,R4
   \   00003F   8D83         MOV       DPH,R5
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   1451          
   1452            // Check for valid suite and identity length
   1453            if ( pCmd->suite == ZCL_KE_SUITE_1 )
   \                     ??CrossCallReturnLabel_296:
   \   000048   8C82         MOV       DPL,R4
   \   00004A   8D83         MOV       DPH,R5
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6401         XRL       A,#0x1
   \   00004F   7002         JNZ       ??zclKE_ParseInitiateCmd_2
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \                     ??zclKE_ParseInitiateCmd_2:
   \   000053   701D         JNZ       ??zclKE_ParseInitiateCmd_3
   1454            {
   1455              if ( pInMsg->pDataLen < ZCL_KE_INITIATE_SUITE1_LEN )
   \   000055   8A82         MOV       DPL,R2
   \   000057   8B83         MOV       DPH,R3
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   C3           CLR       C
   \   000064   E0           MOVX      A,@DPTR
   \   000065   9434         SUBB      A,#0x34
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   9400         SUBB      A,#0x0
   \   00006B   402A         JC        ??zclKE_ParseInitiateCmd_0
   1456              {
   1457                return ZCL_STATUS_MALFORMED_COMMAND;
   1458              }
   1459            }
   1460            else if ( pCmd->suite == ZCL_KE_SUITE_2 )
   1461            {
   1462              if ( pInMsg->pDataLen < ZCL_KE_INITIATE_SUITE2_LEN )
   1463              {
   1464                return ZCL_STATUS_MALFORMED_COMMAND;
   1465              }
   1466            }
   1467            else
   1468            {
   1469              return ZCL_STATUS_MALFORMED_COMMAND;
   1470            }
   1471            
   1472            return ZCL_STATUS_SUCCESS;
   \                     ??zclKE_ParseInitiateCmd_4:
   \   00006D   7900         MOV       R1,#0x0
   \                     ??zclKE_ParseInitiateCmd_5:
   \   00006F   02....       LJMP      ??Subroutine133_0 & 0xFFFF
   \                     ??zclKE_ParseInitiateCmd_3:
   \   000072   8C82         MOV       DPL,R4
   \   000074   8D83         MOV       DPH,R5
   \   000076   E0           MOVX      A,@DPTR
   \   000077   6402         XRL       A,#0x2
   \   000079   7002         JNZ       ??zclKE_ParseInitiateCmd_6
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \                     ??zclKE_ParseInitiateCmd_6:
   \   00007D   7018         JNZ       ??zclKE_ParseInitiateCmd_0
   \   00007F   8A82         MOV       DPL,R2
   \   000081   8B83         MOV       DPH,R3
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   C3           CLR       C
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   944E         SUBB      A,#0x4e
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   9400         SUBB      A,#0x0
   \   000095   50D6         JNC       ??zclKE_ParseInitiateCmd_4
   \                     ??zclKE_ParseInitiateCmd_0:
   \   000097   7980         MOV       R1,#-0x80
   \   000099   80D4         SJMP      ??zclKE_ParseInitiateCmd_5
   1473          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   C3           CLR       C
   \   000018   E0           MOVX      A,@DPTR
   \   000019   9404         SUBB      A,#0x4
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   9400         SUBB      A,#0x0
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET
   1474          
   1475          /**************************************************************************************************
   1476           * @fn      zclKE_ParseEphDataCmd
   1477           *
   1478           * @brief   Parse command(ZCL_KE_EPH_DATA_REQ or ZCL_KE_EPH_DATA_RSP).
   1479           *
   1480           * @param   pInMsg - incoming message to process
   1481           * @param   pCmd - command payload
   1482           *
   1483           * @return  ZStatus_t - status
   1484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1485          static ZStatus_t zclKE_ParseEphDataCmd( uint16 suite,
   \                     zclKE_ParseEphDataCmd:
   1486                                                  zclIncoming_t *pInMsg, 
   1487                                                  zclKE_EphDataCmd_t *pCmd )
   1488          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   1489            // Check for minimum packet length
   1490            if ( pInMsg->pDataLen < zclKE_GetField( suite, ZCL_KE_PUBLIC_KEY_LEN ) )
   \   000009                ; Setup parameters for call to function zclKE_GetField
   \   000009   7903         MOV       R1,#0x3
   \   00000B   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00000E   8A..         MOV       ?V0,R2
   \   000010   8B..         MOV       ?V1,R3
   \   000012   A8..         MOV       R0,?V0
   \   000014   A9..         MOV       R1,?V1
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   C3           CLR       C
   \   000025   E0           MOVX      A,@DPTR
   \   000026   98           SUBB      A,R0
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   99           SUBB      A,R1
   \   00002A   5004         JNC       ??zclKE_ParseEphDataCmd_0
   1491            {
   1492              return ZCL_STATUS_MALFORMED_COMMAND;
   \   00002C   7980         MOV       R1,#-0x80
   \   00002E   801C         SJMP      ??zclKE_ParseEphDataCmd_1
   1493            }
   1494          
   1495            pCmd->pEphData = pInMsg->pData;
   \                     ??zclKE_ParseEphDataCmd_0:
   \   000030   8E82         MOV       DPL,R6
   \   000032   8F83         MOV       DPH,R7
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00003F   740A         MOV       A,#0xa
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000047   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   1496          
   1497            return ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_297:
   \   00004A   7900         MOV       R1,#0x0
   \                     ??zclKE_ParseEphDataCmd_1:
   \   00004C   02....       LJMP      ??Subroutine133_0 & 0xFFFF
   1498          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine125_0
   \   000001                ; // Fall through to label ??Subroutine125_0
   1499          
   1500          /**************************************************************************************************
   1501           * @fn      zclKE_ParseCfmKeyDataCmd
   1502           *
   1503           * @brief   Parse command(ZCL_KE_CFM_KEY_DATA_REQ or ZCL_KE_CFM_KEY_DATA_RSP).
   1504           *
   1505           * @param   pInMsg - incoming message to process
   1506           * @param   pCmd - command payload
   1507           *
   1508           * @return  ZStatus_t - status
   1509           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1510          static ZStatus_t zclKE_ParseCfmKeyDataCmd( zclIncoming_t *pInMsg, 
   \                     zclKE_ParseCfmKeyDataCmd:
   1511                                                     zclKE_CfmKeyDataCmd_t *pCmd )
   1512          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1513            // Check for minimum packet length
   1514            if ( pInMsg->pDataLen < ZCL_KE_MAC_LEN )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   C3           CLR       C
   \   000013   E0           MOVX      A,@DPTR
   \   000014   9410         SUBB      A,#0x10
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   9400         SUBB      A,#0x0
   \   00001A   5004         JNC       ??zclKE_ParseCfmKeyDataCmd_0
   1515            {
   1516              return ZCL_STATUS_MALFORMED_COMMAND;
   \   00001C   7980         MOV       R1,#-0x80
   \   00001E   8018         SJMP      ??zclKE_ParseCfmKeyDataCmd_1
   1517            }
   1518          
   1519            pCmd->pMAC = pInMsg->pData;
   \                     ??zclKE_ParseCfmKeyDataCmd_0:
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00002F   8C82         MOV       DPL,R4
   \   000031   8D83         MOV       DPH,R5
   \   000033   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   1520          
   1521            return ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_298:
   \   000036   7900         MOV       R1,#0x0
   \                     ??zclKE_ParseCfmKeyDataCmd_1:
   \   000038   80..         SJMP      ??Subroutine108_0
   1522          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1523          
   1524          /**************************************************************************************************
   1525           * @fn      zclKE_ParseTerminateCmd
   1526           *
   1527           * @brief   Parse command(ZCL_KE_TERMINATE_SERVER or ZCL_KE_TERMINATE_CLIENT).
   1528           *
   1529           * @param   pInMsg - incoming message to process
   1530           * @param   pCmd - command payload
   1531           *
   1532           * @return  ZStatus_t - status
   1533           */
   1534          static ZStatus_t zclKE_ParseTerminateCmd( zclIncoming_t *pInMsg, 
   1535                                                    zclKE_TerminateCmd_t *pCmd )
   1536          {
   1537            uint8 *pBuf = pInMsg->pData;
   1538          
   1539            // Check for minimum packet length
   1540            if ( pInMsg->pDataLen < ZCL_KE_TERMINATE_LEN )
   1541            {
   1542              return ZCL_STATUS_MALFORMED_COMMAND;
   1543            }
   1544          
   1545            pCmd->status = *pBuf++;
   1546            pCmd->waitTime = *pBuf++;
   1547            pCmd->suites = BUILD_UINT16( pBuf[0], pBuf[1] );
   1548            pBuf += 2;
   1549          
   1550            return ZCL_STATUS_SUCCESS;
   1551          }
   1552          
   1553          /**************************************************************************************************
   1554           * @fn      zclKE_SendInitiateCmd
   1555           *
   1556           * @brief   Send an initiate command.
   1557           *
   1558           * @param   pConn - client connection
   1559           * @param   cmdID - ZCL_KE_INITIATE_REQ or ZCL_KE_INITIATE_RSP
   1560           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1561           *
   1562           * @return  ZStatus_t
   1563           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1564          static ZStatus_t zclKE_SendInitiateCmd( zclKE_Conn_t *pConn, uint8 cmdID, uint8 direction )
   \                     zclKE_SendInitiateCmd:
   1565          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V1,R1
   \   00000B   8C..         MOV       ?V0,R4
   1566            ZStatus_t status;
   1567            uint8 *pCmdBuf;
   1568            uint16 cmdBufLen;
   1569            uint8 *pBuf;
   1570            uint16 certLen;
   1571          
   1572            // Get the cert length based on suite
   1573            certLen = zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN );
   \   00000D                ; Setup parameters for call to function zclKE_GetField
   \   00000D   7905         MOV       R1,#0x5
   \   00000F   8E82         MOV       DPL,R6
   \   000011   8F83         MOV       DPH,R7
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00001B   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00001E   8A..         MOV       ?V2,R2
   \   000020   8B..         MOV       ?V3,R3
   1574          
   1575            // Allocate command buffer
   1576            cmdBufLen = ZCL_KE_INITIATE_HDR_LEN + certLen;
   \   000022   EA           MOV       A,R2
   \   000023   2404         ADD       A,#0x4
   \   000025   F5..         MOV       ?V6,A
   \   000027   E4           CLR       A
   \   000028   35..         ADDC      A,?V3
   \   00002A   F5..         MOV       ?V7,A
   1577          
   1578            pCmdBuf = osal_mem_alloc( cmdBufLen );
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   AA..         MOV       R2,?V6
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000032   8A..         MOV       ?V4,R2
   \   000034   8B..         MOV       ?V5,R3
   1579            if ( pCmdBuf == NULL )
   \   000036   EA           MOV       A,R2
   \   000037   45..         ORL       A,?V5
   \   000039   7005         JNZ       ??zclKE_SendInitiateCmd_0
   1580            {
   1581              return ZMemError;
   \   00003B   7910         MOV       R1,#0x10
   \   00003D   02....       LJMP      ??zclKE_SendInitiateCmd_1 & 0xFFFF
   1582            }
   1583          
   1584            pBuf = pCmdBuf;
   1585            *pBuf++ = LO_UINT16( pConn->suite );
   \                     ??zclKE_SendInitiateCmd_0:
   \   000040   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000043   8A82         MOV       DPL,R2
   \   000045   8B83         MOV       DPH,R3
   \   000047   E0           MOVX      A,@DPTR
   \   000048   85..82       MOV       DPL,?V4
   \   00004B   85..83       MOV       DPH,?V5
   \   00004E   12....       LCALL     ?Subroutine100 & 0xFFFF
   1586            *pBuf++ = HI_UINT16( pConn->suite );
   \                     ??CrossCallReturnLabel_371:
   \   000051   E0           MOVX      A,@DPTR
   \   000052   85..82       MOV       DPL,?V4
   \   000055   85..83       MOV       DPH,?V5
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ?Subroutine56 & 0xFFFF
   1587            *pBuf++ = ZCL_KE_SERVER_EPH_DATA_GEN_TIME;
   \                     ??CrossCallReturnLabel_71:
   \   00005C   741E         MOV       A,#0x1e
   \   00005E   12....       LCALL     ?Subroutine56 & 0xFFFF
   1588            *pBuf++ = ZCL_KE_SERVER_CFM_KEY_GEN_TIME;
   \                     ??CrossCallReturnLabel_72:
   \   000061   A3           INC       DPTR
   \   000062   F0           MOVX      @DPTR,A
   1589          
   1590            // Get the certificate based on suite
   1591            status = osal_nv_read( zclKE_GetField( pConn->suite, ZCL_KE_CERT_NV_ID ), 
   1592                                   0, certLen, pBuf );
   \   000063                ; Setup parameters for call to function zclKE_GetField
   \   000063   7902         MOV       R1,#0x2
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00006C   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00006F                ; Setup parameters for call to function osal_nv_read
   \   00006F   E5..         MOV       A,?V4
   \   000071   2404         ADD       A,#0x4
   \   000073   F5..         MOV       ?V8,A
   \   000075   E4           CLR       A
   \   000076   12....       LCALL     ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   7C00         MOV       R4,#0x0
   \   000083   7D00         MOV       R5,#0x0
   \   000085   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000088   7404         MOV       A,#0x4
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   E9           MOV       A,R1
   \   00008E   F5..         MOV       ?V2,A
   1593            pBuf = pBuf + certLen;
   1594          
   1595            if ( status == SUCCESS )
   \   000090   7052         JNZ       ??zclKE_SendInitiateCmd_2
   1596            {
   1597              status = zcl_SendCommand( ZCL_KE_ENDPOINT, &pConn->partner,
   1598                                        ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1599                                        cmdID, TRUE, direction,
   1600                                        TRUE, 0, pConn->transSeqNum, cmdBufLen, pCmdBuf );
   \   000092                ; Setup parameters for call to function zcl_SendCommand
   \   000092   78..         MOV       R0,#?V4
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   78..         MOV       R0,#?V6
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   8E82         MOV       DPL,R6
   \   00009E   8F83         MOV       DPH,R7
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F5..         MOV       ?V2,A
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AA   E4           CLR       A
   \   0000AB   F5..         MOV       ?V2,A
   \   0000AD   F5..         MOV       ?V3,A
   \   0000AF   78..         MOV       R0,#?V2
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B4   75..01       MOV       ?V2,#0x1
   \   0000B7   78..         MOV       R0,#?V2
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   F5..         MOV       ?V2,A
   \   0000C0   78..         MOV       R0,#?V2
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C5   75..01       MOV       ?V2,#0x1
   \   0000C8   78..         MOV       R0,#?V2
   \   0000CA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CD   E5..         MOV       A,?V1
   \   0000CF   F5..         MOV       ?V2,A
   \   0000D1   78..         MOV       R0,#?V2
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D6   12....       LCALL     ?Subroutine75 & 0xFFFF
   1601            }
   \                     ??CrossCallReturnLabel_102:
   \   0000D9   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000DC   740B         MOV       A,#0xb
   \   0000DE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E1   E9           MOV       A,R1
   \   0000E2   F5..         MOV       ?V2,A
   1602          
   1603            osal_mem_free( pCmdBuf );
   \                     ??zclKE_SendInitiateCmd_2:
   \   0000E4                ; Setup parameters for call to function osal_mem_free
   \   0000E4   AA..         MOV       R2,?V4
   \   0000E6   AB..         MOV       R3,?V5
   \   0000E8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1604          
   1605            return status;
   \   0000EB   A9..         MOV       R1,?V2
   \                     ??zclKE_SendInitiateCmd_1:
   \   0000ED                REQUIRE ?Subroutine9
   \   0000ED                ; // Fall through to label ?Subroutine9
   1606          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D08         MOV       R5,#0x8
   \   000004   EE           MOV       A,R6
   \   000005   240F         ADD       A,#0xf
   \   000007   FA           MOV       R2,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   FB           MOV       R3,A
   \   00000B   790A         MOV       R1,#0xa
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   EE           MOV       A,R6
   \   000001   2405         ADD       A,#0x5
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   E8           MOV       A,R0
   \   000008   FA           MOV       R2,A
   \   000009   E9           MOV       A,R1
   \   00000A   FB           MOV       R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   35..         ADDC      A,?V5
   \   000002   F5..         MOV       ?V9,A
   \   000004   78..         MOV       R0,#?V8
   \   000006   22           RET
   1607          
   1608          /**************************************************************************************************
   1609           * @fn      zclKE_SendInitiateReq
   1610           *
   1611           * @brief   Send ZCL_KE_INITIATE_REQ.
   1612           *
   1613           * @param   pConn - client connection
   1614           *
   1615           * @return  ZStatus_t
   1616           */
   1617          static ZStatus_t zclKE_SendInitiateReq( zclKE_Conn_t *pConn )
   1618          {
   1619            return zclKE_SendInitiateCmd( pConn, ZCL_KE_INITIATE_REQ, ZCL_FRAME_CLIENT_SERVER_DIR );
   1620          }
   1621          
   1622          /**************************************************************************************************
   1623           * @fn      zclKE_SendInitiateRsp
   1624           *
   1625           * @brief   Send ZCL_KE_INITIATE_RSP.
   1626           *
   1627           * @param   pConn - client connection
   1628           *
   1629           * @return  ZStatus_t
   1630           */
   1631          static ZStatus_t zclKE_SendInitiateRsp( zclKE_Conn_t *pConn )
   1632          {
   1633            return zclKE_SendInitiateCmd( pConn, ZCL_KE_INITIATE_RSP, ZCL_FRAME_SERVER_CLIENT_DIR );
   1634          }
   1635          
   1636          /**************************************************************************************************
   1637           * @fn      zclKE_SendEphDataCmd
   1638           *
   1639           * @brief   Send an ephemeral data command.
   1640           *
   1641           * @param   pConn - client connection
   1642           * @param   cmdID - ZCL_KE_EPH_DATA_REQ or ZCL_KE_EPH_DATA_RSP
   1643           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1644           *
   1645           * @return  ZStatus_t
   1646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1647          static ZStatus_t zclKE_SendEphDataCmd( zclKE_Conn_t *pConn, uint8 cmdID, uint8 direction )
   \                     zclKE_SendEphDataCmd:
   1648          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
   \   00000B   8C..         MOV       ?V1,R4
   1649            ZStatus_t status;
   1650            uint8 *pCmdBuf;
   1651            uint16 cmdBufLen;
   1652          
   1653            // Set command buffer fields
   1654            cmdBufLen = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   1655            pCmdBuf = pConn->pEPublicKey;
   1656          
   1657            status = zcl_SendCommand( ZCL_KE_ENDPOINT, &pConn->partner,
   1658                                      ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1659                                      cmdID, TRUE, direction,
   1660                                      TRUE, 0, pConn->transSeqNum, cmdBufLen, pCmdBuf );
   1661          
   1662            return status;
   \   00000D                ; Setup parameters for call to function zcl_SendCommand
   \   00000D   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000013                ; Setup parameters for call to function zclKE_GetField
   \   000013   7903         MOV       R1,#0x3
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000021   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000024   8A..         MOV       ?V2,R2
   \   000026   8B..         MOV       ?V3,R3
   \   000028   78..         MOV       R0,#?V2
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F5..         MOV       ?V2,A
   \   000036   78..         MOV       R0,#?V2
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003B   E4           CLR       A
   \   00003C   F5..         MOV       ?V2,A
   \   00003E   F5..         MOV       ?V3,A
   \   000040   78..         MOV       R0,#?V2
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   75..01       MOV       ?V2,#0x1
   \   000048   78..         MOV       R0,#?V2
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004D   E5..         MOV       A,?V1
   \   00004F   F5..         MOV       ?V2,A
   \   000051   78..         MOV       R0,#?V2
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   75..01       MOV       ?V2,#0x1
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005E   E5..         MOV       A,?V0
   \   000060   F5..         MOV       ?V2,A
   \   000062   78..         MOV       R0,#?V2
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00006A   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00006D   740B         MOV       A,#0xb
   \   00006F   02....       LJMP      ?Subroutine11 & 0xFFFF
   1663          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   02....       LJMP      ??Subroutine109_0 & 0xFFFF
   1664          
   1665          /**************************************************************************************************
   1666           * @fn      zclKE_SendEphDatReq
   1667           *
   1668           * @brief   Send ZCL_KE_EPH_DATA_REQ.
   1669           *
   1670           * @param   pConn - client connection
   1671           *
   1672           * @return  ZStatus_t
   1673           */
   1674          static ZStatus_t zclKE_SendEphDatReq( zclKE_Conn_t *pConn )
   1675          {
   1676            return zclKE_SendEphDataCmd( pConn, ZCL_KE_EPH_DATA_REQ, ZCL_FRAME_CLIENT_SERVER_DIR );
   1677          }
   1678          
   1679          /**************************************************************************************************
   1680           * @fn      zclKE_SendEphDataRsp
   1681           *
   1682           * @brief   Send ZCL_KE_EPH_DATA_RSP.
   1683           *
   1684           * @param   pConn - client connection
   1685           *
   1686           * @return  ZStatus_t
   1687           */
   1688          static ZStatus_t zclKE_SendEphDataRsp( zclKE_Conn_t *pConn )
   1689          {
   1690            return zclKE_SendEphDataCmd( pConn, ZCL_KE_EPH_DATA_RSP, ZCL_FRAME_SERVER_CLIENT_DIR );
   1691          }
   1692          
   1693          /**************************************************************************************************
   1694           * @fn      zclKE_SendCfmKeyDataCmd
   1695           *
   1696           * @brief   Send an confirm key data command.
   1697           *
   1698           * @param   pConn - client connection
   1699           * @param   cmdID - ZCL_KE_CFM_KEY_DATA_REQ or ZCL_KE_CFM_KEY_DATA_RSP
   1700           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1701           * @param   pMAC - command payload
   1702           *
   1703           * @return  ZStatus_t
   1704           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1705          static ZStatus_t zclKE_SendCfmKeyDataCmd( zclKE_Conn_t *pConn, uint8 cmdID, 
   \                     zclKE_SendCfmKeyDataCmd:
   1706                                                    uint8 direction, uint8 *pMAC )
   1707          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EC           MOV       A,R4
   \   000008   FF           MOV       R7,A
   1708            ZStatus_t status;
   1709            uint8 *pCmdBuf;
   1710            uint16 cmdBufLen;
   1711          
   1712            // Set command buffer fields
   1713            cmdBufLen = ZCL_KE_MAC_LEN;
   1714            pCmdBuf = pMAC;
   1715          
   1716            status = zcl_SendCommand( ZCL_KE_ENDPOINT, &pConn->partner,
   1717                                      ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1718                                      cmdID, TRUE, direction,
   1719                                      TRUE, 0, pConn->transSeqNum, cmdBufLen, pCmdBuf );
   1720          
   1721            return status;
   \   000009                ; Setup parameters for call to function zcl_SendCommand
   \   000009   740A         MOV       A,#0xa
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000011   75..10       MOV       ?V0,#0x10
   \   000014   75..00       MOV       ?V1,#0x0
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V0,A
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002A   E4           CLR       A
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..01       MOV       ?V0,#0x1
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003A   EF           MOV       A,R7
   \   00003B   F5..         MOV       ?V0,A
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000042   75..01       MOV       ?V0,#0x1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004A   EE           MOV       A,R6
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000052   7C00         MOV       R4,#0x0
   \   000054   7D08         MOV       R5,#0x8
   \   000056   EA           MOV       A,R2
   \   000057   240F         ADD       A,#0xf
   \   000059   FA           MOV       R2,A
   \   00005A   5001         JNC       ??zclKE_SendCfmKeyDataCmd_0
   \   00005C   0B           INC       R3
   \                     ??zclKE_SendCfmKeyDataCmd_0:
   \   00005D   790A         MOV       R1,#0xa
   \   00005F   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000062   740B         MOV       A,#0xb
   \   000064   02....       LJMP      ??Subroutine132_0 & 0xFFFF
   1722          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine133_0
   \   000003                ; // Fall through to label ??Subroutine133_0
   1723          
   1724          /**************************************************************************************************
   1725           * @fn      zclKE_SendCfmKeyDataReq
   1726           *
   1727           * @brief   Send ZCL_KE_CFM_KEY_DATA_REQ.
   1728           *
   1729           * @param   pConn - client connection
   1730           * @param   pMAC - command payload
   1731           *
   1732           * @return  ZStatus_t
   1733           */
   1734          static ZStatus_t zclKE_SendCfmKeyDataReq( zclKE_Conn_t *pConn, uint8 *pMAC )
   1735          {
   1736            return zclKE_SendCfmKeyDataCmd( pConn, ZCL_KE_CFM_KEY_DATA_REQ,
   1737                                            ZCL_FRAME_CLIENT_SERVER_DIR, pMAC );
   1738          }
   1739          
   1740          /**************************************************************************************************
   1741           * @fn      zclKE_SendCfmKeyDataRsp
   1742           *
   1743           * @brief   Send ZCL_KE_CFM_KEY_DATA_RSP.
   1744           *
   1745           * @param   pConn - client connection
   1746           * @param   pMAC - command payload
   1747           *
   1748           * @return  ZStatus_t
   1749           */
   1750          static ZStatus_t zclKE_SendCfmKeyDataRsp( zclKE_Conn_t *pConn, uint8 *pMAC )
   1751          {
   1752            return zclKE_SendCfmKeyDataCmd( pConn, ZCL_KE_CFM_KEY_DATA_RSP,
   1753                                            ZCL_FRAME_SERVER_CLIENT_DIR, pMAC );
   1754          }
   1755          
   1756          /**************************************************************************************************
   1757           * @fn      zclKE_SendTerminate
   1758           *
   1759           * @brief   Send a terminate command.
   1760           *
   1761           * @param   dstAddr - destination address
   1762           * @param   cmdID - ZCL_KE_TERMINATE_CLIENT or ZCL_KE_TERMINATE_SERVER
   1763           * @param   direction - ZCL_FRAME_SERVER_CLIENT_DIR or ZCL_FRAME_CLIENT_SERVER_DIR
   1764           * @param   seqNum - transaction sequence number
   1765           * @param   pCmd - command payload
   1766           *
   1767           * @return  void
   1768           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1769          static void zclKE_SendTerminate( afAddrType_t *dstAddr, uint8 cmdID, 
   \                     zclKE_SendTerminate:
   1770                                           uint8 direction, uint8 seqNum,
   1771                                           zclKE_TerminateCmd_t *pCmd   )
   1772          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FF           MOV       R7,A
   \   00000E   7410         MOV       A,#0x10
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   12....       LCALL     ?Subroutine19 & 0xFFFF
   1773            uint8 cmdBuf[ZCL_KE_TERMINATE_LEN];
   1774            uint8 *pBuf = cmdBuf;
   1775          
   1776            *pBuf++ = pCmd->status;
   \                     ??CrossCallReturnLabel_2:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   85..82       MOV       DPL,?XSP + 0
   \   00001A   85..83       MOV       DPH,?XSP + 1
   \   00001D   12....       LCALL     ?Subroutine46 & 0xFFFF
   1777            *pBuf++ = pCmd->waitTime;
   \                     ??CrossCallReturnLabel_50:
   \   000020   C0E0         PUSH      A
   \   000022   7401         MOV       A,#0x1
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   F0           MOVX      @DPTR,A
   1778            *pBuf++ = LO_UINT16( pCmd->suites );
   \   00002A   E8           MOV       A,R0
   \   00002B   2402         ADD       A,#0x2
   \   00002D   F8           MOV       R0,A
   \   00002E   5001         JNC       ??zclKE_SendTerminate_0
   \   000030   09           INC       R1
   \                     ??zclKE_SendTerminate_0:
   \   000031   8882         MOV       DPL,R0
   \   000033   8983         MOV       DPH,R1
   \   000035   E0           MOVX      A,@DPTR
   \   000036   C0E0         PUSH      A
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   D0E0         POP       A
   \   00003F   12....       LCALL     ?Subroutine46 & 0xFFFF
   1779            *pBuf++ = HI_UINT16( pCmd->suites );
   \                     ??CrossCallReturnLabel_51:
   \   000042   C0E0         PUSH      A
   \   000044   7403         MOV       A,#0x3
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   D0E0         POP       A
   \   00004B   F0           MOVX      @DPTR,A
   1780          
   1781            zcl_SendCommand( ZCL_KE_ENDPOINT, dstAddr, ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   1782                             cmdID, TRUE, direction, TRUE, 0, seqNum, ZCL_KE_TERMINATE_LEN,
   1783                             cmdBuf );
   \   00004C                ; Setup parameters for call to function zcl_SendCommand
   \   00004C   A8..         MOV       R0,?XSP + 0
   \   00004E   A9..         MOV       R1,?XSP + 1
   \   000050   88..         MOV       ?V2,R0
   \   000052   89..         MOV       ?V3,R1
   \   000054   78..         MOV       R0,#?V2
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   75..04       MOV       ?V2,#0x4
   \   00005C   75..00       MOV       ?V3,#0x0
   \   00005F   78..         MOV       R0,#?V2
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   ED           MOV       A,R5
   \   000065   F5..         MOV       ?V1,A
   \   000067   78..         MOV       R0,#?V1
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   E4           CLR       A
   \   00006D   F5..         MOV       ?V2,A
   \   00006F   78..         MOV       R0,#?V2
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   75..01       MOV       ?V1,#0x1
   \   000077   78..         MOV       R0,#?V1
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007C   EF           MOV       A,R7
   \   00007D   F5..         MOV       ?V1,A
   \   00007F   78..         MOV       R0,#?V1
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000084   75..01       MOV       ?V1,#0x1
   \   000087   78..         MOV       R0,#?V1
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008C   EE           MOV       A,R6
   \   00008D   F5..         MOV       ?V1,A
   \   00008F   78..         MOV       R0,#?V1
   \   000091   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000094   7C00         MOV       R4,#0x0
   \   000096   7D08         MOV       R5,#0x8
   \   000098   790A         MOV       R1,#0xa
   \   00009A   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00009D   740B         MOV       A,#0xb
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
   1784          }
   \   0000A2   7404         MOV       A,#0x4
   \   0000A4   02....       LJMP      ?Subroutine11 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   22           RET
   1785          
   1786          /**************************************************************************************************
   1787           * @fn      zclKE_ServerInit
   1788           *
   1789           * @brief   Initialize server side.
   1790           *
   1791           * @param   none
   1792           *
   1793           * @return  void
   1794           */
   1795          static void zclKE_ServerInit( void )
   1796          {
   1797            uint8 max = ZCL_KE_MAX_SERVER_CONNECTIONS;  
   1798          
   1799            osal_nv_item_init( ZCD_NV_KE_MAX_DEVICES, 
   1800                               sizeof(uint8),
   1801                               &max );
   1802          }
   1803          
   1804          /**************************************************************************************************
   1805           * @fn      zclKE_ServerConnMax
   1806           *
   1807           * @brief   Check for maximum server connections.
   1808           *
   1809           * @param   none
   1810           *
   1811           * @return  uint8 - TRUE if maximum reached, FALSE if not
   1812           */
   1813          #if defined ( ZDO_COORDINATOR )
   1814          static uint8 zclKE_ServerConnMax( void )
   1815          {
   1816            // Assume maximum connections
   1817            uint8 result = TRUE;
   1818            uint8 max;
   1819          
   1820            // Set the maximum to zero in case NV read fails
   1821            max = 0;
   1822          
   1823            // Get the maximum number of connections
   1824            osal_nv_read( ZCD_NV_KE_MAX_DEVICES, 0, sizeof(uint8), &max );
   1825          
   1826            if ( max )
   1827            {
   1828              uint8 active = 0;
   1829              zclKE_Conn_t *pConn = zclKE_ServerConnList;
   1830          
   1831              // Count the active connections
   1832              while ( pConn )
   1833              {
   1834                active++;
   1835                pConn = pConn->pNext;
   1836              }
   1837          
   1838              // Are the active connections less than the maximum
   1839              if ( active < max )
   1840              {
   1841                // Connections are not at maximum
   1842                result = FALSE;
   1843              }
   1844            }
   1845          
   1846            return result;
   1847          }
   1848          #else
   1849          static uint8 zclKE_ServerConnMax( void )
   1850          {
   1851            uint8 result;
   1852          
   1853            // Only allow one connection for non Trust Center devices
   1854            if ( zclKE_ServerConnList )
   1855            {
   1856              result = TRUE;  
   1857            }
   1858            else
   1859            {
   1860              result = FALSE;  
   1861            }
   1862          
   1863            return result;
   1864          }
   1865          #endif // ZDO_COORDINATOR
   1866          
   1867          /**************************************************************************************************
   1868           * @fn      zclKE_ServerConnAllowed
   1869           *
   1870           * @brief   Check if server connection is allowed.
   1871           *
   1872           * @param   partnerAddr - partner network address
   1873           *
   1874           * @return  uint8 - TRUE if allowed, FALSE if not
   1875           */
   1876          static uint8 zclKE_ServerConnAllowed( uint16 partnerAddr )
   1877          {
   1878            uint8 allowed;
   1879          
   1880            // 1) Server must be ready
   1881            // 2) Only allow server connections when there are no active client connections.
   1882            // 3) Check for maximum server connections.
   1883            // 4) Only allow connections to the Trust Center (or from the Trust Center). 
   1884            if ( ( zclKE_State == ZCL_KE_READY                             ) &&
   1885                 ( !zclKE_ClientConnList                                   ) &&
   1886                 ( !zclKE_ServerConnMax()                                  ) &&
   1887                 ( ( NLME_GetShortAddr() == APSME_TRUSTCENTER_NWKADDR ) ||
   1888                   ( partnerAddr == APSME_TRUSTCENTER_NWKADDR         )    )    )
   1889            {
   1890              allowed = TRUE;
   1891            }
   1892            else
   1893            {
   1894              allowed = FALSE;
   1895            }
   1896          
   1897            return allowed;
   1898          }
   1899          
   1900          /**************************************************************************************************
   1901           * @fn      zclKE_ServerConnCreate
   1902           *
   1903           * @brief   Create a new server connection.
   1904           *
   1905           * @param   pPartner - partner address
   1906           *
   1907           * @return  zclKE_Conn_t* - pointer to new connection, NULL if failure
   1908           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1909          static zclKE_Conn_t *zclKE_ServerConnCreate( afAddrType_t *pPartner )
   \                     zclKE_ServerConnCreate:
   1910          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1911            zclKE_Conn_t *pNewConn = NULL;
   \   000009   75..00       MOV       ?V0,#0x0
   \   00000C   75..00       MOV       ?V1,#0x0
   1912            
   1913            // Check for legal connections 
   1914            if ( zclKE_ServerConnAllowed( pPartner->addr.shortAddr ) )
   \   00000F   8E82         MOV       DPL,R6
   \   000011   8F83         MOV       DPH,R7
   \   000013   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000016   90....       MOV       DPTR,#zclKE_State
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6401         XRL       A,#0x1
   \   00001C   7062         JNZ       ??zclKE_ServerConnCreate_0
   \   00001E   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000021   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000024   705A         JNZ       ??zclKE_ServerConnCreate_0
   \   000026   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000029   7055         JNZ       ??zclKE_ServerConnCreate_0
   \   00002B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002B   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00002E   8B..         MOV       ?V5,R3
   \   000030   EA           MOV       A,R2
   \   000031   45..         ORL       A,?V5
   \   000033   6006         JZ        ??zclKE_ServerConnCreate_1
   \   000035   E5..         MOV       A,?V2
   \   000037   45..         ORL       A,?V3
   \   000039   7045         JNZ       ??zclKE_ServerConnCreate_0
   1915            {
   1916              // Add a new connection
   1917              pNewConn = osal_mem_alloc( sizeof( zclKE_Conn_t ) );
   \                     ??zclKE_ServerConnCreate_1:
   \   00003B                ; Setup parameters for call to function osal_mem_alloc
   \   00003B   7A29         MOV       R2,#0x29
   \   00003D   7B00         MOV       R3,#0x0
   \   00003F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000042   8A..         MOV       ?V0,R2
   \   000044   8B..         MOV       ?V1,R3
   1918          
   1919              if ( pNewConn )
   \   000046   EA           MOV       A,R2
   \   000047   45..         ORL       A,?V1
   \   000049   6035         JZ        ??zclKE_ServerConnCreate_0
   1920              {
   1921                // Initialize the connnection
   1922                osal_memset( pNewConn, 0, sizeof( zclKE_Conn_t ) );
   \   00004B                ; Setup parameters for call to function osal_memset
   \   00004B   7C29         MOV       R4,#0x29
   \   00004D   7D00         MOV       R5,#0x0
   \   00004F   7900         MOV       R1,#0x0
   \   000051   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1923                pNewConn->partner = *pPartner;
   \   000054   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000057   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1924          
   1925                // Add to server connection list
   1926                if ( zclKE_ServerConnList )
   \   00005A   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00005D   6015         JZ        ??zclKE_ServerConnCreate_2
   1927                {
   1928                  zclKE_Conn_t *pConn = zclKE_ServerConnList;
   \   00005F   8003         SJMP      ??CrossCallReturnLabel_288
   1929          
   1930                  while ( pConn->pNext )
   1931                  {
   1932                    pConn = pConn->pNext;
   \                     ??zclKE_ServerConnCreate_3:
   \   000061   12....       LCALL     ?Subroutine31 & 0xFFFF
   1933                  }
   \                     ??CrossCallReturnLabel_288:
   \   000064   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000067   39           ADDC      A,R1
   \   000068   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00006B   EA           MOV       A,R2
   \   00006C   4B           ORL       A,R3
   \   00006D   70F2         JNZ       ??zclKE_ServerConnCreate_3
   1934          
   1935                  pConn->pNext = pNewConn;
   \   00006F   12....       LCALL     ?Subroutine76 & 0xFFFF
   1936                }
   \                     ??CrossCallReturnLabel_104:
   \   000072   8003         SJMP      ??zclKE_ServerConnCreate_4
   1937                else
   1938                {
   1939                  zclKE_ServerConnList = pNewConn;
   \                     ??zclKE_ServerConnCreate_2:
   \   000074   90....       MOV       DPTR,#zclKE_ServerConnList
   \                     ??zclKE_ServerConnCreate_4:
   \   000077   E5..         MOV       A,?V0
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   A3           INC       DPTR
   \   00007B   E5..         MOV       A,?V1
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   8005         SJMP      ??zclKE_ServerConnCreate_5
   1940                }
   1941              }
   1942            }
   1943          
   1944          #if defined( NWK_AUTO_POLL )
   1945            // If connections, set the poll rate
   1946            if ( zclKE_ServerConnList )
   \                     ??zclKE_ServerConnCreate_0:
   \   000080   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000083   6005         JZ        ??zclKE_ServerConnCreate_6
   1947            {
   1948              zclKE_SetPollRate( ZCL_KE_SERVER_POLL_RATE_BIT );
   \                     ??zclKE_ServerConnCreate_5:
   \   000085                ; Setup parameters for call to function zclKE_SetPollRate
   \   000085   7902         MOV       R1,#0x2
   \   000087   12....       LCALL     `??zclKE_SetPollRate::?relay`; Banked call to: zclKE_SetPollRate
   1949            }
   1950          #endif
   1951          
   1952            return pNewConn;
   \                     ??zclKE_ServerConnCreate_6:
   \   00008A   AA..         MOV       R2,?V0
   \   00008C   AB..         MOV       R3,?V1
   \   00008E   02....       LJMP      ?Subroutine3 & 0xFFFF
   1953          } 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine110_0
   \   000001                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   2427         ADD       A,#0x27
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   39           ADDC      A,R1
   \   000004   F583         MOV       DPH,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E5..         MOV       A,?V0
   \   000006   240F         ADD       A,#0xf
   \   000008   FC           MOV       R4,A
   \   000009   E4           CLR       A
   \   00000A   35..         ADDC      A,?V1
   \   00000C   FD           MOV       R5,A
   \   00000D   740C         MOV       A,#0xc
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003                REQUIRE ??Subroutine122_0
   \   000003                ; // Fall through to label ??Subroutine122_0
   1954          
   1955          /**************************************************************************************************
   1956           * @fn      zclKE_ServerConnClose
   1957           *
   1958           * @brief   Close an existing server connection.
   1959           *
   1960           * @param   pConn - client connection
   1961           *
   1962           * @return  void
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          static void zclKE_ServerConnClose( zclKE_Conn_t *pConn )
   \                     zclKE_ServerConnClose:
   1965          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1966            zclKE_Conn_t *pCurrent = zclKE_ServerConnList;
   \   000004   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000007   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   1967            zclKE_Conn_t *pPrevious = NULL;
   \                     ??CrossCallReturnLabel_281:
   \   00000A   7C00         MOV       R4,#0x0
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   8007         SJMP      ??CrossCallReturnLabel_289
   1968          
   1969            // Search for connection
   1970            while ( pCurrent )
   1971            {
   1972              // Is this the connection
   1973              if ( pCurrent == pConn )
   1974              {
   1975                // Remove from list
   1976                if ( pPrevious )
   1977                {
   1978                  pPrevious->pNext = pCurrent->pNext;
   1979                }
   1980                else
   1981                {
   1982                  zclKE_ServerConnList = pCurrent->pNext;
   1983                }  
   1984          
   1985                // Release connection memory
   1986                zclKE_ConnRelease( pConn );
   1987          
   1988                break;
   1989              }
   1990              
   1991              // Save the current connection
   1992              pPrevious = pCurrent;
   \                     ??zclKE_ServerConnClose_0:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1993          
   1994              // Advance to the next connection
   1995              pCurrent = pCurrent->pNext;
   \   000014   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000017   E8           MOV       A,R0
   \   000018   49           ORL       A,R1
   \   000019   6024         JZ        ??zclKE_ServerConnClose_1
   \   00001B   EA           MOV       A,R2
   \   00001C   68           XRL       A,R0
   \   00001D   7002         JNZ       ??zclKE_ServerConnClose_2
   \   00001F   EB           MOV       A,R3
   \   000020   69           XRL       A,R1
   \                     ??zclKE_ServerConnClose_2:
   \   000021   70ED         JNZ       ??zclKE_ServerConnClose_0
   \   000023   EC           MOV       A,R4
   \   000024   4D           ORL       A,R5
   \   000025   600C         JZ        ??zclKE_ServerConnClose_3
   \   000027   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   00002A   EC           MOV       A,R4
   \   00002B   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00002E   3D           ADDC      A,R5
   \   00002F   F583         MOV       DPH,A
   \   000031   8006         SJMP      ??zclKE_ServerConnClose_4
   \                     ??zclKE_ServerConnClose_3:
   \   000033   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000036   90....       MOV       DPTR,#zclKE_ServerConnList
   \                     ??zclKE_ServerConnClose_4:
   \   000039   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00003C                ; Setup parameters for call to function zclKE_ConnRelease
   \   00003C   12....       LCALL     `??zclKE_ConnRelease::?relay`; Banked call to: zclKE_ConnRelease
   1996            }
   1997          
   1998          #if defined( NWK_AUTO_POLL )
   1999            // If no connections, restore poll rate
   2000            if ( !zclKE_ServerConnList )
   \                     ??zclKE_ServerConnClose_1:
   \   00003F   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000042   7005         JNZ       ??zclKE_ServerConnClose_5
   2001            {
   2002              zclKE_RestorePollRate( ZCL_KE_SERVER_POLL_RATE_BIT );
   \   000044                ; Setup parameters for call to function zclKE_RestorePollRate
   \   000044   7902         MOV       R1,#0x2
   \   000046   12....       LCALL     `??zclKE_RestorePollRate::?relay`; Banked call to: zclKE_RestorePollRate
   2003            }
   2004          #endif
   2005          }
   \                     ??zclKE_ServerConnClose_5:
   \   000049   02....       LJMP      ??Subroutine108_0 & 0xFFFF
   2006          
   2007          /**************************************************************************************************
   2008           * @fn      zclKE_ServerConnFind
   2009           *
   2010           * @brief   Find a server connection by partnerAddr.
   2011           *
   2012           * @param   partnerAddr - partner network address
   2013           *
   2014           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   E9           MOV       A,R1
   \   000003   FB           MOV       R3,A
   \   000004                REQUIRE ??Subroutine108_0
   \   000004                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2016          static zclKE_Conn_t *zclKE_ServerConnFind( uint16 partnerAddr )
   \                     zclKE_ServerConnFind:
   2017          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2018            zclKE_Conn_t *pConn;
   2019          
   2020            pConn = zclKE_ServerConnList;
   \   000004   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000007   8003         SJMP      ??CrossCallReturnLabel_105
   2021          
   2022            while ( pConn )
   2023            {
   2024              if ( pConn->partner.addr.shortAddr == partnerAddr )
   2025              {
   2026                break;
   2027              }
   2028          
   2029              pConn = pConn->pNext;
   \                     ??zclKE_ServerConnFind_0:
   \   000009   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00000C   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00000F   600A         JZ        ??zclKE_ServerConnFind_1
   \   000011   12....       LCALL     ?Subroutine70 & 0xFFFF
   2030            }
   \                     ??CrossCallReturnLabel_96:
   \   000014   7003         JNZ       ??zclKE_ServerConnFind_2
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6B           XRL       A,R3
   \                     ??zclKE_ServerConnFind_2:
   \   000019   70EE         JNZ       ??zclKE_ServerConnFind_0
   2031          
   2032            return pConn;
   \                     ??zclKE_ServerConnFind_1:
   \   00001B   02....       LJMP      ?Subroutine8 & 0xFFFF
   2033          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6A           XRL       A,R2
   \   000009   22           RET
   2034          
   2035          /**************************************************************************************************
   2036           * @fn      zclKE_ServerConnLookup
   2037           *
   2038           * @brief   Lookup an expected server connection including end point.
   2039           *
   2040           * @param   pPartner - partner address
   2041           *
   2042           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2043           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2044          static zclKE_Conn_t *zclKE_ServerConnLookup( afAddrType_t *pPartner )
   \                     zclKE_ServerConnLookup:
   2045          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2046            zclKE_Conn_t *pConn = NULL;
   2047          
   2048            pConn = zclKE_ServerConnFind( pPartner->addr.shortAddr );
   \   000009                ; Setup parameters for call to function zclKE_ServerConnFind
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000010   12....       LCALL     `??zclKE_ServerConnFind::?relay`; Banked call to: zclKE_ServerConnFind
   2049          
   2050            // Check if connection was found and verify end point
   2051            if ( pConn && ( pConn->partner.endPoint != pPartner->endPoint ) )
   \   000013   EA           MOV       A,R2
   \   000014   4B           ORL       A,R3
   \   000015   6009         JZ        ??zclKE_ServerConnLookup_0
   \   000017   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00001A   6004         JZ        ??zclKE_ServerConnLookup_0
   2052            {
   2053              // End points do not match return NULL
   2054              pConn = NULL;
   \   00001C   7A00         MOV       R2,#0x0
   \   00001E   7B00         MOV       R3,#0x0
   2055            }
   2056          
   2057            return pConn;
   \                     ??zclKE_ServerConnLookup_0:
   \   000020   02....       LJMP      ??Subroutine133_0 & 0xFFFF
   2058          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EA           MOV       A,R2
   \   000001   2418         ADD       A,#0x18
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F8           MOV       R0,A
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   68           XRL       A,R0
   \   00001A   22           RET
   2059          
   2060          /**************************************************************************************************
   2061           * @fn      zclKE_ServerConnGet
   2062           *
   2063           * @brief   Get an existing connection or create a new one.
   2064           *
   2065           * @param   pPartner - partner address
   2066           *
   2067           * @return  zclKE_Conn_t* - pointer to connection, NULL if not available
   2068           */
   2069          static zclKE_Conn_t *zclKE_ServerConnGet( afAddrType_t *pPartner )
   2070          {
   2071            zclKE_Conn_t *pConn = NULL;
   2072           
   2073            // Check for current connection
   2074            pConn = zclKE_ServerConnFind( pPartner->addr.shortAddr );
   2075          
   2076            if ( !pConn )
   2077            {
   2078              // Create a new connection
   2079              pConn = zclKE_ServerConnCreate( pPartner ); 
   2080            }
   2081            else
   2082            {
   2083              // Connection already open, verify end point
   2084              if ( pConn->partner.endPoint != pPartner->endPoint )
   2085              {
   2086                // Connection has different end point, return NULL
   2087                pConn = NULL;
   2088              }
   2089            }
   2090          
   2091            return pConn;
   2092          }
   2093          
   2094          /**************************************************************************************************
   2095           * @fn      zclKE_ServerConnTerminate
   2096           *
   2097           * @brief   Terminate server connection.
   2098           *
   2099           * @param   pCtxt - connection context
   2100           *
   2101           * @return  void
   2102           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2103          static void zclKE_ServerConnTerminate( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ServerConnTerminate:
   2104          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2105            zclKE_TerminateCmd_t cmd;
   2106          
   2107            cmd.status = pCtxt->error;
   \   00000A   12....       LCALL     ?Subroutine26 & 0xFFFF
   2108            cmd.suites = zclKE_SupportedSuites;
   \                     ??CrossCallReturnLabel_22:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   2109            cmd.waitTime = 2 * ( ZCL_KE_SERVER_EPH_DATA_GEN_TIME + ZCL_KE_SERVER_CFM_KEY_GEN_TIME );
   \                     ??CrossCallReturnLabel_300:
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine59 & 0xFFFF
   2110          
   2111            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_77:
   \   00001B   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00001E   602D         JZ        ??zclKE_ServerConnTerminate_0
   2112            {
   2113              zclKE_SendTerminate( &pCtxt->pConn->partner,
   2114                                   ZCL_KE_TERMINATE_CLIENT,
   2115                                   ZCL_FRAME_SERVER_CLIENT_DIR,
   2116                                   pCtxt->pConn->transSeqNum,
   2117                                   &cmd );
   \   000020   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FD           MOV       R5,A
   \   00002E   7C01         MOV       R4,#0x1
   \   000030   7903         MOV       R1,#0x3
   \   000032   EA           MOV       A,R2
   \   000033   240F         ADD       A,#0xf
   \   000035   FA           MOV       R2,A
   \   000036   5001         JNC       ??zclKE_ServerConnTerminate_1
   \   000038   0B           INC       R3
   \                     ??zclKE_ServerConnTerminate_1:
   \   000039   12....       LCALL     `??zclKE_SendTerminate::?relay`; Banked call to: zclKE_SendTerminate
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   2118          
   2119              zclKE_ServerConnClose( pCtxt->pConn );      
   \   000041                ; Setup parameters for call to function zclKE_ServerConnClose
   \   000041   8E82         MOV       DPL,R6
   \   000043   8F83         MOV       DPH,R7
   \   000045   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   2120            }
   \                     ??CrossCallReturnLabel_221:
   \   000048   12....       LCALL     `??zclKE_ServerConnClose::?relay`; Banked call to: zclKE_ServerConnClose
   \   00004B   803A         SJMP      ??zclKE_ServerConnTerminate_2
   2121            else if ( pCtxt->pInMsg )
   \                     ??zclKE_ServerConnTerminate_0:
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000055   6030         JZ        ??zclKE_ServerConnTerminate_2
   2122            {
   2123              zclKE_SendTerminate( &pCtxt->pInMsg->msg->srcAddr,
   2124                                   ZCL_KE_TERMINATE_CLIENT,
   2125                                   ZCL_FRAME_SERVER_CLIENT_DIR,
   2126                                   pCtxt->pInMsg->hdr.transSeqNum,
   2127                                   &cmd );
   \   000057   E8           MOV       A,R0
   \   000058   FA           MOV       R2,A
   \   000059   E9           MOV       A,R1
   \   00005A   FB           MOV       R3,A
   \   00005B                ; Setup parameters for call to function zclKE_SendTerminate
   \   00005B   A8..         MOV       R0,?XSP + 0
   \   00005D   A9..         MOV       R1,?XSP + 1
   \   00005F   88..         MOV       ?V0,R0
   \   000061   89..         MOV       ?V1,R1
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   8A82         MOV       DPL,R2
   \   00006A   8B83         MOV       DPH,R3
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   FD           MOV       R5,A
   \   000074   7C01         MOV       R4,#0x1
   \   000076   7903         MOV       R1,#0x3
   \   000078   8A82         MOV       DPL,R2
   \   00007A   8B83         MOV       DPH,R3
   \   00007C   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   2128            }
   \                     ??CrossCallReturnLabel_320:
   \   00007F   12....       LCALL     `??zclKE_SendTerminate::?relay`; Banked call to: zclKE_SendTerminate
   \   000082   7402         MOV       A,#0x2
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   2129          }
   \                     ??zclKE_ServerConnTerminate_2:
   \   000087   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   7478         MOV       A,#0x78
   \   000002   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E0           MOVX      A,@DPTR
   \   000005   85..82       MOV       DPL,?XSP + 0
   \   000008   85..83       MOV       DPH,?XSP + 1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   00000F   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000012   7402         MOV       A,#0x2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EA           MOV       A,R2
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   E8           MOV       A,R0
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000012   E8           MOV       A,R0
   \   000013   FA           MOV       R2,A
   \   000014   E9           MOV       A,R1
   \   000015   FB           MOV       R3,A
   \   000016                ; Setup parameters for call to function zclKE_SendTerminate
   \   000016                ; Setup parameters for call to function zclKE_SendTerminate
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   78..         MOV       R0,#?V0
   \   000020   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine132_0
   \   000002                ; // Fall through to label ??Subroutine132_0
   2130          
   2131          /**************************************************************************************************
   2132           * @fn      zclKE_ServerConnKeyGenTimeout
   2133           *
   2134           * @brief   Timeout triggers send of ZCL_KE_KEY_GEN_MSG(see ZCL_KE_KEY_GEN_STAGES_SERVER).
   2135           *
   2136           * @param   pConn - connection
   2137           *
   2138           * @return  void
   2139           */
   2140          static void zclKE_ServerConnKeyGenTimeout( zclKE_Conn_t *pConn )
   2141          {
   2142            zclKE_KeyGenMsg_t *pMsg;
   2143          
   2144            // Queue the key generate message
   2145            pMsg = (zclKE_KeyGenMsg_t *) osal_msg_allocate( sizeof( zclKE_KeyGenMsg_t ) );
   2146          
   2147            if (pMsg)
   2148            {
   2149              // Send key generate message
   2150              pMsg->hdr.event = ZCL_KE_KEY_GEN_MSG;
   2151              pMsg->hdr.status = 0;
   2152              pMsg->server = TRUE;
   2153              pMsg->partnerAddr = pConn->partner.addr.shortAddr;
   2154              osal_msg_send( zclKE_TaskID, (uint8 *)pMsg ) ;
   2155          
   2156              // Change state
   2157              pConn->state = ZCL_KE_SERVER_CONN_KEY_GEN_QUEUED;
   2158            }
   2159            else
   2160            {
   2161              // Terminate the connection
   2162              zclKE_ConnCtxt_t ctxt;
   2163              ctxt.pInMsg = NULL;
   2164              ctxt.pConn = pConn;
   2165              ctxt.error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2166              zclKE_ServerConnTerminate( &ctxt );
   2167            }
   2168          }
   2169          
   2170          /**************************************************************************************************
   2171           * @fn      zclKE_ServerConnTimeout
   2172           *
   2173           * @brief   Server connection timeout.
   2174           *
   2175           * @param   pConn - connection
   2176           *
   2177           * @return  void
   2178           */
   2179          static void zclKE_ServerConnTimeout( zclKE_Conn_t *pConn )
   2180          {
   2181            // Clear timer info
   2182            pConn->timeout = 0;
   2183          
   2184            switch ( pConn->state )
   2185            {
   2186              case ZCL_KE_SERVER_CONN_KEY_GEN_WAIT:
   2187                zclKE_ServerConnKeyGenTimeout( pConn );
   2188                break;
   2189          
   2190              default:
   2191                zclKE_ServerConnClose( pConn ); 
   2192                break;
   2193            }
   2194          }
   2195          
   2196          /**************************************************************************************************
   2197           * @fn      zclKE_ServerProcessInitiateReq
   2198           *
   2199           * @brief   Process ZCL_KE_INITIATE_REQ.
   2200           *
   2201           * @param   pCtxt - connection context
   2202           * @param   pCmd - command payload
   2203           *
   2204           * @return  void
   2205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2206          static void zclKE_ServerProcessInitiateReq( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_ServerProcessInitiateReq:
   2207                                                      zclKE_InitiateCmd_t *pCmd )
   2208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine37 & 0xFFFF
   2209            uint16 len;
   2210            zclKE_Conn_t *pConn = pCtxt->pConn;
   2211          
   2212            if ( !zclKE_InitiateCmdCheckFields( pCtxt, pCmd ) )
   \                     ??CrossCallReturnLabel_358:
   \   000008                ; Setup parameters for call to function zclKE_InitiateCmdCheckFields
   \   000008   12....       LCALL     `??zclKE_InitiateCmdCheckFields::?relay`; Banked call to: zclKE_InitiateCmdCheckFields
   \   00000B   E9           MOV       A,R1
   \   00000C   7003         JNZ       $+5
   \   00000E   02....       LJMP      ??zclKE_ServerProcessInitiateReq_0 & 0xFFFF
   2213            {
   2214              // pCtxt->error set in "zclKE_InitiateCmdCheckFields"
   2215              return;
   2216            }
   2217          
   2218            // Finish setting up connection fields
   2219            pConn->suite = pCmd->suite;
   \   000011   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000014   85..82       MOV       DPL,?V2
   \   000017   85..83       MOV       DPH,?V3
   \   00001A   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00001D   12....       LCALL     ?Subroutine50 & 0xFFFF
   2220            pConn->rmtEphDataGenTime = pCmd->ephDataGenTime;
   \                     ??CrossCallReturnLabel_307:
   \   000020   85..82       MOV       DPL,?V2
   \   000023   85..83       MOV       DPH,?V3
   \   000026   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000029   12....       LCALL     ?Subroutine58 & 0xFFFF
   2221            pConn->rmtCfmKeyGenTime = pCmd->cfmKeyGenTime;
   \                     ??CrossCallReturnLabel_75:
   \   00002C   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00002F   A3           INC       DPTR
   \   000030   F0           MOVX      @DPTR,A
   2222          
   2223            len = zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN );
   \   000031                ; Setup parameters for call to function zclKE_GetField
   \   000031   7905         MOV       R1,#0x5
   \   000033   8A82         MOV       DPL,R2
   \   000035   8B83         MOV       DPH,R3
   \   000037   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00003A   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00003D   8A..         MOV       ?V4,R2
   \   00003F   8B..         MOV       ?V5,R3
   2224          
   2225            // Copy the remote certificate
   2226            pConn->pRmtCert = osal_mem_alloc( len );
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV       ?V6,R2
   \   000046   8B..         MOV       ?V7,R3
   \   000048   A8..         MOV       R0,?V6
   \   00004A   A9..         MOV       R1,?V7
   \   00004C   EE           MOV       A,R6
   \   00004D   2421         ADD       A,#0x21
   \   00004F   F582         MOV       DPL,A
   \   000051   E4           CLR       A
   \   000052   3F           ADDC      A,R7
   \   000053   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   2227            if ( !pConn->pRmtCert )
   \                     ??CrossCallReturnLabel_137:
   \   000056   6026         JZ        ??zclKE_ServerProcessInitiateReq_1
   2228            {
   2229              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2230              return;
   2231            }
   2232          
   2233            osal_memcpy( pConn->pRmtCert, pCmd->pIdentity, len );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005E   AC..         MOV       R4,?V4
   \   000060   AD..         MOV       R5,?V5
   \   000062   EE           MOV       A,R6
   \   000063   2421         ADD       A,#0x21
   \   000065   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000068   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006B   7403         MOV       A,#0x3
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   2234          
   2235            // Send the ZCL_KE_INITIATE_RSP command
   2236            if ( zclKE_SendInitiateRsp( pConn ) != ZSuccess )
   \   000070                ; Setup parameters for call to function zclKE_SendInitiateCmd
   \   000070   7C01         MOV       R4,#0x1
   \   000072   7900         MOV       R1,#0x0
   \   000074   EE           MOV       A,R6
   \   000075   FA           MOV       R2,A
   \   000076   EF           MOV       A,R7
   \   000077   FB           MOV       R3,A
   \   000078   12....       LCALL     `??zclKE_SendInitiateCmd::?relay`; Banked call to: zclKE_SendInitiateCmd
   \   00007B   E9           MOV       A,R1
   \   00007C   600B         JZ        ??zclKE_ServerProcessInitiateReq_2
   2237            {
   2238              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_ServerProcessInitiateReq_1:
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   7404         MOV       A,#0x4
   \   000086   F0           MOVX      @DPTR,A
   2239              return;
   \   000087   801E         SJMP      ??zclKE_ServerProcessInitiateReq_0
   2240            }
   2241          
   2242            // Set state to wait for ZCL_KE_EPH_DATA_REQ
   2243            pConn->state = ZCL_KE_SERVER_CONN_EPH_DATA_REQ_WAIT;
   \                     ??zclKE_ServerProcessInitiateReq_2:
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   A3           INC       DPTR
   \   00008E   7401         MOV       A,#0x1
   \   000090   F0           MOVX      @DPTR,A
   2244          
   2245            // Set ephemeral data generation timeout
   2246            zclKE_ConnSetTimeout( pConn, pConn->rmtEphDataGenTime * 1000 );
   \   000091                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000091   8E82         MOV       DPL,R6
   \   000093   8F83         MOV       DPH,R7
   \   000095   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00009B   EE           MOV       A,R6
   \   00009C   FA           MOV       R2,A
   \   00009D   EF           MOV       A,R7
   \   00009E   FB           MOV       R3,A
   \   00009F   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   0000A2   7404         MOV       A,#0x4
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
   2247          }
   \                     ??zclKE_ServerProcessInitiateReq_0:
   \   0000A7   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00000A   75..00       MOV       ?V10,#0x0
   \   00000D   78..         MOV       R0,#?V8
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine124_0
   \   000004                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V0,A
   \   000006   75F0E8       MOV       B,#-0x18
   \   000009   A4           MUL       AB
   \   00000A   C5..         XCH       A,?V0
   \   00000C   A8F0         MOV       R0,B
   \   00000E   75F003       MOV       B,#0x3
   \   000011   A4           MUL       AB
   \   000012   28           ADD       A,R0
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   28           ADD       A,R0
   \   000016   F5..         MOV       ?V1,A
   \   000018   33           RLC       A
   \   000019   95E0         SUBB      A,0xE0 /* A   */
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   F5..         MOV       ?V3,A
   \   00001F   78..         MOV       R0,#?V0
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   8C..         MOV       ?V2,R4
   \   000006   8D..         MOV       ?V3,R5
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F                REQUIRE ??Subroutine135_0
   \   00000F                ; // Fall through to label ??Subroutine135_0
   2248          
   2249          /**************************************************************************************************
   2250           * @fn      zclKE_ServerProcessEphDataReq
   2251           *
   2252           * @brief   Process ZCL_KE_EPH_DATA_REQ.
   2253           *
   2254           * @param   pCtxt - connection context
   2255           * @param   pCmd - command payload
   2256           *
   2257           * @return  void
   2258           */
   2259          static void zclKE_ServerProcessEphDataReq( zclKE_ConnCtxt_t *pCtxt,
   2260                                                     zclKE_EphDataCmd_t *pCmd )
   2261          {
   2262            zclKE_Conn_t *pConn = pCtxt->pConn;
   2263            uint16 len;
   2264            
   2265            len = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   2266          
   2267            // Copy the remote ephemeral public key
   2268            pConn->pRmtEPublicKey = osal_mem_alloc( len );
   2269          
   2270            if ( !pConn->pRmtEPublicKey )
   2271            {
   2272              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2273              return;
   2274            }
   2275          
   2276            osal_memcpy( pConn->pRmtEPublicKey, pCmd->pEphData, len );
   2277          
   2278            /*===============================================================================================
   2279            * ZCL_KE_KEY_GEN_STAGES_SERVER: 
   2280            *
   2281            * Server key generation is broken into two stages in order to break up the calculation times, 
   2282            * which can starve processing time for other tasks.
   2283            *
   2284            *   Stage 1(current):
   2285            *     - generate ephemeral key data
   2286            *     - start timer 500ms
   2287            *
   2288            *   Stage 2(next):
   2289            *     - timer expires
   2290            *     - generate keys bits
   2291            *     - derive mac and key data
   2292            *     - send ZCL_KE_EPH_DATA_REQ
   2293            *
   2294            ===============================================================================================*/
   2295          
   2296            // Generate ephemeral key data
   2297            if ( !zclKE_GenEphKeys( pCtxt ) )
   2298            {
   2299              // pCtxt->error set in "zclKE_GenKeyBits"
   2300              return;
   2301            }
   2302          
   2303            // Set state to wait for key generation
   2304            pConn->state = ZCL_KE_SERVER_CONN_KEY_GEN_WAIT;
   2305          
   2306            // Set key generation timeout
   2307            zclKE_ConnSetTimeout( pConn, ZCL_KE_KEY_GEN_TIMEOUT );
   2308          }
   2309          
   2310          /**************************************************************************************************
   2311           * @fn      zclKE_ServerProcessKeyGen
   2312           *
   2313           * @brief   Process ZCL_KE_KEY_GEN_MSG.
   2314           *
   2315           * @param   pCtxt - connection context
   2316           *
   2317           * @return  void
   2318           */
   2319          static void zclKE_ServerProcessKeyGen( zclKE_ConnCtxt_t *pCtxt )
   2320          {
   2321            zclKE_Conn_t *pConn = pCtxt->pConn;
   2322          
   2323            // Handle server connection key generation stage 2 -- see ZCL_KE_KEY_GEN_STAGES_SERVER
   2324            if ( !zclKE_GenKeys( pCtxt ) )
   2325            {
   2326              // pCtxt->error set in "zclKE_GenKeys"
   2327              return;
   2328            }
   2329          
   2330            // Send the ZCL_KE_EPH_DATA_RSP command
   2331            if ( zclKE_SendEphDataRsp( pConn ) != ZSuccess )
   2332            {
   2333              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2334              return;
   2335            }
   2336          
   2337            // Set state to wait for ZCL_KE_CFM_KEY_DATA_REQ
   2338            pConn->state = ZCL_KE_SERVER_CONN_CFM_KEY_DATA_REQ_WAIT;
   2339          
   2340            // Set aging timeout
   2341            zclKE_ConnSetTimeout( pConn, pConn->rmtCfmKeyGenTime * 1000 );
   2342          }
   2343          
   2344          /**************************************************************************************************
   2345           * @fn      zclKE_ServerProcessCfmKeyDataReq
   2346           *
   2347           * @brief   Process ZCL_KE_CFM_KEY_DATA_REQ.
   2348           *
   2349           * @param   pCtxt - connection context
   2350           * @param   pCmd - command payload
   2351           *
   2352           * @return  void
   2353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2354          static void zclKE_ServerProcessCfmKeyDataReq( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_ServerProcessCfmKeyDataReq:
   2355                                                        zclKE_CfmKeyDataCmd_t *pCmd )
   2356          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine37 & 0xFFFF
   2357            uint8 MAC[ZCL_KE_MAC_LEN];
   2358            uint8 partnerExtAddr[Z_EXTADDR_LEN];
   2359            zclKE_Conn_t *pConn = pCtxt->pConn;
   2360          
   2361            // Lookup partner's extended address -- required to add link key
   2362            if ( !AddrMgrExtAddrLookup( pConn->partner.addr.shortAddr, partnerExtAddr ) )
   \                     ??CrossCallReturnLabel_359:
   \   00000D                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   EE           MOV       A,R6
   \   000012   240F         ADD       A,#0xf
   \   000014   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000017   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00001A   E9           MOV       A,R1
   \   00001B   7003         JNZ       $+5
   \   00001D   02....       LJMP      ??zclKE_ServerProcessCfmKeyDataReq_0 & 0xFFFF
   2363            {
   2364              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2365              return;
   2366            }
   2367          
   2368            // Calculate MACu
   2369            if ( !zclKE_GenMAC( pConn, FALSE, TRUE, MAC ) )
   \   000020                ; Setup parameters for call to function zclKE_GenMAC
   \   000020   7408         MOV       A,#0x8
   \   000022   12....       LCALL     ?XSTACK_DISP100_8
   \   000025   88..         MOV       ?V4,R0
   \   000027   89..         MOV       ?V5,R1
   \   000029   78..         MOV       R0,#?V4
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7C01         MOV       R4,#0x1
   \   000030   7900         MOV       R1,#0x0
   \   000032   EE           MOV       A,R6
   \   000033   FA           MOV       R2,A
   \   000034   EF           MOV       A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??zclKE_GenMAC::?relay`; Banked call to: zclKE_GenMAC
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003E   E9           MOV       A,R1
   \   00003F   606B         JZ        ??zclKE_ServerProcessCfmKeyDataReq_0
   2370            {
   2371              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2372              return;
   2373            }
   2374          
   2375            // Compare MACu values
   2376            if ( osal_memcmp( MAC, pCmd->pMAC, ZCL_KE_MAC_LEN ) != TRUE )
   \   000041                ; Setup parameters for call to function osal_memcmp
   \   000041   85..82       MOV       DPL,?V2
   \   000044   85..83       MOV       DPH,?V3
   \   000047   12....       LCALL     ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004D   7C10         MOV       R4,#0x10
   \   00004F   7D00         MOV       R5,#0x0
   \   000051   740B         MOV       A,#0xb
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   A982         MOV       R1,DPL
   \   000058   AA83         MOV       R2,DPH
   \   00005A   7B00         MOV       R3,#0x0
   \   00005C   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00005F   7403         MOV       A,#0x3
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   E9           MOV       A,R1
   \   000065   6401         XRL       A,#0x1
   \   000067   600A         JZ        ??zclKE_ServerProcessCfmKeyDataReq_1
   2377            {
   2378              pCtxt->error = ZCL_KE_TERMINATE_BAD_KEY_CONFIRM;
   \   000069   85..82       MOV       DPL,?V0
   \   00006C   85..83       MOV       DPH,?V1
   \   00006F   7402         MOV       A,#0x2
   \   000071   8041         SJMP      ??zclKE_ServerProcessCfmKeyDataReq_2
   2379              return;
   2380            }
   2381          
   2382            // Calculate MACv
   2383            if ( !zclKE_GenMAC( pConn, FALSE, FALSE, MAC ) )
   \                     ??zclKE_ServerProcessCfmKeyDataReq_1:
   \   000073                ; Setup parameters for call to function zclKE_GenMAC
   \   000073   7408         MOV       A,#0x8
   \   000075   12....       LCALL     ?XSTACK_DISP100_8
   \   000078   88..         MOV       ?V2,R0
   \   00007A   89..         MOV       ?V3,R1
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   7C00         MOV       R4,#0x0
   \   000083   7900         MOV       R1,#0x0
   \   000085   EE           MOV       A,R6
   \   000086   FA           MOV       R2,A
   \   000087   EF           MOV       A,R7
   \   000088   FB           MOV       R3,A
   \   000089   12....       LCALL     `??zclKE_GenMAC::?relay`; Banked call to: zclKE_GenMAC
   \   00008C   7402         MOV       A,#0x2
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000091   E9           MOV       A,R1
   \   000092   6018         JZ        ??zclKE_ServerProcessCfmKeyDataReq_0
   2384            {
   2385              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2386              return;
   2387            }
   2388          
   2389            // Send the ZCL_KE_CFM_KEY_DATA_RSP command
   2390            if ( zclKE_SendCfmKeyDataRsp( pConn, MAC ) != ZSuccess )
   \   000094                ; Setup parameters for call to function zclKE_SendCfmKeyDataCmd
   \   000094   78..         MOV       R0,#?V2
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   7C01         MOV       R4,#0x1
   \   00009B   7902         MOV       R1,#0x2
   \   00009D   EE           MOV       A,R6
   \   00009E   FA           MOV       R2,A
   \   00009F   EF           MOV       A,R7
   \   0000A0   FB           MOV       R3,A
   \   0000A1   12....       LCALL     `??zclKE_SendCfmKeyDataCmd::?relay`; Banked call to: zclKE_SendCfmKeyDataCmd
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A9   E9           MOV       A,R1
   \   0000AA   600B         JZ        ??zclKE_ServerProcessCfmKeyDataReq_3
   2391            {
   2392              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_ServerProcessCfmKeyDataReq_0:
   \   0000AC   85..82       MOV       DPL,?V0
   \   0000AF   85..83       MOV       DPH,?V1
   \   0000B2   7404         MOV       A,#0x4
   \                     ??zclKE_ServerProcessCfmKeyDataReq_2:
   \   0000B4   F0           MOVX      @DPTR,A
   2393              return;
   \   0000B5   8024         SJMP      ??zclKE_ServerProcessCfmKeyDataReq_4
   2394            }
   2395          
   2396            // Add the link key
   2397            ZDSecMgrAddLinkKey( pConn->partner.addr.shortAddr,
   2398                                partnerExtAddr,
   2399                                pConn->pKey );
   \                     ??zclKE_ServerProcessCfmKeyDataReq_3:
   \   0000B7                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   0000B7   EE           MOV       A,R6
   \   0000B8   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0000BB   3F           ADDC      A,R7
   \   0000BC   F583         MOV       DPH,A
   \   0000BE   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C6   EE           MOV       A,R6
   \   0000C7   240F         ADD       A,#0xf
   \   0000C9   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   0000CC   12....       LCALL     `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   0000CF   7402         MOV       A,#0x2
   \   0000D1   12....       LCALL     ?DEALLOC_XSTACK8
   2400          
   2401            // Done, close connection
   2402            zclKE_ServerConnClose( pConn );
   \   0000D4                ; Setup parameters for call to function zclKE_ServerConnClose
   \   0000D4   EE           MOV       A,R6
   \   0000D5   FA           MOV       R2,A
   \   0000D6   EF           MOV       A,R7
   \   0000D7   FB           MOV       R3,A
   \   0000D8   12....       LCALL     `??zclKE_ServerConnClose::?relay`; Banked call to: zclKE_ServerConnClose
   2403          }
   \                     ??zclKE_ServerProcessCfmKeyDataReq_4:
   \   0000DB   7418         MOV       A,#0x18
   \   0000DD   80..         SJMP      ??Subroutine111_0
   2404          
   2405          /**************************************************************************************************
   2406           * @fn      zclKE_ServerHdlInitiateReq
   2407           *
   2408           * @brief   Handle ZCL_KE_INITIATE_REQ.
   2409           *
   2410           * @param   pCtxt - connection context
   2411           *
   2412           * @return  ZStatus_t - status
   2413           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2414          static ZStatus_t zclKE_ServerHdlInitiateReq( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ServerHdlInitiateReq:
   2415          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2416            // Find an existing connection or create a new one
   2417            pCtxt->pConn = zclKE_ServerConnGet( &pCtxt->pInMsg->msg->srcAddr );
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000015   2406         ADD       A,#0x6
   \   000017   F5..         MOV       ?V0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   3400         ADDC      A,#0x0
   \   00001D   F5..         MOV       ?V1,A
   \   00001F                ; Setup parameters for call to function zclKE_ServerConnFind
   \   00001F   85..82       MOV       DPL,?V0
   \   000022   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000025   12....       LCALL     `??zclKE_ServerConnFind::?relay`; Banked call to: zclKE_ServerConnFind
   \   000028   8A..         MOV       ?V2,R2
   \   00002A   8B..         MOV       ?V3,R3
   \   00002C   A8..         MOV       R0,?V2
   \   00002E   A9..         MOV       R1,?V3
   \   000030   E8           MOV       A,R0
   \   000031   49           ORL       A,R1
   \   000032   7011         JNZ       ??zclKE_ServerHdlInitiateReq_0
   \   000034                ; Setup parameters for call to function zclKE_ServerConnCreate
   \   000034   AA..         MOV       R2,?V0
   \   000036   AB..         MOV       R3,?V1
   \   000038   12....       LCALL     `??zclKE_ServerConnCreate::?relay`; Banked call to: zclKE_ServerConnCreate
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8B..         MOV       ?V1,R3
   \   00003F   A8..         MOV       R0,?V0
   \   000041   A9..         MOV       R1,?V1
   \   000043   8022         SJMP      ??zclKE_ServerHdlInitiateReq_1
   \                     ??zclKE_ServerHdlInitiateReq_0:
   \   000045   E8           MOV       A,R0
   \   000046   2418         ADD       A,#0x18
   \   000048   F582         MOV       DPL,A
   \   00004A   E4           CLR       A
   \   00004B   39           ADDC      A,R1
   \   00004C   F583         MOV       DPH,A
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FA           MOV       R2,A
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   6A           XRL       A,R2
   \   000061   6004         JZ        ??zclKE_ServerHdlInitiateReq_1
   \   000063   7800         MOV       R0,#0x0
   \   000065   7900         MOV       R1,#0x0
   \                     ??zclKE_ServerHdlInitiateReq_1:
   \   000067   EE           MOV       A,R6
   \   000068   2403         ADD       A,#0x3
   \   00006A   FA           MOV       R2,A
   \   00006B   E4           CLR       A
   \   00006C   3F           ADDC      A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   12....       LCALL     ?Subroutine50 & 0xFFFF
   2418          
   2419            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_308:
   \   000071   8A82         MOV       DPL,R2
   \   000073   8B83         MOV       DPH,R3
   \   000075   E0           MOVX      A,@DPTR
   \   000076   49           ORL       A,R1
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   6047         JZ        ??zclKE_ServerHdlInitiateReq_2
   2420            {
   2421              // Update transaction sequence number
   2422              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   \   00007D   A3           INC       DPTR
   \   00007E   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000081   C0E0         PUSH      A
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00008A   D0E0         POP       A
   \   00008C   F0           MOVX      @DPTR,A
   2423          
   2424              if ( pCtxt->pConn->state == ZCL_KE_SERVER_CONN_INIT )
   \   00008D   8A82         MOV       DPL,R2
   \   00008F   8B83         MOV       DPH,R3
   \   000091   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000094   7026         JNZ       ??zclKE_ServerHdlInitiateReq_3
   2425              {
   2426                zclKE_InitiateCmd_t cmd;
   2427          
   2428                if ( zclKE_ParseInitiateCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   \   000096                ; Setup parameters for call to function zclKE_ParseInitiateCmd
   \   000096   AC..         MOV       R4,?XSP + 0
   \   000098   AD..         MOV       R5,?XSP + 1
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0000A2   12....       LCALL     `??zclKE_ParseInitiateCmd::?relay`; Banked call to: zclKE_ParseInitiateCmd
   \   0000A5   E9           MOV       A,R1
   \   0000A6   7014         JNZ       ??zclKE_ServerHdlInitiateReq_3
   2429                {
   2430                  zclKE_ServerProcessInitiateReq( pCtxt, &cmd );      
   \   0000A8                ; Setup parameters for call to function zclKE_ServerProcessInitiateReq
   \   0000A8   AC..         MOV       R4,?XSP + 0
   \   0000AA   AD..         MOV       R5,?XSP + 1
   \   0000AC   EE           MOV       A,R6
   \   0000AD   FA           MOV       R2,A
   \   0000AE   EF           MOV       A,R7
   \   0000AF   FB           MOV       R3,A
   \   0000B0   12....       LCALL     `??zclKE_ServerProcessInitiateReq::?relay`; Banked call to: zclKE_ServerProcessInitiateReq
   2431                }
   2432                else
   2433                {
   2434                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2435                }
   2436              }
   2437              else
   2438              {
   2439                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2440              }
   2441            }
   2442            else
   2443            {
   2444              // No resources available
   2445              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   2446            }
   2447          
   2448            // Check for error and terminate connection
   2449            if ( pCtxt->error )
   \   0000B3   8E82         MOV       DPL,R6
   \   0000B5   8F83         MOV       DPH,R7
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   700D         JNZ       ??zclKE_ServerHdlInitiateReq_4
   \   0000BA   8012         SJMP      ??zclKE_ServerHdlInitiateReq_5
   \                     ??zclKE_ServerHdlInitiateReq_3:
   \   0000BC   8E82         MOV       DPL,R6
   \   0000BE   8F83         MOV       DPH,R7
   \   0000C0   7403         MOV       A,#0x3
   \   0000C2   8002         SJMP      ??zclKE_ServerHdlInitiateReq_6
   \                     ??zclKE_ServerHdlInitiateReq_2:
   \   0000C4   7404         MOV       A,#0x4
   \                     ??zclKE_ServerHdlInitiateReq_6:
   \   0000C6   F0           MOVX      @DPTR,A
   2450            {
   2451              zclKE_ServerConnTerminate( pCtxt ); 
   \                     ??zclKE_ServerHdlInitiateReq_4:
   \   0000C7                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   0000C7   EE           MOV       A,R6
   \   0000C8   FA           MOV       R2,A
   \   0000C9   EF           MOV       A,R7
   \   0000CA   FB           MOV       R3,A
   \   0000CB   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   2452            }
   2453          
   2454            return ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclKE_ServerHdlInitiateReq_5:
   \   0000CE   79FF         MOV       R1,#-0x1
   \   0000D0   7406         MOV       A,#0x6
   \   0000D2                REQUIRE ?Subroutine11
   \   0000D2                ; // Fall through to label ?Subroutine11
   2455          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   2406         ADD       A,#0x6
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   2456          
   2457          /**************************************************************************************************
   2458           * @fn      zclKE_ServerHdlEphDataReq
   2459           *
   2460           * @brief   Handle ZCL_KE_EPH_DATA_REQ.
   2461           *
   2462           * @param   pCtxt - connection context
   2463           *
   2464           * @return  ZStatus_t - status
   2465           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   8A..         MOV       ?V4,R2
   \   000002   8B..         MOV       ?V5,R3
   \   000004   A8..         MOV       R0,?V4
   \   000006   A9..         MOV       R1,?V5
   \   000008   E5..         MOV       A,?V0
   \   00000A   241F         ADD       A,#0x1f
   \   00000C                REQUIRE ??Subroutine101_0
   \   00000C                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005                REQUIRE ??Subroutine102_0
   \   000005                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   79FF         MOV       R1,#-0x1
   \   000002   7402         MOV       A,#0x2
   \   000004                REQUIRE ??Subroutine111_0
   \   000004                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2466          static ZStatus_t zclKE_ServerHdlEphDataReq( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ServerHdlEphDataReq:
   2467          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine15 & 0xFFFF
   2468            // Look for an existing connection
   2469            pCtxt->pConn = zclKE_ServerConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   \                     ??CrossCallReturnLabel_326:
   \   00000D   12....       LCALL     `??zclKE_ServerConnLookup::?relay`; Banked call to: zclKE_ServerConnLookup
   \   000010   EE           MOV       A,R6
   \   000011   2403         ADD       A,#0x3
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   F9           MOV       R1,A
   \   000017   8882         MOV       DPL,R0
   \   000019   8983         MOV       DPH,R1
   \   00001B   EA           MOV       A,R2
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   EB           MOV       A,R3
   \   00001F   F0           MOVX      @DPTR,A
   2470          
   2471            if ( pCtxt->pConn )
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   7003         JNZ       $+5
   \   000024   02....       LJMP      ??zclKE_ServerHdlEphDataReq_0 & 0xFFFF
   2472            {
   2473              // Update transaction sequence number
   2474              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FA           MOV       R2,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   CA           XCH       A,R2
   \   000031   2406         ADD       A,#0x6
   \   000033   F582         MOV       DPL,A
   \   000035   E4           CLR       A
   \   000036   3A           ADDC      A,R2
   \   000037   F583         MOV       DPH,A
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   C0E0         PUSH      A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   D0E0         POP       A
   \   000047   F0           MOVX      @DPTR,A
   2475          
   2476              if ( pCtxt->pConn->state == ZCL_KE_SERVER_CONN_EPH_DATA_REQ_WAIT )
   \   000048   8882         MOV       DPL,R0
   \   00004A   8983         MOV       DPH,R1
   \   00004C   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00004F   6401         XRL       A,#0x1
   \   000051   6003         JZ        $+5
   \   000053   02....       LJMP      ??zclKE_ServerHdlEphDataReq_0 & 0xFFFF
   2477              {
   2478                zclKE_EphDataCmd_t cmd;
   2479          
   2480                if ( zclKE_ParseEphDataCmd( pCtxt->pConn->suite, 
   2481                                            pCtxt->pInMsg, 
   2482                                            &cmd ) == ZCL_STATUS_SUCCESS )
   \   000056                ; Setup parameters for call to function zclKE_ParseEphDataCmd
   \   000056   A8..         MOV       R0,?XSP + 0
   \   000058   A9..         MOV       R1,?XSP + 1
   \   00005A   88..         MOV       ?V0,R0
   \   00005C   89..         MOV       ?V1,R1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000063   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000066   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000069   12....       LCALL     `??zclKE_ParseEphDataCmd::?relay`; Banked call to: zclKE_ParseEphDataCmd
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   E9           MOV       A,R1
   \   000072   706A         JNZ       ??zclKE_ServerHdlEphDataReq_0
   2483                {
   2484                  zclKE_ServerProcessEphDataReq( pCtxt, &cmd );      
   \   000074   12....       LCALL     ?Subroutine25 & 0xFFFF
   2485                }
   2486                else
   2487                {
   2488                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2489                }
   2490              }
   2491              else
   2492              {
   2493                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2494              }
   2495            }
   \                     ??CrossCallReturnLabel_20:
   \   000077   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00007A   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   00007D   8A..         MOV       ?V2,R2
   \   00007F   8B..         MOV       ?V3,R3
   \   000081                ; Setup parameters for call to function osal_mem_alloc
   \   000081   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000084   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000087   7008         JNZ       ??zclKE_ServerHdlEphDataReq_1
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   7404         MOV       A,#0x4
   \   00008F   8053         SJMP      ??zclKE_ServerHdlEphDataReq_2
   \                     ??zclKE_ServerHdlEphDataReq_1:
   \   000091                ; Setup parameters for call to function osal_memcpy
   \   000091   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000097   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00009A   35..         ADDC      A,?V1
   \   00009C   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   00009F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A2   7403         MOV       A,#0x3
   \   0000A4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A7                ; Setup parameters for call to function zclKE_GenEphKeys
   \   0000A7   EE           MOV       A,R6
   \   0000A8   FA           MOV       R2,A
   \   0000A9   EF           MOV       A,R7
   \   0000AA   FB           MOV       R3,A
   \   0000AB   12....       LCALL     `??zclKE_GenEphKeys::?relay`; Banked call to: zclKE_GenEphKeys
   \   0000AE   E9           MOV       A,R1
   \   0000AF   601C         JZ        ??zclKE_ServerHdlEphDataReq_3
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   A3           INC       DPTR
   \   0000B8   7402         MOV       A,#0x2
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   0000BB   90....       MOV       DPTR,#__Constant_1f4
   \   0000BE   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000C1   AA..         MOV       R2,?V0
   \   0000C3   AB..         MOV       R3,?V1
   \   0000C5   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
   2496            else
   2497            {
   2498              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2499            }
   2500          
   2501            // Check for error and terminate connection
   2502            if ( pCtxt->error )
   \                     ??zclKE_ServerHdlEphDataReq_3:
   \   0000CD   8E82         MOV       DPL,R6
   \   0000CF   8F83         MOV       DPH,R7
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   6007         JZ        ??zclKE_ServerHdlEphDataReq_4
   2503            {
   2504              zclKE_ServerConnTerminate( pCtxt ); 
   \                     ??zclKE_ServerHdlEphDataReq_5:
   \   0000D4                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   0000D4   EE           MOV       A,R6
   \   0000D5   FA           MOV       R2,A
   \   0000D6   EF           MOV       A,R7
   \   0000D7   FB           MOV       R3,A
   \   0000D8   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   2505            }
   2506          
   2507            return ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclKE_ServerHdlEphDataReq_4:
   \   0000DB   02....       LJMP      ?Subroutine7 & 0xFFFF
   \                     ??zclKE_ServerHdlEphDataReq_0:
   \   0000DE   8E82         MOV       DPL,R6
   \   0000E0   8F83         MOV       DPH,R7
   \   0000E2   7403         MOV       A,#0x3
   \                     ??zclKE_ServerHdlEphDataReq_2:
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5   80ED         SJMP      ??zclKE_ServerHdlEphDataReq_5
   2508          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   AC..         MOV       R4,?V2
   \   000002   AD..         MOV       R5,?V3
   \   000004   E5..         MOV       A,?V0
   \   000006                REQUIRE ??Subroutine113_0
   \   000006                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine114_0
   \   000006                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V1,A
   \   00000E                ; Setup parameters for call to function zclKE_GetField
   \   00000E                ; Setup parameters for call to function zclKE_GetField
   \   00000E   7903         MOV       R1,#0x3
   \   000010   85..82       MOV       DPL,?V0
   \   000013   F583         MOV       DPH,A
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function zclKE_ServerConnLookup
   \   000004                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   000004                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   000004   8E82         MOV       DPL,R6
   \   000006   8F83         MOV       DPH,R7
   \   000008   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00000B                REQUIRE ??Subroutine127_0
   \   00000B                ; // Fall through to label ??Subroutine127_0
   2509          
   2510          /**************************************************************************************************
   2511           * @fn      zclKE_ServerHdlCfmKeyDataReq
   2512           *
   2513           * @brief   Handle ZCL_KE_CFM_KEY_DATA_REQ.
   2514           *
   2515           * @param   pCtxt - connection context
   2516           *
   2517           * @return  ZStatus_t - status
   2518           */
   2519          static ZStatus_t zclKE_ServerHdlCfmKeyDataReq( zclKE_ConnCtxt_t *pCtxt )
   2520          {
   2521            // Look for an existing connection
   2522            pCtxt->pConn = zclKE_ServerConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   2523          
   2524            if ( pCtxt->pConn )
   2525            {
   2526              // Update transaction sequence number
   2527              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   2528          
   2529              if ( pCtxt->pConn->state == ZCL_KE_SERVER_CONN_CFM_KEY_DATA_REQ_WAIT )
   2530              {
   2531                zclKE_CfmKeyDataCmd_t cmd;
   2532          
   2533                if ( zclKE_ParseCfmKeyDataCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   2534                {
   2535                  zclKE_ServerProcessCfmKeyDataReq( pCtxt, &cmd );      
   2536                }
   2537                else
   2538                {
   2539                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2540                }
   2541              }
   2542              else
   2543              {
   2544                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2545              }
   2546            }
   2547            else
   2548            {
   2549              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   2550            }
   2551          
   2552            // Check for error and terminate connection
   2553            if ( pCtxt->error )
   2554            {
   2555              zclKE_ServerConnTerminate( pCtxt ); 
   2556            }
   2557          
   2558            return ZCL_STATUS_CMD_HAS_RSP;
   2559          }
   2560          
   2561          /**************************************************************************************************
   2562           * @fn      zclKE_ServerHdlTerminate
   2563           *
   2564           * @brief   Handle ZCL_KE_TERMINATE_SERVER.
   2565           *
   2566           * @param   pCtxt - connection context
   2567           *
   2568           * @return  ZStatus_t - status
   2569           */
   2570          static ZStatus_t zclKE_ServerHdlTerminate( zclKE_ConnCtxt_t *pCtxt )
   2571          {
   2572            // Look for an existing connection
   2573            pCtxt->pConn = zclKE_ServerConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   2574          
   2575            if ( pCtxt->pConn )
   2576            {
   2577              // Update transaction sequence number
   2578              pCtxt->pConn->transSeqNum = pCtxt->pInMsg->hdr.transSeqNum;
   2579          
   2580              zclKE_ServerConnClose( pCtxt->pConn );
   2581            }
   2582          
   2583            return ZCL_STATUS_SUCCESS;
   2584          }
   2585          
   2586          /**************************************************************************************************
   2587           * @fn      zclKE_ServerHdlSpecificCmd
   2588           *
   2589           * @brief   Server ZCL specific command handler.
   2590           *
   2591           * @param   pInMsg - incoming message to process
   2592           *
   2593           * @return  ZStatus_t - status
   2594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2595          static ZStatus_t zclKE_ServerHdlSpecificCmd( zclIncoming_t *pInMsg )
   \                     zclKE_ServerHdlSpecificCmd:
   2596          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2597            ZStatus_t status;
   2598            zclKE_ConnCtxt_t ctxt;
   2599          
   2600            // Initialize connection context
   2601            ctxt.pInMsg = pInMsg;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   2602            ctxt.pConn = NULL;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine43 & 0xFFFF
   2603            ctxt.error = 0;
   2604          
   2605            // Process the command
   2606            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_45:
   \   00001C   600F         JZ        ??zclKE_ServerHdlSpecificCmd_0
   \   00001E   14           DEC       A
   \   00001F   6015         JZ        ??zclKE_ServerHdlSpecificCmd_1
   \   000021   14           DEC       A
   \   000022   601E         JZ        ??zclKE_ServerHdlSpecificCmd_2
   \   000024   14           DEC       A
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??zclKE_ServerHdlSpecificCmd_3 & 0xFFFF
   \   00002A   02....       LJMP      ??zclKE_ServerHdlSpecificCmd_4 & 0xFFFF
   2607            {
   2608              case ZCL_KE_INITIATE_REQ:
   2609                status = zclKE_ServerHdlInitiateReq( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_0:
   \   00002D                ; Setup parameters for call to function zclKE_ServerHdlInitiateReq
   \   00002D   AA..         MOV       R2,?XSP + 0
   \   00002F   AB..         MOV       R3,?XSP + 1
   \   000031   12....       LCALL     `??zclKE_ServerHdlInitiateReq::?relay`; Banked call to: zclKE_ServerHdlInitiateReq
   \   000034   8007         SJMP      ??zclKE_ServerHdlSpecificCmd_5
   2610                break;
   2611          
   2612              case ZCL_KE_EPH_DATA_REQ:
   2613                status = zclKE_ServerHdlEphDataReq( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_1:
   \   000036                ; Setup parameters for call to function zclKE_ServerHdlEphDataReq
   \   000036   AA..         MOV       R2,?XSP + 0
   \   000038   AB..         MOV       R3,?XSP + 1
   \   00003A   12....       LCALL     `??zclKE_ServerHdlEphDataReq::?relay`; Banked call to: zclKE_ServerHdlEphDataReq
   \                     ??zclKE_ServerHdlSpecificCmd_5:
   \   00003D   E9           MOV       A,R1
   \   00003E   F9           MOV       R1,A
   2614                break;
   \   00003F   02....       LJMP      ??zclKE_ServerHdlSpecificCmd_6 & 0xFFFF
   2615          
   2616              case ZCL_KE_CFM_KEY_DATA_REQ:
   2617                status = zclKE_ServerHdlCfmKeyDataReq( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_2:
   \   000042   7401         MOV       A,#0x1
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00004A                ; Setup parameters for call to function zclKE_ServerConnLookup
   \   00004A   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00004D   12....       LCALL     `??zclKE_ServerConnLookup::?relay`; Banked call to: zclKE_ServerConnLookup
   \   000050   8A..         MOV       ?V0,R2
   \   000052   8B..         MOV       ?V1,R3
   \   000054   A8..         MOV       R0,?V0
   \   000056   A9..         MOV       R1,?V1
   \   000058   7403         MOV       A,#0x3
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000060   604B         JZ        ??zclKE_ServerHdlSpecificCmd_7
   \   000062   7401         MOV       A,#0x1
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00006A   C0E0         PUSH      A
   \   00006C   7403         MOV       A,#0x3
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000074   D0E0         POP       A
   \   000076   F0           MOVX      @DPTR,A
   \   000077   7403         MOV       A,#0x3
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   00007F   6404         XRL       A,#0x4
   \   000081   702A         JNZ       ??zclKE_ServerHdlSpecificCmd_7
   \   000083                ; Setup parameters for call to function zclKE_ParseCfmKeyDataCmd
   \   000083   7405         MOV       A,#0x5
   \   000085   12....       LCALL     ?XSTACK_DISP102_8
   \   000088   7401         MOV       A,#0x1
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000090   12....       LCALL     `??zclKE_ParseCfmKeyDataCmd::?relay`; Banked call to: zclKE_ParseCfmKeyDataCmd
   \   000093   E9           MOV       A,R1
   \   000094   7017         JNZ       ??zclKE_ServerHdlSpecificCmd_7
   \   000096                ; Setup parameters for call to function zclKE_ServerProcessCfmKeyDataReq
   \   000096   7405         MOV       A,#0x5
   \   000098   12....       LCALL     ?XSTACK_DISP102_8
   \   00009B   AA..         MOV       R2,?XSP + 0
   \   00009D   AB..         MOV       R3,?XSP + 1
   \   00009F   12....       LCALL     `??zclKE_ServerProcessCfmKeyDataReq::?relay`; Banked call to: zclKE_ServerProcessCfmKeyDataReq
   \   0000A2   85..82       MOV       DPL,?XSP + 0
   \   0000A5   85..83       MOV       DPH,?XSP + 1
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   700B         JNZ       ??zclKE_ServerHdlSpecificCmd_8
   \   0000AB   8010         SJMP      ??zclKE_ServerHdlSpecificCmd_9
   \                     ??zclKE_ServerHdlSpecificCmd_7:
   \   0000AD   85..82       MOV       DPL,?XSP + 0
   \   0000B0   85..83       MOV       DPH,?XSP + 1
   \   0000B3   7403         MOV       A,#0x3
   \   0000B5   F0           MOVX      @DPTR,A
   \                     ??zclKE_ServerHdlSpecificCmd_8:
   \   0000B6                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   0000B6   AA..         MOV       R2,?XSP + 0
   \   0000B8   AB..         MOV       R3,?XSP + 1
   \   0000BA   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   \                     ??zclKE_ServerHdlSpecificCmd_9:
   \   0000BD   79FF         MOV       R1,#-0x1
   2618                break;
   \   0000BF   8046         SJMP      ??zclKE_ServerHdlSpecificCmd_6
   2619          
   2620              case ZCL_KE_TERMINATE_SERVER:
   2621                status = zclKE_ServerHdlTerminate( &ctxt );
   \                     ??zclKE_ServerHdlSpecificCmd_3:
   \   0000C1   7401         MOV       A,#0x1
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000C9                ; Setup parameters for call to function zclKE_ServerConnLookup
   \   0000C9   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0000CC   12....       LCALL     `??zclKE_ServerConnLookup::?relay`; Banked call to: zclKE_ServerConnLookup
   \   0000CF   8A..         MOV       ?V0,R2
   \   0000D1   8B..         MOV       ?V1,R3
   \   0000D3   A8..         MOV       R0,?V0
   \   0000D5   A9..         MOV       R1,?V1
   \   0000D7   7403         MOV       A,#0x3
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0000DF   6020         JZ        ??zclKE_ServerHdlSpecificCmd_10
   \   0000E1   7401         MOV       A,#0x1
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000E9   C0E0         PUSH      A
   \   0000EB   7403         MOV       A,#0x3
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000F3   D0E0         POP       A
   \   0000F5   F0           MOVX      @DPTR,A
   \   0000F6                ; Setup parameters for call to function zclKE_ServerConnClose
   \   0000F6   7403         MOV       A,#0x3
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   0000FE   12....       LCALL     `??zclKE_ServerConnClose::?relay`; Banked call to: zclKE_ServerConnClose
   \                     ??zclKE_ServerHdlSpecificCmd_10:
   \   000101   7900         MOV       R1,#0x0
   2622                break;
   \   000103   8002         SJMP      ??zclKE_ServerHdlSpecificCmd_6
   2623          
   2624              default:
   2625                status = ZCL_STATUS_FAILURE;
   \                     ??zclKE_ServerHdlSpecificCmd_4:
   \   000105   7901         MOV       R1,#0x1
   2626                break;
   2627            }
   2628          
   2629            return status;
   \                     ??zclKE_ServerHdlSpecificCmd_6:
   \   000107   7407         MOV       A,#0x7
   \   000109   02....       LJMP      ??Subroutine132_0 & 0xFFFF
   2630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000006   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET
   2631          
   2632          /**************************************************************************************************
   2633           * @fn      zclKE_ServerKeyGenMsg
   2634           *
   2635           * @brief   Process server ZCL_KE_KEY_GEN_MSG.
   2636           *
   2637           * @param   pMsg - incoming message to process
   2638           *
   2639           * @return  void
   2640           */
   2641          static void zclKE_ServerKeyGenMsg( zclKE_KeyGenMsg_t *pMsg )
   2642          {
   2643            zclKE_Conn_t *pConn;
   2644          
   2645            // Find the existing connection
   2646            pConn = zclKE_ServerConnFind( pMsg->partnerAddr );
   2647          
   2648            // Check for connection and state
   2649            if ( pConn && ( pConn->state == ZCL_KE_SERVER_CONN_KEY_GEN_QUEUED ) )
   2650            {
   2651              zclKE_ConnCtxt_t ctxt;
   2652          
   2653              ctxt.pInMsg = NULL;
   2654              ctxt.pConn = pConn;
   2655              ctxt.error = 0;
   2656          
   2657              zclKE_ServerProcessKeyGen( &ctxt );
   2658          
   2659              // Check for failure and terminate connection
   2660              if ( ctxt.error )
   2661              {
   2662                zclKE_ServerConnTerminate( &ctxt ); 
   2663              }
   2664            }
   2665          }
   2666          
   2667          /**************************************************************************************************
   2668           * @fn      zclKE_ClientInit
   2669           *
   2670           * @brief   Initialize client side.
   2671           *
   2672           * @param   none
   2673           *
   2674           * @return  void
   2675           */
   2676          static void zclKE_ClientInit( void )
   2677          {
   2678            // Register for Match Descriptor Responses
   2679            ZDO_RegisterForZDOMsg( zclKE_TaskID, Match_Desc_rsp );
   2680          }
   2681          
   2682          /**************************************************************************************************
   2683           * @fn      zclKE_ClientConnAllowed
   2684           *
   2685           * @brief   Check if client connection is allowed.
   2686           *
   2687           * @param   partnerAddr - partner network address
   2688           *
   2689           * @return  uint8 - TRUE if allowed, FALSE if not
   2690           */
   2691          static uint8 zclKE_ClientConnAllowed( uint16 partnerAddr )
   2692          {
   2693            uint8 allowed;
   2694          
   2695            // 1) Client must be ready
   2696            // 2) Only allow client connections when there are no active server connections.
   2697            // 3) Check for maximum client connections(currently just one).
   2698            // 4) Only allow connections to the Trust Center (or from the Trust Center). 
   2699            if ( ( zclKE_State == ZCL_KE_READY                             ) &&
   2700                 ( !zclKE_ServerConnList                                   ) &&
   2701                 ( !zclKE_ClientConnList                                   ) &&
   2702                 ( ( NLME_GetShortAddr() == APSME_TRUSTCENTER_NWKADDR ) ||
   2703                   ( partnerAddr == APSME_TRUSTCENTER_NWKADDR         )    )    )
   2704            {
   2705              allowed = TRUE;
   2706            }
   2707            else
   2708            {
   2709              allowed = FALSE;
   2710            }
   2711          
   2712            return allowed;
   2713          }
   2714          
   2715          /**************************************************************************************************
   2716           * @fn      zclKE_ClientConnCreate
   2717           *
   2718           * @brief   Create a new client connection.
   2719           *
   2720           * @param   taskID - OSAL task ID of requesting task
   2721           * @param   pPartner - partner address
   2722           * @param   transSeqNum - starting transaction sequence number
   2723           * @param   suite - security suite
   2724           *
   2725           * @return  zclKE_Conn_t* - pointer to new connection, NULL if failure
   2726           */
   2727          static zclKE_Conn_t *zclKE_ClientConnCreate( uint8 taskID,
   2728                                                       afAddrType_t *pPartner,
   2729                                                       uint8 transSeqNum,
   2730                                                       uint16 suite )
   2731          {
   2732            zclKE_Conn_t *pConn = NULL;
   2733          
   2734            // Check for legal connections 
   2735            if ( zclKE_ClientConnAllowed( pPartner->addr.shortAddr ) )
   2736            {
   2737              // Add connection
   2738              pConn = osal_mem_alloc( sizeof( zclKE_Conn_t ) );
   2739            
   2740              if ( pConn )
   2741              {
   2742                // Initialize the connnection
   2743                osal_memset( pConn, 0, sizeof( zclKE_Conn_t ) );
   2744                pConn->taskID = taskID;
   2745                pConn->partner = *pPartner;
   2746                pConn->transSeqNum = transSeqNum;
   2747                pConn->suite = suite;
   2748            
   2749                // Currently only one client connection active at a time
   2750                zclKE_ClientConnList = pConn;
   2751              }
   2752            }
   2753          
   2754          #if defined( NWK_AUTO_POLL )
   2755            // If connections, set the poll rate
   2756            if ( zclKE_ClientConnList )
   2757            {
   2758              zclKE_SetPollRate( ZCL_KE_CLIENT_POLL_RATE_BIT );
   2759            }
   2760          #endif
   2761          
   2762            return pConn;
   2763          }
   2764          
   2765          /**************************************************************************************************
   2766           * @fn      zclKE_ClientConnClose
   2767           *
   2768           * @brief   Close an existing client connection.
   2769           *
   2770           * @param   pConn - client connection
   2771           * @param   notifyStatus - notify status of closure
   2772           * @param   pCmd - terminate command
   2773           *
   2774           * @return  void
   2775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2776          static void zclKE_ClientConnClose( zclKE_Conn_t *pConn, 
   \                     zclKE_ClientConnClose:
   2777                                             uint8 notifyStatus,
   2778                                             zclKE_TerminateCmd_t *pCmd )
   2779          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V2,R1
   2780            zclKE_NotifyStatus( pConn->taskID,
   2781                                pConn->partner.addr.shortAddr,
   2782                                notifyStatus,
   2783                                pCmd );
   \   00000B                ; Setup parameters for call to function zclKE_NotifyStatus
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   AC..         MOV       R4,?V2
   \   000016   EE           MOV       A,R6
   \   000017   240F         ADD       A,#0xf
   \   000019   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00001C   8E82         MOV       DPL,R6
   \   00001E   8F83         MOV       DPH,R7
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   12....       LCALL     `??zclKE_NotifyStatus::?relay`; Banked call to: zclKE_NotifyStatus
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
   2784          
   2785            // Release connection memory
   2786            zclKE_ConnRelease( pConn );
   \   00002A                ; Setup parameters for call to function zclKE_ConnRelease
   \   00002A   EE           MOV       A,R6
   \   00002B   FA           MOV       R2,A
   \   00002C   EF           MOV       A,R7
   \   00002D   FB           MOV       R3,A
   \   00002E   12....       LCALL     `??zclKE_ConnRelease::?relay`; Banked call to: zclKE_ConnRelease
   2787          
   2788            // Currently only one client connection
   2789            zclKE_ClientConnList = NULL;    
   \   000031   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   F0           MOVX      @DPTR,A
   2790          
   2791          #if defined( NWK_AUTO_POLL )
   2792            // If no connections, restore poll rate
   2793            if ( !zclKE_ClientConnList )
   2794            {
   2795              zclKE_RestorePollRate( ZCL_KE_CLIENT_POLL_RATE_BIT );
   \   000038                ; Setup parameters for call to function zclKE_RestorePollRate
   \   000038   7901         MOV       R1,#0x1
   \   00003A   12....       LCALL     `??zclKE_RestorePollRate::?relay`; Banked call to: zclKE_RestorePollRate
   2796            }
   2797          #endif
   2798          }
   \   00003D                REQUIRE ?Subroutine10
   \   00003D                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2799          
   2800          /**************************************************************************************************
   2801           * @fn      zclKE_ClientConnFind
   2802           *
   2803           * @brief   Find a client connection by partnerAddr.
   2804           *
   2805           * @param   partnerAddr - partner network address
   2806           *
   2807           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2809          static zclKE_Conn_t *zclKE_ClientConnFind( uint16 partnerAddr )
   \                     zclKE_ClientConnFind:
   2810          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2811            zclKE_Conn_t *pConn;
   2812          
   2813            pConn = zclKE_ClientConnList;
   \   000004   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000007   8003         SJMP      ??CrossCallReturnLabel_106
   2814          
   2815            while ( pConn )
   2816            {
   2817              if ( pConn->partner.addr.shortAddr == partnerAddr )
   2818              {
   2819                break;
   2820              }
   2821          
   2822              pConn = pConn->pNext;
   \                     ??zclKE_ClientConnFind_0:
   \   000009   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00000C   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00000F   600A         JZ        ??zclKE_ClientConnFind_1
   \   000011   12....       LCALL     ?Subroutine70 & 0xFFFF
   2823            }
   \                     ??CrossCallReturnLabel_97:
   \   000014   7003         JNZ       ??zclKE_ClientConnFind_2
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6B           XRL       A,R3
   \                     ??zclKE_ClientConnFind_2:
   \   000019   70EE         JNZ       ??zclKE_ClientConnFind_0
   2824          
   2825            return pConn;
   \                     ??zclKE_ClientConnFind_1:
   \   00001B   02....       LJMP      ?Subroutine8 & 0xFFFF
   2826          }
   2827          
   2828          /**************************************************************************************************
   2829           * @fn      zclKE_ClientConnLookup
   2830           *
   2831           * @brief   Lookup an expected client connection including end point.
   2832           *
   2833           * @param   pPartner - partner address
   2834           *
   2835           * @return  zclKE_Conn_t* - pointer to existing connection, NULL if not found
   2836           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2837          static zclKE_Conn_t *zclKE_ClientConnLookup( afAddrType_t *pPartner )
   \                     zclKE_ClientConnLookup:
   2838          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2839            zclKE_Conn_t *pConn = NULL;
   2840          
   2841            pConn = zclKE_ClientConnFind( pPartner->addr.shortAddr );
   \   000009                ; Setup parameters for call to function zclKE_ClientConnFind
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000010   12....       LCALL     `??zclKE_ClientConnFind::?relay`; Banked call to: zclKE_ClientConnFind
   2842          
   2843            // Check if connection was found and verify end point
   2844            if ( pConn && ( pConn->partner.endPoint != pPartner->endPoint ) )
   \   000013   EA           MOV       A,R2
   \   000014   4B           ORL       A,R3
   \   000015   6009         JZ        ??zclKE_ClientConnLookup_0
   \   000017   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00001A   6004         JZ        ??zclKE_ClientConnLookup_0
   2845            {
   2846              // End points do not match return NULL
   2847              pConn = NULL;
   \   00001C   7A00         MOV       R2,#0x0
   \   00001E   7B00         MOV       R3,#0x0
   2848            }
   2849          
   2850            return pConn;
   \                     ??zclKE_ClientConnLookup_0:
   \   000020   02....       LJMP      ??Subroutine133_0 & 0xFFFF
   2851          }
   2852          
   2853          /**************************************************************************************************
   2854           * @fn      zclKE_ClientConnOpen
   2855           *
   2856           * @brief   Open a new client connection.
   2857           *
   2858           * @param   taskID - OSAL task ID of requesting task
   2859           * @param   pPartner - partner address
   2860           * @param   transSeqNum - starting transaction sequence number
   2861           * @param   suite - security suite
   2862           * @param   ppConn - reference to output connection pointer
   2863           *
   2864           * @return  uint8 - TRUE if successful, FALSE if not
   2865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2866          static uint8 zclKE_ClientConnOpen( uint8 taskID,
   \                     zclKE_ClientConnOpen:
   2867                                             afAddrType_t *pPartner,
   2868                                             uint8 transSeqNum,
   2869                                             uint16 suite,
   2870                                             zclKE_Conn_t **ppConn )
   2871          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V6,R4
   2872            uint8 success = FALSE;
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   7420         MOV       A,#0x20
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ?Subroutine80 & 0xFFFF
   2873            uint8 extAddr[Z_EXTADDR_LEN];
   2874            uint8 notifyErr ;
   2875          
   2876            *ppConn = NULL;
   \                     ??CrossCallReturnLabel_175:
   \   00001D   85..82       MOV       DPL,?V4
   \   000020   F583         MOV       DPH,A
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   F0           MOVX      @DPTR,A
   2877          
   2878            do 
   2879            {
   2880              if ( zclKE_State != ZCL_KE_READY )
   \   000026   90....       MOV       DPTR,#zclKE_State
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6401         XRL       A,#0x1
   \   00002C   6027         JZ        ??zclKE_ClientConnOpen_0
   2881              {
   2882                // Currently the only error state is no certs
   2883                // if ( zclKE_State == ZCL_KE_NO_CERTS )
   2884                notifyErr = ZCL_KE_NOTIFY_NO_CERTS;
   \   00002E   7C07         MOV       R4,#0x7
   2885                break;
   2886              }
   2887          
   2888              // Make sure connection isn't already open
   2889              if ( zclKE_ClientConnFind( pPartner->addr.shortAddr ) )
   2890              {
   2891                notifyErr = ZCL_KE_NOTIFY_BUSY;
   2892                break;
   2893              }
   2894          
   2895              // Verify partner's extended address
   2896              if ( !AddrMgrExtAddrLookup( pPartner->addr.shortAddr, extAddr ) )
   2897              {
   2898                notifyErr = ZCL_KE_NOTIFY_NO_EXT_ADDR;
   2899                break;
   2900              }
   2901              
   2902              // Check for valid suite
   2903              if ( !( suite & zclKE_SupportedSuites ) )
   2904              {
   2905                notifyErr = ZCL_KE_NOTIFY_BAD_SUITE;
   2906                break;
   2907              }
   2908          
   2909              // Create connection
   2910              *ppConn = zclKE_ClientConnCreate( taskID, pPartner, transSeqNum, suite );
   2911          
   2912              if ( !( *ppConn ) )
   2913              {
   2914                notifyErr = ZCL_KE_NOTIFY_BUSY;
   2915                break;
   2916              }
   2917          
   2918              success = TRUE;
   2919              
   2920            } while ( 0 );
   2921          
   2922            if ( !success )
   2923            {
   2924              zclKE_NotifyStatus( taskID, pPartner->addr.shortAddr, notifyErr, NULL );
   \                     ??zclKE_ClientConnOpen_1:
   \   000030                ; Setup parameters for call to function zclKE_NotifyStatus
   \   000030   E4           CLR       A
   \   000031   F5..         MOV       ?V0,A
   \   000033   F5..         MOV       ?V1,A
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   2925            }
   \                     ??CrossCallReturnLabel_229:
   \   000041   A9..         MOV       R1,?V3
   \   000043   12....       LCALL     `??zclKE_NotifyStatus::?relay`; Banked call to: zclKE_NotifyStatus
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   2926          
   2927            return success;
   \                     ??zclKE_ClientConnOpen_2:
   \   00004B   A9..         MOV       R1,?V2
   \   00004D   7408         MOV       A,#0x8
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   02....       LJMP      ?Subroutine6 & 0xFFFF
   \                     ??zclKE_ClientConnOpen_0:
   \   000055                ; Setup parameters for call to function zclKE_ClientConnFind
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00005C   12....       LCALL     `??zclKE_ClientConnFind::?relay`; Banked call to: zclKE_ClientConnFind
   \   00005F   8B..         MOV       ?V1,R3
   \   000061   EA           MOV       A,R2
   \   000062   45..         ORL       A,?V1
   \   000064   6003         JZ        $+5
   \   000066   02....       LJMP      ??zclKE_ClientConnOpen_3 & 0xFFFF
   \   000069                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000069   AC..         MOV       R4,?XSP + 0
   \   00006B   AD..         MOV       R5,?XSP + 1
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000074   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000077   E9           MOV       A,R1
   \   000078   7004         JNZ       ??zclKE_ClientConnOpen_4
   \   00007A   7C05         MOV       R4,#0x5
   \   00007C   80B2         SJMP      ??zclKE_ClientConnOpen_1
   \                     ??zclKE_ClientConnOpen_4:
   \   00007E   741E         MOV       A,#0x1e
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F5..         MOV       ?V12,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F5..         MOV       ?V13,A
   \   00008A   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   55..         ANL       A,?V12
   \   000090   F8           MOV       R0,A
   \   000091   A3           INC       DPTR
   \   000092   E0           MOVX      A,@DPTR
   \   000093   55..         ANL       A,?V13
   \   000095   F9           MOV       R1,A
   \   000096   E8           MOV       A,R0
   \   000097   49           ORL       A,R1
   \   000098   7004         JNZ       ??zclKE_ClientConnOpen_5
   \   00009A   7C06         MOV       R4,#0x6
   \   00009C   8092         SJMP      ??zclKE_ClientConnOpen_1
   \                     ??zclKE_ClientConnOpen_5:
   \   00009E   75..00       MOV       ?V0,#0x0
   \   0000A1   75..00       MOV       ?V1,#0x0
   \   0000A4   8E82         MOV       DPL,R6
   \   0000A6   8F83         MOV       DPH,R7
   \   0000A8   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000AB   90....       MOV       DPTR,#zclKE_State
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   6401         XRL       A,#0x1
   \   0000B1   7067         JNZ       ??zclKE_ClientConnOpen_6
   \   0000B3   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0000B6   7062         JNZ       ??zclKE_ClientConnOpen_6
   \   0000B8   90....       MOV       DPTR,#zclKE_ClientConnList
   \   0000BB   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000BE   705A         JNZ       ??zclKE_ClientConnOpen_6
   \   0000C0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000C0   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000C3   8B..         MOV       ?V11,R3
   \   0000C5   EA           MOV       A,R2
   \   0000C6   45..         ORL       A,?V11
   \   0000C8   6006         JZ        ??zclKE_ClientConnOpen_7
   \   0000CA   E5..         MOV       A,?V8
   \   0000CC   45..         ORL       A,?V9
   \   0000CE   704A         JNZ       ??zclKE_ClientConnOpen_6
   \                     ??zclKE_ClientConnOpen_7:
   \   0000D0                ; Setup parameters for call to function osal_mem_alloc
   \   0000D0   7A29         MOV       R2,#0x29
   \   0000D2   7B00         MOV       R3,#0x0
   \   0000D4   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D7   8A..         MOV       ?V0,R2
   \   0000D9   8B..         MOV       ?V1,R3
   \   0000DB   EA           MOV       A,R2
   \   0000DC   45..         ORL       A,?V1
   \   0000DE   603A         JZ        ??zclKE_ClientConnOpen_6
   \   0000E0                ; Setup parameters for call to function osal_memset
   \   0000E0   7C29         MOV       R4,#0x29
   \   0000E2   7D00         MOV       R5,#0x0
   \   0000E4   7900         MOV       R1,#0x0
   \   0000E6   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000E9   85..82       MOV       DPL,?V0
   \   0000EC   85..83       MOV       DPH,?V1
   \   0000EF   E5..         MOV       A,?V3
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000F5   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000F8   85..82       MOV       DPL,?V0
   \   0000FB   85..83       MOV       DPH,?V1
   \   0000FE   A3           INC       DPTR
   \   0000FF   A3           INC       DPTR
   \   000100   E5..         MOV       A,?V6
   \   000102   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000105   A3           INC       DPTR
   \   000106   A3           INC       DPTR
   \   000107   E5..         MOV       A,?V12
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E5..         MOV       A,?V13
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   90....       MOV       DPTR,#zclKE_ClientConnList
   \   000111   E5..         MOV       A,?V0
   \   000113   F0           MOVX      @DPTR,A
   \   000114   A3           INC       DPTR
   \   000115   E5..         MOV       A,?V1
   \   000117   F0           MOVX      @DPTR,A
   \   000118   8008         SJMP      ??zclKE_ClientConnOpen_8
   \                     ??zclKE_ClientConnOpen_6:
   \   00011A   90....       MOV       DPTR,#zclKE_ClientConnList
   \   00011D   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000120   6005         JZ        ??zclKE_ClientConnOpen_9
   \                     ??zclKE_ClientConnOpen_8:
   \   000122                ; Setup parameters for call to function zclKE_SetPollRate
   \   000122   7901         MOV       R1,#0x1
   \   000124   12....       LCALL     `??zclKE_SetPollRate::?relay`; Banked call to: zclKE_SetPollRate
   \                     ??zclKE_ClientConnOpen_9:
   \   000127   85..82       MOV       DPL,?V4
   \   00012A   85..83       MOV       DPH,?V5
   \   00012D   E5..         MOV       A,?V0
   \   00012F   F0           MOVX      @DPTR,A
   \   000130   A3           INC       DPTR
   \   000131   E5..         MOV       A,?V1
   \   000133   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000136   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000139   7005         JNZ       ??zclKE_ClientConnOpen_10
   \                     ??zclKE_ClientConnOpen_3:
   \   00013B   7C04         MOV       R4,#0x4
   \   00013D   02....       LJMP      ??zclKE_ClientConnOpen_1 & 0xFFFF
   \                     ??zclKE_ClientConnOpen_10:
   \   000140   75..01       MOV       ?V2,#0x1
   \   000143   02....       LJMP      ??zclKE_ClientConnOpen_2 & 0xFFFF
   2928          }
   2929          
   2930          /**************************************************************************************************
   2931           * @fn      zclKE_ClientConnTerminate
   2932           *
   2933           * @brief   Terminate client connection.
   2934           *
   2935           * @param   pCtxt - connection context
   2936           *
   2937           * @return  void
   2938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2939          static void zclKE_ClientConnTerminate( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ClientConnTerminate:
   2940          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2941            zclKE_TerminateCmd_t cmd;
   2942          
   2943            cmd.status = pCtxt->error;
   \   00000A   12....       LCALL     ?Subroutine26 & 0xFFFF
   2944            cmd.suites = zclKE_SupportedSuites;
   \                     ??CrossCallReturnLabel_23:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   2945            cmd.waitTime = 2 * ( ZCL_KE_CLIENT_EPH_DATA_GEN_TIME + ZCL_KE_CLIENT_CFM_KEY_GEN_TIME );
   \                     ??CrossCallReturnLabel_301:
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine59 & 0xFFFF
   2946          
   2947            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_78:
   \   00001B   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00001E   6033         JZ        ??zclKE_ClientConnTerminate_0
   2948            {
   2949              zclKE_SendTerminate( &pCtxt->pConn->partner,
   2950                                   ZCL_KE_TERMINATE_SERVER,
   2951                                   ZCL_FRAME_CLIENT_SERVER_DIR,
   2952                                   pCtxt->pConn->transSeqNum,
   2953                                   &cmd );
   \   000020   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FD           MOV       R5,A
   \   00002E   7C00         MOV       R4,#0x0
   \   000030   7903         MOV       R1,#0x3
   \   000032   EA           MOV       A,R2
   \   000033   240F         ADD       A,#0xf
   \   000035   FA           MOV       R2,A
   \   000036   5001         JNC       ??zclKE_ClientConnTerminate_1
   \   000038   0B           INC       R3
   \                     ??zclKE_ClientConnTerminate_1:
   \   000039   12....       LCALL     `??zclKE_SendTerminate::?relay`; Banked call to: zclKE_SendTerminate
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   2954          
   2955              zclKE_ClientConnClose( pCtxt->pConn, ZCL_KE_NOTIFY_TERMINATE_SENT, &cmd ); 
   \   000041                ; Setup parameters for call to function zclKE_ClientConnClose
   \   000041   AC..         MOV       R4,?XSP + 0
   \   000043   AD..         MOV       R5,?XSP + 1
   \   000045   7903         MOV       R1,#0x3
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   2956            }
   \                     ??CrossCallReturnLabel_232:
   \   00004E   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \   000051   803A         SJMP      ??zclKE_ClientConnTerminate_2
   2957            else if ( pCtxt->pInMsg )
   \                     ??zclKE_ClientConnTerminate_0:
   \   000053   8A82         MOV       DPL,R2
   \   000055   8B83         MOV       DPH,R3
   \   000057   A3           INC       DPTR
   \   000058   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00005B   6030         JZ        ??zclKE_ClientConnTerminate_2
   2958            {
   2959              zclKE_SendTerminate( &pCtxt->pInMsg->msg->srcAddr,
   2960                                   ZCL_KE_TERMINATE_SERVER,
   2961                                   ZCL_FRAME_CLIENT_SERVER_DIR,
   2962                                   pCtxt->pInMsg->hdr.transSeqNum,
   2963                                   &cmd );
   \   00005D   E8           MOV       A,R0
   \   00005E   FA           MOV       R2,A
   \   00005F   E9           MOV       A,R1
   \   000060   FB           MOV       R3,A
   \   000061                ; Setup parameters for call to function zclKE_SendTerminate
   \   000061   A8..         MOV       R0,?XSP + 0
   \   000063   A9..         MOV       R1,?XSP + 1
   \   000065   88..         MOV       ?V0,R0
   \   000067   89..         MOV       ?V1,R1
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   8A82         MOV       DPL,R2
   \   000070   8B83         MOV       DPH,R3
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   E0           MOVX      A,@DPTR
   \   000079   FD           MOV       R5,A
   \   00007A   7C00         MOV       R4,#0x0
   \   00007C   7903         MOV       R1,#0x3
   \   00007E   8A82         MOV       DPL,R2
   \   000080   8B83         MOV       DPH,R3
   \   000082   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   2964            }
   \                     ??CrossCallReturnLabel_323:
   \   000085   12....       LCALL     `??zclKE_SendTerminate::?relay`; Banked call to: zclKE_SendTerminate
   \   000088   7402         MOV       A,#0x2
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   2965          }
   \                     ??zclKE_ClientConnTerminate_2:
   \   00008D   02....       LJMP      ?Subroutine1 & 0xFFFF
   2966          
   2967          /**************************************************************************************************
   2968           * @fn      zclKE_ClientConnKeyGenTimeout
   2969           *
   2970           * @brief   Timeout triggers send of ZCL_KE_KEY_GEN_MSG(see ZCL_KE_KEY_GEN_STAGES_CLIENT).
   2971           *
   2972           * @param   pConn - connection
   2973           *
   2974           * @return  void
   2975           */
   2976          static void zclKE_ClientConnKeyGenTimeout( zclKE_Conn_t *pConn )
   2977          {
   2978            zclKE_KeyGenMsg_t *pMsg;
   2979          
   2980            // Queue the key generate message
   2981            pMsg = (zclKE_KeyGenMsg_t *) osal_msg_allocate( sizeof( zclKE_KeyGenMsg_t ) );
   2982          
   2983            if (pMsg)
   2984            {
   2985              // Send key generate message
   2986              pMsg->hdr.event = ZCL_KE_KEY_GEN_MSG;
   2987              pMsg->hdr.status = 0;
   2988              pMsg->server = FALSE;
   2989              pMsg->partnerAddr = pConn->partner.addr.shortAddr;
   2990              osal_msg_send( zclKE_TaskID, (uint8 *)pMsg ) ;
   2991          
   2992              // Change state
   2993              pConn->state = ZCL_KE_CLIENT_CONN_KEY_GEN_QUEUED;
   2994            }
   2995            else
   2996            {
   2997              // Terminate the connection
   2998              zclKE_ConnCtxt_t ctxt;
   2999              ctxt.pInMsg = NULL;
   3000              ctxt.pConn = pConn;
   3001              ctxt.error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3002              zclKE_ClientConnTerminate( &ctxt );
   3003            }
   3004          }
   3005          
   3006          /**************************************************************************************************
   3007           * @fn      zclKE_ClientConnTimeout
   3008           *
   3009           * @brief   Client connection timeout.
   3010           *
   3011           * @param   pConn - connection
   3012           *
   3013           * @return  void
   3014           */
   3015          static void zclKE_ClientConnTimeout( zclKE_Conn_t *pConn )
   3016          {
   3017            // Clear timer info
   3018            pConn->timeout = 0;
   3019          
   3020            switch ( pConn->state )
   3021            {
   3022              case ZCL_KE_CLIENT_CONN_KEY_GEN_WAIT:
   3023                zclKE_ClientConnKeyGenTimeout( pConn );
   3024                break;
   3025          
   3026              default:
   3027                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_TIMEOUT, NULL ); 
   3028                break;
   3029            }
   3030          }
   3031          
   3032          /**************************************************************************************************
   3033           * @fn      zclKE_ClientProcessMatchReq
   3034           *
   3035           * @brief   Process request to match an end point for key establishment.
   3036           *
   3037           * @param   pConn - connection
   3038           *
   3039           * @return  uint8 - TRUE if successful, FALSE if not
   3040           */
   3041          static uint8 zclKE_ClientProcessMatchReq( zclKE_Conn_t *pConn )
   3042          {
   3043            ZStatus_t status;
   3044            zAddrType_t dstAddr;
   3045            cId_t cbke = ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT;
   3046          
   3047            // Send out a match for the key establishment
   3048            dstAddr.addrMode = Addr16Bit;
   3049            dstAddr.addr.shortAddr = pConn->partner.addr.shortAddr;
   3050          
   3051            status = ZDP_MatchDescReq( &dstAddr, pConn->partner.addr.shortAddr, 
   3052                                       ZCL_SE_PROFILE_ID, 1, &cbke, 0, NULL, FALSE );
   3053          
   3054            if ( status != ZSuccess )
   3055            {
   3056              return FALSE;
   3057            }
   3058          
   3059            // Set state to wait for Match_Desc_rsp
   3060            pConn->state = ZCL_KE_CLIENT_CONN_MATCH_RSP_WAIT;
   3061          
   3062            // Set match timeout
   3063            zclKE_ConnSetTimeout( pConn, ZCL_KE_SUITE_DISCOVERY_TIMEOUT );
   3064          
   3065            return TRUE;
   3066          }
   3067          
   3068          /**************************************************************************************************
   3069           * @fn      zclKE_ClientProcessMatchRsp
   3070           *
   3071           * @brief   Process match of end point for key establishment.
   3072           *
   3073           * @param   pConn - connection
   3074           * @param   ep - end point
   3075           *
   3076           * @return  uint8 - TRUE if successful, FALSE if not
   3077           */
   3078          static uint8 zclKE_ClientProcessMatchRsp( zclKE_Conn_t *pConn, uint8 ep )
   3079          {
   3080          #if defined( ZCL_READ )
   3081            zclKE_ReadCmd_t cmd;
   3082          
   3083            // Save the end point
   3084            pConn->partner.endPoint = ep;
   3085          
   3086            // Read the partner's suite attribute to find out which suites are supported
   3087            cmd.numAttr = 1;
   3088            cmd.attrID[0] = ATTRID_KE_SUITE;
   3089          
   3090            if ( zcl_SendRead( ZCL_KE_ENDPOINT, &pConn->partner,
   3091                               ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT, (zclReadCmd_t*)&cmd,
   3092                               ZCL_FRAME_CLIENT_SERVER_DIR, TRUE, pConn->transSeqNum ) != ZSuccess )
   3093            {
   3094              return FALSE; 
   3095            }
   3096          
   3097            // Increment the transaction number
   3098            pConn->transSeqNum++;
   3099          
   3100            // Set state to wait for ZCL_CMD_READ_RSP
   3101            pConn->state = ZCL_KE_CLIENT_CONN_READ_RSP_WAIT;
   3102          
   3103            // Set read response timeout
   3104            zclKE_ConnSetTimeout( pConn, ZCL_KE_SUITE_DISCOVERY_TIMEOUT );
   3105          
   3106            return TRUE;
   3107          #else
   3108            (void)pConn;
   3109            (void)ep;
   3110            return FALSE;
   3111          #endif // ZCL_READ
   3112          }
   3113          
   3114          /**************************************************************************************************
   3115           * @fn      zclKE_ClientProcessStart
   3116           *
   3117           * @brief   Process start request.
   3118           *
   3119           * @param   pCtxt - connection context
   3120           *
   3121           * @return  uint8 - TRUE if successful, FALSE if not
   3122           */
   3123          static uint8 zclKE_ClientProcessStart( zclKE_ConnCtxt_t *pCtxt )
   3124          {
   3125            zclKE_Conn_t *pConn = pCtxt->pConn;
   3126          
   3127            // Generate the ephemeral keys
   3128            if ( !zclKE_GenEphKeys( pCtxt ) )
   3129            {
   3130              // pCtxt->error set in "zclKE_GenKeyBits"
   3131              return FALSE;
   3132            }  
   3133          
   3134            // Send the ZCL_KE_INITIATE_REQ
   3135            if ( zclKE_SendInitiateReq( pConn ) != ZSuccess )
   3136            {
   3137              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3138              return FALSE;
   3139            }
   3140          
   3141            // Increment the transaction number
   3142            pConn->transSeqNum++;
   3143          
   3144            // Set state to wait for ZCL_KE_INITIATE_RSP
   3145            pConn->state = ZCL_KE_CLIENT_CONN_INIT_RSP_WAIT;
   3146          
   3147            // Set aging timeout
   3148            zclKE_ConnSetTimeout( pConn, pConn->rmtEphDataGenTime * 1000 );
   3149          
   3150            return TRUE;
   3151          }
   3152          
   3153          /**************************************************************************************************
   3154           * @fn      zclKE_ClientProcessInitiateRsp
   3155           *
   3156           * @brief   Process ZCL_KE_INITIATE_RSP.
   3157           *
   3158           * @param   pCtxt - connection context
   3159           * @param   pCmd - command payload
   3160           *
   3161           * @return  void
   3162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3163          static void zclKE_ClientProcessInitiateRsp( zclKE_ConnCtxt_t *pCtxt,
   \                     zclKE_ClientProcessInitiateRsp:
   3164                                                      zclKE_InitiateCmd_t *pCmd )
   3165          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3166            if ( zclKE_InitiateRspCheckFields( pCtxt, pCmd ) )
   \   00000D                ; Setup parameters for call to function zclKE_InitiateCmdCheckFields
   \   00000D   12....       LCALL     `??zclKE_InitiateCmdCheckFields::?relay`; Banked call to: zclKE_InitiateCmdCheckFields
   \   000010   E9           MOV       A,R1
   \   000011   7003         JNZ       $+5
   \   000013   02....       LJMP      ??zclKE_ClientProcessInitiateRsp_0 & 0xFFFF
   \   000016   8E82         MOV       DPL,R6
   \   000018   8F83         MOV       DPH,R7
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000026   85..82       MOV       DPL,?V2
   \   000029   85..83       MOV       DPH,?V3
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   68           XRL       A,R0
   \   00002E   7003         JNZ       ??zclKE_ClientProcessInitiateRsp_1
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   69           XRL       A,R1
   \                     ??zclKE_ClientProcessInitiateRsp_1:
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   7079         JNZ       ??zclKE_ClientProcessInitiateRsp_2
   3167            {
   3168              // Finish setting up connection fields
   3169              uint16 len;
   3170              zclKE_Conn_t *pConn = pCtxt->pConn;
   \   000039   12....       LCALL     ?Subroutine33 & 0xFFFF
   3171              pConn->rmtEphDataGenTime = pCmd->ephDataGenTime;
   \                     ??CrossCallReturnLabel_276:
   \   00003C   85..82       MOV       DPL,?V2
   \   00003F   85..83       MOV       DPH,?V3
   \   000042   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000045   12....       LCALL     ?Subroutine58 & 0xFFFF
   3172              pConn->rmtCfmKeyGenTime = pCmd->cfmKeyGenTime;
   \                     ??CrossCallReturnLabel_76:
   \   000048   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   3173          
   3174              len = zclKE_GetField( pConn->suite, ZCL_KE_CERT_LEN );
   \   00004D                ; Setup parameters for call to function zclKE_GetField
   \   00004D   7905         MOV       R1,#0x5
   \   00004F   85..82       MOV       DPL,?V0
   \   000052   85..83       MOV       DPH,?V1
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00005D   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000060   8A..         MOV       ?V4,R2
   \   000062   8B..         MOV       ?V5,R3
   3175          
   3176              // Copy the remote certificate
   3177              pConn->pRmtCert = osal_mem_alloc( len );
   \   000064                ; Setup parameters for call to function osal_mem_alloc
   \   000064   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000067   8A..         MOV       ?V6,R2
   \   000069   8B..         MOV       ?V7,R3
   \   00006B   A8..         MOV       R0,?V6
   \   00006D   A9..         MOV       R1,?V7
   \   00006F   E5..         MOV       A,?V0
   \   000071   2421         ADD       A,#0x21
   \   000073   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   3178          
   3179              if ( !pConn->pRmtCert )
   \                     ??CrossCallReturnLabel_133:
   \   000076   6032         JZ        ??zclKE_ClientProcessInitiateRsp_3
   3180              {
   3181                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3182                return;
   3183              }
   3184          
   3185              osal_memcpy( pConn->pRmtCert, pCmd->pIdentity, len );
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007E   AC..         MOV       R4,?V4
   \   000080   AD..         MOV       R5,?V5
   \   000082   E5..         MOV       A,?V0
   \   000084   2421         ADD       A,#0x21
   \   000086   F582         MOV       DPL,A
   \   000088   E4           CLR       A
   \   000089   35..         ADDC      A,?V1
   \   00008B   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   00008E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000091   7403         MOV       A,#0x3
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   3186          
   3187              // Send the ZCL_KE_EPH_DATA_REQ command
   3188              if ( zclKE_SendEphDatReq( pCtxt->pConn ) != ZSuccess )
   \   000096                ; Setup parameters for call to function zclKE_SendEphDataCmd
   \   000096   7C00         MOV       R4,#0x0
   \   000098   7901         MOV       R1,#0x1
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000A4   12....       LCALL     `??zclKE_SendEphDataCmd::?relay`; Banked call to: zclKE_SendEphDataCmd
   \   0000A7   E9           MOV       A,R1
   \   0000A8   600D         JZ        ??zclKE_ClientProcessInitiateRsp_4
   3189              {
   3190                pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   \                     ??zclKE_ClientProcessInitiateRsp_3:
   \   0000AA   8E82         MOV       DPL,R6
   \   0000AC   8F83         MOV       DPH,R7
   \   0000AE   7404         MOV       A,#0x4
   \   0000B0   8002         SJMP      ??zclKE_ClientProcessInitiateRsp_5
   3191                return;
   3192              }
   \                     ??zclKE_ClientProcessInitiateRsp_2:
   \   0000B2   7405         MOV       A,#0x5
   \                     ??zclKE_ClientProcessInitiateRsp_5:
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   803F         SJMP      ??zclKE_ClientProcessInitiateRsp_0
   3193          
   3194              // Increment the transaction number
   3195              pConn->transSeqNum++;
   \                     ??zclKE_ClientProcessInitiateRsp_4:
   \   0000B7   85..82       MOV       DPL,?V0
   \   0000BA   85..83       MOV       DPH,?V1
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   E0           MOVX      A,@DPTR
   \   0000C0   04           INC       A
   \   0000C1   12....       LCALL     ?Subroutine91 & 0xFFFF
   3196          
   3197              // Update connection state    
   3198              pConn->state = ZCL_KE_CLIENT_CONN_EPH_DATA_RSP_WAIT;
   3199          
   3200              // Set ephemeral data generation timeout
   3201              zclKE_ConnSetTimeout( pConn, pConn->rmtEphDataGenTime * 1000 );
   3202            }
   \                     ??CrossCallReturnLabel_127:
   \   0000C4   7406         MOV       A,#0x6
   \   0000C6   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F5..         MOV       ?V4,A
   \   0000CC   75F0E8       MOV       B,#-0x18
   \   0000CF   A4           MUL       AB
   \   0000D0   C5..         XCH       A,?V4
   \   0000D2   A8F0         MOV       R0,B
   \   0000D4   75F003       MOV       B,#0x3
   \   0000D7   A4           MUL       AB
   \   0000D8   28           ADD       A,R0
   \   0000D9   F8           MOV       R0,A
   \   0000DA   E4           CLR       A
   \   0000DB   28           ADD       A,R0
   \   0000DC   F5..         MOV       ?V5,A
   \   0000DE   33           RLC       A
   \   0000DF   95E0         SUBB      A,0xE0 /* A   */
   \   0000E1   F5..         MOV       ?V6,A
   \   0000E3   F5..         MOV       ?V7,A
   \   0000E5   78..         MOV       R0,#?V4
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000EA   AA..         MOV       R2,?V0
   \   0000EC   AB..         MOV       R3,?V1
   \   0000EE   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   0000F1   7404         MOV       A,#0x4
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
   3203          }
   \                     ??zclKE_ClientProcessInitiateRsp_0:
   \   0000F6                REQUIRE ?Subroutine5
   \   0000F6                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine121_0
   \   000003                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
   3204          
   3205          /**************************************************************************************************
   3206           * @fn      zclKE_ClientProcessEphDataRsp
   3207           *
   3208           * @brief   Process ZCL_KE_EPH_DATA_RSP.
   3209           *
   3210           * @param   pCtxt - connection context
   3211           * @param   pCmd - command payload
   3212           *
   3213           * @return  void
   3214           */
   3215          static void zclKE_ClientProcessEphDataRsp( zclKE_ConnCtxt_t *pCtxt,
   3216                                                     zclKE_EphDataCmd_t *pCmd )
   3217          {
   3218            zclKE_Conn_t *pConn = pCtxt->pConn;
   3219            uint16 len;
   3220            
   3221            len = zclKE_GetField( pConn->suite, ZCL_KE_PUBLIC_KEY_LEN );
   3222          
   3223            // Copy the remote ephemeral public key
   3224            pConn->pRmtEPublicKey = osal_mem_alloc( len );
   3225          
   3226            if ( !pConn->pRmtEPublicKey )
   3227            {
   3228              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3229              return;
   3230            }
   3231          
   3232            osal_memcpy( pConn->pRmtEPublicKey, pCmd->pEphData, len );
   3233          
   3234            /*===============================================================================================
   3235            * ZCL_KE_KEY_GEN_STAGES_CLIENT: 
   3236            *
   3237            * Client key generation is broken into two stages in order to break up the calculation times, 
   3238            * which can starve processing time for other tasks.
   3239            *
   3240            *   Stage 1(current):
   3241            *     - start timer 500ms
   3242            *
   3243            *   Stage 2(next):
   3244            *     - timer expires
   3245            *     - generate keys bits
   3246            *     - derive mac and key data
   3247            *     - generate MACu
   3248            *     - send ZCL_KE_CFM_KEY_DATA_REQ
   3249            *
   3250            ===============================================================================================*/
   3251          
   3252            // Set state to wait for key generation
   3253            pConn->state = ZCL_KE_CLIENT_CONN_KEY_GEN_WAIT;
   3254          
   3255            // Set key generation timeout
   3256            zclKE_ConnSetTimeout( pConn, ZCL_KE_KEY_GEN_TIMEOUT );
   3257          }
   3258          
   3259          /**************************************************************************************************
   3260           * @fn      zclKE_ClientProcessKeyGen
   3261           *
   3262           * @brief   Process ZCL_KE_KEY_GEN_MSG.
   3263           *
   3264           * @param   pCtxt - connection context
   3265           *
   3266           * @return  void
   3267           */
   3268          static void zclKE_ClientProcessKeyGen( zclKE_ConnCtxt_t *pCtxt )
   3269          {
   3270            uint8 MAC[ZCL_KE_MAC_LEN];
   3271            zclKE_Conn_t *pConn = pCtxt->pConn;
   3272          
   3273            // Handle server connection key generation stage 2 -- see ZCL_KE_KEY_GEN_STAGES_CLIENT
   3274            if ( !zclKE_GenKeys( pCtxt ) )
   3275            {
   3276              // pCtxt->error set in "zclKE_GenKeys"
   3277              return;
   3278            }
   3279          
   3280            // Calculate MACu
   3281            if ( !zclKE_GenMAC( pConn, TRUE, TRUE, MAC ) )
   3282            {
   3283              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3284              return;
   3285            }
   3286          
   3287            // Send the ZCL_KE_CFM_KEY_DATA_REQ command
   3288            if ( zclKE_SendCfmKeyDataReq( pConn, MAC ) != ZSuccess )
   3289            {
   3290              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3291              return;
   3292            }
   3293          
   3294            // Increment the transaction number
   3295            pConn->transSeqNum++;
   3296          
   3297            // Set state to wait for ZCL_KE_CFM_KEY_DATA_RSP
   3298            pConn->state = ZCL_KE_CLIENT_CONN_CFM_KEY_DATA_RSP_WAIT;
   3299          
   3300            // Set aging timeout
   3301            zclKE_ConnSetTimeout( pConn, pConn->rmtCfmKeyGenTime * 1000 );
   3302          }
   3303          
   3304          /**************************************************************************************************
   3305           * @fn      zclKE_ClientProcessCfmKeyDataRsp
   3306           *
   3307           * @brief   Process ZCL_KE_CFM_KEY_DATA_RSP.
   3308           *
   3309           * @param   pCtxt - connection context
   3310           * @param   pCmd - command payload
   3311           *
   3312           * @return  void
   3313           */
   3314          static void zclKE_ClientProcessCfmKeyDataRsp( zclKE_ConnCtxt_t *pCtxt,
   3315                                                        zclKE_CfmKeyDataCmd_t *pCmd )
   3316          {
   3317            uint8 MAC[ZCL_KE_MAC_LEN];
   3318            uint8 partnerExtAddr[Z_EXTADDR_LEN];
   3319            zclKE_Conn_t *pConn = pCtxt->pConn;
   3320          
   3321            // Lookup partner's extended address -- required to add link key
   3322            if ( !AddrMgrExtAddrLookup( pConn->partner.addr.shortAddr, partnerExtAddr ) )
   3323            {
   3324              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3325              return;
   3326            }
   3327          
   3328            // Calculate MACv
   3329            if ( !zclKE_GenMAC( pConn, TRUE, FALSE, MAC ) )
   3330            {
   3331              pCtxt->error = ZCL_KE_TERMINATE_NO_RESOURCES;
   3332              return;
   3333            }
   3334          
   3335            // Compare MACv values
   3336            if ( osal_memcmp( MAC, pCmd->pMAC, ZCL_KE_MAC_LEN ) != TRUE )
   3337            {
   3338              pCtxt->error = ZCL_KE_TERMINATE_BAD_KEY_CONFIRM;
   3339              return;
   3340            }
   3341          
   3342            // Add the link key
   3343            ZDSecMgrAddLinkKey( pConn->partner.addr.shortAddr,
   3344                                partnerExtAddr,
   3345                                pConn->pKey );
   3346          
   3347            // Done, close connection
   3348            zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_SUCCESS,  NULL );
   3349          }
   3350          
   3351          /**************************************************************************************************
   3352           * @fn      zclKE_ClientHdlInitiateRsp
   3353           *
   3354           * @brief   Handle ZCL_KE_INITIATE_RSP.
   3355           *
   3356           * @param   pCtxt - connection context
   3357           *
   3358           * @return  ZStatus_t - status
   3359           */
   3360          static ZStatus_t zclKE_ClientHdlInitiateRsp( zclKE_ConnCtxt_t *pCtxt )
   3361          {
   3362            // Look for an existing connection
   3363            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   3364          
   3365            if ( pCtxt->pConn )
   3366            {
   3367              if ( pCtxt->pConn->state == ZCL_KE_CLIENT_CONN_INIT_RSP_WAIT )
   3368              {
   3369                zclKE_InitiateCmd_t cmd;
   3370          
   3371                if ( zclKE_ParseInitiateCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   3372                {
   3373                  zclKE_ClientProcessInitiateRsp( pCtxt, &cmd );      
   3374                }
   3375                else
   3376                {
   3377                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3378                }
   3379              }
   3380              else
   3381              {
   3382                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3383              }
   3384            }
   3385            else
   3386            {
   3387              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3388            }
   3389          
   3390            // Check for error and terminate connection
   3391            if ( pCtxt->error )
   3392            {
   3393              zclKE_ClientConnTerminate( pCtxt ); 
   3394            }
   3395          
   3396            return ZCL_STATUS_CMD_HAS_RSP;
   3397          }
   3398          
   3399          /**************************************************************************************************
   3400           * @fn      zclKE_ClientHdlEphDataRsp
   3401           *
   3402           * @brief   Handle ZCL_KE_EPH_DATA_RSP.
   3403           *
   3404           * @param   pCtxt - connection context
   3405           *
   3406           * @return  ZStatus_t - status
   3407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3408          static ZStatus_t zclKE_ClientHdlEphDataRsp( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ClientHdlEphDataRsp:
   3409          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine15 & 0xFFFF
   3410            // Look for an existing connection
   3411            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   \                     ??CrossCallReturnLabel_327:
   \   00000D   12....       LCALL     `??zclKE_ClientConnLookup::?relay`; Banked call to: zclKE_ClientConnLookup
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   A8..         MOV       R0,?V0
   \   000016   A9..         MOV       R1,?V1
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   3412          
   3413            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_140:
   \   000022   607D         JZ        ??zclKE_ClientHdlEphDataRsp_0
   3414            {
   3415              if ( pCtxt->pConn->state == ZCL_KE_CLIENT_CONN_EPH_DATA_RSP_WAIT )
   \   000024   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000027   6406         XRL       A,#0x6
   \   000029   7076         JNZ       ??zclKE_ClientHdlEphDataRsp_0
   3416              {
   3417                zclKE_EphDataCmd_t cmd;
   3418          
   3419                if ( zclKE_ParseEphDataCmd( pCtxt->pConn->suite, 
   3420                                            pCtxt->pInMsg, 
   3421                                            &cmd ) == ZCL_STATUS_SUCCESS )
   \   00002B                ; Setup parameters for call to function zclKE_ParseEphDataCmd
   \   00002B   A8..         MOV       R0,?XSP + 0
   \   00002D   A9..         MOV       R1,?XSP + 1
   \   00002F   88..         MOV       ?V0,R0
   \   000031   89..         MOV       ?V1,R1
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00003B   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00003E   12....       LCALL     `??zclKE_ParseEphDataCmd::?relay`; Banked call to: zclKE_ParseEphDataCmd
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   7058         JNZ       ??zclKE_ClientHdlEphDataRsp_0
   3422                {
   3423                  zclKE_ClientProcessEphDataRsp( pCtxt, &cmd );      
   \   000049   12....       LCALL     ?Subroutine25 & 0xFFFF
   3424                }
   3425                else
   3426                {
   3427                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3428                }
   3429              }
   3430              else
   3431              {
   3432                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3433              }
   3434            }
   \                     ??CrossCallReturnLabel_21:
   \   00004C   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00004F   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000052   8A..         MOV       ?V2,R2
   \   000054   8B..         MOV       ?V3,R3
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00005C   7008         JNZ       ??zclKE_ClientHdlEphDataRsp_1
   \   00005E   8E82         MOV       DPL,R6
   \   000060   8F83         MOV       DPH,R7
   \   000062   7404         MOV       A,#0x4
   \   000064   8041         SJMP      ??zclKE_ClientHdlEphDataRsp_2
   \                     ??zclKE_ClientHdlEphDataRsp_1:
   \   000066                ; Setup parameters for call to function osal_memcpy
   \   000066   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006C   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00006F   35..         ADDC      A,?V1
   \   000071   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000074   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000077   7403         MOV       A,#0x3
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007C   85..82       MOV       DPL,?V0
   \   00007F   85..83       MOV       DPH,?V1
   \   000082   A3           INC       DPTR
   \   000083   7407         MOV       A,#0x7
   \   000085   F0           MOVX      @DPTR,A
   \   000086                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000086   90....       MOV       DPTR,#__Constant_1f4
   \   000089   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00008C   AA..         MOV       R2,?V0
   \   00008E   AB..         MOV       R3,?V1
   \   000090   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   000093   7404         MOV       A,#0x4
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   3435            else
   3436            {
   3437              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3438            }
   3439          
   3440            // Check for error and terminate connection
   3441            if ( pCtxt->error )
   \   000098   8E82         MOV       DPL,R6
   \   00009A   8F83         MOV       DPH,R7
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   7009         JNZ       ??zclKE_ClientHdlEphDataRsp_3
   \   00009F   800E         SJMP      ??zclKE_ClientHdlEphDataRsp_4
   \                     ??zclKE_ClientHdlEphDataRsp_0:
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   7403         MOV       A,#0x3
   \                     ??zclKE_ClientHdlEphDataRsp_2:
   \   0000A7   F0           MOVX      @DPTR,A
   3442            {
   3443              zclKE_ClientConnTerminate( pCtxt ); 
   \                     ??zclKE_ClientHdlEphDataRsp_3:
   \   0000A8                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   0000A8   EE           MOV       A,R6
   \   0000A9   FA           MOV       R2,A
   \   0000AA   EF           MOV       A,R7
   \   0000AB   FB           MOV       R3,A
   \   0000AC   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   3444            }
   3445          
   3446            return ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclKE_ClientHdlEphDataRsp_4:
   \   0000AF   02....       LJMP      ?Subroutine7 & 0xFFFF
   3447          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine126_0
   \   000007                ; // Fall through to label ??Subroutine126_0
   3448          
   3449          /**************************************************************************************************
   3450           * @fn      zclKE_ClientHdlCfmKeyDataRsp
   3451           *
   3452           * @brief   Handle ZCL_KE_CFM_KEY_DATA_RSP.
   3453           *
   3454           * @param   pCtxt - connection context
   3455           *
   3456           * @return  ZStatus_t - status
   3457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3458          static ZStatus_t zclKE_ClientHdlCfmKeyDataRsp( zclKE_ConnCtxt_t *pCtxt )
   \                     zclKE_ClientHdlCfmKeyDataRsp:
   3459          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 26
   \   000005   74E6         MOV       A,#-0x1a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine15 & 0xFFFF
   3460            ZStatus_t status;
   3461          
   3462            // Look for an existing connection
   3463            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   \                     ??CrossCallReturnLabel_328:
   \   00000D   12....       LCALL     `??zclKE_ClientConnLookup::?relay`; Banked call to: zclKE_ClientConnLookup
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   A8..         MOV       R0,?V0
   \   000016   A9..         MOV       R1,?V1
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   3464          
   3465            if ( pCtxt->pConn )
   \                     ??CrossCallReturnLabel_141:
   \   000022   7003         JNZ       $+5
   \   000024   02....       LJMP      ??zclKE_ClientHdlCfmKeyDataRsp_0 & 0xFFFF
   3466            {
   3467              if ( pCtxt->pConn->state == ZCL_KE_CLIENT_CONN_CFM_KEY_DATA_RSP_WAIT )
   \   000027   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00002A   6409         XRL       A,#0x9
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??zclKE_ClientHdlCfmKeyDataRsp_0 & 0xFFFF
   3468              {
   3469                zclKE_CfmKeyDataCmd_t cmd;
   3470          
   3471                if ( zclKE_ParseCfmKeyDataCmd( pCtxt->pInMsg, &cmd ) == ZCL_STATUS_SUCCESS )
   \   000031                ; Setup parameters for call to function zclKE_ParseCfmKeyDataCmd
   \   000031   AC..         MOV       R4,?XSP + 0
   \   000033   AD..         MOV       R5,?XSP + 1
   \   000035   8E82         MOV       DPL,R6
   \   000037   8F83         MOV       DPH,R7
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00003D   12....       LCALL     `??zclKE_ParseCfmKeyDataCmd::?relay`; Banked call to: zclKE_ParseCfmKeyDataCmd
   \   000040   E9           MOV       A,R1
   \   000041   6003         JZ        $+5
   \   000043   02....       LJMP      ??zclKE_ClientHdlCfmKeyDataRsp_0 & 0xFFFF
   3472                {
   3473                  zclKE_ClientProcessCfmKeyDataRsp( pCtxt, &cmd );
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   12....       LCALL     ?Subroutine33 & 0xFFFF
   3474                }
   3475                else
   3476                {
   3477                  pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3478                }
   3479              }
   3480              else
   3481              {
   3482                pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3483              }
   3484            }
   \                     ??CrossCallReturnLabel_277:
   \   00004D                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?XSTACK_DISP102_8
   \   000052   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000055   35..         ADDC      A,?V1
   \   000057   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00005A   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00005D   E9           MOV       A,R1
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??zclKE_ClientHdlCfmKeyDataRsp_1 & 0xFFFF
   \   000063                ; Setup parameters for call to function zclKE_GenMAC
   \   000063   740A         MOV       A,#0xa
   \   000065   12....       LCALL     ?XSTACK_DISP100_8
   \   000068   88..         MOV       ?V2,R0
   \   00006A   89..         MOV       ?V3,R1
   \   00006C   78..         MOV       R0,#?V2
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   7C00         MOV       R4,#0x0
   \   000073   7901         MOV       R1,#0x1
   \   000075   AA..         MOV       R2,?V0
   \   000077   AB..         MOV       R3,?V1
   \   000079   12....       LCALL     `??zclKE_GenMAC::?relay`; Banked call to: zclKE_GenMAC
   \   00007C   7402         MOV       A,#0x2
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000081   E9           MOV       A,R1
   \   000082   6066         JZ        ??zclKE_ClientHdlCfmKeyDataRsp_1
   \   000084                ; Setup parameters for call to function osal_memcmp
   \   000084   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008A   7C10         MOV       R4,#0x10
   \   00008C   7D00         MOV       R5,#0x0
   \   00008E   740D         MOV       A,#0xd
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   A982         MOV       R1,DPL
   \   000095   AA83         MOV       R2,DPH
   \   000097   7B00         MOV       R3,#0x0
   \   000099   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00009C   7403         MOV       A,#0x3
   \   00009E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A1   E9           MOV       A,R1
   \   0000A2   6401         XRL       A,#0x1
   \   0000A4   6008         JZ        ??zclKE_ClientHdlCfmKeyDataRsp_2
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   7402         MOV       A,#0x2
   \   0000AC   804A         SJMP      ??zclKE_ClientHdlCfmKeyDataRsp_3
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_2:
   \   0000AE                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   0000AE   E5..         MOV       A,?V0
   \   0000B0   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   0000B3   35..         ADDC      A,?V1
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000BA   7404         MOV       A,#0x4
   \   0000BC   12....       LCALL     ?XSTACK_DISP102_8
   \   0000BF   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0000C2   35..         ADDC      A,?V1
   \   0000C4   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   0000C7   12....       LCALL     `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   0000CA   7402         MOV       A,#0x2
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CF                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000CF   7C00         MOV       R4,#0x0
   \   0000D1   7D00         MOV       R5,#0x0
   \   0000D3   7900         MOV       R1,#0x0
   \   0000D5   AA..         MOV       R2,?V0
   \   0000D7   AB..         MOV       R3,?V1
   \   0000D9   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   3485            else
   3486            {
   3487              pCtxt->error = ZCL_KE_TERMINATE_BAD_MESSAGE;
   3488            }
   3489          
   3490            // Check for error
   3491            if ( pCtxt->error )
   \   0000DC   8E82         MOV       DPL,R6
   \   0000DE   8F83         MOV       DPH,R7
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   7016         JNZ       ??zclKE_ClientHdlCfmKeyDataRsp_4
   3492            {
   3493              // Terminate connection
   3494              zclKE_ClientConnTerminate( pCtxt );
   3495          
   3496              // Failure -- ZCL_KE_TERMINATE_SERVER sent
   3497              status = ZCL_STATUS_CMD_HAS_RSP;
   3498            }
   3499            else
   3500            {
   3501              // Success -- no other response
   3502              status = ZCL_STATUS_SUCCESS;
   \   0000E3   7900         MOV       R1,#0x0
   3503            }
   3504          
   3505            return status;
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_5:
   \   0000E5   741A         MOV       A,#0x1a
   \   0000E7   02....       LJMP      ??Subroutine111_0 & 0xFFFF
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_1:
   \   0000EA   8E82         MOV       DPL,R6
   \   0000EC   8F83         MOV       DPH,R7
   \   0000EE   7404         MOV       A,#0x4
   \   0000F0   8006         SJMP      ??zclKE_ClientHdlCfmKeyDataRsp_3
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_0:
   \   0000F2   8E82         MOV       DPL,R6
   \   0000F4   8F83         MOV       DPH,R7
   \   0000F6   7403         MOV       A,#0x3
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_3:
   \   0000F8   F0           MOVX      @DPTR,A
   \                     ??zclKE_ClientHdlCfmKeyDataRsp_4:
   \   0000F9                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   0000F9   EE           MOV       A,R6
   \   0000FA   FA           MOV       R2,A
   \   0000FB   EF           MOV       A,R7
   \   0000FC   FB           MOV       R3,A
   \   0000FD   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   \   000100   79FF         MOV       R1,#-0x1
   \   000102   80E1         SJMP      ??zclKE_ClientHdlCfmKeyDataRsp_5
   3506          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E5..         MOV       A,?V0
   \   000002                REQUIRE ??Subroutine134_0
   \   000002                ; // Fall through to label ??Subroutine134_0
   3507          
   3508          /**************************************************************************************************
   3509           * @fn      zclKE_ClientHdlTerminate
   3510           *
   3511           * @brief   Handle ZCL_KE_TERMINATE_CLIENT.
   3512           *
   3513           * @param   pCtxt - connection context
   3514           *
   3515           * @return  ZStatus_t - status
   3516           */
   3517          static ZStatus_t zclKE_ClientHdlTerminate( zclKE_ConnCtxt_t *pCtxt )
   3518          {
   3519            // Look for an existing connection
   3520            pCtxt->pConn = zclKE_ClientConnLookup( &pCtxt->pInMsg->msg->srcAddr );
   3521          
   3522            if ( pCtxt->pConn )
   3523            {
   3524              zclKE_TerminateCmd_t cmd = {0};
   3525          
   3526              zclKE_ParseTerminateCmd( pCtxt->pInMsg, &cmd );
   3527          
   3528              zclKE_ClientConnClose( pCtxt->pConn, ZCL_KE_NOTIFY_TERMINATE_RCVD, &cmd );
   3529            }
   3530          
   3531            return ZCL_STATUS_SUCCESS;
   3532          }
   3533          
   3534          /**************************************************************************************************
   3535           * @fn      zclKE_ClientHdlSpecificCmd
   3536           *
   3537           * @brief   Client ZCL specific command handler.
   3538           *
   3539           * @param   pInMsg - incoming message to process
   3540           *
   3541           * @return  ZStatus_t - status
   3542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3543          static ZStatus_t zclKE_ClientHdlSpecificCmd( zclIncoming_t *pInMsg )
   \                     zclKE_ClientHdlSpecificCmd:
   3544          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3545            ZStatus_t status;
   3546            zclKE_ConnCtxt_t ctxt;
   3547          
   3548            // Initialize connection context
   3549            ctxt.pInMsg = pInMsg;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   3550            ctxt.pConn = NULL;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine43 & 0xFFFF
   3551            ctxt.error = 0;
   3552          
   3553            // Process the command
   3554            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_46:
   \   00001C   600F         JZ        ??zclKE_ClientHdlSpecificCmd_0
   \   00001E   14           DEC       A
   \   00001F   6077         JZ        ??zclKE_ClientHdlSpecificCmd_1
   \   000021   14           DEC       A
   \   000022   607D         JZ        ??zclKE_ClientHdlSpecificCmd_2
   \   000024   14           DEC       A
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??zclKE_ClientHdlSpecificCmd_3 & 0xFFFF
   \   00002A   02....       LJMP      ??zclKE_ClientHdlSpecificCmd_4 & 0xFFFF
   3555            {
   3556              case ZCL_KE_INITIATE_RSP:
   3557                status = zclKE_ClientHdlInitiateRsp( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_0:
   \   00002D   7401         MOV       A,#0x1
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000035                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   000035   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000038   12....       LCALL     `??zclKE_ClientConnLookup::?relay`; Banked call to: zclKE_ClientConnLookup
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8B..         MOV       ?V1,R3
   \   00003F   A8..         MOV       R0,?V0
   \   000041   A9..         MOV       R1,?V1
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00004B   6036         JZ        ??zclKE_ClientHdlSpecificCmd_5
   \   00004D   7403         MOV       A,#0x3
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000055   6405         XRL       A,#0x5
   \   000057   702A         JNZ       ??zclKE_ClientHdlSpecificCmd_5
   \   000059                ; Setup parameters for call to function zclKE_ParseInitiateCmd
   \   000059   7409         MOV       A,#0x9
   \   00005B   12....       LCALL     ?XSTACK_DISP102_8
   \   00005E   7401         MOV       A,#0x1
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000066   12....       LCALL     `??zclKE_ParseInitiateCmd::?relay`; Banked call to: zclKE_ParseInitiateCmd
   \   000069   E9           MOV       A,R1
   \   00006A   7017         JNZ       ??zclKE_ClientHdlSpecificCmd_5
   \   00006C                ; Setup parameters for call to function zclKE_ClientProcessInitiateRsp
   \   00006C   7409         MOV       A,#0x9
   \   00006E   12....       LCALL     ?XSTACK_DISP102_8
   \   000071   AA..         MOV       R2,?XSP + 0
   \   000073   AB..         MOV       R3,?XSP + 1
   \   000075   12....       LCALL     `??zclKE_ClientProcessInitiateRsp::?relay`; Banked call to: zclKE_ClientProcessInitiateRsp
   \   000078   85..82       MOV       DPL,?XSP + 0
   \   00007B   85..83       MOV       DPH,?XSP + 1
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   700B         JNZ       ??zclKE_ClientHdlSpecificCmd_6
   \   000081   8010         SJMP      ??zclKE_ClientHdlSpecificCmd_7
   \                     ??zclKE_ClientHdlSpecificCmd_5:
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   7403         MOV       A,#0x3
   \   00008B   F0           MOVX      @DPTR,A
   \                     ??zclKE_ClientHdlSpecificCmd_6:
   \   00008C                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   00008C   AA..         MOV       R2,?XSP + 0
   \   00008E   AB..         MOV       R3,?XSP + 1
   \   000090   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   \                     ??zclKE_ClientHdlSpecificCmd_7:
   \   000093   79FF         MOV       R1,#-0x1
   3558                break;
   \   000095   02....       LJMP      ??zclKE_ClientHdlSpecificCmd_8 & 0xFFFF
   3559          
   3560              case ZCL_KE_EPH_DATA_RSP:
   3561                status = zclKE_ClientHdlEphDataRsp( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_1:
   \   000098                ; Setup parameters for call to function zclKE_ClientHdlEphDataRsp
   \   000098   AA..         MOV       R2,?XSP + 0
   \   00009A   AB..         MOV       R3,?XSP + 1
   \   00009C   12....       LCALL     `??zclKE_ClientHdlEphDataRsp::?relay`; Banked call to: zclKE_ClientHdlEphDataRsp
   \   00009F   8007         SJMP      ??zclKE_ClientHdlSpecificCmd_9
   3562                break;
   3563          
   3564              case ZCL_KE_CFM_KEY_DATA_RSP:
   3565                status = zclKE_ClientHdlCfmKeyDataRsp( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_2:
   \   0000A1                ; Setup parameters for call to function zclKE_ClientHdlCfmKeyDataRsp
   \   0000A1   AA..         MOV       R2,?XSP + 0
   \   0000A3   AB..         MOV       R3,?XSP + 1
   \   0000A5   12....       LCALL     `??zclKE_ClientHdlCfmKeyDataRsp::?relay`; Banked call to: zclKE_ClientHdlCfmKeyDataRsp
   \                     ??zclKE_ClientHdlSpecificCmd_9:
   \   0000A8   E9           MOV       A,R1
   \   0000A9   F9           MOV       R1,A
   3566                break;
   \   0000AA   02....       LJMP      ??zclKE_ClientHdlSpecificCmd_8 & 0xFFFF
   3567          
   3568              case ZCL_KE_TERMINATE_CLIENT:
   3569                status = zclKE_ClientHdlTerminate( &ctxt );
   \                     ??zclKE_ClientHdlSpecificCmd_3:
   \   0000AD   7401         MOV       A,#0x1
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B5                ; Setup parameters for call to function zclKE_ClientConnLookup
   \   0000B5   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0000B8   12....       LCALL     `??zclKE_ClientConnLookup::?relay`; Banked call to: zclKE_ClientConnLookup
   \   0000BB   8A..         MOV       ?V0,R2
   \   0000BD   8B..         MOV       ?V1,R3
   \   0000BF   A8..         MOV       R0,?V0
   \   0000C1   A9..         MOV       R1,?V1
   \   0000C3   7403         MOV       A,#0x3
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL     ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000CB   6064         JZ        ??zclKE_ClientHdlSpecificCmd_10
   \   0000CD   90....       MOV       DPTR,#`?<Constant {0, 0, 0}>`
   \   0000D0   7405         MOV       A,#0x5
   \   0000D2   12....       LCALL     ?XSTACK_DISP102_8
   \   0000D5   7404         MOV       A,#0x4
   \   0000D7   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   0000DA   04           INC       A
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0000E1   E8           MOV       A,R0
   \   0000E2   FA           MOV       R2,A
   \   0000E3   E9           MOV       A,R1
   \   0000E4   FB           MOV       R3,A
   \   0000E5   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000E8   4035         JC        ??CrossCallReturnLabel_302
   \   0000EA   8882         MOV       DPL,R0
   \   0000EC   8983         MOV       DPH,R1
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   C0E0         PUSH      A
   \   0000F1   7405         MOV       A,#0x5
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   D0E0         POP       A
   \   0000F8   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000FB   C0E0         PUSH      A
   \   0000FD   7406         MOV       A,#0x6
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   D0E0         POP       A
   \   000104   F0           MOVX      @DPTR,A
   \   000105   E8           MOV       A,R0
   \   000106   2402         ADD       A,#0x2
   \   000108   F8           MOV       R0,A
   \   000109   5001         JNC       ??zclKE_ClientHdlSpecificCmd_11
   \   00010B   09           INC       R1
   \                     ??zclKE_ClientHdlSpecificCmd_11:
   \   00010C   8882         MOV       DPL,R0
   \   00010E   8983         MOV       DPH,R1
   \   000110   E0           MOVX      A,@DPTR
   \   000111   FA           MOV       R2,A
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F9           MOV       R1,A
   \   000115   EA           MOV       A,R2
   \   000116   F8           MOV       R0,A
   \   000117   7407         MOV       A,#0x7
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00011F                ; Setup parameters for call to function zclKE_ClientConnClose
   \   00011F   7405         MOV       A,#0x5
   \   000121   12....       LCALL     ?XSTACK_DISP102_8
   \   000124   7902         MOV       R1,#0x2
   \   000126   7403         MOV       A,#0x3
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00012E   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \                     ??zclKE_ClientHdlSpecificCmd_10:
   \   000131   7900         MOV       R1,#0x0
   3570                break;
   \   000133   8002         SJMP      ??zclKE_ClientHdlSpecificCmd_8
   3571          
   3572              // Unknown command
   3573              default:
   3574                status = ZCL_STATUS_FAILURE;
   \                     ??zclKE_ClientHdlSpecificCmd_4:
   \   000135   7901         MOV       R1,#0x1
   3575                break;
   3576            }
   3577          
   3578            return status;
   \                     ??zclKE_ClientHdlSpecificCmd_8:
   \   000137   740F         MOV       A,#0xf
   \   000139   02....       LJMP      ??Subroutine132_0 & 0xFFFF
   3579          }
   3580          
   3581          /**************************************************************************************************
   3582           * @fn      zclKE_ClientKeyGenMsg
   3583           *
   3584           * @brief   Process client ZCL_KE_KEY_GEN_MSG.
   3585           *
   3586           * @param   pMsg - incoming message to process
   3587           *
   3588           * @return  void
   3589           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3590          static void zclKE_ClientKeyGenMsg( zclKE_KeyGenMsg_t *pMsg )
   \                     zclKE_ClientKeyGenMsg:
   3591          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3592            zclKE_Conn_t *pConn;
   3593          
   3594            // Find the existing connection
   3595            pConn = zclKE_ClientConnFind( pMsg->partnerAddr );
   \   00000A                ; Setup parameters for call to function zclKE_ClientConnFind
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000013   12....       LCALL     `??zclKE_ClientConnFind::?relay`; Banked call to: zclKE_ClientConnFind
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   \   00001A   A8..         MOV       R0,?V0
   \   00001C   A9..         MOV       R1,?V1
   3596          
   3597            // Check for connection and state
   3598            if ( pConn && ( pConn->state == ZCL_KE_CLIENT_CONN_KEY_GEN_QUEUED ) )
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   7003         JNZ       $+5
   \   000022   02....       LJMP      ??zclKE_ClientKeyGenMsg_0 & 0xFFFF
   \   000025   8882         MOV       DPL,R0
   \   000027   8983         MOV       DPH,R1
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6408         XRL       A,#0x8
   \   00002D   707A         JNZ       ??zclKE_ClientKeyGenMsg_0
   3599            {
   3600              zclKE_ConnCtxt_t ctxt;
   3601          
   3602              ctxt.pInMsg = NULL;
   \   00002F   7401         MOV       A,#0x1
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   12....       LCALL     ?Subroutine55 & 0xFFFF
   3603              ctxt.pConn = pConn;
   \                     ??CrossCallReturnLabel_67:
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000043   12....       LCALL     `??zclKE_GenKeys::?relay`; Banked call to: zclKE_GenKeys
   \   000046   E9           MOV       A,R1
   \   000047   6050         JZ        ??zclKE_ClientKeyGenMsg_1
   \   000049                ; Setup parameters for call to function zclKE_GenMAC
   \   000049   7405         MOV       A,#0x5
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   88..         MOV       ?V0,R0
   \   000050   89..         MOV       ?V1,R1
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7C01         MOV       R4,#0x1
   \   000059   7901         MOV       R1,#0x1
   \   00005B   EE           MOV       A,R6
   \   00005C   FA           MOV       R2,A
   \   00005D   EF           MOV       A,R7
   \   00005E   FB           MOV       R3,A
   \   00005F   12....       LCALL     `??zclKE_GenMAC::?relay`; Banked call to: zclKE_GenMAC
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   E9           MOV       A,R1
   \   000068   6044         JZ        ??zclKE_ClientKeyGenMsg_2
   \   00006A                ; Setup parameters for call to function zclKE_SendCfmKeyDataCmd
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006F   7C00         MOV       R4,#0x0
   \   000071   7902         MOV       R1,#0x2
   \   000073   EE           MOV       A,R6
   \   000074   FA           MOV       R2,A
   \   000075   EF           MOV       A,R7
   \   000076   FB           MOV       R3,A
   \   000077   12....       LCALL     `??zclKE_SendCfmKeyDataCmd::?relay`; Banked call to: zclKE_SendCfmKeyDataCmd
   \   00007A   7402         MOV       A,#0x2
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   E9           MOV       A,R1
   \   000080   702C         JNZ       ??zclKE_ClientKeyGenMsg_2
   \   000082   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000085   7409         MOV       A,#0x9
   \   000087   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   000094   7404         MOV       A,#0x4
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   3604              ctxt.error = 0;
   3605          
   3606              zclKE_ClientProcessKeyGen( &ctxt );
   3607          
   3608              // Check for failure and terminate connection
   3609              if ( ctxt.error )
   \                     ??zclKE_ClientKeyGenMsg_1:
   \   000099   85..82       MOV       DPL,?XSP + 0
   \   00009C   85..83       MOV       DPH,?XSP + 1
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   6007         JZ        ??zclKE_ClientKeyGenMsg_0
   3610              {
   3611                zclKE_ClientConnTerminate( &ctxt ); 
   \                     ??zclKE_ClientKeyGenMsg_3:
   \   0000A2                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   0000A2   AA..         MOV       R2,?XSP + 0
   \   0000A4   AB..         MOV       R3,?XSP + 1
   \   0000A6   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   3612              }
   3613            }
   3614          }
   \                     ??zclKE_ClientKeyGenMsg_0:
   \   0000A9   7415         MOV       A,#0x15
   \   0000AB   02....       LJMP      ?Subroutine11 & 0xFFFF
   \                     ??zclKE_ClientKeyGenMsg_2:
   \   0000AE   85..82       MOV       DPL,?XSP + 0
   \   0000B1   85..83       MOV       DPH,?XSP + 1
   \   0000B4   7404         MOV       A,#0x4
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   80E9         SJMP      ??zclKE_ClientKeyGenMsg_3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   F0           MOVX      @DPTR,A
   \   000004   7403         MOV       A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET
   3615          
   3616          #if defined( ZCL_READ )
   3617          /**************************************************************************************************
   3618           * @fn      zclKE_ClientReadRspCmd
   3619           *
   3620           * @brief   ZCL_CMD_READ_RSP handler.
   3621           *
   3622           * @param   pPartner - partner address
   3623           * @param   clusterID - cluster ID of read
   3624           * @param   pCmd - zclReadRspCmd_t
   3625           *
   3626           * @return  void
   3627           */
   3628          static void zclKE_ClientReadRspCmd( afAddrType_t *pPartner, uint16 clusterID, 
   3629                                              zclReadRspCmd_t *pCmd  )
   3630          {
   3631            zclKE_Conn_t *pConn;
   3632            uint16 suites;
   3633            uint16 selected;
   3634            uint8 *pBuf;
   3635          
   3636            // Find the existing connection
   3637            pConn = zclKE_ClientConnFind( pPartner->addr.shortAddr );
   3638          
   3639            // Check for valid connection and state
   3640            if ( ( pConn                                            ) && 
   3641                 ( pConn->partner.endPoint == pPartner->endPoint    ) &&
   3642                 ( pConn->state == ZCL_KE_CLIENT_CONN_READ_RSP_WAIT )    )
   3643            {
   3644              // Check for valid ATTRID_KE_SUITE attribute
   3645              if ( ( clusterID == ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT  ) &&
   3646                   ( pCmd->numAttr == 1                                ) &&
   3647                   ( pCmd->attrList[0].attrID == ATTRID_KE_SUITE       ) &&
   3648                   ( pCmd->attrList[0].status == ZCL_STATUS_SUCCESS    ) &&
   3649                   ( pCmd->attrList[0].dataType == ZCL_DATATYPE_ENUM16 )    )
   3650              {
   3651                pBuf = pCmd->attrList[0].data;
   3652          
   3653                // Get the supported suites
   3654                suites = BUILD_UINT16( pBuf[0], pBuf[1] );
   3655              }
   3656              else
   3657              {
   3658                // Invalid attribute -- just try using device's lowest supported suite
   3659                if ( zclKE_SupportedSuites & ZCL_KE_SUITE_1 )
   3660                {
   3661                  suites = ZCL_KE_SUITE_1;
   3662                }
   3663                else // if ( suites & ZCL_KE_SUITE_2 )
   3664                {
   3665                  suites = ZCL_KE_SUITE_2;
   3666                }
   3667              } 
   3668          
   3669              // Select highest supported suite
   3670              if ( ( suites & ZCL_KE_SUITE_2                ) &&
   3671                   ( zclKE_SupportedSuites & ZCL_KE_SUITE_2 )    )
   3672              {
   3673                selected = ZCL_KE_SUITE_2;
   3674              }
   3675              else if ( ( suites & ZCL_KE_SUITE_1                ) &&
   3676                        ( zclKE_SupportedSuites & ZCL_KE_SUITE_1 )    )
   3677              {
   3678                selected = ZCL_KE_SUITE_1;
   3679              }
   3680              else
   3681              {
   3682                selected = 0;
   3683              }
   3684          
   3685              // Check if suite selected
   3686              if ( selected )
   3687              {
   3688                zclKE_ConnCtxt_t ctxt = {0, NULL, pConn};
   3689          
   3690                pConn->suite = selected;
   3691          
   3692                // Start key establishment process
   3693                if ( !zclKE_ClientProcessStart( &ctxt ) )
   3694                {  
   3695                  // Only possible error condition would be limited resources so return busy
   3696                  // (ctxt.error == ZCL_KE_TERMINATE_NO_RESOURCES)
   3697                  zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );
   3698                }
   3699              }
   3700              else
   3701              {
   3702                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_NO_SUITE_MATCH, NULL ); 
   3703              }
   3704            }
   3705          }
   3706          #endif // ZCL_READ
   3707          
   3708          /**************************************************************************************************
   3709           * @fn      zclKE_HdlSpecificCmd
   3710           *
   3711           * @brief   ZCL specific command handler.
   3712           *
   3713           * @param   pInMsg - incoming message to process
   3714           *
   3715           * @return  ZStatus_t - status
   3716           */
   3717          static ZStatus_t zclKE_HdlSpecificCmd( zclIncoming_t *pInMsg )
   3718          {
   3719            ZStatus_t status;
   3720          
   3721            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3722            {
   3723              // Process Client-to-Server Commands
   3724              status = zclKE_ServerHdlSpecificCmd( pInMsg );
   3725            }
   3726            else
   3727            {
   3728              // Process Server-to-Client Commands
   3729              status = zclKE_ClientHdlSpecificCmd( pInMsg );
   3730            }
   3731          
   3732            return status;
   3733          }
   3734          
   3735          /**************************************************************************************************
   3736           * @fn      zclKE_HdlIncoming
   3737           *
   3738           * @brief   Callback from ZCL to process incoming cluster specific commands
   3739           *          for this cluster library.
   3740           *
   3741           * @param   pInMsg - incoming message to process
   3742           *
   3743           * @return  ZStatus_t - status
   3744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3745          static ZStatus_t zclKE_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclKE_HdlIncoming:
   3746          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3747            ZStatus_t status = ZCL_STATUS_SUCCESS;
   3748          
   3749          #if defined ( INTER_PAN )
   3750            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000010                ; Setup parameters for call to function StubAPS_InterPan
   \   000010   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   EA           MOV       A,R2
   \   000016   2410         ADD       A,#0x10
   \   000018   F582         MOV       DPL,A
   \   00001A   E4           CLR       A
   \   00001B   3B           ADDC      A,R3
   \   00001C   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00001F   12....       LCALL     `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000022   E9           MOV       A,R1
   \   000023   6004         JZ        ??zclKE_HdlIncoming_0
   3751            {
   3752              return status; // Cluster not supported thru Inter-PAN
   \   000025   7900         MOV       R1,#0x0
   \   000027   802E         SJMP      ??zclKE_HdlIncoming_1
   3753            }
   3754          #endif
   3755            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \                     ??zclKE_HdlIncoming_0:
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   5407         ANL       A,#0x7
   \   000032   6401         XRL       A,#0x1
   \   000034   701F         JNZ       ??zclKE_HdlIncoming_2
   3756            {
   3757              // Check for manufacturer specific command
   3758              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   3759              {
   3760                status = zclKE_HdlSpecificCmd( pInMsg );
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   5408         ANL       A,#0x8
   \   00003F   7009         JNZ       ??zclKE_HdlIncoming_3
   \   000041                ; Setup parameters for call to function zclKE_ServerHdlSpecificCmd
   \   000041   EE           MOV       A,R6
   \   000042   FA           MOV       R2,A
   \   000043   EF           MOV       A,R7
   \   000044   FB           MOV       R3,A
   \   000045   12....       LCALL     `??zclKE_ServerHdlSpecificCmd::?relay`; Banked call to: zclKE_ServerHdlSpecificCmd
   \   000048   8007         SJMP      ??zclKE_HdlIncoming_4
   \                     ??zclKE_HdlIncoming_3:
   \   00004A                ; Setup parameters for call to function zclKE_ClientHdlSpecificCmd
   \   00004A   EE           MOV       A,R6
   \   00004B   FA           MOV       R2,A
   \   00004C   EF           MOV       A,R7
   \   00004D   FB           MOV       R3,A
   \   00004E   12....       LCALL     `??zclKE_ClientHdlSpecificCmd::?relay`; Banked call to: zclKE_ClientHdlSpecificCmd
   \                     ??zclKE_HdlIncoming_4:
   \   000051   E9           MOV       A,R1
   3761              }
   3762              else
   3763              {
   3764                // Manufacturer specific command not handled
   3765                status = ZCL_STATUS_FAILURE;
   3766              }
   3767            }
   \   000052   F9           MOV       R1,A
   \   000053   8002         SJMP      ??zclKE_HdlIncoming_1
   3768            else
   3769            {
   3770              // Should never get here
   3771              status = ZCL_STATUS_FAILURE;
   \                     ??zclKE_HdlIncoming_2:
   \   000055   7901         MOV       R1,#0x1
   3772            }
   3773          
   3774            return status;
   \                     ??zclKE_HdlIncoming_1:
   \   000057   02....       LJMP      ?Subroutine0 & 0xFFFF
   3775          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000004   3B           ADDC      A,R3
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET
   3776          
   3777          /**************************************************************************************************
   3778           * @fn      zclKE_ProcessKeyGenMsg
   3779           *
   3780           * @brief   Process ZCL_KE_KEY_GEN_MSG.
   3781           *
   3782           * @param   pMsg - incoming message to process
   3783           *
   3784           * @return  void
   3785           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3786          static void zclKE_ProcessKeyGenMsg( zclKE_KeyGenMsg_t *pMsg )
   \                     zclKE_ProcessKeyGenMsg:
   3787          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3788            if ( pMsg->server )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??zclKE_ProcessKeyGenMsg_0 & 0xFFFF
   3789            {
   3790              zclKE_ServerKeyGenMsg( pMsg );
   \   000018                ; Setup parameters for call to function zclKE_ServerConnFind
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   3791            }
   \                     ??CrossCallReturnLabel_242:
   \   000021   12....       LCALL     `??zclKE_ServerConnFind::?relay`; Banked call to: zclKE_ServerConnFind
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   \   000028   A8..         MOV       R0,?V0
   \   00002A   A9..         MOV       R1,?V1
   \   00002C   E8           MOV       A,R0
   \   00002D   49           ORL       A,R1
   \   00002E   606B         JZ        ??zclKE_ProcessKeyGenMsg_1
   \   000030   8882         MOV       DPL,R0
   \   000032   8983         MOV       DPH,R1
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6403         XRL       A,#0x3
   \   000038   7061         JNZ       ??zclKE_ProcessKeyGenMsg_1
   \   00003A   7401         MOV       A,#0x1
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00004E   12....       LCALL     `??zclKE_GenKeys::?relay`; Banked call to: zclKE_GenKeys
   \   000051   E9           MOV       A,R1
   \   000052   6032         JZ        ??zclKE_ProcessKeyGenMsg_2
   \   000054                ; Setup parameters for call to function zclKE_SendEphDataCmd
   \   000054   7C01         MOV       R4,#0x1
   \   000056   7901         MOV       R1,#0x1
   \   000058   EE           MOV       A,R6
   \   000059   FA           MOV       R2,A
   \   00005A   EF           MOV       A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??zclKE_SendEphDataCmd::?relay`; Banked call to: zclKE_SendEphDataCmd
   \   00005F   E9           MOV       A,R1
   \   000060   600B         JZ        ??zclKE_ProcessKeyGenMsg_3
   \   000062   85..82       MOV       DPL,?XSP + 0
   \   000065   85..83       MOV       DPH,?XSP + 1
   \   000068   7404         MOV       A,#0x4
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   8022         SJMP      ??zclKE_ProcessKeyGenMsg_4
   \                     ??zclKE_ProcessKeyGenMsg_3:
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   A3           INC       DPTR
   \   000072   7404         MOV       A,#0x4
   \   000074   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00007A   EE           MOV       A,R6
   \   00007B   FA           MOV       R2,A
   \   00007C   EF           MOV       A,R7
   \   00007D   FB           MOV       R3,A
   \   00007E   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   000081   7404         MOV       A,#0x4
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclKE_ProcessKeyGenMsg_2:
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   600C         JZ        ??zclKE_ProcessKeyGenMsg_1
   \                     ??zclKE_ProcessKeyGenMsg_4:
   \   00008F                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   00008F   AA..         MOV       R2,?XSP + 0
   \   000091   AB..         MOV       R3,?XSP + 1
   \   000093   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   \   000096   8003         SJMP      ??zclKE_ProcessKeyGenMsg_1
   3792            else
   3793            {
   3794              zclKE_ClientKeyGenMsg( pMsg );
   \                     ??zclKE_ProcessKeyGenMsg_0:
   \   000098                ; Setup parameters for call to function zclKE_ClientKeyGenMsg
   \   000098   12....       LCALL     `??zclKE_ClientKeyGenMsg::?relay`; Banked call to: zclKE_ClientKeyGenMsg
   3795            }
   3796          }
   \                     ??zclKE_ProcessKeyGenMsg_1:
   \   00009B   7405         MOV       A,#0x5
   \   00009D   02....       LJMP      ?Subroutine11 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005                ; Setup parameters for call to function zclKE_GenKeys
   \   000005                ; Setup parameters for call to function zclKE_GenKeys
   \   000005   AA..         MOV       R2,?XSP + 0
   \   000007   AB..         MOV       R3,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000001                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   3797          
   3798          /**************************************************************************************************
   3799           * @fn      zclKE_ProcessAFMsgCmd
   3800           *
   3801           * @brief   Process AF_INCOMING_MSG_CMD.
   3802           *
   3803           * @param   pCmd - incoming command to process
   3804           *
   3805           * @return  void
   3806           */
   3807          static void zclKE_ProcessAFMsgCmd( afIncomingMSGPacket_t *pCmd )
   3808          {
   3809          #ifdef ZCL_STANDALONE
   3810            // Forward command to ZCL
   3811            zcl_ProcessMessageMSG( pCmd );
   3812          #endif
   3813            (void)pCmd;
   3814          }
   3815          
   3816          /**************************************************************************************************
   3817           * @fn      zclKE_ProcessZCLMsg
   3818           *
   3819           * @brief   Process ZCL_INCOMING_MSG.
   3820           *
   3821           * @param   pInMsg - incoming message to process
   3822           *
   3823           * @return  void
   3824           */
   3825          static void zclKE_ProcessZCLMsg( zclIncomingMsg_t *pInMsg )
   3826          {
   3827            if ( pInMsg->zclHdr.commandID == ZCL_CMD_READ_RSP )
   3828            {
   3829          #if defined( ZCL_READ )
   3830              zclKE_ClientReadRspCmd( &pInMsg->srcAddr, pInMsg->clusterId, 
   3831                                      (zclReadRspCmd_t *)pInMsg->attrCmd  );
   3832          #endif // ZCL_READ
   3833            }
   3834          
   3835            if ( pInMsg->attrCmd != NULL )
   3836            {
   3837              osal_mem_free( pInMsg->attrCmd );
   3838              pInMsg->attrCmd = NULL;
   3839            }
   3840          }
   3841          
   3842          /**************************************************************************************************
   3843           * @fn      zclKE_ProcessZDOMsg
   3844           *
   3845           * @brief   Process ZDO_CB_MSG.
   3846           *
   3847           * @param   pMsg - incoming message to process
   3848           *
   3849           * @return  void
   3850           */
   3851          static void zclKE_ProcessZDOMsg( zdoIncomingMsg_t *pMsg )
   3852          {
   3853            if ( pMsg->clusterID == Match_Desc_rsp )
   3854            {
   3855              zclKE_Conn_t *pConn;
   3856          
   3857              // Find the existing connection
   3858              pConn = zclKE_ClientConnFind( pMsg->srcAddr.addr.shortAddr );
   3859          
   3860              // Check for connection and state
   3861              if ( pConn && ( pConn->state == ZCL_KE_CLIENT_CONN_MATCH_RSP_WAIT ) )
   3862              {
   3863                ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   3864          
   3865                if ( pRsp )
   3866                {
   3867                  if ( pRsp->cnt )
   3868                  {
   3869                    // Process the match response 
   3870                    if ( !zclKE_ClientProcessMatchRsp( pConn, pRsp->epList[0] ) )
   3871                    {
   3872                      // Resource failure 
   3873                      zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );  
   3874                    } 
   3875                  }
   3876                  else
   3877                  {
   3878                    zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_NO_EP_MATCH, NULL );  
   3879                  }
   3880          
   3881                  osal_mem_free( pRsp );
   3882                }
   3883              }
   3884            }
   3885          }
   3886          
   3887          /**************************************************************************************************
   3888           * @fn      zclKE_ProcessTimerEvt
   3889           *
   3890           * @brief   Process timer.
   3891           *
   3892           * @param   none
   3893           *
   3894           * @return  void
   3895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3896          static void zclKE_ProcessTimerEvt( void )
   \                     zclKE_ProcessTimerEvt:
   3897          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3898            uint32 current = osal_GetSystemClock();
   \   00000A                ; Setup parameters for call to function osal_GetSystemClock
   \   00000A   12....       LCALL     `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   00000D   8A..         MOV       ?V0,R2
   \   00000F   8B..         MOV       ?V1,R3
   \   000011   8C..         MOV       ?V2,R4
   \   000013   8D..         MOV       ?V3,R5
   3899            uint32 elapsed;
   3900            uint32 nextTimer = 0;
   \   000015   75..00       MOV       ?V4,#0x0
   \   000018   75..00       MOV       ?V5,#0x0
   \   00001B   75..00       MOV       ?V6,#0x0
   \   00001E   75..00       MOV       ?V7,#0x0
   3901            uint32 timeout;
   3902            zclKE_Conn_t *pNext;
   3903            zclKE_Conn_t *pCurr;
   3904          
   3905            // Process server connections
   3906            pCurr = zclKE_ServerConnList;
   \   000021   90....       MOV       DPTR,#zclKE_ServerConnList
   \   000024   802C         SJMP      ??zclKE_ProcessTimerEvt_0
   3907          
   3908            while ( pCurr )
   3909            {
   3910              // Save next connection since current connection may be closed
   3911              pNext = pCurr->pNext;
   3912          
   3913              // Is this connection waiting for a timeout
   3914              if ( pCurr->timeout )
   3915              {
   3916                // Get elapsed time since last timeout
   3917                elapsed = current - pCurr->stamp;
   3918          
   3919                if ( pCurr->timeout <= elapsed )
   3920                {
   3921                  // Handle connection timeout
   3922                  zclKE_ServerConnTimeout( pCurr );
   3923                }
   3924                else
   3925                {
   3926                  // Adjust next timeout
   3927                  timeout = pCurr->timeout - elapsed;
   \                     ??zclKE_ProcessTimerEvt_1:
   \   000026   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000029   12....       LCALL     ?L_MOV_X
   \   00002C   78..         MOV       R0,#?V12
   \   00002E   79..         MOV       R1,#?V8
   \   000030   12....       LCALL     ?L_SUB
   3928          
   3929                  if ( !nextTimer || ( timeout < nextTimer ) )
   \   000033   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000036   6009         JZ        ??zclKE_ProcessTimerEvt_2
   \   000038   78..         MOV       R0,#?V4
   \   00003A   79..         MOV       R1,#?V12
   \   00003C   12....       LCALL     ?UL_GT
   \   00003F   500C         JNC       ??zclKE_ProcessTimerEvt_3
   3930                  {
   3931                    nextTimer = timeout;
   \                     ??zclKE_ProcessTimerEvt_2:
   \   000041   85....       MOV       ?V4,?V12
   \   000044   85....       MOV       ?V5,?V13
   \   000047   85....       MOV       ?V6,?V14
   \   00004A   85....       MOV       ?V7,?V15
   3932                  }
   3933                }
   3934              }
   3935          
   3936              // Set next connection to current
   3937              pCurr = pNext;
   \                     ??zclKE_ProcessTimerEvt_3:
   \   00004D   7405         MOV       A,#0x5
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \                     ??zclKE_ProcessTimerEvt_0:
   \   000052   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000055   EE           MOV       A,R6
   \   000056   4F           ORL       A,R7
   \   000057   607A         JZ        ??zclKE_ProcessTimerEvt_4
   \   000059   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000062   12....       LCALL     ?XLOAD_R0123
   \   000065   E8           MOV       A,R0
   \   000066   49           ORL       A,R1
   \   000067   4A           ORL       A,R2
   \   000068   4B           ORL       A,R3
   \   000069   60E2         JZ        ??zclKE_ProcessTimerEvt_3
   \   00006B   85....       MOV       ?V8,?V0
   \   00006E   85....       MOV       ?V9,?V1
   \   000071   85....       MOV       ?V10,?V2
   \   000074   85....       MOV       ?V11,?V3
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   78..         MOV       R0,#?V8
   \   000084   12....       LCALL     ?L_SUB_X
   \   000087   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00008A   12....       LCALL     ?UL_GE_X
   \   00008D   EE           MOV       A,R6
   \   00008E   5096         JNC       ??zclKE_ProcessTimerEvt_1
   \   000090   12....       LCALL     ?Subroutine48 & 0xFFFF
   3938            }
   \                     ??CrossCallReturnLabel_55:
   \   000093   6402         XRL       A,#0x2
   \   000095   7032         JNZ       ??zclKE_ProcessTimerEvt_5
   \   000097                ; Setup parameters for call to function osal_msg_allocate
   \   000097   7A05         MOV       R2,#0x5
   \   000099   7B00         MOV       R3,#0x0
   \   00009B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00009E   EA           MOV       A,R2
   \   00009F   4B           ORL       A,R3
   \   0000A0   6014         JZ        ??zclKE_ProcessTimerEvt_6
   \   0000A2   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000A5   04           INC       A
   \   0000A6   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000A9   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   0000AC   8E82         MOV       DPL,R6
   \   0000AE   8F83         MOV       DPH,R7
   \   0000B0   A3           INC       DPTR
   \   0000B1   7403         MOV       A,#0x3
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   8097         SJMP      ??zclKE_ProcessTimerEvt_3
   \                     ??zclKE_ProcessTimerEvt_6:
   \   0000B6   7401         MOV       A,#0x1
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000C4   12....       LCALL     `??zclKE_ServerConnTerminate::?relay`; Banked call to: zclKE_ServerConnTerminate
   \   0000C7   8084         SJMP      ??zclKE_ProcessTimerEvt_3
   \                     ??zclKE_ProcessTimerEvt_5:
   \   0000C9                ; Setup parameters for call to function zclKE_ServerConnClose
   \   0000C9   EE           MOV       A,R6
   \   0000CA   FA           MOV       R2,A
   \   0000CB   EF           MOV       A,R7
   \   0000CC   FB           MOV       R3,A
   \   0000CD   12....       LCALL     `??zclKE_ServerConnClose::?relay`; Banked call to: zclKE_ServerConnClose
   \   0000D0   02....       LJMP      ??zclKE_ProcessTimerEvt_3 & 0xFFFF
   3939          
   3940            // Process client connections
   3941            pCurr = zclKE_ClientConnList;
   \                     ??zclKE_ProcessTimerEvt_4:
   \   0000D3   90....       MOV       DPTR,#zclKE_ClientConnList
   \   0000D6   802C         SJMP      ??zclKE_ProcessTimerEvt_7
   3942          
   3943            while ( pCurr )
   3944            {
   3945              // Save next connection since current connection may be closed
   3946              pNext = pCurr->pNext;
   3947          
   3948              // Is this connection waiting for a timeout
   3949              if ( pCurr->timeout )
   3950              {
   3951                // Get elapsed time since last timeout
   3952                elapsed = current - pCurr->stamp;
   3953          
   3954                if ( pCurr->timeout <= elapsed )
   3955                {
   3956                  // Handle connection timeout
   3957                  zclKE_ClientConnTimeout( pCurr );
   3958                }
   3959                else
   3960                {
   3961                  // Adjust next timeout
   3962                  timeout = pCurr->timeout - elapsed;
   \                     ??zclKE_ProcessTimerEvt_8:
   \   0000D8   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000DB   12....       LCALL     ?L_MOV_X
   \   0000DE   78..         MOV       R0,#?V12
   \   0000E0   79..         MOV       R1,#?V8
   \   0000E2   12....       LCALL     ?L_SUB
   3963          
   3964                  if ( !nextTimer || ( timeout < nextTimer ) )
   \   0000E5   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   0000E8   6009         JZ        ??zclKE_ProcessTimerEvt_9
   \   0000EA   78..         MOV       R0,#?V4
   \   0000EC   79..         MOV       R1,#?V12
   \   0000EE   12....       LCALL     ?UL_GT
   \   0000F1   500C         JNC       ??zclKE_ProcessTimerEvt_10
   3965                  {
   3966                    nextTimer = timeout;
   \                     ??zclKE_ProcessTimerEvt_9:
   \   0000F3   85....       MOV       ?V4,?V12
   \   0000F6   85....       MOV       ?V5,?V13
   \   0000F9   85....       MOV       ?V6,?V14
   \   0000FC   85....       MOV       ?V7,?V15
   3967                  }
   3968                }
   3969              }
   3970          
   3971              // Set next connection to current
   3972              pCurr = pNext;
   \                     ??zclKE_ProcessTimerEvt_10:
   \   0000FF   7405         MOV       A,#0x5
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \                     ??zclKE_ProcessTimerEvt_7:
   \   000104   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000107   EE           MOV       A,R6
   \   000108   4F           ORL       A,R7
   \   000109   607F         JZ        ??zclKE_ProcessTimerEvt_11
   \   00010B   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000114   12....       LCALL     ?XLOAD_R0123
   \   000117   E8           MOV       A,R0
   \   000118   49           ORL       A,R1
   \   000119   4A           ORL       A,R2
   \   00011A   4B           ORL       A,R3
   \   00011B   60E2         JZ        ??zclKE_ProcessTimerEvt_10
   \   00011D   85....       MOV       ?V8,?V0
   \   000120   85....       MOV       ?V9,?V1
   \   000123   85....       MOV       ?V10,?V2
   \   000126   85....       MOV       ?V11,?V3
   \   000129   8E82         MOV       DPL,R6
   \   00012B   8F83         MOV       DPH,R7
   \   00012D   A3           INC       DPTR
   \   00012E   A3           INC       DPTR
   \   00012F   A3           INC       DPTR
   \   000130   A3           INC       DPTR
   \   000131   A3           INC       DPTR
   \   000132   A3           INC       DPTR
   \   000133   A3           INC       DPTR
   \   000134   78..         MOV       R0,#?V8
   \   000136   12....       LCALL     ?L_SUB_X
   \   000139   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00013C   12....       LCALL     ?UL_GE_X
   \   00013F   EE           MOV       A,R6
   \   000140   5096         JNC       ??zclKE_ProcessTimerEvt_8
   \   000142   12....       LCALL     ?Subroutine48 & 0xFFFF
   3973            }
   \                     ??CrossCallReturnLabel_56:
   \   000145   6407         XRL       A,#0x7
   \   000147   7031         JNZ       ??zclKE_ProcessTimerEvt_12
   \   000149                ; Setup parameters for call to function osal_msg_allocate
   \   000149   7A05         MOV       R2,#0x5
   \   00014B   7B00         MOV       R3,#0x0
   \   00014D   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000150   EA           MOV       A,R2
   \   000151   4B           ORL       A,R3
   \   000152   6013         JZ        ??zclKE_ProcessTimerEvt_13
   \   000154   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000157   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00015A   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00015D   8E82         MOV       DPL,R6
   \   00015F   8F83         MOV       DPH,R7
   \   000161   A3           INC       DPTR
   \   000162   7408         MOV       A,#0x8
   \   000164   F0           MOVX      @DPTR,A
   \   000165   8098         SJMP      ??zclKE_ProcessTimerEvt_10
   \                     ??zclKE_ProcessTimerEvt_13:
   \   000167   7401         MOV       A,#0x1
   \   000169   12....       LCALL     ?XSTACK_DISP0_8
   \   00016C   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000175   12....       LCALL     `??zclKE_ClientConnTerminate::?relay`; Banked call to: zclKE_ClientConnTerminate
   \   000178   8085         SJMP      ??zclKE_ProcessTimerEvt_10
   \                     ??zclKE_ProcessTimerEvt_12:
   \   00017A                ; Setup parameters for call to function zclKE_ClientConnClose
   \   00017A   7C00         MOV       R4,#0x0
   \   00017C   7D00         MOV       R5,#0x0
   \   00017E   7901         MOV       R1,#0x1
   \   000180   EE           MOV       A,R6
   \   000181   FA           MOV       R2,A
   \   000182   EF           MOV       A,R7
   \   000183   FB           MOV       R3,A
   \   000184   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \   000187   02....       LJMP      ??zclKE_ProcessTimerEvt_10 & 0xFFFF
   3974          
   3975            // Start the timer based on the next timeout
   3976            zclKE_StartTimer( nextTimer );
   \                     ??zclKE_ProcessTimerEvt_11:
   \   00018A                ; Setup parameters for call to function zclKE_StartTimer
   \   00018A   AA..         MOV       R2,?V4
   \   00018C   AB..         MOV       R3,?V5
   \   00018E   AC..         MOV       R4,?V6
   \   000190   AD..         MOV       R5,?V7
   \   000192   12....       LCALL     `??zclKE_StartTimer::?relay`; Banked call to: zclKE_StartTimer
   3977          }
   \   000195   7407         MOV       A,#0x7
   \   000197   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   78..         MOV       R0,#?V8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   78..         MOV       R0,#?V12
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E5..         MOV       A,?V4
   \   000002                REQUIRE ??Subroutine129_0
   \   000002                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   7403         MOV       A,#0x3
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   E4           CLR       A
   \   000009   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   A3           INC       DPTR
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   EE           MOV       A,R6
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EF           MOV       A,R7
   \   000004   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000007   7404         MOV       A,#0x4
   \   000009   F0           MOVX      @DPTR,A
   \   00000A                ; Setup parameters for call to function zclKE_ServerConnTerminate
   \   00000A                ; Setup parameters for call to function zclKE_ClientConnTerminate
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000004   3F           ADDC      A,R7
   \   000005   F583         MOV       DPH,A
   \   000007                REQUIRE ??Subroutine131_0
   \   000007                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00000B   E8           MOV       A,R0
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
   \   000010                ; Setup parameters for call to function osal_msg_send
   \   000010                ; Setup parameters for call to function osal_msg_send
   \   000010   90....       MOV       DPTR,#zclKE_TaskID
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   22           RET
   3978          
   3979          /**************************************************************************************************
   3980           * @fn      zclKE_ProcessStartMsg
   3981           *
   3982           * @brief   Start key establishment *WITH* end point discovery and suite selection.
   3983           *
   3984           * @param   pInMsg - incoming message to process
   3985           *
   3986           * @return  void
   3987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3988          static void zclKE_ProcessStartMsg( zclKE_StartMsg_t *pMsg )
   \                     zclKE_ProcessStartMsg:
   3989          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3990            zclKE_Conn_t *pConn;
   3991            afAddrType_t partner = {0};
   \   00000E   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   000011   740D         MOV       A,#0xd
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   740C         MOV       A,#0xc
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3992          
   3993            partner.addr.shortAddr = pMsg->partnerNwkAddr;
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000025   740D         MOV       A,#0xd
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   3994            partner.addrMode = afAddr16Bit;
   \                     ??CrossCallReturnLabel_303:
   \   00002D   7415         MOV       A,#0x15
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ?Subroutine52 & 0xFFFF
   3995          
   3996            // Create a new client connection
   3997            if ( zclKE_ClientConnOpen( pMsg->taskID,
   3998                                       &partner,
   3999                                       pMsg->transSeqNum,
   4000                                       zclKE_SupportedSuites, 
   4001                                       &pConn ) )
   \                     ??CrossCallReturnLabel_61:
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FC           MOV       R4,A
   \   000049   7411         MOV       A,#0x11
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   8E82         MOV       DPL,R6
   \   000050   8F83         MOV       DPH,R7
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F9           MOV       R1,A
   \   000056   12....       LCALL     `??zclKE_ClientConnOpen::?relay`; Banked call to: zclKE_ClientConnOpen
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   \   00005F   7003         JNZ       $+5
   \   000061   02....       LJMP      ??zclKE_ProcessStartMsg_0 & 0xFFFF
   4002            {
   4003              if ( !zclKE_ClientProcessMatchReq( pConn ) )
   \   000064   85..82       MOV       DPL,?XSP + 0
   \   000067   85..83       MOV       DPH,?XSP + 1
   \   00006A   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   00006D   7402         MOV       A,#0x2
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
   \   000074   A3           INC       DPTR
   \   000075   7408         MOV       A,#0x8
   \   000077   F0           MOVX      @DPTR,A
   \   000078   740C         MOV       A,#0xc
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   7402         MOV       A,#0x2
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   EE           MOV       A,R6
   \   000081   240F         ADD       A,#0xf
   \   000083   F8           MOV       R0,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   F9           MOV       R1,A
   \   000087   E8           MOV       A,R0
   \   000088   FA           MOV       R2,A
   \   000089   E9           MOV       A,R1
   \   00008A   FB           MOV       R3,A
   \   00008B   8A82         MOV       DPL,R2
   \   00008D   8B83         MOV       DPH,R3
   \   00008F   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000092   7404         MOV       A,#0x4
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00009A                ; Setup parameters for call to function ZDP_MatchDescReq
   \   00009A   75..00       MOV       ?V0,#0x0
   \   00009D   78..         MOV       R0,#?V0
   \   00009F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A2   E4           CLR       A
   \   0000A3   F5..         MOV       ?V1,A
   \   0000A5   78..         MOV       R0,#?V0
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AF   7406         MOV       A,#0x6
   \   0000B1   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B4   88..         MOV       ?V0,R0
   \   0000B6   89..         MOV       ?V1,R1
   \   0000B8   78..         MOV       R0,#?V0
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BD   75..09       MOV       ?V0,#0x9
   \   0000C0   75..01       MOV       ?V1,#0x1
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C8   7901         MOV       R1,#0x1
   \   0000CA   8A82         MOV       DPL,R2
   \   0000CC   8B83         MOV       DPH,R3
   \   0000CE   12....       LCALL     ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000D1   740C         MOV       A,#0xc
   \   0000D3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D6   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0000D9   7408         MOV       A,#0x8
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV       A,R1
   \   0000DF   6014         JZ        ??zclKE_ProcessStartMsg_1
   4004              {
   4005                // Only possible error condition would be limited resources so return busy
   4006                // (ctxt.error == ZCL_KE_TERMINATE_NO_RESOURCES)
   4007                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );
   \   0000E1                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000E1   7C00         MOV       R4,#0x0
   \   0000E3   7D00         MOV       R5,#0x0
   \   0000E5   7904         MOV       R1,#0x4
   \   0000E7   85..82       MOV       DPL,?XSP + 0
   \   0000EA   85..83       MOV       DPH,?XSP + 1
   \   0000ED   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   4008              }
   4009            }
   \                     ??CrossCallReturnLabel_243:
   \   0000F0   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \   0000F3   801A         SJMP      ??zclKE_ProcessStartMsg_0
   \                     ??zclKE_ProcessStartMsg_1:
   \   0000F5   8E82         MOV       DPL,R6
   \   0000F7   8F83         MOV       DPH,R7
   \   0000F9   A3           INC       DPTR
   \   0000FA   7401         MOV       A,#0x1
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   0000FD   90....       MOV       DPTR,#__Constant_ea60
   \   000100   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000103   EE           MOV       A,R6
   \   000104   FA           MOV       R2,A
   \   000105   EF           MOV       A,R7
   \   000106   FB           MOV       R3,A
   \   000107   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   00010A   7404         MOV       A,#0x4
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
   4010          }
   \                     ??zclKE_ProcessStartMsg_0:
   \   00010F   7419         MOV       A,#0x19
   \   000111   80..         SJMP      ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function zclKE_ClientConnOpen
   \   000003                ; Setup parameters for call to function osal_nv_item_init
   \   000003   A8..         MOV       R0,?XSP + 0
   \   000005   A9..         MOV       R1,?XSP + 1
   \   000007   88..         MOV       ?V0,R0
   \   000009   89..         MOV       ?V1,R1
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00000000     DB 0, 0, 0, 0
   4011          
   4012          /**************************************************************************************************
   4013           * @fn      zclKE_ProcessStartDirectMsg
   4014           *
   4015           * @brief   Start key establishment *WITHOUT* end point discovery and suite selection.
   4016           *
   4017           * @param   pMsg - incoming message to process
   4018           *
   4019           * @return  void
   4020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4021          static void zclKE_ProcessStartDirectMsg( zclKE_StartDirectMsg_t *pMsg )
   \                     zclKE_ProcessStartDirectMsg:
   4022          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   4023            zclKE_Conn_t *pConn;
   4024          
   4025            // Open a new client connection
   4026            if ( zclKE_ClientConnOpen( pMsg->taskID,
   4027                                       &pMsg->partnerAddr,
   4028                                       pMsg->transSeqNum,
   4029                                       pMsg->suite,
   4030                                       &pConn ) )
   \   00000E                ; Setup parameters for call to function zclKE_ClientConnOpen
   \   00000E   A8..         MOV       R0,?XSP + 0
   \   000010   A9..         MOV       R1,?XSP + 1
   \   000012   88..         MOV       ?V0,R0
   \   000014   89..         MOV       ?V1,R1
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   EE           MOV       A,R6
   \   00001C   2410         ADD       A,#0x10
   \   00001E   F582         MOV       DPL,A
   \   000020   E4           CLR       A
   \   000021   3F           ADDC      A,R7
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000027   EE           MOV       A,R6
   \   000028   12....       LCALL     ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00002B   3F           ADDC      A,R7
   \   00002C   F583         MOV       DPH,A
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   FC           MOV       R4,A
   \   000030   EE           MOV       A,R6
   \   000031   2403         ADD       A,#0x3
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3F           ADDC      A,R7
   \   000036   FB           MOV       R3,A
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??zclKE_ClientConnOpen::?relay`; Banked call to: zclKE_ClientConnOpen
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047   E9           MOV       A,R1
   \   000048   6057         JZ        ??zclKE_ProcessStartDirectMsg_0
   4031            {
   4032              zclKE_ConnCtxt_t ctxt = {0, NULL, pConn};
   \   00004A   90....       MOV       DPTR,#`?<Constant {0, (zclIncoming_t *)0, (zclKE_Conn`
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?XSTACK_DISP102_8
   \   000052   7405         MOV       A,#0x5
   \   000054   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   12....       LCALL     ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   4033          
   4034              if ( !zclKE_ClientProcessStart( &ctxt ) )
   \                     ??CrossCallReturnLabel_305:
   \   000066   7405         MOV       A,#0x5
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   12....       LCALL     ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   00006E                ; Setup parameters for call to function zclKE_GenEphKeys
   \   00006E   7402         MOV       A,#0x2
   \   000070   12....       LCALL     ?XSTACK_DISP101_8
   \   000073   12....       LCALL     `??zclKE_GenEphKeys::?relay`; Banked call to: zclKE_GenEphKeys
   \   000076   E9           MOV       A,R1
   \   000077   6016         JZ        ??zclKE_ProcessStartDirectMsg_1
   \   000079                ; Setup parameters for call to function zclKE_SendInitiateCmd
   \   000079   7C00         MOV       R4,#0x0
   \   00007B   7900         MOV       R1,#0x0
   \   00007D   EE           MOV       A,R6
   \   00007E   FA           MOV       R2,A
   \   00007F   EF           MOV       A,R7
   \   000080   FB           MOV       R3,A
   \   000081   12....       LCALL     `??zclKE_SendInitiateCmd::?relay`; Banked call to: zclKE_SendInitiateCmd
   \   000084   E9           MOV       A,R1
   \   000085   601F         JZ        ??zclKE_ProcessStartDirectMsg_2
   \   000087   7402         MOV       A,#0x2
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   7404         MOV       A,#0x4
   \   00008E   F0           MOVX      @DPTR,A
   4035              {  
   4036                // Only possible error condition would be limited resources so return busy
   4037                // (ctxt.error == ZCL_KE_TERMINATE_NO_RESOURCES)
   4038                zclKE_ClientConnClose( pConn, ZCL_KE_NOTIFY_BUSY, NULL );
   \                     ??zclKE_ProcessStartDirectMsg_1:
   \   00008F                ; Setup parameters for call to function zclKE_ClientConnClose
   \   00008F   7C00         MOV       R4,#0x0
   \   000091   7D00         MOV       R5,#0x0
   \   000093   7904         MOV       R1,#0x4
   \   000095   85..82       MOV       DPL,?XSP + 0
   \   000098   85..83       MOV       DPH,?XSP + 1
   \   00009B   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   4039              }
   4040            }
   \                     ??CrossCallReturnLabel_244:
   \   00009E   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   4041          }
   \                     ??zclKE_ProcessStartDirectMsg_0:
   \   0000A1   7407         MOV       A,#0x7
   \   0000A3   02....       LJMP      ?Subroutine11 & 0xFFFF
   \                     ??zclKE_ProcessStartDirectMsg_2:
   \   0000A6   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000A9   7405         MOV       A,#0x5
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC                ; Setup parameters for call to function zclKE_ConnSetTimeout
   \   0000AC   8E82         MOV       DPL,R6
   \   0000AE   8F83         MOV       DPH,R7
   \   0000B0   12....       LCALL     ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000B6   EE           MOV       A,R6
   \   0000B7   FA           MOV       R2,A
   \   0000B8   EF           MOV       A,R7
   \   0000B9   FB           MOV       R3,A
   \   0000BA   12....       LCALL     `??zclKE_ConnSetTimeout::?relay`; Banked call to: zclKE_ConnSetTimeout
   \   0000BD   7404         MOV       A,#0x4
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C2   80DD         SJMP      ??zclKE_ProcessStartDirectMsg_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   04           INC       A
   \   000008   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00000B   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, (zclIncoming_t *)0, (zclKE_Conn`:
   \   000000   00           DB 0
   \   000001   0000         DW 0H
   \   000003   0000         DW 0H
   4042          
   4043          
   4044          /**************************************************************************************************
   4045           * PUBLIC FUNCTIONS
   4046           */
   4047          
   4048          /**************************************************************************************************
   4049           * @fn      zclKE_HdlGeneralCmd
   4050           *
   4051           * @brief   Handle general cluster commands in ZCL_STANDALONE mode.
   4052           *
   4053           * @param   pInMsg - incoming message to process
   4054           *
   4055           * @return  void
   4056           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4057          void zclKE_HdlGeneralCmd( zclIncoming_t *pInMsg )
   \                     zclKE_HdlGeneralCmd:
   4058          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   4059            if ( pInMsg->hdr.commandID == ZCL_CMD_READ_RSP )
   4060            {
   4061          #if defined( ZCL_READ )
   4062              zclKE_ClientReadRspCmd( &pInMsg->msg->srcAddr, pInMsg->msg->clusterId,
   4063                                      (zclReadRspCmd_t *)pInMsg->attrCmd  );
   4064          #endif // ZCL_READ
   4065            }
   4066          }
   \   000000   02....       LJMP      ?BRET
   4067          
   4068          /**************************************************************************************************
   4069           * @fn      zclKE_ECDSASignGetLen
   4070           *
   4071           * @brief   Returns length required for zclKE_ECDSASign "pOutBuf" field.
   4072           *
   4073           * @param   suite - selected security suite
   4074           *
   4075           * @return  uint8 - length for zclKE_ECDSASign "pOutBuf" field
   4076           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4077          uint8 zclKE_ECDSASignGetLen( uint16 suite )
   \                     zclKE_ECDSASignGetLen:
   4078          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   4079            uint8 len;
   4080          
   4081            len = (uint8)( zclKE_GetField( suite, ZCL_KE_PRIVATE_KEY_LEN ) * 2 );
   4082          
   4083            return len;
   \   000004                ; Setup parameters for call to function zclKE_GetField
   \   000004   7904         MOV       R1,#0x4
   \   000006   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000009   EA           MOV       A,R2
   \   00000A   C3           CLR       C
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   02....       LJMP      ??Subroutine108_0 & 0xFFFF
   4084          }
   4085          
   4086          /**************************************************************************************************
   4087           * @fn      zclKE_ECDSASign
   4088           *
   4089           * @brief   Creates an ECDSA signature of a message digest.
   4090           *
   4091           * @param   suite - selected security suite
   4092           * @param   pInBuf - input buffer
   4093           * @param   inBufLen - input buffer length
   4094           * @param   pOutBuf - output buffer ( length == zclKE_ECDSASignGetLen )
   4095           *
   4096           * @return  ZStatus_t - status
   4097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4098          ZStatus_t zclKE_ECDSASign( uint16 suite, uint8 *pInBuf, uint8 inBufLen, uint8 *pOutBuf )
   \                     zclKE_ECDSASign:
   4099          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   89..         MOV       ?V2,R1
   4100            uint8 status;
   4101            uint8 result;
   4102            uint8 msgDigest[ZCL_KE_MAC_LEN];
   4103            uint16 bitLen = inBufLen * 8;
   4104            uint8 *pPrivateKey = NULL;
   4105            uint16 privateKeyLen;
   4106          
   4107            do
   4108            {
   4109              privateKeyLen = zclKE_GetField( suite, ZCL_KE_PRIVATE_KEY_LEN );
   \   000014                ; Setup parameters for call to function zclKE_GetField
   \   000014   7904         MOV       R1,#0x4
   \   000016   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000019   8A..         MOV       ?V4,R2
   \   00001B   8B..         MOV       ?V5,R3
   4110          
   4111              pPrivateKey = osal_mem_alloc( privateKeyLen );
   \   00001D                ; Setup parameters for call to function osal_mem_alloc
   \   00001D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   8A..         MOV       ?V6,R2
   \   000022   8B..         MOV       ?V7,R3
   4112              if ( !pPrivateKey )
   \   000024   EA           MOV       A,R2
   \   000025   45..         ORL       A,?V7
   \   000027   7005         JNZ       ??zclKE_ECDSASign_0
   4113              {
   4114                status = ZMemError;
   \   000029   7E10         MOV       R6,#0x10
   4115                break;
   \   00002B   02....       LJMP      ??zclKE_ECDSASign_1 & 0xFFFF
   4116              }
   4117          
   4118              osal_nv_read( zclKE_GetField( suite, ZCL_KE_PRIVATE_KEY_NV_ID ), 0,
   4119                            privateKeyLen, pPrivateKey );
   \                     ??zclKE_ECDSASign_0:
   \   00002E                ; Setup parameters for call to function osal_nv_read
   \   00002E   78..         MOV       R0,#?V6
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038                ; Setup parameters for call to function zclKE_GetField
   \   000038   7901         MOV       R1,#0x1
   \   00003A   AA..         MOV       R2,?V8
   \   00003C   AB..         MOV       R3,?V9
   \   00003E   12....       LCALL     `??zclKE_GetField::?relay`; Banked call to: zclKE_GetField
   \   000041   7C00         MOV       R4,#0x0
   \   000043   7D00         MOV       R5,#0x0
   \   000045   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   4120          
   4121              // First hash the input buffer
   4122              sspMMOHash(NULL, 0, pInBuf, bitLen, msgDigest);
   \   00004D                ; Setup parameters for call to function sspMMOHash
   \   00004D   A8..         MOV       R0,?XSP + 0
   \   00004F   A9..         MOV       R1,?XSP + 1
   \   000051   88..         MOV       ?V10,R0
   \   000053   89..         MOV       ?V11,R1
   \   000055   78..         MOV       R0,#?V10
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   E5..         MOV       A,?V2
   \   00005C   F5..         MOV       ?V10,A
   \   00005E   75..00       MOV       ?V11,#0x0
   \   000061   7403         MOV       A,#0x3
   \   000063   78..         MOV       R0,#?V10
   \   000065   12....       LCALL     ?S_SHL
   \   000068   78..         MOV       R0,#?V10
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   AC..         MOV       R4,?V0
   \   00006F   AD..         MOV       R5,?V1
   \   000071   7900         MOV       R1,#0x0
   \   000073   7A00         MOV       R2,#0x0
   \   000075   7B00         MOV       R3,#0x0
   \   000077   12....       LCALL     `??sspMMOHash::?relay`; Banked call to: sspMMOHash
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007F   7424         MOV       A,#0x24
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   4123          
   4124              switch ( suite )
   \                     ??CrossCallReturnLabel_275:
   \   000087   78..         MOV       R0,#?V8
   \   000089   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclKE_ECDSASign>_0`:
   \   00008C   0100         DW        1
   \   00008E   01           DB        1
   \   00008F   ....         DW        ??zclKE_ECDSASign_2
   \   000091   ....         DW        ??zclKE_ECDSASign_3
   \   000093   ....         DW        ??zclKE_ECDSASign_4
   4125              {
   4126          #if !defined( ECCAPI_163_DISABLED )
   4127                case ZCL_KE_SUITE_1:
   4128                  result = ZSE_ECDSASign( pPrivateKey, msgDigest, zclKE_GetRandom, 
   4129                                          pOutBuf, &pOutBuf[privateKeyLen], NULL, 0 );
   \                     ??zclKE_ECDSASign_3:
   \   000095                ; Setup parameters for call to function ZSE_ECDSASign
   \   000095   90....       MOV       DPTR,#__Constant_0
   \   000098   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00009B   E4           CLR       A
   \   00009C   F5..         MOV       ?V8,A
   \   00009E   F5..         MOV       ?V9,A
   \   0000A0   78..         MOV       R0,#?V8
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   75....       MOV       ?V0,#`??zclKE_GetRandom::?relay` & 0xff
   \   0000B3   75....       MOV       ?V1,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   740C         MOV       A,#0xc
   \   0000BD   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C0   AA..         MOV       R2,?V6
   \   0000C2   AB..         MOV       R3,?V7
   \   0000C4   12....       LCALL     `??ZSE_ECDSASign::?relay`; Banked call to: ZSE_ECDSASign
   \   0000C7   8032         SJMP      ??zclKE_ECDSASign_5
   4130                  break;
   4131          #endif // !defined( ECCAPI_163_DISABLED )
   4132          
   4133          #if !defined( ECCAPI_283_DISABLED )
   4134                case ZCL_KE_SUITE_2:
   4135                  result = ZSE_ECDSASign283( pPrivateKey, msgDigest, zclKE_GetRandom, 
   4136                                             pOutBuf, &pOutBuf[privateKeyLen], NULL, 0 );
   \                     ??zclKE_ECDSASign_4:
   \   0000C9                ; Setup parameters for call to function ZSE_ECDSASign283
   \   0000C9   90....       MOV       DPTR,#__Constant_0
   \   0000CC   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000CF   E4           CLR       A
   \   0000D0   F5..         MOV       ?V8,A
   \   0000D2   F5..         MOV       ?V9,A
   \   0000D4   78..         MOV       R0,#?V8
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E4   75....       MOV       ?V0,#`??zclKE_GetRandom::?relay` & 0xff
   \   0000E7   75....       MOV       ?V1,#(`??zclKE_GetRandom::?relay` >> 8) & 0xff
   \   0000EA   78..         MOV       R0,#?V0
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EF   740C         MOV       A,#0xc
   \   0000F1   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F4   AA..         MOV       R2,?V6
   \   0000F6   AB..         MOV       R3,?V7
   \   0000F8   12....       LCALL     `??ZSE_ECDSASign283::?relay`; Banked call to: ZSE_ECDSASign283
   \                     ??zclKE_ECDSASign_5:
   \   0000FB   740C         MOV       A,#0xc
   \   0000FD   12....       LCALL     ?DEALLOC_XSTACK8
   \   000100   EA           MOV       A,R2
   4137                  break;
   4138          #endif // !defined( ECCAPI_283_DISABLED )
   4139          
   4140                default:
   4141                  // Should never get here
   4142                  result = MCE_ERR_BAD_INPUT;
   4143                  break;
   4144              }
   4145          
   4146              if( result != MCE_SUCCESS )
   \   000101   6004         JZ        ??zclKE_ECDSASign_6
   4147              {
   4148                status = ZFailure;
   \                     ??zclKE_ECDSASign_2:
   \   000103   7E01         MOV       R6,#0x1
   4149                break;
   \   000105   8002         SJMP      ??zclKE_ECDSASign_1
   4150              }
   4151          
   4152              status = ZSuccess;
   \                     ??zclKE_ECDSASign_6:
   \   000107   7E00         MOV       R6,#0x0
   4153          
   4154            } while ( 0 );
   4155          
   4156            // Cleanup local memory allocations
   4157            zclKE_MemFree( pPrivateKey, privateKeyLen );
   \                     ??zclKE_ECDSASign_1:
   \   000109                ; Setup parameters for call to function zclKE_MemFree
   \   000109   AC..         MOV       R4,?V4
   \   00010B   AD..         MOV       R5,?V5
   \   00010D   AA..         MOV       R2,?V6
   \   00010F   AB..         MOV       R3,?V7
   \   000111   12....       LCALL     `??zclKE_MemFree::?relay`; Banked call to: zclKE_MemFree
   4158          
   4159            return status;
   \   000114   EE           MOV       A,R6
   \   000115   F9           MOV       R1,A
   \   000116   7410         MOV       A,#0x10
   \   000118   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011B   7F0C         MOV       R7,#0xc
   \   00011D   02....       LJMP      ?BANKED_LEAVE_XDATA
   4160          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E5..         MOV       A,?V0
   \   000002   25..         ADD       A,?V4
   \   000004   F5..         MOV       ?V8,A
   \   000006   E5..         MOV       A,?V1
   \   000008                REQUIRE ??Subroutine136_0
   \   000008                ; // Fall through to label ??Subroutine136_0
   4161          
   4162          /**************************************************************************************************
   4163           * @fn      zclKE_Start
   4164           *
   4165           * @brief   Start key establishment with selected partner at the nwkAddr.
   4166           *
   4167           * @param   taskID - OSAL task ID of requesting task
   4168           * @param   partnerNwkAddr - partner network address
   4169           * @param   transSeqNum - starting transaction sequence number
   4170           *
   4171           * @return  ZStatus_t - status
   4172           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4173          ZStatus_t zclKE_Start( uint8 taskID, uint16 partnerNwkAddr, uint8 transSeqNum )
   \                     zclKE_Start:
   4174          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V1,R4
   4175            ZStatus_t status;
   4176            zclKE_StartMsg_t *pMsg;
   4177          
   4178            // Allocate the message
   4179            pMsg = (zclKE_StartMsg_t *)osal_msg_allocate( sizeof( zclKE_StartMsg_t ) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   4180          
   4181            if ( pMsg )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   6026         JZ        ??zclKE_Start_0
   4182            {
   4183              pMsg->hdr.event = ZCL_KE_START_MSG;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   7401         MOV       A,#0x1
   \   00001E   12....       LCALL     ?Subroutine44 & 0xFFFF
   4184              pMsg->hdr.status = 0;
   4185              pMsg->taskID = taskID;
   4186              pMsg->partnerNwkAddr = partnerNwkAddr;
   \                     ??CrossCallReturnLabel_368:
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   EE           MOV       A,R6
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   EF           MOV       A,R7
   \   00002C   12....       LCALL     ?Subroutine53 & 0xFFFF
   4187              pMsg->transSeqNum = transSeqNum;
   \                     ??CrossCallReturnLabel_64:
   \   00002F   E5..         MOV       A,?V1
   \   000031   F0           MOVX      @DPTR,A
   4188              status = osal_msg_send( zclKE_TaskID, (uint8 *)pMsg );
   \   000032                ; Setup parameters for call to function osal_msg_send
   \   000032   90....       MOV       DPTR,#zclKE_TaskID
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F9           MOV       R1,A
   \   000037   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00003A   E9           MOV       A,R1
   \   00003B   F9           MOV       R1,A
   \   00003C   8002         SJMP      ??zclKE_Start_1
   4189            }
   4190            else
   4191            {
   4192              status = ZMemError;
   \                     ??zclKE_Start_0:
   \   00003E   7910         MOV       R1,#0x10
   4193            }  
   4194          
   4195            return status;
   \                     ??zclKE_Start_1:
   \   000040   02....       LJMP      ??Subroutine109_0 & 0xFFFF
   4196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine137_0
   \   000003                ; // Fall through to label ??Subroutine137_0
   4197          
   4198          /**************************************************************************************************
   4199           * @fn      zclKE_StartDirect
   4200           *
   4201           * @brief   Start key establishment directly with partner at the pPartnerAddr.
   4202           *
   4203           * @param   taskID - OSAL task ID of requesting task
   4204           * @param   pPartnerAddr - valid partner network address and end point
   4205           * @param   transSeqNum - starting transaction sequence number
   4206           * @param   suite - selected security suite
   4207           *
   4208           * @return  ZStatus_t - status
   4209           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4210          ZStatus_t zclKE_StartDirect( uint8 taskID, afAddrType_t *pPartnerAddr,
   \                     zclKE_StartDirect:
   4211                                       uint8 transSeqNum, uint16 suite )
   4212          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V1,R4
   4213            ZStatus_t status;
   4214            zclKE_StartDirectMsg_t *pMsg;
   4215          
   4216            // Allocate the message
   4217            pMsg = (zclKE_StartDirectMsg_t *)osal_msg_allocate( sizeof( zclKE_StartDirectMsg_t ) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A12         MOV       R2,#0x12
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   4218          
   4219            if ( pMsg )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   603F         JZ        ??zclKE_StartDirect_0
   4220            {
   4221              pMsg->hdr.event = ZCL_KE_START_DIRECT_MSG;
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?Subroutine44 & 0xFFFF
   4222              pMsg->hdr.status = 0;
   4223              pMsg->taskID = taskID;
   4224              pMsg->partnerAddr = *pPartnerAddr;
   \                     ??CrossCallReturnLabel_369:
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   EA           MOV       A,R2
   \   000026   2403         ADD       A,#0x3
   \   000028   FC           MOV       R4,A
   \   000029   E4           CLR       A
   \   00002A   3B           ADDC      A,R3
   \   00002B   FD           MOV       R5,A
   \   00002C   740C         MOV       A,#0xc
   \   00002E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   4225              pMsg->transSeqNum = transSeqNum;
   \   000031   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000034   E5..         MOV       A,?V1
   \   000036   F0           MOVX      @DPTR,A
   4226              pMsg->suite = suite;
   \   000037   740C         MOV       A,#0xc
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00003F   EA           MOV       A,R2
   \   000040   2410         ADD       A,#0x10
   \   000042   F582         MOV       DPL,A
   \   000044   E4           CLR       A
   \   000045   3B           ADDC      A,R3
   \   000046   F583         MOV       DPH,A
   \   000048   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   4227              status = osal_msg_send( zclKE_TaskID, (uint8 *)pMsg );
   \                     ??CrossCallReturnLabel_306:
   \   00004B                ; Setup parameters for call to function osal_msg_send
   \   00004B   90....       MOV       DPTR,#zclKE_TaskID
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F9           MOV       R1,A
   \   000050   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000053   E9           MOV       A,R1
   \   000054   F9           MOV       R1,A
   \   000055   8002         SJMP      ??zclKE_StartDirect_1
   4228            }
   4229            else
   4230            {
   4231              status = ZMemError;
   \                     ??zclKE_StartDirect_0:
   \   000057   7910         MOV       R1,#0x10
   4232            }  
   4233          
   4234            return status;
   \                     ??zclKE_StartDirect_1:
   \   000059   02....       LJMP      ??Subroutine109_0 & 0xFFFF
   4235          }
   4236          
   4237          /**************************************************************************************************
   4238           * @fn      zclKE_Init
   4239           *
   4240           * @brief   Initialization function for the ZCL key establishment task.
   4241           *
   4242           * @param   taskID - OSAL task ID of this task
   4243           *
   4244           * @return  void
   4245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4246          void zclKE_Init( uint8 taskID )
   \                     zclKE_Init:
   4247          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 75
   \   000005   74B5         MOV       A,#-0x4b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   4248            zclKE_TaskID = taskID;
   \   00000B   90....       MOV       DPTR,#zclKE_TaskID
   \   00000E   F0           MOVX      @DPTR,A
   4249          
   4250            // Register end point description
   4251            afRegister( (endPointDesc_t* )&zclKE_EPDesc );
   \   00000F                ; Setup parameters for call to function afRegister
   \   00000F   7A..         MOV       R2,#zclKE_EPDesc & 0xff
   \   000011   7B..         MOV       R3,#(zclKE_EPDesc >> 8) & 0xff
   \   000013   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   4252          
   4253            // Register ZCL attribute list
   4254            zcl_registerAttrList( ZCL_KE_ENDPOINT, 1, zclKE_ZCL_AttrList );
   \   000016                ; Setup parameters for call to function zcl_registerAttrList
   \   000016   7C..         MOV       R4,#zclKE_ZCL_AttrList & 0xff
   \   000018   7D..         MOV       R5,#(zclKE_ZCL_AttrList >> 8) & 0xff
   \   00001A   7A01         MOV       R2,#0x1
   \   00001C   790A         MOV       R1,#0xa
   \   00001E   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
   4255          
   4256            // Register ZCL cluster options
   4257            zcl_registerClusterOptionList( ZCL_KE_ENDPOINT, 1, zclKE_ZCL_Options );
   \   000021                ; Setup parameters for call to function zcl_registerClusterOptionList
   \   000021   7C..         MOV       R4,#zclKE_ZCL_Options & 0xff
   \   000023   7D..         MOV       R5,#(zclKE_ZCL_Options >> 8) & 0xff
   \   000025   7A01         MOV       R2,#0x1
   \   000027   790A         MOV       R1,#0xa
   \   000029   12....       LCALL     `??zcl_registerClusterOptionList::?relay`; Banked call to: zcl_registerClusterOptionList
   4258          
   4259            // Register as a ZCL KE plugin
   4260            zcl_registerPlugin( ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   4261                                ZCL_CLUSTER_ID_SE_KEY_ESTABLISHMENT,
   4262                                zclKE_HdlIncoming );
   \   00002C                ; Setup parameters for call to function zcl_registerPlugin
   \   00002C   75....       MOV       ?V0,#`??zclKE_HdlIncoming::?relay` & 0xff
   \   00002F   75....       MOV       ?V1,#(`??zclKE_HdlIncoming::?relay` >> 8) & 0xff
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7C00         MOV       R4,#0x0
   \   000039   7D08         MOV       R5,#0x8
   \   00003B   7A00         MOV       R2,#0x0
   \   00003D   7B08         MOV       R3,#0x8
   \   00003F   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   4263          
   4264          #ifndef ZCL_STANDALONE
   4265            // Register for ZCL_INCOMING_MSG
   4266            zcl_registerForMsg( zclKE_TaskID );
   \   000047                ; Setup parameters for call to function zcl_registerForMsg
   \   000047   90....       MOV       DPTR,#zclKE_TaskID
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
   4267          #endif
   4268          
   4269            // Initialize available suites
   4270            zclKE_CheckForAvailSuites();
   \   00004F   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000052   7426         MOV       A,#0x26
   \   000054   12....       LCALL     ?XSTACK_DISP102_8
   \   000057   7425         MOV       A,#0x25
   \   000059   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   00005C                ; Setup parameters for call to function osal_nv_read
   \   00005C   04           INC       A
   \   00005D   12....       LCALL     ?XSTACK_DISP100_8
   \   000060   88..         MOV       ?V0,R0
   \   000062   89..         MOV       ?V1,R1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   75..16       MOV       ?V0,#0x16
   \   00006C   75..00       MOV       ?V1,#0x0
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   7C00         MOV       R4,#0x0
   \   000076   7D00         MOV       R5,#0x0
   \   000078   7A6B         MOV       R2,#0x6b
   \   00007A   7B00         MOV       R3,#0x0
   \   00007C   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   E9           MOV       A,R1
   \   000085   7032         JNZ       ??zclKE_Init_0
   \   000087                ; Setup parameters for call to function osal_memcmp
   \   000087   7426         MOV       A,#0x26
   \   000089   12....       LCALL     ?XSTACK_DISP100_8
   \   00008C   88..         MOV       ?V0,R0
   \   00008E   89..         MOV       ?V1,R1
   \   000090   75..00       MOV       ?V2,#0x0
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000098   7C16         MOV       R4,#0x16
   \   00009A   7D00         MOV       R5,#0x0
   \   00009C   7404         MOV       A,#0x4
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   A982         MOV       R1,DPL
   \   0000A3   AA83         MOV       R2,DPH
   \   0000A5   7B00         MOV       R3,#0x0
   \   0000A7   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000AA   7403         MOV       A,#0x3
   \   0000AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AF   E9           MOV       A,R1
   \   0000B0   7007         JNZ       ??zclKE_Init_0
   \   0000B2   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   4401         ORL       A,#0x1
   \   0000B8   F0           MOVX      @DPTR,A
   \                     ??zclKE_Init_0:
   \   0000B9                ; Setup parameters for call to function osal_nv_read
   \   0000B9   7401         MOV       A,#0x1
   \   0000BB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BE   88..         MOV       ?V0,R0
   \   0000C0   89..         MOV       ?V1,R1
   \   0000C2   78..         MOV       R0,#?V0
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   75..25       MOV       ?V0,#0x25
   \   0000CA   75..00       MOV       ?V1,#0x0
   \   0000CD   78..         MOV       R0,#?V0
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D2   7C00         MOV       R4,#0x0
   \   0000D4   7D00         MOV       R5,#0x0
   \   0000D6   7A74         MOV       R2,#0x74
   \   0000D8   7B00         MOV       R3,#0x0
   \   0000DA   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000DD   7404         MOV       A,#0x4
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV       A,R1
   \   0000E3   7032         JNZ       ??zclKE_Init_1
   \   0000E5                ; Setup parameters for call to function osal_memcmp
   \   0000E5   7426         MOV       A,#0x26
   \   0000E7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EA   88..         MOV       ?V0,R0
   \   0000EC   89..         MOV       ?V1,R1
   \   0000EE   75..00       MOV       ?V2,#0x0
   \   0000F1   78..         MOV       R0,#?V0
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F6   7C25         MOV       R4,#0x25
   \   0000F8   7D00         MOV       R5,#0x0
   \   0000FA   7404         MOV       A,#0x4
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   A982         MOV       R1,DPL
   \   000101   AA83         MOV       R2,DPH
   \   000103   7B00         MOV       R3,#0x0
   \   000105   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000108   7403         MOV       A,#0x3
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010D   E9           MOV       A,R1
   \   00010E   7007         JNZ       ??zclKE_Init_1
   \   000110   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   000113   E0           MOVX      A,@DPTR
   \   000114   4402         ORL       A,#0x2
   \   000116   F0           MOVX      @DPTR,A
   4271          
   4272            // Initialize server functionality
   4273            zclKE_ServerInit();
   \                     ??zclKE_Init_1:
   \   000117   85..82       MOV       DPL,?XSP + 0
   \   00011A   85..83       MOV       DPH,?XSP + 1
   \   00011D   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000120   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000123   7C01         MOV       R4,#0x1
   \   000125   7D00         MOV       R5,#0x0
   \   000127   7A6C         MOV       R2,#0x6c
   \   000129   7B00         MOV       R3,#0x0
   \   00012B   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00012E   7402         MOV       A,#0x2
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   4274          
   4275            // Initialize client functionality
   4276            zclKE_ClientInit();
   \   000133                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000133   7A06         MOV       R2,#0x6
   \   000135   7B80         MOV       R3,#-0x80
   \   000137   90....       MOV       DPTR,#zclKE_TaskID
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F9           MOV       R1,A
   \   00013C   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   4277          
   4278            // Set initial state
   4279            if ( zclKE_SupportedSuites )
   \   00013F   90....       MOV       DPTR,#zclKE_SupportedSuites
   \   000142   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000145   90....       MOV       DPTR,#zclKE_State
   \   000148   6004         JZ        ??zclKE_Init_2
   4280            {
   4281              zclKE_State = ZCL_KE_READY;
   \   00014A   7401         MOV       A,#0x1
   \   00014C   8002         SJMP      ??zclKE_Init_3
   4282            }
   4283            else
   4284            {
   4285              zclKE_State = ZCL_KE_NO_CERTS;
   \                     ??zclKE_Init_2:
   \   00014E   740A         MOV       A,#0xa
   \                     ??zclKE_Init_3:
   \   000150   F0           MOVX      @DPTR,A
   4286            }
   4287          }
   \   000151   744B         MOV       A,#0x4b
   \   000153   12....       LCALL     ?DEALLOC_XSTACK8
   \   000156   02....       LJMP      ?Subroutine10 & 0xFFFF
   4288          
   4289          /**************************************************************************************************
   4290           * @fn      zclKE_ProcessEvent
   4291           *
   4292           * @brief   Process an event for the ZCL key establishment task.
   4293           *
   4294           * @param   taskID - OSAL task ID of this task
   4295           * @param   events - OSAL event mask
   4296           *
   4297           * @return  uint16 - OSAL events not processed
   4298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4299          uint16 zclKE_ProcessEvent( uint8 taskID, uint16 events )
   \                     zclKE_ProcessEvent:
   4300          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   4301            osal_event_hdr_t *pMsg;
   4302          
   4303            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   7003         JNZ       $+5
   \   00000D   02....       LJMP      ??zclKE_ProcessEvent_0 & 0xFFFF
   4304            {
   4305              pMsg = (osal_event_hdr_t *)osal_msg_receive( taskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000013   8A..         MOV       ?V0,R2
   \   000015   8B..         MOV       ?V1,R3
   4306          
   4307              if ( pMsg )
   \   000017   EA           MOV       A,R2
   \   000018   45..         ORL       A,?V1
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zclKE_ProcessEvent_1 & 0xFFFF
   4308              {
   4309                switch ( pMsg->event )
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   14           DEC       A
   \   000025   6011         JZ        ??zclKE_ProcessEvent_2
   \   000027   14           DEC       A
   \   000028   6014         JZ        ??zclKE_ProcessEvent_3
   \   00002A   14           DEC       A
   \   00002B   6017         JZ        ??zclKE_ProcessEvent_4
   \   00002D   24CF         ADD       A,#-0x31
   \   00002F   6019         JZ        ??zclKE_ProcessEvent_5
   \   000031   2461         ADD       A,#0x61
   \   000033   6047         JZ        ??zclKE_ProcessEvent_6
   \   000035   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4310                {
   4311                  case ZCL_KE_START_MSG:
   4312                    zclKE_ProcessStartMsg( (zclKE_StartMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_2:
   \   000038                ; Setup parameters for call to function zclKE_ProcessStartMsg
   \   000038   12....       LCALL     `??zclKE_ProcessStartMsg::?relay`; Banked call to: zclKE_ProcessStartMsg
   4313                    break;
   \   00003B   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4314          
   4315                  case ZCL_KE_START_DIRECT_MSG:
   4316                    zclKE_ProcessStartDirectMsg( (zclKE_StartDirectMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_3:
   \   00003E                ; Setup parameters for call to function zclKE_ProcessStartDirectMsg
   \   00003E   12....       LCALL     `??zclKE_ProcessStartDirectMsg::?relay`; Banked call to: zclKE_ProcessStartDirectMsg
   4317                    break;
   \   000041   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4318          
   4319                  case ZCL_KE_KEY_GEN_MSG:
   4320                    zclKE_ProcessKeyGenMsg( (zclKE_KeyGenMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_4:
   \   000044                ; Setup parameters for call to function zclKE_ProcessKeyGenMsg
   \   000044   12....       LCALL     `??zclKE_ProcessKeyGenMsg::?relay`; Banked call to: zclKE_ProcessKeyGenMsg
   4321                    break;
   \   000047   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   4322          
   4323                  case AF_INCOMING_MSG_CMD:
   4324                    zclKE_ProcessAFMsgCmd( (afIncomingMSGPacket_t *)pMsg );
   4325                    break;
   4326          
   4327                  case ZCL_INCOMING_MSG:
   4328                    zclKE_ProcessZCLMsg( (zclIncomingMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_5:
   \   00004A   EA           MOV       A,R2
   \   00004B   2417         ADD       A,#0x17
   \   00004D   F582         MOV       DPL,A
   \   00004F   E4           CLR       A
   \   000050   35..         ADDC      A,?V1
   \   000052   F583         MOV       DPH,A
   \   000054   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000057   7003         JNZ       $+5
   \   000059   02....       LJMP      ??zclKE_ProcessEvent_7 & 0xFFFF
   \   00005C   EA           MOV       A,R2
   \   00005D   2417         ADD       A,#0x17
   \   00005F   F8           MOV       R0,A
   \   000060   E4           CLR       A
   \   000061   35..         ADDC      A,?V1
   \   000063   F9           MOV       R1,A
   \   000064   88..         MOV       ?V2,R0
   \   000066   89..         MOV       ?V3,R1
   \   000068                ; Setup parameters for call to function osal_mem_free
   \   000068   8882         MOV       DPL,R0
   \   00006A   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00006D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000070   85..82       MOV       DPL,?V2
   \   000073   85..83       MOV       DPH,?V3
   \   000076   E4           CLR       A
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   F0           MOVX      @DPTR,A
   \   00007A   8066         SJMP      ??zclKE_ProcessEvent_7
   4329                    break;
   4330          
   4331                  case ZDO_CB_MSG:
   4332                    zclKE_ProcessZDOMsg( (zdoIncomingMsg_t *)pMsg );
   \                     ??zclKE_ProcessEvent_6:
   \   00007C   EA           MOV       A,R2
   \   00007D   240C         ADD       A,#0xc
   \   00007F   F582         MOV       DPL,A
   \   000081   E4           CLR       A
   \   000082   35..         ADDC      A,?V1
   \   000084   F583         MOV       DPH,A
   \   000086   E0           MOVX      A,@DPTR
   \   000087   6406         XRL       A,#0x6
   \   000089   7004         JNZ       ??zclKE_ProcessEvent_8
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   6480         XRL       A,#0x80
   \                     ??zclKE_ProcessEvent_8:
   \   00008F   7051         JNZ       ??zclKE_ProcessEvent_7
   \   000091                ; Setup parameters for call to function zclKE_ClientConnFind
   \   000091   8A82         MOV       DPL,R2
   \   000093   8B83         MOV       DPH,R3
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   4333                    break;
   4334          
   4335                  default:
   4336                    break;
   4337                }
   \                     ??CrossCallReturnLabel_245:
   \   00009A   12....       LCALL     `??zclKE_ClientConnFind::?relay`; Banked call to: zclKE_ClientConnFind
   \   00009D   8A..         MOV       ?V2,R2
   \   00009F   8B..         MOV       ?V3,R3
   \   0000A1   EA           MOV       A,R2
   \   0000A2   45..         ORL       A,?V3
   \   0000A4   603C         JZ        ??zclKE_ProcessEvent_7
   \   0000A6   8A82         MOV       DPL,R2
   \   0000A8   8B83         MOV       DPH,R3
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   6401         XRL       A,#0x1
   \   0000AE   7032         JNZ       ??zclKE_ProcessEvent_7
   \   0000B0                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000B0   AA..         MOV       R2,?V0
   \   0000B2   AB..         MOV       R3,?V1
   \   0000B4   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   0000B7   8A..         MOV       ?V6,R2
   \   0000B9   8B..         MOV       ?V7,R3
   \   0000BB   EA           MOV       A,R2
   \   0000BC   45..         ORL       A,?V7
   \   0000BE   6022         JZ        ??zclKE_ProcessEvent_7
   \   0000C0   8A82         MOV       DPL,R2
   \   0000C2   8B83         MOV       DPH,R3
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   7C00         MOV       R4,#0x0
   \   0000CA   7D00         MOV       R5,#0x0
   \   0000CC   6004         JZ        ??zclKE_ProcessEvent_9
   \   0000CE                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000CE   7904         MOV       R1,#0x4
   \   0000D0   8002         SJMP      ??zclKE_ProcessEvent_10
   \                     ??zclKE_ProcessEvent_9:
   \   0000D2                ; Setup parameters for call to function zclKE_ClientConnClose
   \   0000D2   7908         MOV       R1,#0x8
   \                     ??zclKE_ProcessEvent_10:
   \   0000D4   AA..         MOV       R2,?V2
   \   0000D6   AB..         MOV       R3,?V3
   \   0000D8   12....       LCALL     `??zclKE_ClientConnClose::?relay`; Banked call to: zclKE_ClientConnClose
   \   0000DB                ; Setup parameters for call to function osal_mem_free
   \   0000DB   AA..         MOV       R2,?V6
   \   0000DD   AB..         MOV       R3,?V7
   \   0000DF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4338          
   4339                // Release the memory
   4340                osal_msg_deallocate( (uint8 *)pMsg );
   \                     ??zclKE_ProcessEvent_7:
   \   0000E2                ; Setup parameters for call to function osal_msg_deallocate
   \   0000E2   AA..         MOV       R2,?V0
   \   0000E4   AB..         MOV       R3,?V1
   \   0000E6   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   4341              }
   4342          
   4343              return ( events ^ SYS_EVENT_MSG );
   \                     ??zclKE_ProcessEvent_1:
   \   0000E9   EE           MOV       A,R6
   \   0000EA   FA           MOV       R2,A
   \   0000EB   EF           MOV       A,R7
   \   0000EC   6480         XRL       A,#0x80
   \   0000EE   800D         SJMP      ??zclKE_ProcessEvent_11
   4344            }
   4345          
   4346            if ( events & ZCL_KE_TIMER_EVT )
   \                     ??zclKE_ProcessEvent_0:
   \   0000F0   EE           MOV       A,R6
   \   0000F1   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000F3   500B         JNC       ??zclKE_ProcessEvent_12
   4347            {
   4348              zclKE_ProcessTimerEvt();
   \   0000F5                ; Setup parameters for call to function zclKE_ProcessTimerEvt
   \   0000F5   12....       LCALL     `??zclKE_ProcessTimerEvt::?relay`; Banked call to: zclKE_ProcessTimerEvt
   4349          
   4350              return ( events ^ ZCL_KE_TIMER_EVT );
   \   0000F8   EE           MOV       A,R6
   \   0000F9   6401         XRL       A,#0x1
   \   0000FB   FA           MOV       R2,A
   \   0000FC   EF           MOV       A,R7
   \                     ??zclKE_ProcessEvent_11:
   \   0000FD   FB           MOV       R3,A
   \   0000FE   8004         SJMP      ??zclKE_ProcessEvent_13
   4351            }
   4352          
   4353            // Discard unknown events
   4354            return 0;
   \                     ??zclKE_ProcessEvent_12:
   \   000100   7A00         MOV       R2,#0x0
   \   000102   7B00         MOV       R3,#0x0
   \                     ??zclKE_ProcessEvent_13:
   \   000104   02....       LJMP      ?Subroutine9 & 0xFFFF
   4355          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine115_0
   \   000008                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclKE_ZCL_Options>`:
   \   000000   0008         DW 2048
   \   000002   10           DB 16

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_SetPollRate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_SetPollRate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_RestorePollRate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_RestorePollRate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_MemFree::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_MemFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_GetField::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_GetField

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_NotifyStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_NotifyStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_StartTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_StartTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ConnRelease::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ConnRelease

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ConnSetTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ConnSetTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_GetRandom::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_GetRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_HashFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_HashFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_GenEphKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_GenEphKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_GenKeyBits::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_GenKeyBits

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_GenKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_GenKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_GenMAC::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_GenMAC

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_InitiateCmdCheckCertIssuer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_InitiateCmdCheckCertIssuer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_InitiateCmdCheckFields::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_InitiateCmdCheckFields

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ParseInitiateCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ParseInitiateCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ParseEphDataCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ParseEphDataCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ParseCfmKeyDataCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ParseCfmKeyDataCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_SendInitiateCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_SendInitiateCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_SendEphDataCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_SendEphDataCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_SendCfmKeyDataCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_SendCfmKeyDataCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_SendTerminate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_SendTerminate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerConnCreate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerConnCreate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerConnClose::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerConnClose

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerConnFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerConnFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerConnLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerConnLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerConnTerminate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerConnTerminate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerProcessInitiateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerProcessInitiateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerProcessCfmKeyDataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerProcessCfmKeyDataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerHdlInitiateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerHdlInitiateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerHdlEphDataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerHdlEphDataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ServerHdlSpecificCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ServerHdlSpecificCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientConnClose::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientConnClose

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientConnFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientConnFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientConnLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientConnLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientConnOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientConnOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientConnTerminate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientConnTerminate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientProcessInitiateRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientProcessInitiateRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientHdlEphDataRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientHdlEphDataRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientHdlCfmKeyDataRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientHdlCfmKeyDataRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientHdlSpecificCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientHdlSpecificCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ClientKeyGenMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ClientKeyGenMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ProcessKeyGenMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ProcessKeyGenMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ProcessTimerEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ProcessTimerEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ProcessStartMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ProcessStartMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ProcessStartDirectMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ProcessStartDirectMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_HdlGeneralCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_HdlGeneralCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ECDSASignGetLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ECDSASignGetLen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ECDSASign::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ECDSASign

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_Start::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_Start

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_StartDirect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_StartDirect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclKE_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclKE_ProcessEvent

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 1}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   FF           DB 255
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   FF           DB 255
   \   000023   FF           DB 255
   \   000024   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fffffff0:
   \   000000   F0FFFFFF     DD 4294967280

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_11:
   \   000000   11000000     DD 17

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1f4:
   \   000000   F4010000     DD 500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ea60:
   \   000000   60EA0000     DD 60000
   4356          
   4357          
   4358          /**************************************************************************************************
   4359          **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     54   zclKE_ClientConnClose
        0     11   -> zclKE_ConnRelease
        0     13   -> zclKE_NotifyStatus
        0     11   -> zclKE_RestorePollRate
      2     33   zclKE_ClientConnFind
      0     51   zclKE_ClientConnLookup
        0     10   -> zclKE_ClientConnFind
      1     71   zclKE_ClientConnOpen
        0     30   -> AddrMgrExtAddrLookup
        0     30   -> NLME_GetShortAddr
        0     30   -> osal_mem_alloc
        0     30   -> osal_memset
        0     30   -> zclKE_ClientConnFind
        0     32   -> zclKE_NotifyStatus
        0     30   -> zclKE_SetPollRate
      1     57   zclKE_ClientConnTerminate
        0     14   -> zclKE_ClientConnClose
        0     16   -> zclKE_SendTerminate
      0     69   zclKE_ClientHdlCfmKeyDataRsp
        0     41   -> AddrMgrExtAddrLookup
        0     43   -> ZDSecMgrAddLinkKey
        0     44   -> osal_memcmp
        0     41   -> zclKE_ClientConnClose
        0     41   -> zclKE_ClientConnLookup
        0     41   -> zclKE_ClientConnTerminate
        0     43   -> zclKE_GenMAC
        0     41   -> zclKE_ParseCfmKeyDataCmd
      0     46   zclKE_ClientHdlEphDataRsp
        0     17   -> osal_mem_alloc
        0     20   -> osal_memcpy
        0     17   -> zclKE_ClientConnLookup
        0     17   -> zclKE_ClientConnTerminate
        0     21   -> zclKE_ConnSetTimeout
        0     17   -> zclKE_GetField
        0     19   -> zclKE_ParseEphDataCmd
      1     34   zclKE_ClientHdlSpecificCmd
        0     25   -> zclKE_ClientConnClose
        0     25   -> zclKE_ClientConnLookup
        0     25   -> zclKE_ClientConnTerminate
        0     25   -> zclKE_ClientHdlCfmKeyDataRsp
        0     25   -> zclKE_ClientHdlEphDataRsp
        0     25   -> zclKE_ClientProcessInitiateRsp
        0     25   -> zclKE_ParseInitiateCmd
      0     54   zclKE_ClientKeyGenMsg
        0     33   -> zclKE_ClientConnFind
        0     33   -> zclKE_ClientConnTerminate
        0     37   -> zclKE_ConnSetTimeout
        0     33   -> zclKE_GenKeys
        0     35   -> zclKE_GenMAC
        0     35   -> zclKE_SendCfmKeyDataCmd
      1     48   zclKE_ClientProcessInitiateRsp
        0     19   -> osal_mem_alloc
        0     22   -> osal_memcpy
        0     23   -> zclKE_ConnSetTimeout
        0     19   -> zclKE_GetField
        0     19   -> zclKE_InitiateCmdCheckFields
        0     19   -> zclKE_SendEphDataCmd
      0     23   zclKE_ConnRelease
        0     12   -> osal_mem_free
        0     12   -> zclKE_GetField
        0     12   -> zclKE_MemFree
      0     51   zclKE_ConnSetTimeout
        0     12   -> osal_GetSystemClock
        0     12   -> zclKE_StartTimer
      0     50   zclKE_ECDSASign
        0     48   -> ZSE_ECDSASign
        0     48   -> ZSE_ECDSASign283
        0     36   -> osal_mem_alloc
        0     40   -> osal_nv_read
        0     40   -> sspMMOHash
        0     36   -> zclKE_GetField
        0     40   -> zclKE_GetField
        0     36   -> zclKE_MemFree
      2      0   zclKE_ECDSASignGetLen
        2      0   -> zclKE_GetField
      0     41   zclKE_GenEphKeys
        0     22   -> ZSE_ECCGenerateKey
        0     22   -> ZSE_ECCGenerateKey283
        0     14   -> osal_mem_alloc
        0     14   -> zclKE_GetField
      0    114   zclKE_GenKeyBits
        0     28   -> ZMacGetReq
        0     28   -> ZMacSetReq
        0     46   -> ZSE_ECCKeyBitGenerate
        0     46   -> ZSE_ECCKeyBitGenerate283
        0     28   -> osal_mem_alloc
        0     32   -> osal_nv_read
        0     28   -> zclKE_GetField
        0     28   -> zclKE_MemFree
      0    105   zclKE_GenKeys
        0     68   -> osal_mem_alloc
        0     71   -> osal_memcpy
        0     72   -> sspMMOHash
        0     68   -> zclKE_GenKeyBits
        0     68   -> zclKE_GetField
        0     68   -> zclKE_MemFree
      0     74   zclKE_GenMAC
        0     27   -> AddrMgrExtAddrLookup
        0     27   -> NLME_GetExtAddr
        0     31   -> SSP_KeyedHash
        0     29   -> SSP_MemCpyReverse
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     27   -> zclKE_GetField
      0     78   zclKE_GetField
      0     16   zclKE_GetRandom
        0     12   -> SSP_GetTrueRandAES
      0     20   zclKE_HashFunc
        0     16   -> sspMMOHash
      0      0   zclKE_HdlGeneralCmd
      0      9   zclKE_HdlIncoming
        0      9   -> StubAPS_InterPan
        0      9   -> zclKE_ClientHdlSpecificCmd
        0      9   -> zclKE_ServerHdlSpecificCmd
      0     90   zclKE_Init
        0     86   -> ZDO_RegisterForZDOMsg
        0     86   -> afRegister
        0     89   -> osal_memcmp
        0     88   -> osal_nv_item_init
        0     90   -> osal_nv_read
        0     86   -> zcl_registerAttrList
        0     86   -> zcl_registerClusterOptionList
        0     86   -> zcl_registerForMsg
        0     88   -> zcl_registerPlugin
      0     57   zclKE_InitiateCmdCheckCertIssuer
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcmp
        0     26   -> osal_nv_read
        0     22   -> zclKE_GetField
        0     22   -> zclKE_MemFree
      0     53   zclKE_InitiateCmdCheckFields
        0     31   -> AddrMgrExtAddrLookup
        0     34   -> osal_memcmp
        0     34   -> osal_revmemcpy
        0     31   -> zclKE_GetField
        0     31   -> zclKE_InitiateCmdCheckCertIssuer
      0     77   zclKE_MemFree
        0      9   -> osal_mem_free
        0      9   -> osal_memset
      1     44   zclKE_NotifyStatus
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      2     41   zclKE_ParseCfmKeyDataCmd
      0     29   zclKE_ParseEphDataCmd
        0     10   -> zclKE_GetField
      1     35   zclKE_ParseInitiateCmd
      0     18   zclKE_ProcessEvent
        0     18   -> ZDO_ParseEPListRsp
        0     18   -> osal_mem_free
        0     18   -> osal_msg_deallocate
        0     18   -> osal_msg_receive
        0     18   -> zclKE_ClientConnClose
        0     18   -> zclKE_ClientConnFind
        0     18   -> zclKE_ProcessKeyGenMsg
        0     18   -> zclKE_ProcessStartDirectMsg
        0     18   -> zclKE_ProcessStartMsg
        0     18   -> zclKE_ProcessTimerEvt
      0     39   zclKE_ProcessKeyGenMsg
        0     17   -> zclKE_ClientKeyGenMsg
        0     21   -> zclKE_ConnSetTimeout
        0     17   -> zclKE_GenKeys
        0     17   -> zclKE_SendEphDataCmd
        0     17   -> zclKE_ServerConnFind
        0     17   -> zclKE_ServerConnTerminate
      0     41   zclKE_ProcessStartDirectMsg
        0     19   -> zclKE_ClientConnClose
        0     23   -> zclKE_ClientConnOpen
        0     23   -> zclKE_ConnSetTimeout
        0     19   -> zclKE_GenEphKeys
        0     19   -> zclKE_SendInitiateCmd
      0     61   zclKE_ProcessStartMsg
        0     43   -> ZDP_MatchDescReq
        0     35   -> zclKE_ClientConnClose
        0     39   -> zclKE_ClientConnOpen
        0     39   -> zclKE_ConnSetTimeout
      0     49   zclKE_ProcessTimerEvt
        0     31   -> osal_GetSystemClock
        0     31   -> osal_msg_allocate
        0     31   -> osal_msg_send
        0     31   -> zclKE_ClientConnClose
        0     31   -> zclKE_ClientConnTerminate
        0     31   -> zclKE_ServerConnClose
        0     31   -> zclKE_ServerConnTerminate
        0     31   -> zclKE_StartTimer
      0     20   zclKE_RestorePollRate
        0      9   -> NLME_SetPollRate
      0     62   zclKE_SendCfmKeyDataCmd
        0     21   -> zcl_SendCommand
      0     42   zclKE_SendEphDataCmd
        0     14   -> zclKE_GetField
        0     23   -> zcl_SendCommand
      1     48   zclKE_SendInitiateCmd
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     22   -> osal_nv_read
        0     18   -> zclKE_GetField
        0     29   -> zcl_SendCommand
      1     43   zclKE_SendTerminate
        0     27   -> zcl_SendCommand
      2     39   zclKE_ServerConnClose
        2      0   -> zclKE_ConnRelease
        2      0   -> zclKE_RestorePollRate
      0     32   zclKE_ServerConnCreate
        0     14   -> NLME_GetShortAddr
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> zclKE_SetPollRate
      2     18   zclKE_ServerConnFind
      0     27   zclKE_ServerConnLookup
        0     10   -> zclKE_ServerConnFind
      1     47   zclKE_ServerConnTerminate
        0     16   -> zclKE_SendTerminate
        0     14   -> zclKE_ServerConnClose
      1     38   zclKE_ServerHdlEphDataReq
        0     17   -> osal_mem_alloc
        0     20   -> osal_memcpy
        0     21   -> zclKE_ConnSetTimeout
        0     17   -> zclKE_GenEphKeys
        0     17   -> zclKE_GetField
        0     19   -> zclKE_ParseEphDataCmd
        0     17   -> zclKE_ServerConnLookup
        0     17   -> zclKE_ServerConnTerminate
      1     35   zclKE_ServerHdlInitiateReq
        0     18   -> zclKE_ParseInitiateCmd
        0     18   -> zclKE_ServerConnCreate
        0     18   -> zclKE_ServerConnFind
        0     18   -> zclKE_ServerConnTerminate
        0     18   -> zclKE_ServerProcessInitiateReq
      1     26   zclKE_ServerHdlSpecificCmd
        0     17   -> zclKE_ParseCfmKeyDataCmd
        0     17   -> zclKE_ServerConnClose
        0     17   -> zclKE_ServerConnLookup
        0     17   -> zclKE_ServerConnTerminate
        0     17   -> zclKE_ServerHdlEphDataReq
        0     17   -> zclKE_ServerHdlInitiateReq
        0     17   -> zclKE_ServerProcessCfmKeyDataReq
      0     59   zclKE_ServerProcessCfmKeyDataReq
        0     39   -> AddrMgrExtAddrLookup
        0     41   -> ZDSecMgrAddLinkKey
        0     42   -> osal_memcmp
        0     41   -> zclKE_GenMAC
        0     41   -> zclKE_SendCfmKeyDataCmd
        0     39   -> zclKE_ServerConnClose
      1     41   zclKE_ServerProcessInitiateReq
        0     19   -> osal_mem_alloc
        0     22   -> osal_memcpy
        0     23   -> zclKE_ConnSetTimeout
        0     19   -> zclKE_GetField
        0     19   -> zclKE_InitiateCmdCheckFields
        0     19   -> zclKE_SendInitiateCmd
      0     39   zclKE_SetPollRate
        0      9   -> NLME_SetPollRate
      1     12   zclKE_Start
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      1     14   zclKE_StartDirect
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      0     51   zclKE_StartTimer
        0     16   -> osal_get_timeoutEx
        0     20   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant {0, (zclIncoming_t *)0, (zclKE_Conn
       4  ?<Constant {0, 0, 0, 1}>
       4  ?<Constant {0, 0, 0}>
      37  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      12  ?<Constant {{0}}>
       3  ?<Initializer for zclKE_ZCL_Options>
       5  ??Subroutine101_0
       2  ??Subroutine102_0
       8  ??Subroutine103_0
       8  ??Subroutine104_0
       6  ??Subroutine105_0
       8  ??Subroutine106_0
       6  ??Subroutine107_0
       7  ??Subroutine108_0
       5  ??Subroutine109_0
       6  ??Subroutine110_0
       8  ??Subroutine111_0
       4  ??Subroutine112_0
       6  ??Subroutine113_0
       9  ??Subroutine114_0
       6  ??Subroutine115_0
       6  ??Subroutine116_0
       3  ??Subroutine117_0
       4  ??Subroutine118_0
       2  ??Subroutine119_0
       6  ??Subroutine120_0
       8  ??Subroutine121_0
       4  ??Subroutine122_0
       6  ??Subroutine123_0
       1  ??Subroutine124_0
       5  ??Subroutine125_0
       6  ??Subroutine126_0
      10  ??Subroutine127_0
      34  ??Subroutine128_0
       7  ??Subroutine129_0
       9  ??Subroutine130_0
       6  ??Subroutine131_0
       3  ??Subroutine132_0
       5  ??Subroutine133_0
       4  ??Subroutine134_0
       6  ??Subroutine135_0
       7  ??Subroutine136_0
       8  ??Subroutine137_0
       5  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine10
       7  ?Subroutine100
       6  ?Subroutine11
       7  ?Subroutine12
       3  ?Subroutine13
       3  ?Subroutine14
      11  ?Subroutine15
       6  ?Subroutine16
       7  ?Subroutine17
      32  ?Subroutine18
       8  ?Subroutine19
       4  ?Subroutine2
      22  ?Subroutine20
      13  ?Subroutine21
       4  ?Subroutine22
      22  ?Subroutine23
      33  ?Subroutine24
      27  ?Subroutine25
      21  ?Subroutine26
      27  ?Subroutine27
       5  ?Subroutine28
      16  ?Subroutine29
       5  ?Subroutine3
       7  ?Subroutine30
       3  ?Subroutine31
       3  ?Subroutine32
       3  ?Subroutine33
      13  ?Subroutine34
      17  ?Subroutine35
      10  ?Subroutine36
      15  ?Subroutine37
       6  ?Subroutine38
       9  ?Subroutine39
       8  ?Subroutine4
      11  ?Subroutine40
      12  ?Subroutine41
      12  ?Subroutine42
      13  ?Subroutine43
       3  ?Subroutine44
      15  ?Subroutine45
       5  ?Subroutine46
      12  ?Subroutine47
      15  ?Subroutine48
       9  ?Subroutine49
       5  ?Subroutine5
       4  ?Subroutine50
      14  ?Subroutine51
      14  ?Subroutine52
       4  ?Subroutine53
       6  ?Subroutine54
       7  ?Subroutine55
       6  ?Subroutine56
       6  ?Subroutine57
       9  ?Subroutine58
       6  ?Subroutine59
       5  ?Subroutine6
       2  ?Subroutine60
      10  ?Subroutine61
      12  ?Subroutine62
      10  ?Subroutine63
      10  ?Subroutine64
      12  ?Subroutine65
       2  ?Subroutine66
       7  ?Subroutine67
       6  ?Subroutine68
       6  ?Subroutine69
       4  ?Subroutine7
      10  ?Subroutine70
      16  ?Subroutine71
       8  ?Subroutine72
       8  ?Subroutine73
       2  ?Subroutine74
      14  ?Subroutine75
       4  ?Subroutine76
      12  ?Subroutine77
       6  ?Subroutine78
       3  ?Subroutine79
       4  ?Subroutine8
       8  ?Subroutine80
       6  ?Subroutine81
       1  ?Subroutine82
       8  ?Subroutine83
       2  ?Subroutine84
       8  ?Subroutine85
       8  ?Subroutine86
       6  ?Subroutine87
       7  ?Subroutine88
       7  ?Subroutine89
       5  ?Subroutine9
       4  ?Subroutine90
       9  ?Subroutine91
       1  ?Subroutine92
       1  ?Subroutine93
       6  ?Subroutine94
       6  ?Subroutine95
       7  ?Subroutine96
       9  ?Subroutine97
       6  ?Subroutine98
       1  ?Subroutine99
       4  __Constant_0
       4  __Constant_11
       4  __Constant_1f4
       4  __Constant_3e8
       4  __Constant_ea60
       4  __Constant_fffffff0
      61  zclKE_ClientConnClose
       6  zclKE_ClientConnClose::?relay
      30  zclKE_ClientConnFind
       6  zclKE_ClientConnFind::?relay
       2  zclKE_ClientConnList
      35  zclKE_ClientConnLookup
       6  zclKE_ClientConnLookup::?relay
     326  zclKE_ClientConnOpen
       6  zclKE_ClientConnOpen::?relay
     144  zclKE_ClientConnTerminate
       6  zclKE_ClientConnTerminate::?relay
     260  zclKE_ClientHdlCfmKeyDataRsp
       6  zclKE_ClientHdlCfmKeyDataRsp::?relay
     178  zclKE_ClientHdlEphDataRsp
       6  zclKE_ClientHdlEphDataRsp::?relay
     316  zclKE_ClientHdlSpecificCmd
       6  zclKE_ClientHdlSpecificCmd::?relay
     185  zclKE_ClientKeyGenMsg
       6  zclKE_ClientKeyGenMsg::?relay
     246  zclKE_ClientProcessInitiateRsp
       6  zclKE_ClientProcessInitiateRsp::?relay
       2  zclKE_ClusterList
     173  zclKE_ConnRelease
       6  zclKE_ConnRelease::?relay
      66  zclKE_ConnSetTimeout
       6  zclKE_ConnSetTimeout::?relay
     288  zclKE_ECDSASign
       6  zclKE_ECDSASign::?relay
      16  zclKE_ECDSASignGetLen
       6  zclKE_ECDSASignGetLen::?relay
       6  zclKE_EPDesc
     232  zclKE_GenEphKeys
       6  zclKE_GenEphKeys::?relay
     448  zclKE_GenKeyBits
       6  zclKE_GenKeyBits::?relay
     533  zclKE_GenKeys
       6  zclKE_GenKeys::?relay
     471  zclKE_GenMAC
       6  zclKE_GenMAC::?relay
      78  zclKE_GetField
       6  zclKE_GetField::?relay
      63  zclKE_GetRandom
       6  zclKE_GetRandom::?relay
      53  zclKE_HashFunc
       6  zclKE_HashFunc::?relay
       3  zclKE_HdlGeneralCmd
       6  zclKE_HdlGeneralCmd::?relay
      90  zclKE_HdlIncoming
       6  zclKE_HdlIncoming::?relay
     345  zclKE_Init
       6  zclKE_Init::?relay
     216  zclKE_InitiateCmdCheckCertIssuer
       6  zclKE_InitiateCmdCheckCertIssuer::?relay
     469  zclKE_InitiateCmdCheckFields
       6  zclKE_InitiateCmdCheckFields::?relay
      25  zclKE_MemFree
       6  zclKE_MemFree::?relay
     123  zclKE_NotifyStatus
       6  zclKE_NotifyStatus::?relay
      58  zclKE_ParseCfmKeyDataCmd
       6  zclKE_ParseCfmKeyDataCmd::?relay
      79  zclKE_ParseEphDataCmd
       6  zclKE_ParseEphDataCmd::?relay
     155  zclKE_ParseInitiateCmd
       6  zclKE_ParseInitiateCmd::?relay
       4  zclKE_PollRateSaved
       1  zclKE_PollRateSet
     263  zclKE_ProcessEvent
       6  zclKE_ProcessEvent::?relay
     160  zclKE_ProcessKeyGenMsg
       6  zclKE_ProcessKeyGenMsg::?relay
     196  zclKE_ProcessStartDirectMsg
       6  zclKE_ProcessStartDirectMsg::?relay
     275  zclKE_ProcessStartMsg
       6  zclKE_ProcessStartMsg::?relay
     410  zclKE_ProcessTimerEvt
       6  zclKE_ProcessTimerEvt::?relay
      27  zclKE_RestorePollRate
       6  zclKE_RestorePollRate::?relay
     103  zclKE_SendCfmKeyDataCmd
       6  zclKE_SendCfmKeyDataCmd::?relay
     114  zclKE_SendEphDataCmd
       6  zclKE_SendEphDataCmd::?relay
     237  zclKE_SendInitiateCmd
       6  zclKE_SendInitiateCmd::?relay
     167  zclKE_SendTerminate
       6  zclKE_SendTerminate::?relay
      76  zclKE_ServerConnClose
       6  zclKE_ServerConnClose::?relay
     145  zclKE_ServerConnCreate
       6  zclKE_ServerConnCreate::?relay
      30  zclKE_ServerConnFind
       6  zclKE_ServerConnFind::?relay
       2  zclKE_ServerConnList
      35  zclKE_ServerConnLookup
       6  zclKE_ServerConnLookup::?relay
     138  zclKE_ServerConnTerminate
       6  zclKE_ServerConnTerminate::?relay
     231  zclKE_ServerHdlEphDataReq
       6  zclKE_ServerHdlEphDataReq::?relay
     210  zclKE_ServerHdlInitiateReq
       6  zclKE_ServerHdlInitiateReq::?relay
     268  zclKE_ServerHdlSpecificCmd
       6  zclKE_ServerHdlSpecificCmd::?relay
     223  zclKE_ServerProcessCfmKeyDataReq
       6  zclKE_ServerProcessCfmKeyDataReq::?relay
     170  zclKE_ServerProcessInitiateReq
       6  zclKE_ServerProcessInitiateReq::?relay
      42  zclKE_SetPollRate
       6  zclKE_SetPollRate::?relay
      12  zclKE_SimpleDesc
      67  zclKE_Start
       6  zclKE_Start::?relay
      92  zclKE_StartDirect
       6  zclKE_StartDirect::?relay
      84  zclKE_StartTimer
       6  zclKE_StartTimer::?relay
       1  zclKE_State
      16  zclKE_Suite1Fields
      16  zclKE_Suite2Fields
       2  zclKE_SupportedSuites
       1  zclKE_TaskID
       8  zclKE_ZCL_AttrList
       3  zclKE_ZCL_Options

 
 10 644 bytes in segment BANKED_CODE
    330 bytes in segment BANK_RELAYS
     60 bytes in segment CODE_C
      3 bytes in segment XDATA_I
      3 bytes in segment XDATA_ID
     86 bytes in segment XDATA_ROM_C
     13 bytes in segment XDATA_Z
 
    393 bytes of CODE     memory
     62 bytes of CONST    memory (+ 24 bytes shared)
 10 644 bytes of HUGECODE memory
     16 bytes of XDATA    memory

Errors: none
Warnings: none
